// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension KinesisAnalyticsV2 {

    public struct AddApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOption", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The version ID of the Kinesis Data Analytics application. You can retrieve the application version ID using DescribeApplication.
        public let currentApplicationVersionId: Int64
        /// Provides the Amazon CloudWatch log stream Amazon Resource Name (ARN). 
        public let cloudWatchLoggingOption: CloudWatchLoggingOption
        /// The Kinesis Data Analytics application name.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, cloudWatchLoggingOption: CloudWatchLoggingOption, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.cloudWatchLoggingOption = cloudWatchLoggingOption
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case cloudWatchLoggingOption = "CloudWatchLoggingOption"
            case applicationName = "ApplicationName"
        }
    }

    public enum RuntimeEnvironment: String, CustomStringConvertible, Codable {
        case sql10 = "SQL-1_0"
        case flink16 = "FLINK-1_6"
        public var description: String { return self.rawValue }
    }

    public struct KinesisFirehoseInputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the input delivery stream to read.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct ApplicationCodeConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeContentType", required: true, type: .enum), 
            AWSShapeMember(label: "CodeContentDescription", required: false, type: .structure)
        ]
        /// Specifies whether the code content is in text or zip format.
        public let codeContentType: CodeContentType
        /// Describes details about the location and format of the application code.
        public let codeContentDescription: CodeContentDescription?

        public init(codeContentType: CodeContentType, codeContentDescription: CodeContentDescription? = nil) {
            self.codeContentType = codeContentType
            self.codeContentDescription = codeContentDescription
        }

        private enum CodingKeys: String, CodingKey {
            case codeContentType = "CodeContentType"
            case codeContentDescription = "CodeContentDescription"
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceExecutionRole", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string), 
            AWSShapeMember(label: "RuntimeEnvironment", required: true, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.
        public let serviceExecutionRole: String
        /// A summary description of the application.
        public let applicationDescription: String?
        /// The runtime environment for the application (SQL-1.0 or JAVA-8-FLINK-1.5).
        public let runtimeEnvironment: RuntimeEnvironment
        /// Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. 
        public let cloudWatchLoggingOptions: [CloudWatchLoggingOption]?
        /// Use this parameter to configure the application.
        public let applicationConfiguration: ApplicationConfiguration?
        /// The name of your application (for example, sample-app).
        public let applicationName: String

        public init(serviceExecutionRole: String, applicationDescription: String? = nil, runtimeEnvironment: RuntimeEnvironment, cloudWatchLoggingOptions: [CloudWatchLoggingOption]? = nil, applicationConfiguration: ApplicationConfiguration? = nil, applicationName: String) {
            self.serviceExecutionRole = serviceExecutionRole
            self.applicationDescription = applicationDescription
            self.runtimeEnvironment = runtimeEnvironment
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.applicationConfiguration = applicationConfiguration
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case serviceExecutionRole = "ServiceExecutionRole"
            case applicationDescription = "ApplicationDescription"
            case runtimeEnvironment = "RuntimeEnvironment"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case applicationConfiguration = "ApplicationConfiguration"
            case applicationName = "ApplicationName"
        }
    }

    public struct DescribeApplicationSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotName", required: true, type: .string)
        ]
        /// The name of an existing application.
        public let applicationName: String
        /// The identifier of an application snapshot. You can retrieve this value using .
        public let snapshotName: String

        public init(applicationName: String, snapshotName: String) {
            self.applicationName = applicationName
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case snapshotName = "SnapshotName"
        }
    }

    public struct KinesisFirehoseInputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics assumes to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct FlinkApplicationConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CheckpointConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "MonitoringConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ParallelismConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "JobPlanDescription", required: false, type: .string)
        ]
        /// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.
        public let checkpointConfigurationDescription: CheckpointConfigurationDescription?
        /// Describes configuration parameters for Amazon CloudWatch logging for an application.
        public let monitoringConfigurationDescription: MonitoringConfigurationDescription?
        /// Describes parameters for how an application executes multiple tasks simultaneously.
        public let parallelismConfigurationDescription: ParallelismConfigurationDescription?
        /// The job plan for an application. For more information about the job plan, see Jobs and Scheduling in the Apache Flink Documentation. To retrieve the job plan for the application, use the DescribeApplicationRequest$IncludeAdditionalDetails parameter of the DescribeApplication operation.
        public let jobPlanDescription: String?

        public init(checkpointConfigurationDescription: CheckpointConfigurationDescription? = nil, monitoringConfigurationDescription: MonitoringConfigurationDescription? = nil, parallelismConfigurationDescription: ParallelismConfigurationDescription? = nil, jobPlanDescription: String? = nil) {
            self.checkpointConfigurationDescription = checkpointConfigurationDescription
            self.monitoringConfigurationDescription = monitoringConfigurationDescription
            self.parallelismConfigurationDescription = parallelismConfigurationDescription
            self.jobPlanDescription = jobPlanDescription
        }

        private enum CodingKeys: String, CodingKey {
            case checkpointConfigurationDescription = "CheckpointConfigurationDescription"
            case monitoringConfigurationDescription = "MonitoringConfigurationDescription"
            case parallelismConfigurationDescription = "ParallelismConfigurationDescription"
            case jobPlanDescription = "JobPlanDescription"
        }
    }

    public struct AddApplicationReferenceDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ReferenceDataSource", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The version of the application for which you are adding the reference data source. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The reference data source can be an object in your Amazon S3 bucket. Kinesis Data Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. 
        public let referenceDataSource: ReferenceDataSource
        /// The name of an existing application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, referenceDataSource: ReferenceDataSource, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceDataSource = referenceDataSource
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case referenceDataSource = "ReferenceDataSource"
            case applicationName = "ApplicationName"
        }
    }

    public struct OutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisFirehoseOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DestinationSchema", required: false, type: .structure), 
            AWSShapeMember(label: "OutputId", required: false, type: .string)
        ]
        /// Describes the Kinesis Data Firehose delivery stream that is configured as the destination where output is written.
        public let kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription?
        /// Describes the Kinesis data stream that is configured as the destination where output is written.
        public let kinesisStreamsOutputDescription: KinesisStreamsOutputDescription?
        /// Describes the Lambda function that is configured as the destination where output is written.
        public let lambdaOutputDescription: LambdaOutputDescription?
        /// The name of the in-application stream that is configured as output.
        public let name: String?
        /// The data format used for writing data to the destination.
        public let destinationSchema: DestinationSchema?
        /// A unique identifier for the output configuration.
        public let outputId: String?

        public init(kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil, kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil, lambdaOutputDescription: LambdaOutputDescription? = nil, name: String? = nil, destinationSchema: DestinationSchema? = nil, outputId: String? = nil) {
            self.kinesisFirehoseOutputDescription = kinesisFirehoseOutputDescription
            self.kinesisStreamsOutputDescription = kinesisStreamsOutputDescription
            self.lambdaOutputDescription = lambdaOutputDescription
            self.name = name
            self.destinationSchema = destinationSchema
            self.outputId = outputId
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisFirehoseOutputDescription = "KinesisFirehoseOutputDescription"
            case kinesisStreamsOutputDescription = "KinesisStreamsOutputDescription"
            case lambdaOutputDescription = "LambdaOutputDescription"
            case name = "Name"
            case destinationSchema = "DestinationSchema"
            case outputId = "OutputId"
        }
    }

    public struct AddApplicationInputProcessingConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "InputId", required: false, type: .string), 
            AWSShapeMember(label: "InputProcessingConfigurationDescription", required: false, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationARN: String?
        /// Provides the current application version.
        public let applicationVersionId: Int64?
        /// The input ID that is associated with the application input. This is the ID that Amazon Kinesis Data Analytics assigns to each input configuration that you add to your application.
        public let inputId: String?
        /// The description of the preprocessor that executes on records in this input before the application's code is run.
        public let inputProcessingConfigurationDescription: InputProcessingConfigurationDescription?

        public init(applicationARN: String? = nil, applicationVersionId: Int64? = nil, inputId: String? = nil, inputProcessingConfigurationDescription: InputProcessingConfigurationDescription? = nil) {
            self.applicationARN = applicationARN
            self.applicationVersionId = applicationVersionId
            self.inputId = inputId
            self.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case applicationARN = "ApplicationARN"
            case applicationVersionId = "ApplicationVersionId"
            case inputId = "InputId"
            case inputProcessingConfigurationDescription = "InputProcessingConfigurationDescription"
        }
    }

    public struct DiscoverInputSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3Configuration", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceExecutionRole", required: true, type: .string)
        ]
        /// The point at which you want Kinesis Data Analytics to start reading records from the specified streaming source discovery purposes.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration?
        /// Specify this parameter to discover a schema from data in an Amazon S3 object.
        public let s3Configuration: S3Configuration?
        /// The Amazon Resource Name (ARN) of the streaming source.
        public let resourceARN: String?
        /// The InputProcessingConfiguration to use to preprocess the records before discovering the schema of the records.
        public let inputProcessingConfiguration: InputProcessingConfiguration?
        /// The ARN of the role that is used to access the streaming source.
        public let serviceExecutionRole: String

        public init(inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, s3Configuration: S3Configuration? = nil, resourceARN: String? = nil, inputProcessingConfiguration: InputProcessingConfiguration? = nil, serviceExecutionRole: String) {
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.s3Configuration = s3Configuration
            self.resourceARN = resourceARN
            self.inputProcessingConfiguration = inputProcessingConfiguration
            self.serviceExecutionRole = serviceExecutionRole
        }

        private enum CodingKeys: String, CodingKey {
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
            case s3Configuration = "S3Configuration"
            case resourceARN = "ResourceARN"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
            case serviceExecutionRole = "ServiceExecutionRole"
        }
    }

    public struct Input: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisFirehoseInput", required: false, type: .structure), 
            AWSShapeMember(label: "NamePrefix", required: true, type: .string), 
            AWSShapeMember(label: "InputSchema", required: true, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsInput", required: false, type: .structure), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: false, type: .structure)
        ]
        /// If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
        public let kinesisFirehoseInput: KinesisFirehoseInput?
        /// The name prefix to use when creating an in-application stream. Suppose that you specify a prefix "MyInApplicationStream." Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names "MyInApplicationStream_001," "MyInApplicationStream_002," and so on. 
        public let namePrefix: String
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. Also used to describe the format of the reference data source.
        public let inputSchema: SourceSchema
        /// If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN). 
        public let kinesisStreamsInput: KinesisStreamsInput?
        /// Describes the number of in-application streams to create. 
        public let inputParallelism: InputParallelism?
        /// The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor. 
        public let inputProcessingConfiguration: InputProcessingConfiguration?

        public init(kinesisFirehoseInput: KinesisFirehoseInput? = nil, namePrefix: String, inputSchema: SourceSchema, kinesisStreamsInput: KinesisStreamsInput? = nil, inputParallelism: InputParallelism? = nil, inputProcessingConfiguration: InputProcessingConfiguration? = nil) {
            self.kinesisFirehoseInput = kinesisFirehoseInput
            self.namePrefix = namePrefix
            self.inputSchema = inputSchema
            self.kinesisStreamsInput = kinesisStreamsInput
            self.inputParallelism = inputParallelism
            self.inputProcessingConfiguration = inputProcessingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisFirehoseInput = "KinesisFirehoseInput"
            case namePrefix = "NamePrefix"
            case inputSchema = "InputSchema"
            case kinesisStreamsInput = "KinesisStreamsInput"
            case inputParallelism = "InputParallelism"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
        }
    }

    public struct SnapshotDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "SnapshotStatus", required: true, type: .enum), 
            AWSShapeMember(label: "SnapshotCreationTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "SnapshotName", required: true, type: .string)
        ]
        /// The current application version ID when the snapshot was created.
        public let applicationVersionId: Int64
        /// The status of the application snapshot.
        public let snapshotStatus: SnapshotStatus
        /// The timestamp of the application snapshot.
        public let snapshotCreationTimestamp: TimeStamp?
        /// The identifier for the application snapshot.
        public let snapshotName: String

        public init(applicationVersionId: Int64, snapshotStatus: SnapshotStatus, snapshotCreationTimestamp: TimeStamp? = nil, snapshotName: String) {
            self.applicationVersionId = applicationVersionId
            self.snapshotStatus = snapshotStatus
            self.snapshotCreationTimestamp = snapshotCreationTimestamp
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case snapshotStatus = "SnapshotStatus"
            case snapshotCreationTimestamp = "SnapshotCreationTimestamp"
            case snapshotName = "SnapshotName"
        }
    }

    public struct CreateApplicationSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotName", required: true, type: .string)
        ]
        /// The name of an existing application
        public let applicationName: String
        /// An identifier for the application snapshot.
        public let snapshotName: String

        public init(applicationName: String, snapshotName: String) {
            self.applicationName = applicationName
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case snapshotName = "SnapshotName"
        }
    }

    public struct StartApplicationResponse: AWSShape {

    }

    public struct AddApplicationInputProcessingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "InputProcessingConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The ID of the input configuration to add the input processing configuration to. You can get a list of the input IDs for an application using the DescribeApplication operation.
        public let inputId: String
        /// The version of the application to which you want to add the input processing configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The InputProcessingConfiguration to add to the application.
        public let inputProcessingConfiguration: InputProcessingConfiguration
        /// The name of the application to which you want to add the input processing configuration.
        public let applicationName: String

        public init(inputId: String, currentApplicationVersionId: Int64, inputProcessingConfiguration: InputProcessingConfiguration, applicationName: String) {
            self.inputId = inputId
            self.currentApplicationVersionId = currentApplicationVersionId
            self.inputProcessingConfiguration = inputProcessingConfiguration
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "InputId"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case inputProcessingConfiguration = "InputProcessingConfiguration"
            case applicationName = "ApplicationName"
        }
    }

    public struct InputStartingPositionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputStartingPosition", required: false, type: .enum)
        ]
        /// The starting position on the stream.    NOW - Start reading just after the most recent record in the stream, and start at the request timestamp that the customer issued.    TRIM_HORIZON - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Data Firehose delivery stream.    LAST_STOPPED_POINT - Resume reading from where the application last stopped reading.  
        public let inputStartingPosition: InputStartingPosition?

        public init(inputStartingPosition: InputStartingPosition? = nil) {
            self.inputStartingPosition = inputStartingPosition
        }

        private enum CodingKeys: String, CodingKey {
            case inputStartingPosition = "InputStartingPosition"
        }
    }

    public struct EnvironmentPropertyUpdates: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyGroups", required: true, type: .list)
        ]
        /// Describes updates to the execution property groups.
        public let propertyGroups: [PropertyGroup]

        public init(propertyGroups: [PropertyGroup]) {
            self.propertyGroups = propertyGroups
        }

        private enum CodingKeys: String, CodingKey {
            case propertyGroups = "PropertyGroups"
        }
    }

    public struct SourceSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordEncoding", required: false, type: .string), 
            AWSShapeMember(label: "RecordFormat", required: true, type: .structure), 
            AWSShapeMember(label: "RecordColumns", required: true, type: .list)
        ]
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public let recordEncoding: String?
        /// Specifies the format of the records on the streaming source.
        public let recordFormat: RecordFormat
        /// A list of RecordColumn objects. 
        public let recordColumns: [RecordColumn]

        public init(recordEncoding: String? = nil, recordFormat: RecordFormat, recordColumns: [RecordColumn]) {
            self.recordEncoding = recordEncoding
            self.recordFormat = recordFormat
            self.recordColumns = recordColumns
        }

        private enum CodingKeys: String, CodingKey {
            case recordEncoding = "RecordEncoding"
            case recordFormat = "RecordFormat"
            case recordColumns = "RecordColumns"
        }
    }

    public struct DescribeApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "IncludeAdditionalDetails", required: false, type: .boolean)
        ]
        /// The name of the application.
        public let applicationName: String
        /// Displays verbose information about a Kinesis Data Analytics application, including the application's job plan.
        public let includeAdditionalDetails: Bool?

        public init(applicationName: String, includeAdditionalDetails: Bool? = nil) {
            self.applicationName = applicationName
            self.includeAdditionalDetails = includeAdditionalDetails
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case includeAdditionalDetails = "IncludeAdditionalDetails"
        }
    }

    public struct DeleteApplicationOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The current application version ID.
        public let applicationVersionId: Int64?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct DeleteApplicationReferenceDataSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The updated version ID of the application.
        public let applicationVersionId: Int64?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct InputProcessingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessor", required: true, type: .structure)
        ]
        /// The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
        public let inputLambdaProcessor: InputLambdaProcessor

        public init(inputLambdaProcessor: InputLambdaProcessor) {
            self.inputLambdaProcessor = inputLambdaProcessor
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessor = "InputLambdaProcessor"
        }
    }

    public struct ApplicationCodeConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeContentType", required: true, type: .enum), 
            AWSShapeMember(label: "CodeContent", required: false, type: .structure)
        ]
        /// Specifies whether the code content is in text or zip format.
        public let codeContentType: CodeContentType
        /// The location and type of the application code.
        public let codeContent: CodeContent?

        public init(codeContentType: CodeContentType, codeContent: CodeContent? = nil) {
            self.codeContentType = codeContentType
            self.codeContent = codeContent
        }

        private enum CodingKeys: String, CodingKey {
            case codeContentType = "CodeContentType"
            case codeContent = "CodeContent"
        }
    }

    public struct S3ContentLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectVersion", required: false, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// The version of the object containing the application code.
        public let objectVersion: String?
        /// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
        public let bucketARN: String
        /// The file key for the object containing the application code.
        public let fileKey: String

        public init(objectVersion: String? = nil, bucketARN: String, fileKey: String) {
            self.objectVersion = objectVersion
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case objectVersion = "ObjectVersion"
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct CodeContent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZipFileContent", required: false, type: .blob), 
            AWSShapeMember(label: "S3ContentLocation", required: false, type: .structure), 
            AWSShapeMember(label: "TextContent", required: false, type: .string)
        ]
        /// The zip-format code for a Java-based Kinesis Data Analytics application.
        public let zipFileContent: Data?
        /// Information about the Amazon S3 bucket containing the application code.
        public let s3ContentLocation: S3ContentLocation?
        /// The text-format code for a Java-based Kinesis Data Analytics application.
        public let textContent: String?

        public init(zipFileContent: Data? = nil, s3ContentLocation: S3ContentLocation? = nil, textContent: String? = nil) {
            self.zipFileContent = zipFileContent
            self.s3ContentLocation = s3ContentLocation
            self.textContent = textContent
        }

        private enum CodingKeys: String, CodingKey {
            case zipFileContent = "ZipFileContent"
            case s3ContentLocation = "S3ContentLocation"
            case textContent = "TextContent"
        }
    }

    public struct UpdateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RunConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptionUpdates", required: false, type: .list), 
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ServiceExecutionRoleUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Describes updates to the application's starting parameters.
        public let runConfigurationUpdate: RunConfigurationUpdate?
        /// Describes application Amazon CloudWatch logging option updates. You can only update existing CloudWatch logging options with this action. To add a new CloudWatch logging option, use AddApplicationCloudWatchLoggingOption.
        public let cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]?
        /// The current application version ID. You can retrieve the application version ID using DescribeApplication.
        public let currentApplicationVersionId: Int64
        /// Describes updates to the service execution role.
        public let serviceExecutionRoleUpdate: String?
        /// Describes application configuration updates.
        public let applicationConfigurationUpdate: ApplicationConfigurationUpdate?
        /// The name of the application to update.
        public let applicationName: String

        public init(runConfigurationUpdate: RunConfigurationUpdate? = nil, cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]? = nil, currentApplicationVersionId: Int64, serviceExecutionRoleUpdate: String? = nil, applicationConfigurationUpdate: ApplicationConfigurationUpdate? = nil, applicationName: String) {
            self.runConfigurationUpdate = runConfigurationUpdate
            self.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates
            self.currentApplicationVersionId = currentApplicationVersionId
            self.serviceExecutionRoleUpdate = serviceExecutionRoleUpdate
            self.applicationConfigurationUpdate = applicationConfigurationUpdate
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case runConfigurationUpdate = "RunConfigurationUpdate"
            case cloudWatchLoggingOptionUpdates = "CloudWatchLoggingOptionUpdates"
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case serviceExecutionRoleUpdate = "ServiceExecutionRoleUpdate"
            case applicationConfigurationUpdate = "ApplicationConfigurationUpdate"
            case applicationName = "ApplicationName"
        }
    }

    public struct InputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "NamePrefixUpdate", required: false, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputProcessingConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputParallelismUpdate", required: false, type: .structure)
        ]
        /// The input ID of the application input to be updated.
        public let inputId: String
        /// The name prefix for in-application streams that Kinesis Data Analytics creates for the specific streaming source.
        public let namePrefixUpdate: String?
        /// If a Kinesis Data Firehose delivery stream is the streaming source to be updated, provides an updated stream ARN.
        public let kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate?
        /// Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.
        public let inputSchemaUpdate: InputSchemaUpdate?
        /// If a Kinesis data stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN).
        public let kinesisStreamsInputUpdate: KinesisStreamsInputUpdate?
        /// Describes updates to an InputProcessingConfiguration.
        public let inputProcessingConfigurationUpdate: InputProcessingConfigurationUpdate?
        /// Describes the parallelism updates (the number of in-application streams Kinesis Data Analytics creates for the specific streaming source).
        public let inputParallelismUpdate: InputParallelismUpdate?

        public init(inputId: String, namePrefixUpdate: String? = nil, kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil, inputSchemaUpdate: InputSchemaUpdate? = nil, kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil, inputProcessingConfigurationUpdate: InputProcessingConfigurationUpdate? = nil, inputParallelismUpdate: InputParallelismUpdate? = nil) {
            self.inputId = inputId
            self.namePrefixUpdate = namePrefixUpdate
            self.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate
            self.inputSchemaUpdate = inputSchemaUpdate
            self.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate
            self.inputProcessingConfigurationUpdate = inputProcessingConfigurationUpdate
            self.inputParallelismUpdate = inputParallelismUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "InputId"
            case namePrefixUpdate = "NamePrefixUpdate"
            case kinesisFirehoseInputUpdate = "KinesisFirehoseInputUpdate"
            case inputSchemaUpdate = "InputSchemaUpdate"
            case kinesisStreamsInputUpdate = "KinesisStreamsInputUpdate"
            case inputProcessingConfigurationUpdate = "InputProcessingConfigurationUpdate"
            case inputParallelismUpdate = "InputParallelismUpdate"
        }
    }

    public struct ApplicationCodeConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CodeContentTypeUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "CodeContentUpdate", required: false, type: .structure)
        ]
        /// Describes updates to the code content type.
        public let codeContentTypeUpdate: CodeContentType?
        /// Describes updates to the code content of an application.
        public let codeContentUpdate: CodeContentUpdate?

        public init(codeContentTypeUpdate: CodeContentType? = nil, codeContentUpdate: CodeContentUpdate? = nil) {
            self.codeContentTypeUpdate = codeContentTypeUpdate
            self.codeContentUpdate = codeContentUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case codeContentTypeUpdate = "CodeContentTypeUpdate"
            case codeContentUpdate = "CodeContentUpdate"
        }
    }

    public struct PropertyGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyGroupId", required: true, type: .string), 
            AWSShapeMember(label: "PropertyMap", required: true, type: .map)
        ]
        /// Describes the key of an application execution property key-value pair.
        public let propertyGroupId: String
        /// Describes the value of an application execution property key-value pair.
        public let propertyMap: [String: String]

        public init(propertyGroupId: String, propertyMap: [String: String]) {
            self.propertyGroupId = propertyGroupId
            self.propertyMap = propertyMap
        }

        private enum CodingKeys: String, CodingKey {
            case propertyGroupId = "PropertyGroupId"
            case propertyMap = "PropertyMap"
        }
    }

    public struct KinesisStreamsInputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the input Kinesis data stream to read.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct UpdateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// Describes application updates.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public enum SnapshotStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case ready = "READY"
        case deleting = "DELETING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct S3ReferenceDataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: false, type: .string), 
            AWSShapeMember(label: "FileKey", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String?
        /// The object key name containing the reference data.
        public let fileKey: String?

        public init(bucketARN: String? = nil, fileKey: String? = nil) {
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct DeleteApplicationCloudWatchLoggingOptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The version ID of the application. Kinesis Data Analytics updates the ApplicationVersionId each time you change the CloudWatch logging options.
        public let applicationVersionId: Int64?
        /// The descriptions of the remaining CloudWatch logging options for the application.
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?
        /// The application's Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct CheckpointConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinPauseBetweenCheckpoints", required: false, type: .long), 
            AWSShapeMember(label: "ConfigurationType", required: false, type: .enum), 
            AWSShapeMember(label: "CheckpointingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "CheckpointInterval", required: false, type: .long)
        ]
        /// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
        public let minPauseBetweenCheckpoints: Int64?
        /// Describes whether the application uses the default checkpointing behavior in Kinesis Data Analytics.
        public let configurationType: ConfigurationType?
        /// Describes whether checkpointing is enabled for a Java-based Kinesis Data Analytics application.
        public let checkpointingEnabled: Bool?
        /// Describes the interval in milliseconds between checkpoint operations.
        public let checkpointInterval: Int64?

        public init(minPauseBetweenCheckpoints: Int64? = nil, configurationType: ConfigurationType? = nil, checkpointingEnabled: Bool? = nil, checkpointInterval: Int64? = nil) {
            self.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints
            self.configurationType = configurationType
            self.checkpointingEnabled = checkpointingEnabled
            self.checkpointInterval = checkpointInterval
        }

        private enum CodingKeys: String, CodingKey {
            case minPauseBetweenCheckpoints = "MinPauseBetweenCheckpoints"
            case configurationType = "ConfigurationType"
            case checkpointingEnabled = "CheckpointingEnabled"
            case checkpointInterval = "CheckpointInterval"
        }
    }

    public struct CloudWatchLoggingOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string)
        ]
        /// The ARN of the CloudWatch log to receive application messages.
        public let logStreamARN: String

        public init(logStreamARN: String) {
            self.logStreamARN = logStreamARN
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamARN = "LogStreamARN"
        }
    }

    public struct DescribeApplicationSnapshotResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotDetails", required: true, type: .structure)
        ]
        /// An object containing information about the application snapshot.
        public let snapshotDetails: SnapshotDetails

        public init(snapshotDetails: SnapshotDetails) {
            self.snapshotDetails = snapshotDetails
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotDetails = "SnapshotDetails"
        }
    }

    public struct InputProcessingConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessorDescription", required: false, type: .structure)
        ]
        /// Provides configuration information about the associated InputLambdaProcessorDescription 
        public let inputLambdaProcessorDescription: InputLambdaProcessorDescription?

        public init(inputLambdaProcessorDescription: InputLambdaProcessorDescription? = nil) {
            self.inputLambdaProcessorDescription = inputLambdaProcessorDescription
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessorDescription = "InputLambdaProcessorDescription"
        }
    }

    public struct DeleteApplicationInputProcessingConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The current application version ID.
        public let applicationVersionId: Int64?
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct StopApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The name of the running application to stop.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
        }
    }

    public struct DestinationSchema: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatType", required: true, type: .enum)
        ]
        /// Specifies the format of the records on the output stream.
        public let recordFormatType: RecordFormatType

        public init(recordFormatType: RecordFormatType) {
            self.recordFormatType = recordFormatType
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatType = "RecordFormatType"
        }
    }

    public struct SqlApplicationConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceDataSourceDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "OutputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "InputDescriptions", required: false, type: .list)
        ]
        /// The array of ReferenceDataSourceDescription objects describing the reference data sources used by the application.
        public let referenceDataSourceDescriptions: [ReferenceDataSourceDescription]?
        /// The array of OutputDescription objects describing the destination streams used by the application.
        public let outputDescriptions: [OutputDescription]?
        /// The array of InputDescription objects describing the input streams used by the application.
        public let inputDescriptions: [InputDescription]?

        public init(referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil, outputDescriptions: [OutputDescription]? = nil, inputDescriptions: [InputDescription]? = nil) {
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
            self.outputDescriptions = outputDescriptions
            self.inputDescriptions = inputDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case referenceDataSourceDescriptions = "ReferenceDataSourceDescriptions"
            case outputDescriptions = "OutputDescriptions"
            case inputDescriptions = "InputDescriptions"
        }
    }

    public struct DeleteApplicationInputProcessingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the DescribeApplication operation.
        public let inputId: String
        /// The name of the application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, inputId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.inputId = inputId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case inputId = "InputId"
            case applicationName = "ApplicationName"
        }
    }

    public struct DeleteApplicationResponse: AWSShape {

    }

    public struct ListApplicationSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of application snapshots to list.
        public let limit: Int32?
        /// The name of an existing application.
        public let applicationName: String
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from. 
        public let nextToken: String?

        public init(limit: Int32? = nil, applicationName: String, nextToken: String? = nil) {
            self.limit = limit
            self.applicationName = applicationName
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case applicationName = "ApplicationName"
            case nextToken = "NextToken"
        }
    }

    public struct ListApplicationSnapshotsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A collection of objects containing information about the application snapshots.
        public let snapshotSummaries: [SnapshotDetails]?
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(snapshotSummaries: [SnapshotDetails]? = nil, nextToken: String? = nil) {
            self.snapshotSummaries = snapshotSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotSummaries = "SnapshotSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteApplicationOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "OutputId", required: true, type: .string)
        ]
        /// The application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// The application name.
        public let applicationName: String
        /// The ID of the configuration to delete. Each output configuration that is added to the application (either when the application is created or later) using the AddApplicationOutput operation has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the DescribeApplication operation to get the specific OutputId. 
        public let outputId: String

        public init(currentApplicationVersionId: Int64, applicationName: String, outputId: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.outputId = outputId
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case outputId = "OutputId"
        }
    }

    public struct DescribeApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// Provides a description of the application, such as the application's Amazon Resource Name (ARN), status, and latest version.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public struct ListApplicationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSummaries", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of ApplicationSummary objects.
        public let applicationSummaries: [ApplicationSummary]
        /// The pagination token for the next set of results, or null if there are no additional results. Pass this token into a subsequent command to retrieve the next set of items For more information about pagination, see Using the AWS Command Line Interface's Pagination Options.
        public let nextToken: String?

        public init(applicationSummaries: [ApplicationSummary], nextToken: String? = nil) {
            self.applicationSummaries = applicationSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSummaries = "ApplicationSummaries"
            case nextToken = "NextToken"
        }
    }

    public struct LambdaOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to write to the destination function.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the destination Lambda function.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct S3ApplicationCodeLocationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectVersion", required: false, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// The version of the object containing the application code.
        public let objectVersion: String?
        /// The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
        public let bucketARN: String
        /// The file key for the object containing the application code.
        public let fileKey: String

        public init(objectVersion: String? = nil, bucketARN: String, fileKey: String) {
            self.objectVersion = objectVersion
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case objectVersion = "ObjectVersion"
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct SqlApplicationConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputUpdates", required: false, type: .list), 
            AWSShapeMember(label: "InputUpdates", required: false, type: .list), 
            AWSShapeMember(label: "ReferenceDataSourceUpdates", required: false, type: .list)
        ]
        /// The array of OutputUpdate objects describing the new destination streams used by the application.
        public let outputUpdates: [OutputUpdate]?
        /// The array of InputUpdate objects describing the new input streams used by the application.
        public let inputUpdates: [InputUpdate]?
        /// The array of ReferenceDataSourceUpdate objects describing the new reference data sources used by the application.
        public let referenceDataSourceUpdates: [ReferenceDataSourceUpdate]?

        public init(outputUpdates: [OutputUpdate]? = nil, inputUpdates: [InputUpdate]? = nil, referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil) {
            self.outputUpdates = outputUpdates
            self.inputUpdates = inputUpdates
            self.referenceDataSourceUpdates = referenceDataSourceUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case outputUpdates = "OutputUpdates"
            case inputUpdates = "InputUpdates"
            case referenceDataSourceUpdates = "ReferenceDataSourceUpdates"
        }
    }

    public struct OutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NameUpdate", required: false, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "OutputId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsOutputUpdate", required: false, type: .structure)
        ]
        /// If you want to specify a different in-application stream for this output configuration, use this field to specify the new in-application stream name.
        public let nameUpdate: String?
        /// Describes a Kinesis Data Firehose delivery stream as the destination for the output.
        public let kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate?
        /// Describes an AWS Lambda function as the destination for the output.
        public let lambdaOutputUpdate: LambdaOutputUpdate?
        /// Identifies the specific output configuration that you want to update.
        public let outputId: String
        /// Describes the data format when records are written to the destination. 
        public let destinationSchemaUpdate: DestinationSchema?
        /// Describes a Kinesis data stream as the destination for the output.
        public let kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate?

        public init(nameUpdate: String? = nil, kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil, lambdaOutputUpdate: LambdaOutputUpdate? = nil, outputId: String, destinationSchemaUpdate: DestinationSchema? = nil, kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil) {
            self.nameUpdate = nameUpdate
            self.kinesisFirehoseOutputUpdate = kinesisFirehoseOutputUpdate
            self.lambdaOutputUpdate = lambdaOutputUpdate
            self.outputId = outputId
            self.destinationSchemaUpdate = destinationSchemaUpdate
            self.kinesisStreamsOutputUpdate = kinesisStreamsOutputUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case nameUpdate = "NameUpdate"
            case kinesisFirehoseOutputUpdate = "KinesisFirehoseOutputUpdate"
            case lambdaOutputUpdate = "LambdaOutputUpdate"
            case outputId = "OutputId"
            case destinationSchemaUpdate = "DestinationSchemaUpdate"
            case kinesisStreamsOutputUpdate = "KinesisStreamsOutputUpdate"
        }
    }

    public struct CSVMappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowDelimiter", required: true, type: .string), 
            AWSShapeMember(label: "RecordColumnDelimiter", required: true, type: .string)
        ]
        /// The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
        public let recordRowDelimiter: String
        /// The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
        public let recordColumnDelimiter: String

        public init(recordRowDelimiter: String, recordColumnDelimiter: String) {
            self.recordRowDelimiter = recordRowDelimiter
            self.recordColumnDelimiter = recordColumnDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowDelimiter = "RecordRowDelimiter"
            case recordColumnDelimiter = "RecordColumnDelimiter"
        }
    }

    public struct SqlApplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Outputs", required: false, type: .list), 
            AWSShapeMember(label: "Inputs", required: false, type: .list), 
            AWSShapeMember(label: "ReferenceDataSources", required: false, type: .list)
        ]
        /// The array of Output objects describing the destination streams used by the application.
        public let outputs: [Output]?
        /// The array of Input objects describing the input streams used by the application.
        public let inputs: [Input]?
        /// The array of ReferenceDataSource objects describing the reference data sources used by the application.
        public let referenceDataSources: [ReferenceDataSource]?

        public init(outputs: [Output]? = nil, inputs: [Input]? = nil, referenceDataSources: [ReferenceDataSource]? = nil) {
            self.outputs = outputs
            self.inputs = inputs
            self.referenceDataSources = referenceDataSources
        }

        private enum CodingKeys: String, CodingKey {
            case outputs = "Outputs"
            case inputs = "Inputs"
            case referenceDataSources = "ReferenceDataSources"
        }
    }

    public struct CloudWatchLoggingOptionUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the CloudWatch log to receive application messages.
        public let logStreamARNUpdate: String?
        /// The ID of the CloudWatch logging option to update
        public let cloudWatchLoggingOptionId: String

        public init(logStreamARNUpdate: String? = nil, cloudWatchLoggingOptionId: String) {
            self.logStreamARNUpdate = logStreamARNUpdate
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamARNUpdate = "LogStreamARNUpdate"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
        }
    }

    public struct KinesisStreamsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the destination Kinesis data stream to write to.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct InputLambdaProcessorDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that is used to access the AWS Lambda function.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The ARN of the AWS Lambda function that is used to preprocess the records in the stream.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct InputParallelism: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: false, type: .integer)
        ]
        /// The number of in-application streams to create.
        public let count: Int32?

        public init(count: Int32? = nil) {
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
        }
    }

    public struct AddApplicationOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Output", required: true, type: .structure)
        ]
        /// The version of the application to which you want to add the output configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// The name of the application to which you want to add the output configuration.
        public let applicationName: String
        /// An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, a Kinesis data stream, a Kinesis Data Firehose delivery stream, or an AWS Lambda function), and record the formation to use when writing to the destination.
        public let output: Output

        public init(currentApplicationVersionId: Int64, applicationName: String, output: Output) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case output = "Output"
        }
    }

    public struct CodeContentUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextContentUpdate", required: false, type: .string), 
            AWSShapeMember(label: "S3ContentLocationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ZipFileContentUpdate", required: false, type: .blob)
        ]
        /// Describes an update to the text code for an application.
        public let textContentUpdate: String?
        /// Describes an update to the location of code for an application.
        public let s3ContentLocationUpdate: S3ContentLocationUpdate?
        /// Describes an update to the zipped code for an application.
        public let zipFileContentUpdate: Data?

        public init(textContentUpdate: String? = nil, s3ContentLocationUpdate: S3ContentLocationUpdate? = nil, zipFileContentUpdate: Data? = nil) {
            self.textContentUpdate = textContentUpdate
            self.s3ContentLocationUpdate = s3ContentLocationUpdate
            self.zipFileContentUpdate = zipFileContentUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case textContentUpdate = "TextContentUpdate"
            case s3ContentLocationUpdate = "S3ContentLocationUpdate"
            case zipFileContentUpdate = "ZipFileContentUpdate"
        }
    }

    public struct MonitoringConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsLevel", required: false, type: .enum), 
            AWSShapeMember(label: "ConfigurationType", required: false, type: .enum), 
            AWSShapeMember(label: "LogLevel", required: false, type: .enum)
        ]
        /// Describes the granularity of the CloudWatch Logs for an application.
        public let metricsLevel: MetricsLevel?
        /// Describes whether to use the default CloudWatch logging configuration for an application.
        public let configurationType: ConfigurationType?
        /// Describes the verbosity of the CloudWatch Logs for an application.
        public let logLevel: LogLevel?

        public init(metricsLevel: MetricsLevel? = nil, configurationType: ConfigurationType? = nil, logLevel: LogLevel? = nil) {
            self.metricsLevel = metricsLevel
            self.configurationType = configurationType
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case metricsLevel = "MetricsLevel"
            case configurationType = "ConfigurationType"
            case logLevel = "LogLevel"
        }
    }

    public struct MonitoringConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricsLevel", required: false, type: .enum), 
            AWSShapeMember(label: "ConfigurationType", required: true, type: .enum), 
            AWSShapeMember(label: "LogLevel", required: false, type: .enum)
        ]
        /// Describes the granularity of the CloudWatch Logs for an application.
        public let metricsLevel: MetricsLevel?
        /// Describes whether to use the default CloudWatch logging configuration for an application.
        public let configurationType: ConfigurationType
        /// Describes the verbosity of the CloudWatch Logs for an application.
        public let logLevel: LogLevel?

        public init(metricsLevel: MetricsLevel? = nil, configurationType: ConfigurationType, logLevel: LogLevel? = nil) {
            self.metricsLevel = metricsLevel
            self.configurationType = configurationType
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case metricsLevel = "MetricsLevel"
            case configurationType = "ConfigurationType"
            case logLevel = "LogLevel"
        }
    }

    public struct InputSchemaUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordEncodingUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RecordFormatUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "RecordColumnUpdates", required: false, type: .list)
        ]
        /// Specifies the encoding of the records in the streaming source; for example, UTF-8.
        public let recordEncodingUpdate: String?
        /// Specifies the format of the records on the streaming source.
        public let recordFormatUpdate: RecordFormat?
        /// A list of RecordColumn objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.
        public let recordColumnUpdates: [RecordColumn]?

        public init(recordEncodingUpdate: String? = nil, recordFormatUpdate: RecordFormat? = nil, recordColumnUpdates: [RecordColumn]? = nil) {
            self.recordEncodingUpdate = recordEncodingUpdate
            self.recordFormatUpdate = recordFormatUpdate
            self.recordColumnUpdates = recordColumnUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case recordEncodingUpdate = "RecordEncodingUpdate"
            case recordFormatUpdate = "RecordFormatUpdate"
            case recordColumnUpdates = "RecordColumnUpdates"
        }
    }

    public struct KinesisFirehoseInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct StopApplicationResponse: AWSShape {

    }

    public struct S3Configuration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// The ARN of the S3 bucket that contains the data.
        public let bucketARN: String
        /// The name of the object that contains the data.
        public let fileKey: String

        public init(bucketARN: String, fileKey: String) {
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamsOutput", required: false, type: .structure), 
            AWSShapeMember(label: "LambdaOutput", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DestinationSchema", required: true, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseOutput", required: false, type: .structure)
        ]
        /// Identifies an Amazon Kinesis data stream as the destination.
        public let kinesisStreamsOutput: KinesisStreamsOutput?
        /// Identifies an AWS Lambda function as the destination.
        public let lambdaOutput: LambdaOutput?
        /// The name of the in-application stream.
        public let name: String
        /// Describes the data format when records are written to the destination. 
        public let destinationSchema: DestinationSchema
        /// Identifies an Amazon Kinesis Data Firehose delivery stream as the destination.
        public let kinesisFirehoseOutput: KinesisFirehoseOutput?

        public init(kinesisStreamsOutput: KinesisStreamsOutput? = nil, lambdaOutput: LambdaOutput? = nil, name: String, destinationSchema: DestinationSchema, kinesisFirehoseOutput: KinesisFirehoseOutput? = nil) {
            self.kinesisStreamsOutput = kinesisStreamsOutput
            self.lambdaOutput = lambdaOutput
            self.name = name
            self.destinationSchema = destinationSchema
            self.kinesisFirehoseOutput = kinesisFirehoseOutput
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamsOutput = "KinesisStreamsOutput"
            case lambdaOutput = "LambdaOutput"
            case name = "Name"
            case destinationSchema = "DestinationSchema"
            case kinesisFirehoseOutput = "KinesisFirehoseOutput"
        }
    }

    public struct StartApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "RunConfiguration", required: true, type: .structure)
        ]
        /// The name of the application.
        public let applicationName: String
        /// Identifies the run configuration (start parameters) of a Kinesis Data Analytics application.
        public let runConfiguration: RunConfiguration

        public init(applicationName: String, runConfiguration: RunConfiguration) {
            self.applicationName = applicationName
            self.runConfiguration = runConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case runConfiguration = "RunConfiguration"
        }
    }

    public struct DiscoverInputSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSchema", required: false, type: .structure), 
            AWSShapeMember(label: "RawInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "ProcessedInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "ParsedInputRecords", required: false, type: .list)
        ]
        /// The schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.
        public let inputSchema: SourceSchema?
        /// The raw stream data that was sampled to infer the schema.
        public let rawInputRecords: [String]?
        /// The stream data that was modified by the processor specified in the InputProcessingConfiguration parameter.
        public let processedInputRecords: [String]?
        /// An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).
        public let parsedInputRecords: [[String]]?

        public init(inputSchema: SourceSchema? = nil, rawInputRecords: [String]? = nil, processedInputRecords: [String]? = nil, parsedInputRecords: [[String]]? = nil) {
            self.inputSchema = inputSchema
            self.rawInputRecords = rawInputRecords
            self.processedInputRecords = processedInputRecords
            self.parsedInputRecords = parsedInputRecords
        }

        private enum CodingKeys: String, CodingKey {
            case inputSchema = "InputSchema"
            case rawInputRecords = "RawInputRecords"
            case processedInputRecords = "ProcessedInputRecords"
            case parsedInputRecords = "ParsedInputRecords"
        }
    }

    public struct ReferenceDataSourceUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TableNameUpdate", required: false, type: .string), 
            AWSShapeMember(label: "S3ReferenceDataSourceUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceSchemaUpdate", required: false, type: .structure)
        ]
        /// The in-application table name that is created by this update.
        public let tableNameUpdate: String?
        /// Describes the S3 bucket name, object key name, and IAM role that Kinesis Data Analytics can assume to read the Amazon S3 object on your behalf and populate the in-application reference table.
        public let s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate?
        /// The ID of the reference data source that is being updated. You can use the DescribeApplication operation to get this value.
        public let referenceId: String
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream. 
        public let referenceSchemaUpdate: SourceSchema?

        public init(tableNameUpdate: String? = nil, s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil, referenceId: String, referenceSchemaUpdate: SourceSchema? = nil) {
            self.tableNameUpdate = tableNameUpdate
            self.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate
            self.referenceId = referenceId
            self.referenceSchemaUpdate = referenceSchemaUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case tableNameUpdate = "TableNameUpdate"
            case s3ReferenceDataSourceUpdate = "S3ReferenceDataSourceUpdate"
            case referenceId = "ReferenceId"
            case referenceSchemaUpdate = "ReferenceSchemaUpdate"
        }
    }

    public struct DeleteApplicationSnapshotResponse: AWSShape {

    }

    public struct KinesisStreamsOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the Kinesis data stream.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ApplicationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "RuntimeEnvironment", required: true, type: .enum), 
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The ARN of the application.
        public let applicationARN: String
        /// Provides the current application version.
        public let applicationVersionId: Int64
        /// The runtime environment for the application (SQL-1.0 or JAVA-8-FLINK-1.5).
        public let runtimeEnvironment: RuntimeEnvironment
        /// The status of the application.
        public let applicationStatus: ApplicationStatus
        /// The name of the application.
        public let applicationName: String

        public init(applicationARN: String, applicationVersionId: Int64, runtimeEnvironment: RuntimeEnvironment, applicationStatus: ApplicationStatus, applicationName: String) {
            self.applicationARN = applicationARN
            self.applicationVersionId = applicationVersionId
            self.runtimeEnvironment = runtimeEnvironment
            self.applicationStatus = applicationStatus
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationARN = "ApplicationARN"
            case applicationVersionId = "ApplicationVersionId"
            case runtimeEnvironment = "RuntimeEnvironment"
            case applicationStatus = "ApplicationStatus"
            case applicationName = "ApplicationName"
        }
    }

    public struct EnvironmentPropertyDescriptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyGroupDescriptions", required: false, type: .list)
        ]
        /// Describes the execution property groups.
        public let propertyGroupDescriptions: [PropertyGroup]?

        public init(propertyGroupDescriptions: [PropertyGroup]? = nil) {
            self.propertyGroupDescriptions = propertyGroupDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case propertyGroupDescriptions = "PropertyGroupDescriptions"
        }
    }

    public struct ApplicationSnapshotConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotsEnabled", required: true, type: .boolean)
        ]
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let snapshotsEnabled: Bool

        public init(snapshotsEnabled: Bool) {
            self.snapshotsEnabled = snapshotsEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotsEnabled = "SnapshotsEnabled"
        }
    }

    public struct ListApplicationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of applications to list.
        public let limit: Int32?
        /// If a previous command returned a pagination token, pass it into this value to retrieve the next set of results. For more information about pagination, see Using the AWS Command Line Interface's Pagination Options.
        public let nextToken: String?

        public init(limit: Int32? = nil, nextToken: String? = nil) {
            self.limit = limit
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct RunConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SqlRunConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationRestoreConfiguration", required: false, type: .structure)
        ]
        /// Describes the starting parameters for an SQL-based Kinesis Data Analytics application.
        public let sqlRunConfigurations: [SqlRunConfiguration]?
        /// Describes the restore behavior of a restarting application.
        public let applicationRestoreConfiguration: ApplicationRestoreConfiguration?

        public init(sqlRunConfigurations: [SqlRunConfiguration]? = nil, applicationRestoreConfiguration: ApplicationRestoreConfiguration? = nil) {
            self.sqlRunConfigurations = sqlRunConfigurations
            self.applicationRestoreConfiguration = applicationRestoreConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case sqlRunConfigurations = "SqlRunConfigurations"
            case applicationRestoreConfiguration = "ApplicationRestoreConfiguration"
        }
    }

    public struct RunConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationRestoreConfiguration", required: false, type: .structure)
        ]
        /// Describes updates to the restore behavior of a restarting application.
        public let applicationRestoreConfiguration: ApplicationRestoreConfiguration?

        public init(applicationRestoreConfiguration: ApplicationRestoreConfiguration? = nil) {
            self.applicationRestoreConfiguration = applicationRestoreConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case applicationRestoreConfiguration = "ApplicationRestoreConfiguration"
        }
    }

    public struct ParallelismConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parallelism", required: false, type: .integer), 
            AWSShapeMember(label: "ConfigurationType", required: true, type: .enum), 
            AWSShapeMember(label: "AutoScalingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ParallelismPerKPU", required: false, type: .integer)
        ]
        /// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration$AutoScalingEnabled is set to true.
        public let parallelism: Int32?
        /// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service.
        public let configurationType: ConfigurationType
        /// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
        public let autoScalingEnabled: Bool?
        /// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
        public let parallelismPerKPU: Int32?

        public init(parallelism: Int32? = nil, configurationType: ConfigurationType, autoScalingEnabled: Bool? = nil, parallelismPerKPU: Int32? = nil) {
            self.parallelism = parallelism
            self.configurationType = configurationType
            self.autoScalingEnabled = autoScalingEnabled
            self.parallelismPerKPU = parallelismPerKPU
        }

        private enum CodingKeys: String, CodingKey {
            case parallelism = "Parallelism"
            case configurationType = "ConfigurationType"
            case autoScalingEnabled = "AutoScalingEnabled"
            case parallelismPerKPU = "ParallelismPerKPU"
        }
    }

    public struct DeleteApplicationReferenceDataSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string)
        ]
        /// The current application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The name of an existing application.
        public let applicationName: String
        /// The ID of the reference data source. When you add a reference data source to your application using the AddApplicationReferenceDataSource, Kinesis Data Analytics assigns an ID. You can use the DescribeApplication operation to get the reference ID. 
        public let referenceId: String

        public init(currentApplicationVersionId: Int64, applicationName: String, referenceId: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.referenceId = referenceId
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case referenceId = "ReferenceId"
        }
    }

    public struct InputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputProcessingConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InAppStreamNames", required: false, type: .list), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InputId", required: false, type: .string), 
            AWSShapeMember(label: "InputSchema", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseInputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "NamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "KinesisStreamsInputDescription", required: false, type: .structure)
        ]
        /// The description of the preprocessor that executes on records in this input before the application's code is run. 
        public let inputProcessingConfigurationDescription: InputProcessingConfigurationDescription?
        /// Returns the in-application stream names that are mapped to the stream source. 
        public let inAppStreamNames: [String]?
        /// Describes the configured parallelism (number of in-application streams mapped to the streaming source). 
        public let inputParallelism: InputParallelism?
        /// The point at which the application is configured to read from the input stream.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration?
        /// The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application. 
        public let inputId: String?
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. 
        public let inputSchema: SourceSchema?
        /// If a Kinesis Data Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN. 
        public let kinesisFirehoseInputDescription: KinesisFirehoseInputDescription?
        /// The in-application name prefix.
        public let namePrefix: String?
        /// If a Kinesis data stream is configured as a streaming source, provides the Kinesis data stream's Amazon Resource Name (ARN). 
        public let kinesisStreamsInputDescription: KinesisStreamsInputDescription?

        public init(inputProcessingConfigurationDescription: InputProcessingConfigurationDescription? = nil, inAppStreamNames: [String]? = nil, inputParallelism: InputParallelism? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, inputId: String? = nil, inputSchema: SourceSchema? = nil, kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil, namePrefix: String? = nil, kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil) {
            self.inputProcessingConfigurationDescription = inputProcessingConfigurationDescription
            self.inAppStreamNames = inAppStreamNames
            self.inputParallelism = inputParallelism
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.inputId = inputId
            self.inputSchema = inputSchema
            self.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription
            self.namePrefix = namePrefix
            self.kinesisStreamsInputDescription = kinesisStreamsInputDescription
        }

        private enum CodingKeys: String, CodingKey {
            case inputProcessingConfigurationDescription = "InputProcessingConfigurationDescription"
            case inAppStreamNames = "InAppStreamNames"
            case inputParallelism = "InputParallelism"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
            case inputId = "InputId"
            case inputSchema = "InputSchema"
            case kinesisFirehoseInputDescription = "KinesisFirehoseInputDescription"
            case namePrefix = "NamePrefix"
            case kinesisStreamsInputDescription = "KinesisStreamsInputDescription"
        }
    }

    public struct AddApplicationInputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string), 
            AWSShapeMember(label: "InputDescriptions", required: false, type: .list)
        ]
        /// Provides the current application version.
        public let applicationVersionId: Int64?
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationARN: String?
        /// Describes the application input configuration. 
        public let inputDescriptions: [InputDescription]?

        public init(applicationVersionId: Int64? = nil, applicationARN: String? = nil, inputDescriptions: [InputDescription]? = nil) {
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
            self.inputDescriptions = inputDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
            case inputDescriptions = "InputDescriptions"
        }
    }

    public struct AddApplicationInputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Input", required: true, type: .structure)
        ]
        /// The current version of your application. You can use the DescribeApplication operation to find the current application version.
        public let currentApplicationVersionId: Int64
        /// The name of your existing application to which you want to add the streaming source.
        public let applicationName: String
        /// The Input to add.
        public let input: Input

        public init(currentApplicationVersionId: Int64, applicationName: String, input: Input) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case input = "Input"
        }
    }

    public struct RunConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationRestoreConfigurationDescription", required: false, type: .structure)
        ]
        /// Describes the restore behavior of a restarting application.
        public let applicationRestoreConfigurationDescription: ApplicationRestoreConfiguration?

        public init(applicationRestoreConfigurationDescription: ApplicationRestoreConfiguration? = nil) {
            self.applicationRestoreConfigurationDescription = applicationRestoreConfigurationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case applicationRestoreConfigurationDescription = "ApplicationRestoreConfigurationDescription"
        }
    }

    public struct ApplicationSnapshotConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotsEnabledUpdate", required: true, type: .boolean)
        ]
        /// Describes updates to whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let snapshotsEnabledUpdate: Bool

        public init(snapshotsEnabledUpdate: Bool) {
            self.snapshotsEnabledUpdate = snapshotsEnabledUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotsEnabledUpdate = "SnapshotsEnabledUpdate"
        }
    }

    public enum ApplicationRestoreType: String, CustomStringConvertible, Codable {
        case skipRestoreFromSnapshot = "SKIP_RESTORE_FROM_SNAPSHOT"
        case restoreFromLatestSnapshot = "RESTORE_FROM_LATEST_SNAPSHOT"
        case restoreFromCustomSnapshot = "RESTORE_FROM_CUSTOM_SNAPSHOT"
        public var description: String { return self.rawValue }
    }

    public struct CreateApplicationSnapshotResponse: AWSShape {

    }

    public struct KinesisFirehoseOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the delivery stream to write to. 
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct FlinkApplicationConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CheckpointConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ParallelismConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "MonitoringConfigurationUpdate", required: false, type: .structure)
        ]
        /// Describes updates to an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.
        public let checkpointConfigurationUpdate: CheckpointConfigurationUpdate?
        /// Describes updates to the parameters for how an application executes multiple tasks simultaneously.
        public let parallelismConfigurationUpdate: ParallelismConfigurationUpdate?
        /// Describes updates to the configuration parameters for Amazon CloudWatch logging for an application.
        public let monitoringConfigurationUpdate: MonitoringConfigurationUpdate?

        public init(checkpointConfigurationUpdate: CheckpointConfigurationUpdate? = nil, parallelismConfigurationUpdate: ParallelismConfigurationUpdate? = nil, monitoringConfigurationUpdate: MonitoringConfigurationUpdate? = nil) {
            self.checkpointConfigurationUpdate = checkpointConfigurationUpdate
            self.parallelismConfigurationUpdate = parallelismConfigurationUpdate
            self.monitoringConfigurationUpdate = monitoringConfigurationUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case checkpointConfigurationUpdate = "CheckpointConfigurationUpdate"
            case parallelismConfigurationUpdate = "ParallelismConfigurationUpdate"
            case monitoringConfigurationUpdate = "MonitoringConfigurationUpdate"
        }
    }

    public struct DeleteApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: true, type: .timestamp)
        ]
        /// The name of the application to delete.
        public let applicationName: String
        /// Use the DescribeApplication operation to get this value.
        public let createTimestamp: TimeStamp

        public init(applicationName: String, createTimestamp: TimeStamp) {
            self.applicationName = applicationName
            self.createTimestamp = createTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case createTimestamp = "CreateTimestamp"
        }
    }

    public struct SqlRunConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: true, type: .structure)
        ]
        /// The input source ID. You can get this ID by calling the DescribeApplication operation. 
        public let inputId: String
        /// The point at which you want the application to start processing records from the streaming source. 
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration

        public init(inputId: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.inputId = inputId
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inputId = "InputId"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
        }
    }

    public struct DeleteApplicationSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotCreationTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotName", required: true, type: .string)
        ]
        /// The creation timestamp of the application snapshot to delete. You can retrieve this value using or .
        public let snapshotCreationTimestamp: TimeStamp
        /// The name of an existing application.
        public let applicationName: String
        /// The identifier for the snapshot delete.
        public let snapshotName: String

        public init(snapshotCreationTimestamp: TimeStamp, applicationName: String, snapshotName: String) {
            self.snapshotCreationTimestamp = snapshotCreationTimestamp
            self.applicationName = applicationName
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotCreationTimestamp = "SnapshotCreationTimestamp"
            case applicationName = "ApplicationName"
            case snapshotName = "SnapshotName"
        }
    }

    public struct JSONMappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowPath", required: true, type: .string)
        ]
        /// The path to the top-level parent that contains the records.
        public let recordRowPath: String

        public init(recordRowPath: String) {
            self.recordRowPath = recordRowPath
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowPath = "RecordRowPath"
        }
    }

    public struct EnvironmentProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PropertyGroups", required: true, type: .list)
        ]
        /// Describes the execution property groups.
        public let propertyGroups: [PropertyGroup]

        public init(propertyGroups: [PropertyGroup]) {
            self.propertyGroups = propertyGroups
        }

        private enum CodingKeys: String, CodingKey {
            case propertyGroups = "PropertyGroups"
        }
    }

    public struct KinesisFirehoseOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the destination delivery stream to write to.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public enum ApplicationStatus: String, CustomStringConvertible, Codable {
        case deleting = "DELETING"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case ready = "READY"
        case running = "RUNNING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public struct CheckpointConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinPauseBetweenCheckpoints", required: false, type: .long), 
            AWSShapeMember(label: "ConfigurationType", required: true, type: .enum), 
            AWSShapeMember(label: "CheckpointingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "CheckpointInterval", required: false, type: .long)
        ]
        /// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see  Tuning Checkpointing in the Apache Flink Documentation.
        public let minPauseBetweenCheckpoints: Int64?
        /// Describes whether the application uses Amazon Kinesis Data Analytics' default checkpointing behavior. 
        public let configurationType: ConfigurationType
        /// Describes whether checkpointing is enabled for a Java-based Kinesis Data Analytics application.
        public let checkpointingEnabled: Bool?
        /// Describes the interval in milliseconds between checkpoint operations. 
        public let checkpointInterval: Int64?

        public init(minPauseBetweenCheckpoints: Int64? = nil, configurationType: ConfigurationType, checkpointingEnabled: Bool? = nil, checkpointInterval: Int64? = nil) {
            self.minPauseBetweenCheckpoints = minPauseBetweenCheckpoints
            self.configurationType = configurationType
            self.checkpointingEnabled = checkpointingEnabled
            self.checkpointInterval = checkpointInterval
        }

        private enum CodingKeys: String, CodingKey {
            case minPauseBetweenCheckpoints = "MinPauseBetweenCheckpoints"
            case configurationType = "ConfigurationType"
            case checkpointingEnabled = "CheckpointingEnabled"
            case checkpointInterval = "CheckpointInterval"
        }
    }

    public enum LogLevel: String, CustomStringConvertible, Codable {
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case debug = "DEBUG"
        public var description: String { return self.rawValue }
    }

    public struct InputLambdaProcessorUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the new AWS Lambda function that is used to preprocess the records in the stream.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct ApplicationConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSnapshotConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "EnvironmentPropertyDescriptions", required: false, type: .structure), 
            AWSShapeMember(label: "SqlApplicationConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationCodeConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "RunConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "FlinkApplicationConfigurationDescription", required: false, type: .structure)
        ]
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let applicationSnapshotConfigurationDescription: ApplicationSnapshotConfigurationDescription?
        /// Describes execution properties for a Java-based Kinesis Data Analytics application.
        public let environmentPropertyDescriptions: EnvironmentPropertyDescriptions?
        /// The details about inputs, outputs, and reference data sources for an SQL-based Kinesis Data Analytics application.
        public let sqlApplicationConfigurationDescription: SqlApplicationConfigurationDescription?
        /// The details about the application code for a Java-based Kinesis Data Analytics application.
        public let applicationCodeConfigurationDescription: ApplicationCodeConfigurationDescription?
        /// The details about the starting properties for a Kinesis Data Analytics application.
        public let runConfigurationDescription: RunConfigurationDescription?
        /// The details about a Java-based Kinesis Data Analytics application.
        public let flinkApplicationConfigurationDescription: FlinkApplicationConfigurationDescription?

        public init(applicationSnapshotConfigurationDescription: ApplicationSnapshotConfigurationDescription? = nil, environmentPropertyDescriptions: EnvironmentPropertyDescriptions? = nil, sqlApplicationConfigurationDescription: SqlApplicationConfigurationDescription? = nil, applicationCodeConfigurationDescription: ApplicationCodeConfigurationDescription? = nil, runConfigurationDescription: RunConfigurationDescription? = nil, flinkApplicationConfigurationDescription: FlinkApplicationConfigurationDescription? = nil) {
            self.applicationSnapshotConfigurationDescription = applicationSnapshotConfigurationDescription
            self.environmentPropertyDescriptions = environmentPropertyDescriptions
            self.sqlApplicationConfigurationDescription = sqlApplicationConfigurationDescription
            self.applicationCodeConfigurationDescription = applicationCodeConfigurationDescription
            self.runConfigurationDescription = runConfigurationDescription
            self.flinkApplicationConfigurationDescription = flinkApplicationConfigurationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSnapshotConfigurationDescription = "ApplicationSnapshotConfigurationDescription"
            case environmentPropertyDescriptions = "EnvironmentPropertyDescriptions"
            case sqlApplicationConfigurationDescription = "SqlApplicationConfigurationDescription"
            case applicationCodeConfigurationDescription = "ApplicationCodeConfigurationDescription"
            case runConfigurationDescription = "RunConfigurationDescription"
            case flinkApplicationConfigurationDescription = "FlinkApplicationConfigurationDescription"
        }
    }

    public struct ParallelismConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParallelismUpdate", required: false, type: .integer), 
            AWSShapeMember(label: "ParallelismPerKPUUpdate", required: false, type: .integer), 
            AWSShapeMember(label: "ConfigurationTypeUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "AutoScalingEnabledUpdate", required: false, type: .boolean)
        ]
        /// Describes updates to the initial number of parallel tasks an application can perform.
        public let parallelismUpdate: Int32?
        /// Describes updates to the number of parallel tasks an application can perform per Kinesis Processing Unit (KPU) used by the application.
        public let parallelismPerKPUUpdate: Int32?
        /// Describes updates to whether the application uses the default parallelism for the Kinesis Data Analytics service, or if a custom parallelism is used.
        public let configurationTypeUpdate: ConfigurationType?
        /// Describes updates to whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
        public let autoScalingEnabledUpdate: Bool?

        public init(parallelismUpdate: Int32? = nil, parallelismPerKPUUpdate: Int32? = nil, configurationTypeUpdate: ConfigurationType? = nil, autoScalingEnabledUpdate: Bool? = nil) {
            self.parallelismUpdate = parallelismUpdate
            self.parallelismPerKPUUpdate = parallelismPerKPUUpdate
            self.configurationTypeUpdate = configurationTypeUpdate
            self.autoScalingEnabledUpdate = autoScalingEnabledUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case parallelismUpdate = "ParallelismUpdate"
            case parallelismPerKPUUpdate = "ParallelismPerKPUUpdate"
            case configurationTypeUpdate = "ConfigurationTypeUpdate"
            case autoScalingEnabledUpdate = "AutoScalingEnabledUpdate"
        }
    }

    public struct KinesisStreamsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the input Kinesis data stream to read.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct AddApplicationReferenceDataSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceDataSourceDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// Describes reference data sources configured for the application. 
        public let referenceDataSourceDescriptions: [ReferenceDataSourceDescription]?
        /// The updated application version ID. Amazon Kinesis Data Analytics increments this ID when the application is updated.
        public let applicationVersionId: Int64?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil, applicationVersionId: Int64? = nil, applicationARN: String? = nil) {
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
            self.applicationVersionId = applicationVersionId
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case referenceDataSourceDescriptions = "ReferenceDataSourceDescriptions"
            case applicationVersionId = "ApplicationVersionId"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct ApplicationRestoreConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationRestoreType", required: true, type: .enum), 
            AWSShapeMember(label: "SnapshotName", required: false, type: .string)
        ]
        /// Specifies how the application should be restored.
        public let applicationRestoreType: ApplicationRestoreType
        /// The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
        public let snapshotName: String?

        public init(applicationRestoreType: ApplicationRestoreType, snapshotName: String? = nil) {
            self.applicationRestoreType = applicationRestoreType
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationRestoreType = "ApplicationRestoreType"
            case snapshotName = "SnapshotName"
        }
    }

    public struct ReferenceDataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ReferenceDataSource", required: false, type: .structure), 
            AWSShapeMember(label: "TableName", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceSchema", required: true, type: .structure)
        ]
        /// Identifies the S3 bucket and object that contains the reference data. A Kinesis Data Analytics application loads reference data only once. If the data changes, you call the UpdateApplication operation to trigger reloading of data into your application. 
        public let s3ReferenceDataSource: S3ReferenceDataSource?
        /// The name of the in-application table to create.
        public let tableName: String
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
        public let referenceSchema: SourceSchema

        public init(s3ReferenceDataSource: S3ReferenceDataSource? = nil, tableName: String, referenceSchema: SourceSchema) {
            self.s3ReferenceDataSource = s3ReferenceDataSource
            self.tableName = tableName
            self.referenceSchema = referenceSchema
        }

        private enum CodingKeys: String, CodingKey {
            case s3ReferenceDataSource = "S3ReferenceDataSource"
            case tableName = "TableName"
            case referenceSchema = "ReferenceSchema"
        }
    }

    public enum InputStartingPosition: String, CustomStringConvertible, Codable {
        case now = "NOW"
        case trimHorizon = "TRIM_HORIZON"
        case lastStoppedPoint = "LAST_STOPPED_POINT"
        public var description: String { return self.rawValue }
    }

    public struct InputParallelismUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountUpdate", required: true, type: .integer)
        ]
        /// The number of in-application streams to create for the specified streaming source.
        public let countUpdate: Int32

        public init(countUpdate: Int32) {
            self.countUpdate = countUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case countUpdate = "CountUpdate"
        }
    }

    public struct ApplicationConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlinkApplicationConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationSnapshotConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationCodeConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "SqlApplicationConfigurationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "EnvironmentPropertyUpdates", required: false, type: .structure)
        ]
        /// Describes updates to a Java-based Kinesis Data Analytics application's configuration.
        public let flinkApplicationConfigurationUpdate: FlinkApplicationConfigurationUpdate?
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let applicationSnapshotConfigurationUpdate: ApplicationSnapshotConfigurationUpdate?
        /// Describes updates to a Java-based Kinesis Data Analytics application's code configuration.
        public let applicationCodeConfigurationUpdate: ApplicationCodeConfigurationUpdate?
        /// Describes updates to an SQL-based Kinesis Data Analytics application's configuration.
        public let sqlApplicationConfigurationUpdate: SqlApplicationConfigurationUpdate?
        /// Describes updates to the environment properties for a Java-based Kinesis Data Analytics application.
        public let environmentPropertyUpdates: EnvironmentPropertyUpdates?

        public init(flinkApplicationConfigurationUpdate: FlinkApplicationConfigurationUpdate? = nil, applicationSnapshotConfigurationUpdate: ApplicationSnapshotConfigurationUpdate? = nil, applicationCodeConfigurationUpdate: ApplicationCodeConfigurationUpdate? = nil, sqlApplicationConfigurationUpdate: SqlApplicationConfigurationUpdate? = nil, environmentPropertyUpdates: EnvironmentPropertyUpdates? = nil) {
            self.flinkApplicationConfigurationUpdate = flinkApplicationConfigurationUpdate
            self.applicationSnapshotConfigurationUpdate = applicationSnapshotConfigurationUpdate
            self.applicationCodeConfigurationUpdate = applicationCodeConfigurationUpdate
            self.sqlApplicationConfigurationUpdate = sqlApplicationConfigurationUpdate
            self.environmentPropertyUpdates = environmentPropertyUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case flinkApplicationConfigurationUpdate = "FlinkApplicationConfigurationUpdate"
            case applicationSnapshotConfigurationUpdate = "ApplicationSnapshotConfigurationUpdate"
            case applicationCodeConfigurationUpdate = "ApplicationCodeConfigurationUpdate"
            case sqlApplicationConfigurationUpdate = "SqlApplicationConfigurationUpdate"
            case environmentPropertyUpdates = "EnvironmentPropertyUpdates"
        }
    }

    public struct CreateApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// In response to your CreateApplication request, Kinesis Data Analytics returns a response with details of the application it created.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public struct KinesisFirehoseOutputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct LambdaOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the destination Lambda function to write to.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct ParallelismConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parallelism", required: false, type: .integer), 
            AWSShapeMember(label: "ConfigurationType", required: false, type: .enum), 
            AWSShapeMember(label: "CurrentParallelism", required: false, type: .integer), 
            AWSShapeMember(label: "AutoScalingEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ParallelismPerKPU", required: false, type: .integer)
        ]
        /// Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. 
        public let parallelism: Int32?
        /// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. 
        public let configurationType: ConfigurationType?
        /// Describes the current number of parallel tasks that a Java-based Kinesis Data Analytics application can perform.
        public let currentParallelism: Int32?
        /// Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
        public let autoScalingEnabled: Bool?
        /// Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.
        public let parallelismPerKPU: Int32?

        public init(parallelism: Int32? = nil, configurationType: ConfigurationType? = nil, currentParallelism: Int32? = nil, autoScalingEnabled: Bool? = nil, parallelismPerKPU: Int32? = nil) {
            self.parallelism = parallelism
            self.configurationType = configurationType
            self.currentParallelism = currentParallelism
            self.autoScalingEnabled = autoScalingEnabled
            self.parallelismPerKPU = parallelismPerKPU
        }

        private enum CodingKeys: String, CodingKey {
            case parallelism = "Parallelism"
            case configurationType = "ConfigurationType"
            case currentParallelism = "CurrentParallelism"
            case autoScalingEnabled = "AutoScalingEnabled"
            case parallelismPerKPU = "ParallelismPerKPU"
        }
    }

    public enum ConfigurationType: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case custom = "CUSTOM"
        public var description: String { return self.rawValue }
    }

    public struct AddApplicationOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "OutputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.
        public let applicationVersionId: Int64?
        /// Describes the application output configuration. For more information, see Configuring Application Output. 
        public let outputDescriptions: [OutputDescription]?
        /// The application Amazon Resource Name (ARN).
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, outputDescriptions: [OutputDescription]? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.outputDescriptions = outputDescriptions
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case outputDescriptions = "OutputDescriptions"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct RecordFormat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatType", required: true, type: .enum), 
            AWSShapeMember(label: "MappingParameters", required: false, type: .structure)
        ]
        /// The type of record format.
        public let recordFormatType: RecordFormatType
        /// When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
        public let mappingParameters: MappingParameters?

        public init(recordFormatType: RecordFormatType, mappingParameters: MappingParameters? = nil) {
            self.recordFormatType = recordFormatType
            self.mappingParameters = mappingParameters
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatType = "RecordFormatType"
            case mappingParameters = "MappingParameters"
        }
    }

    public struct S3ContentLocationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileKeyUpdate", required: false, type: .string), 
            AWSShapeMember(label: "BucketARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ObjectVersionUpdate", required: false, type: .string)
        ]
        /// The new file key for the object containing the application code.
        public let fileKeyUpdate: String?
        /// The new Amazon Resource Name (ARN) for the S3 bucket containing the application code.
        public let bucketARNUpdate: String?
        /// The new version of the object containing the application code.
        public let objectVersionUpdate: String?

        public init(fileKeyUpdate: String? = nil, bucketARNUpdate: String? = nil, objectVersionUpdate: String? = nil) {
            self.fileKeyUpdate = fileKeyUpdate
            self.bucketARNUpdate = bucketARNUpdate
            self.objectVersionUpdate = objectVersionUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case fileKeyUpdate = "FileKeyUpdate"
            case bucketARNUpdate = "BucketARNUpdate"
            case objectVersionUpdate = "ObjectVersionUpdate"
        }
    }

    public struct ApplicationSnapshotConfigurationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotsEnabled", required: true, type: .boolean)
        ]
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let snapshotsEnabled: Bool

        public init(snapshotsEnabled: Bool) {
            self.snapshotsEnabled = snapshotsEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotsEnabled = "SnapshotsEnabled"
        }
    }

    public struct KinesisStreamsOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the Kinesis data stream where you want to write the output.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct FlinkApplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParallelismConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "MonitoringConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CheckpointConfiguration", required: false, type: .structure)
        ]
        /// Describes parameters for how an application executes multiple tasks simultaneously.
        public let parallelismConfiguration: ParallelismConfiguration?
        /// Describes configuration parameters for Amazon CloudWatch logging for an application.
        public let monitoringConfiguration: MonitoringConfiguration?
        /// Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see  Checkpoints for Fault Tolerance in the Apache Flink Documentation. 
        public let checkpointConfiguration: CheckpointConfiguration?

        public init(parallelismConfiguration: ParallelismConfiguration? = nil, monitoringConfiguration: MonitoringConfiguration? = nil, checkpointConfiguration: CheckpointConfiguration? = nil) {
            self.parallelismConfiguration = parallelismConfiguration
            self.monitoringConfiguration = monitoringConfiguration
            self.checkpointConfiguration = checkpointConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case parallelismConfiguration = "ParallelismConfiguration"
            case monitoringConfiguration = "MonitoringConfiguration"
            case checkpointConfiguration = "CheckpointConfiguration"
        }
    }

    public struct KinesisStreamsInputDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to access the stream.  Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the Kinesis data stream.
        public let resourceARN: String

        public init(roleARN: String? = nil, resourceARN: String) {
            self.roleARN = roleARN
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case resourceARN = "ResourceARN"
        }
    }

    public struct ReferenceDataSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ReferenceDataSourceDescription", required: true, type: .structure), 
            AWSShapeMember(label: "ReferenceSchema", required: false, type: .structure), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        /// Provides the Amazon S3 bucket name, the object key name that contains the reference data. 
        public let s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
        public let referenceSchema: SourceSchema?
        /// The ID of the reference data source. This is the ID that Kinesis Data Analytics assigns when you add the reference data source to your application using the CreateApplication or UpdateApplication operation.
        public let referenceId: String
        /// The in-application table name created by the specific reference data source configuration.
        public let tableName: String

        public init(s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription, referenceSchema: SourceSchema? = nil, referenceId: String, tableName: String) {
            self.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription
            self.referenceSchema = referenceSchema
            self.referenceId = referenceId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case s3ReferenceDataSourceDescription = "S3ReferenceDataSourceDescription"
            case referenceSchema = "ReferenceSchema"
            case referenceId = "ReferenceId"
            case tableName = "TableName"
        }
    }

    public enum MetricsLevel: String, CustomStringConvertible, Codable {
        case application = "APPLICATION"
        case task = "TASK"
        case `operator` = "OPERATOR"
        case parallelism = "PARALLELISM"
        public var description: String { return self.rawValue }
    }

    public enum RecordFormatType: String, CustomStringConvertible, Codable {
        case json = "JSON"
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public struct ApplicationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlinkApplicationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EnvironmentProperties", required: false, type: .structure), 
            AWSShapeMember(label: "SqlApplicationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationCodeConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationSnapshotConfiguration", required: false, type: .structure)
        ]
        /// The creation and update parameters for a Java-based Kinesis Data Analytics application.
        public let flinkApplicationConfiguration: FlinkApplicationConfiguration?
        /// Describes execution properties for a Java-based Kinesis Data Analytics application.
        public let environmentProperties: EnvironmentProperties?
        /// The creation and update parameters for an SQL-based Kinesis Data Analytics application.
        public let sqlApplicationConfiguration: SqlApplicationConfiguration?
        /// The code location and type parameters for a Java-based Kinesis Data Analytics application.
        public let applicationCodeConfiguration: ApplicationCodeConfiguration
        /// Describes whether snapshots are enabled for a Java-based Kinesis Data Analytics application.
        public let applicationSnapshotConfiguration: ApplicationSnapshotConfiguration?

        public init(flinkApplicationConfiguration: FlinkApplicationConfiguration? = nil, environmentProperties: EnvironmentProperties? = nil, sqlApplicationConfiguration: SqlApplicationConfiguration? = nil, applicationCodeConfiguration: ApplicationCodeConfiguration, applicationSnapshotConfiguration: ApplicationSnapshotConfiguration? = nil) {
            self.flinkApplicationConfiguration = flinkApplicationConfiguration
            self.environmentProperties = environmentProperties
            self.sqlApplicationConfiguration = sqlApplicationConfiguration
            self.applicationCodeConfiguration = applicationCodeConfiguration
            self.applicationSnapshotConfiguration = applicationSnapshotConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case flinkApplicationConfiguration = "FlinkApplicationConfiguration"
            case environmentProperties = "EnvironmentProperties"
            case sqlApplicationConfiguration = "SqlApplicationConfiguration"
            case applicationCodeConfiguration = "ApplicationCodeConfiguration"
            case applicationSnapshotConfiguration = "ApplicationSnapshotConfiguration"
        }
    }

    public struct InputProcessingConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputLambdaProcessorUpdate", required: true, type: .structure)
        ]
        /// Provides update information for an InputLambdaProcessor.
        public let inputLambdaProcessorUpdate: InputLambdaProcessorUpdate

        public init(inputLambdaProcessorUpdate: InputLambdaProcessorUpdate) {
            self.inputLambdaProcessorUpdate = inputLambdaProcessorUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case inputLambdaProcessorUpdate = "InputLambdaProcessorUpdate"
        }
    }

    public struct CloudWatchLoggingOptionDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the CloudWatch log to receive application messages.
        public let logStreamARN: String
        /// The IAM ARN of the role to use to send application messages.   Provided for backward compatibility. Applications created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let roleARN: String?
        /// The ID of the CloudWatch logging option description.
        public let cloudWatchLoggingOptionId: String?

        public init(logStreamARN: String, roleARN: String? = nil, cloudWatchLoggingOptionId: String? = nil) {
            self.logStreamARN = logStreamARN
            self.roleARN = roleARN
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamARN = "LogStreamARN"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
        }
    }

    public struct CodeContentDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ApplicationCodeLocationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "CodeSize", required: false, type: .long), 
            AWSShapeMember(label: "TextContent", required: false, type: .string), 
            AWSShapeMember(label: "CodeMD5", required: false, type: .string)
        ]
        /// The S3 bucket Amazon Resource Name (ARN), file key, and object version of the application code stored in Amazon S3.
        public let s3ApplicationCodeLocationDescription: S3ApplicationCodeLocationDescription?
        /// The size in bytes of the application code. Can be used to validate zip-format code.
        public let codeSize: Int64?
        /// The text-format code
        public let textContent: String?
        /// The checksum that can be used to validate zip-format code.
        public let codeMD5: String?

        public init(s3ApplicationCodeLocationDescription: S3ApplicationCodeLocationDescription? = nil, codeSize: Int64? = nil, textContent: String? = nil, codeMD5: String? = nil) {
            self.s3ApplicationCodeLocationDescription = s3ApplicationCodeLocationDescription
            self.codeSize = codeSize
            self.textContent = textContent
            self.codeMD5 = codeMD5
        }

        private enum CodingKeys: String, CodingKey {
            case s3ApplicationCodeLocationDescription = "S3ApplicationCodeLocationDescription"
            case codeSize = "CodeSize"
            case textContent = "TextContent"
            case codeMD5 = "CodeMD5"
        }
    }

    public enum CodeContentType: String, CustomStringConvertible, Codable {
        case plaintext = "PLAINTEXT"
        case zipfile = "ZIPFILE"
        public var description: String { return self.rawValue }
    }

    public struct MonitoringConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogLevelUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "MetricsLevelUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "ConfigurationTypeUpdate", required: false, type: .enum)
        ]
        /// Describes updates to the verbosity of the CloudWatch Logs for an application.
        public let logLevelUpdate: LogLevel?
        /// Describes updates to the granularity of the CloudWatch Logs for an application.
        public let metricsLevelUpdate: MetricsLevel?
        /// Describes updates to whether to use the default CloudWatch logging configuration for an application.
        public let configurationTypeUpdate: ConfigurationType?

        public init(logLevelUpdate: LogLevel? = nil, metricsLevelUpdate: MetricsLevel? = nil, configurationTypeUpdate: ConfigurationType? = nil) {
            self.logLevelUpdate = logLevelUpdate
            self.metricsLevelUpdate = metricsLevelUpdate
            self.configurationTypeUpdate = configurationTypeUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case logLevelUpdate = "LogLevelUpdate"
            case metricsLevelUpdate = "MetricsLevelUpdate"
            case configurationTypeUpdate = "ConfigurationTypeUpdate"
        }
    }

    public struct ApplicationDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string), 
            AWSShapeMember(label: "LastUpdateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationConfigurationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string), 
            AWSShapeMember(label: "ServiceExecutionRole", required: false, type: .string), 
            AWSShapeMember(label: "RuntimeEnvironment", required: true, type: .enum)
        ]
        /// The status of the application.
        public let applicationStatus: ApplicationStatus
        /// The ARN of the application.
        public let applicationARN: String
        /// The current timestamp when the application was last updated.
        public let lastUpdateTimestamp: TimeStamp?
        /// The name of the application.
        public let applicationName: String
        /// The current timestamp when the application was created.
        public let createTimestamp: TimeStamp?
        /// Describes the application Amazon CloudWatch logging options.
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?
        /// Provides details about the application's SQL or Java code and starting parameters.
        public let applicationConfigurationDescription: ApplicationConfigurationDescription?
        /// Provides the current application version. Kinesis Data Analytics updates the ApplicationVersionId each time you update the application.
        public let applicationVersionId: Int64
        /// The description of the application.
        public let applicationDescription: String?
        /// Specifies the IAM role that the application uses to access external resources.
        public let serviceExecutionRole: String?
        /// The runtime environment for the application (SQL-1.0 or JAVA-8-FLINK-1.5).
        public let runtimeEnvironment: RuntimeEnvironment

        public init(applicationStatus: ApplicationStatus, applicationARN: String, lastUpdateTimestamp: TimeStamp? = nil, applicationName: String, createTimestamp: TimeStamp? = nil, cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil, applicationConfigurationDescription: ApplicationConfigurationDescription? = nil, applicationVersionId: Int64, applicationDescription: String? = nil, serviceExecutionRole: String? = nil, runtimeEnvironment: RuntimeEnvironment) {
            self.applicationStatus = applicationStatus
            self.applicationARN = applicationARN
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.applicationName = applicationName
            self.createTimestamp = createTimestamp
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
            self.applicationConfigurationDescription = applicationConfigurationDescription
            self.applicationVersionId = applicationVersionId
            self.applicationDescription = applicationDescription
            self.serviceExecutionRole = serviceExecutionRole
            self.runtimeEnvironment = runtimeEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case applicationStatus = "ApplicationStatus"
            case applicationARN = "ApplicationARN"
            case lastUpdateTimestamp = "LastUpdateTimestamp"
            case applicationName = "ApplicationName"
            case createTimestamp = "CreateTimestamp"
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
            case applicationConfigurationDescription = "ApplicationConfigurationDescription"
            case applicationVersionId = "ApplicationVersionId"
            case applicationDescription = "ApplicationDescription"
            case serviceExecutionRole = "ServiceExecutionRole"
            case runtimeEnvironment = "RuntimeEnvironment"
        }
    }

    public struct AddApplicationCloudWatchLoggingOptionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersionId", required: false, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationARN", required: false, type: .string)
        ]
        /// The new version ID of the Kinesis Data Analytics application. Kinesis Data Analytics updates the ApplicationVersionId each time you change the CloudWatch logging options. 
        public let applicationVersionId: Int64?
        /// The descriptions of the current CloudWatch logging options for the Kinesis Data Analytics application.
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?
        /// The application's ARN.
        public let applicationARN: String?

        public init(applicationVersionId: Int64? = nil, cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil, applicationARN: String? = nil) {
            self.applicationVersionId = applicationVersionId
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
            self.applicationARN = applicationARN
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersionId = "ApplicationVersionId"
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
            case applicationARN = "ApplicationARN"
        }
    }

    public struct MappingParameters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JSONMappingParameters", required: false, type: .structure), 
            AWSShapeMember(label: "CSVMappingParameters", required: false, type: .structure)
        ]
        /// Provides additional mapping information when JSON is the record format on the streaming source.
        public let jSONMappingParameters: JSONMappingParameters?
        /// Provides additional mapping information when the record format uses delimiters (for example, CSV).
        public let cSVMappingParameters: CSVMappingParameters?

        public init(jSONMappingParameters: JSONMappingParameters? = nil, cSVMappingParameters: CSVMappingParameters? = nil) {
            self.jSONMappingParameters = jSONMappingParameters
            self.cSVMappingParameters = cSVMappingParameters
        }

        private enum CodingKeys: String, CodingKey {
            case jSONMappingParameters = "JSONMappingParameters"
            case cSVMappingParameters = "CSVMappingParameters"
        }
    }

    public struct RecordColumn: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SqlType", required: true, type: .string), 
            AWSShapeMember(label: "Mapping", required: false, type: .string)
        ]
        /// The name of the column that is created in the in-application input stream or reference table.
        public let name: String
        /// The type of column created in the in-application input stream or reference table.
        public let sqlType: String
        /// A reference to the data element in the streaming input of the reference data source.
        public let mapping: String?

        public init(name: String, sqlType: String, mapping: String? = nil) {
            self.name = name
            self.sqlType = sqlType
            self.mapping = mapping
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sqlType = "SqlType"
            case mapping = "Mapping"
        }
    }

    public struct InputLambdaProcessor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The ARN of the AWS Lambda function that operates on records in the stream.
        public let resourceARN: String

        public init(resourceARN: String) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct DeleteApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string)
        ]
        /// The version ID of the application. You can retrieve the application version ID using DescribeApplication.
        public let currentApplicationVersionId: Int64
        /// The application name.
        public let applicationName: String
        /// The CloudWatchLoggingOptionId of the Amazon CloudWatch logging option to delete. You can get the CloudWatchLoggingOptionId by using the DescribeApplication operation. 
        public let cloudWatchLoggingOptionId: String

        public init(currentApplicationVersionId: Int64, applicationName: String, cloudWatchLoggingOptionId: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
        }
    }

    public struct LambdaOutputUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARNUpdate", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the destination AWS Lambda function.
        public let resourceARNUpdate: String

        public init(resourceARNUpdate: String) {
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct S3ReferenceDataSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileKey", required: true, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceRoleARN", required: false, type: .string)
        ]
        /// Amazon S3 object key name.
        public let fileKey: String
        /// The Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String
        /// The ARN of the IAM role that Kinesis Data Analytics can assume to read the Amazon S3 object on your behalf to populate the in-application reference table.   Provided for backward compatibility. Applications that are created with the current API version have an application-level service execution role rather than a resource-level role. 
        public let referenceRoleARN: String?

        public init(fileKey: String, bucketARN: String, referenceRoleARN: String? = nil) {
            self.fileKey = fileKey
            self.bucketARN = bucketARN
            self.referenceRoleARN = referenceRoleARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileKey = "FileKey"
            case bucketARN = "BucketARN"
            case referenceRoleARN = "ReferenceRoleARN"
        }
    }

    public struct S3ReferenceDataSourceUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileKeyUpdate", required: false, type: .string), 
            AWSShapeMember(label: "BucketARNUpdate", required: false, type: .string)
        ]
        /// The object key name.
        public let fileKeyUpdate: String?
        /// The Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARNUpdate: String?

        public init(fileKeyUpdate: String? = nil, bucketARNUpdate: String? = nil) {
            self.fileKeyUpdate = fileKeyUpdate
            self.bucketARNUpdate = bucketARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case fileKeyUpdate = "FileKeyUpdate"
            case bucketARNUpdate = "BucketARNUpdate"
        }
    }

    public struct CheckpointConfigurationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CheckpointIntervalUpdate", required: false, type: .long), 
            AWSShapeMember(label: "MinPauseBetweenCheckpointsUpdate", required: false, type: .long), 
            AWSShapeMember(label: "CheckpointingEnabledUpdate", required: false, type: .boolean), 
            AWSShapeMember(label: "ConfigurationTypeUpdate", required: false, type: .enum)
        ]
        /// Describes updates to the interval in milliseconds between checkpoint operations.
        public let checkpointIntervalUpdate: Int64?
        /// Describes updates to the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
        public let minPauseBetweenCheckpointsUpdate: Int64?
        /// Describes updates to whether checkpointing is enabled for an application.
        public let checkpointingEnabledUpdate: Bool?
        /// Describes updates to whether the application uses the default checkpointing behavior of Kinesis Data Analytics.
        public let configurationTypeUpdate: ConfigurationType?

        public init(checkpointIntervalUpdate: Int64? = nil, minPauseBetweenCheckpointsUpdate: Int64? = nil, checkpointingEnabledUpdate: Bool? = nil, configurationTypeUpdate: ConfigurationType? = nil) {
            self.checkpointIntervalUpdate = checkpointIntervalUpdate
            self.minPauseBetweenCheckpointsUpdate = minPauseBetweenCheckpointsUpdate
            self.checkpointingEnabledUpdate = checkpointingEnabledUpdate
            self.configurationTypeUpdate = configurationTypeUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case checkpointIntervalUpdate = "CheckpointIntervalUpdate"
            case minPauseBetweenCheckpointsUpdate = "MinPauseBetweenCheckpointsUpdate"
            case checkpointingEnabledUpdate = "CheckpointingEnabledUpdate"
            case configurationTypeUpdate = "ConfigurationTypeUpdate"
        }
    }

}