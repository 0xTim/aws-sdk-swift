// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension EC2 {

    public struct CancelSpotFleetRequestsSuccessSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CancelSpotFleetRequestsSuccessItem]?

        public init(item: [CancelSpotFleetRequestsSuccessItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateDefaultVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpc", location: .body(locationName: "vpc"), required: false, type: .structure)
        ]
        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc = "vpc"
        }
    }

    public struct SecurityGroupReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferencingVpcId", location: .body(locationName: "referencingVpcId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string)
        ]
        /// The ID of the VPC with the referencing security group.
        public let referencingVpcId: String?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The ID of your security group.
        public let groupId: String?

        public init(referencingVpcId: String? = nil, vpcPeeringConnectionId: String? = nil, groupId: String? = nil) {
            self.referencingVpcId = referencingVpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case referencingVpcId = "referencingVpcId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case groupId = "groupId"
        }
    }

    public struct SpotFleetRequestConfigSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotFleetRequestConfig]?

        public init(item: [SpotFleetRequestConfig]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelCapacityReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the Capacity Reservation to be cancelled.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(capacityReservationId: String, dryRun: Bool? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
        }
    }

    public struct ReservedInstanceReservationValueSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstanceReservationValue]?

        public init(item: [ReservedInstanceReservationValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeByoipCidrsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidrs", location: .body(locationName: "byoipCidrSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about your address ranges.
        public let byoipCidrs: ByoipCidrSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(byoipCidrs: ByoipCidrSet? = nil, nextToken: String? = nil) {
            self.byoipCidrs = byoipCidrs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidrs = "byoipCidrSet"
            case nextToken = "nextToken"
        }
    }

    public struct ScheduledInstancesBlockDeviceMappingSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMapping", required: false, type: .list)
        ]
        public let blockDeviceMapping: [ScheduledInstancesBlockDeviceMapping]?

        public init(blockDeviceMapping: [ScheduledInstancesBlockDeviceMapping]? = nil) {
            self.blockDeviceMapping = blockDeviceMapping
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMapping = "BlockDeviceMapping"
        }
    }

    public struct AssociationIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: false, type: .list)
        ]
        public let associationId: [String]?

        public init(associationId: [String]? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
        }
    }

    public struct AccountAttributeNameStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", required: false, type: .list)
        ]
        public let attributeName: [AccountAttributeName]?

        public init(attributeName: [AccountAttributeName]? = nil) {
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
        }
    }

    public struct LaunchTemplateLicenseConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", location: .body(locationName: "licenseConfigurationArn"), required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct DeleteFleetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulFleetDeletions", location: .body(locationName: "successfulFleetDeletionSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UnsuccessfulFleetDeletions", location: .body(locationName: "unsuccessfulFleetDeletionSet"), required: false, type: .structure)
        ]
        /// Information about the EC2 Fleets that are successfully deleted.
        public let successfulFleetDeletions: DeleteFleetSuccessSet?
        /// Information about the EC2 Fleets that are not successfully deleted.
        public let unsuccessfulFleetDeletions: DeleteFleetErrorSet?

        public init(successfulFleetDeletions: DeleteFleetSuccessSet? = nil, unsuccessfulFleetDeletions: DeleteFleetErrorSet? = nil) {
            self.successfulFleetDeletions = successfulFleetDeletions
            self.unsuccessfulFleetDeletions = unsuccessfulFleetDeletions
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetDeletions = "successfulFleetDeletionSet"
            case unsuccessfulFleetDeletions = "unsuccessfulFleetDeletionSet"
        }
    }

    public struct KeyPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyMaterial", location: .body(locationName: "keyMaterial"), required: false, type: .string), 
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string)
        ]
        /// An unencrypted PEM encoded RSA private key.
        public let keyMaterial: String?
        /// The SHA-1 digest of the DER encoded private key.
        public let keyFingerprint: String?
        /// The name of the key pair.
        public let keyName: String?

        public init(keyMaterial: String? = nil, keyFingerprint: String? = nil, keyName: String? = nil) {
            self.keyMaterial = keyMaterial
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyMaterial = "keyMaterial"
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
        }
    }

    public struct DescribeStaleSecurityGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaleSecurityGroupSet", location: .body(locationName: "staleSecurityGroupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the stale security groups.
        public let staleSecurityGroupSet: StaleSecurityGroupSet?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(staleSecurityGroupSet: StaleSecurityGroupSet? = nil, nextToken: String? = nil) {
            self.staleSecurityGroupSet = staleSecurityGroupSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case staleSecurityGroupSet = "staleSecurityGroupSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribePlacementGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "groupName"), required: false, type: .list)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    group-name - The name of the placement group.    state - The state of the placement group (pending | available | deleting | deleted).    strategy - The strategy of the placement group (cluster | spread).  
        public let filters: FilterList?
        /// One or more placement group names. Default: Describes all your placement groups, or only those otherwise specified.
        public let groupNames: [String]?

        public init(dryRun: Bool? = nil, filters: FilterList? = nil, groupNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case groupNames = "groupName"
        }
    }

    public enum Ipv6SupportValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public struct DeprovisionByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The public IPv4 address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public enum Affinity: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public struct CancelImportTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "PreviousState", location: .body(locationName: "previousState"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string)
        ]
        /// The current state of the task being canceled.
        public let state: String?
        /// The current state of the task being canceled.
        public let previousState: String?
        /// The ID of the task being canceled.
        public let importTaskId: String?

        public init(state: String? = nil, previousState: String? = nil, importTaskId: String? = nil) {
            self.state = state
            self.previousState = previousState
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case previousState = "previousState"
            case importTaskId = "importTaskId"
        }
    }

    public struct DescribeImportImageTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ImportTaskIds", location: .body(locationName: "ImportTaskId"), required: false, type: .structure)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, deleted.
        public let filters: FilterList?
        /// A token that indicates the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A list of import image task IDs.
        public let importTaskIds: ImportTaskIdList?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil, importTaskIds: ImportTaskIdList? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.importTaskIds = importTaskIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case importTaskIds = "ImportTaskId"
        }
    }

    public struct VolumeStatusEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventId", location: .body(locationName: "eventId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "NotBefore", location: .body(locationName: "notBefore"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .string), 
            AWSShapeMember(label: "NotAfter", location: .body(locationName: "notAfter"), required: false, type: .timestamp)
        ]
        /// The ID of this event.
        public let eventId: String?
        /// A description of the event.
        public let description: String?
        /// The earliest start time of the event.
        public let notBefore: TimeStamp?
        /// The type of this event.
        public let eventType: String?
        /// The latest end time of the event.
        public let notAfter: TimeStamp?

        public init(eventId: String? = nil, description: String? = nil, notBefore: TimeStamp? = nil, eventType: String? = nil, notAfter: TimeStamp? = nil) {
            self.eventId = eventId
            self.description = description
            self.notBefore = notBefore
            self.eventType = eventType
            self.notAfter = notAfter
        }

        private enum CodingKeys: String, CodingKey {
            case eventId = "eventId"
            case description = "description"
            case notBefore = "notBefore"
            case eventType = "eventType"
            case notAfter = "notAfter"
        }
    }

    public struct DescribeVpnConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "VpnConnectionIds", location: .body(locationName: "VpnConnectionId"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.  
        public let filters: FilterList?
        /// One or more VPN connection IDs. Default: Describes your VPN connections.
        public let vpnConnectionIds: VpnConnectionIdStringList?

        public init(dryRun: Bool? = nil, filters: FilterList? = nil, vpnConnectionIds: VpnConnectionIdStringList? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpnConnectionIds = vpnConnectionIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpnConnectionIds = "VpnConnectionId"
        }
    }

    public struct NetworkAclList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkAcl]?

        public init(item: [NetworkAcl]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ScheduledInstancesIpv6Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string)
        ]
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct RequestSpotLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure)
        ]
        /// The instance type.
        public let instanceType: InstanceType?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// Deprecated.
        public let addressingType: String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: ValueStringList?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// One or more security group IDs.
        public let securityGroupIds: ValueStringList?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data for the instance.
        public let userData: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The placement information for the instance.
        public let placement: SpotPlacement?

        public init(instanceType: InstanceType? = nil, ebsOptimized: Bool? = nil, addressingType: String? = nil, securityGroups: ValueStringList? = nil, kernelId: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, blockDeviceMappings: BlockDeviceMappingList? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, ramdiskId: String? = nil, securityGroupIds: ValueStringList? = nil, subnetId: String? = nil, userData: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, placement: SpotPlacement? = nil) {
            self.instanceType = instanceType
            self.ebsOptimized = ebsOptimized
            self.addressingType = addressingType
            self.securityGroups = securityGroups
            self.kernelId = kernelId
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.blockDeviceMappings = blockDeviceMappings
            self.networkInterfaces = networkInterfaces
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.userData = userData
            self.keyName = keyName
            self.monitoring = monitoring
            self.placement = placement
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case ebsOptimized = "ebsOptimized"
            case addressingType = "addressingType"
            case securityGroups = "SecurityGroup"
            case kernelId = "kernelId"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case blockDeviceMappings = "blockDeviceMapping"
            case networkInterfaces = "NetworkInterface"
            case ramdiskId = "ramdiskId"
            case securityGroupIds = "SecurityGroupId"
            case subnetId = "subnetId"
            case userData = "userData"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case placement = "placement"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterPeeringConnectionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "AccepterPeeringConnectionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", required: true, type: .string)
        ]
        /// The VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// The VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case requesterPeeringConnectionOptions = "RequesterPeeringConnectionOptions"
            case accepterPeeringConnectionOptions = "AccepterPeeringConnectionOptions"
            case dryRun = "DryRun"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct LaunchTemplateLicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct TransitGatewayRouteTableIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AllowedPrincipal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalType", location: .body(locationName: "principalType"), required: false, type: .enum), 
            AWSShapeMember(label: "Principal", location: .body(locationName: "principal"), required: false, type: .string)
        ]
        /// The type of principal.
        public let principalType: PrincipalType?
        /// The Amazon Resource Name (ARN) of the principal.
        public let principal: String?

        public init(principalType: PrincipalType? = nil, principal: String? = nil) {
            self.principalType = principalType
            self.principal = principal
        }

        private enum CodingKeys: String, CodingKey {
            case principalType = "principalType"
            case principal = "principal"
        }
    }

    public struct DhcpOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DhcpOptions]?

        public init(item: [DhcpOptions]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AvailableCapacity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailableInstanceCapacity", location: .body(locationName: "availableInstanceCapacity"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailableVCpus", location: .body(locationName: "availableVCpus"), required: false, type: .integer)
        ]
        /// The total number of instances supported by the Dedicated Host.
        public let availableInstanceCapacity: AvailableInstanceCapacityList?
        /// The number of vCPUs available on the Dedicated Host.
        public let availableVCpus: Int32?

        public init(availableInstanceCapacity: AvailableInstanceCapacityList? = nil, availableVCpus: Int32? = nil) {
            self.availableInstanceCapacity = availableInstanceCapacity
            self.availableVCpus = availableVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCapacity = "availableInstanceCapacity"
            case availableVCpus = "availableVCpus"
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceIds", location: .body(locationName: "ServiceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The IDs of one or more services.
        public let serviceIds: ValueStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(serviceIds: ValueStringList, dryRun: Bool? = nil) {
            self.serviceIds = serviceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case serviceIds = "ServiceId"
            case dryRun = "DryRun"
        }
    }

    public struct ModifySnapshotAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .structure), 
            AWSShapeMember(label: "CreateVolumePermission", required: false, type: .structure), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "UserGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum)
        ]
        /// The account ID to modify for the snapshot.
        public let userIds: UserIdStringList?
        /// A JSON representation of the snapshot attribute modification.
        public let createVolumePermission: CreateVolumePermissionModifications?
        /// The group to modify for the snapshot.
        public let groupNames: GroupNameStringList?
        /// The ID of the snapshot.
        public let snapshotId: String
        /// The snapshot attribute to modify. Only volume creation permissions can be modified.
        public let attribute: SnapshotAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of operation to perform to the attribute.
        public let operationType: OperationType?

        public init(userIds: UserIdStringList? = nil, createVolumePermission: CreateVolumePermissionModifications? = nil, groupNames: GroupNameStringList? = nil, snapshotId: String, attribute: SnapshotAttributeName? = nil, dryRun: Bool? = nil, operationType: OperationType? = nil) {
            self.userIds = userIds
            self.createVolumePermission = createVolumePermission
            self.groupNames = groupNames
            self.snapshotId = snapshotId
            self.attribute = attribute
            self.dryRun = dryRun
            self.operationType = operationType
        }

        private enum CodingKeys: String, CodingKey {
            case userIds = "UserId"
            case createVolumePermission = "CreateVolumePermission"
            case groupNames = "UserGroup"
            case snapshotId = "SnapshotId"
            case attribute = "Attribute"
            case dryRun = "dryRun"
            case operationType = "OperationType"
        }
    }

    public struct CopySnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string)
        ]
        /// The ID of the new snapshot.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
        }
    }

    public struct ScheduledInstanceAvailability: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "TotalScheduledInstanceHours", location: .body(locationName: "totalScheduledInstanceHours"), required: false, type: .integer), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "FirstSlotStartTime", location: .body(locationName: "firstSlotStartTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PurchaseToken", location: .body(locationName: "purchaseToken"), required: false, type: .string), 
            AWSShapeMember(label: "AvailableInstanceCount", location: .body(locationName: "availableInstanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "MinTermDurationInDays", location: .body(locationName: "minTermDurationInDays"), required: false, type: .integer), 
            AWSShapeMember(label: "Recurrence", location: .body(locationName: "recurrence"), required: false, type: .structure), 
            AWSShapeMember(label: "SlotDurationInHours", location: .body(locationName: "slotDurationInHours"), required: false, type: .integer), 
            AWSShapeMember(label: "NetworkPlatform", location: .body(locationName: "networkPlatform"), required: false, type: .string), 
            AWSShapeMember(label: "MaxTermDurationInDays", location: .body(locationName: "maxTermDurationInDays"), required: false, type: .integer), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string)
        ]
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
        public let instanceType: String?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int32?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The time period for the first schedule to start.
        public let firstSlotStartTime: TimeStamp?
        /// The purchase token. This token expires in two hours.
        public let purchaseToken: String?
        /// The number of available instances.
        public let availableInstanceCount: Int32?
        /// The minimum term. The only possible value is 365 days.
        public let minTermDurationInDays: Int32?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int32?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The maximum term. The only possible value is 365 days.
        public let maxTermDurationInDays: Int32?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?

        public init(availabilityZone: String? = nil, instanceType: String? = nil, totalScheduledInstanceHours: Int32? = nil, hourlyPrice: String? = nil, firstSlotStartTime: TimeStamp? = nil, purchaseToken: String? = nil, availableInstanceCount: Int32? = nil, minTermDurationInDays: Int32? = nil, recurrence: ScheduledInstanceRecurrence? = nil, slotDurationInHours: Int32? = nil, networkPlatform: String? = nil, maxTermDurationInDays: Int32? = nil, platform: String? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
            self.hourlyPrice = hourlyPrice
            self.firstSlotStartTime = firstSlotStartTime
            self.purchaseToken = purchaseToken
            self.availableInstanceCount = availableInstanceCount
            self.minTermDurationInDays = minTermDurationInDays
            self.recurrence = recurrence
            self.slotDurationInHours = slotDurationInHours
            self.networkPlatform = networkPlatform
            self.maxTermDurationInDays = maxTermDurationInDays
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
            case hourlyPrice = "hourlyPrice"
            case firstSlotStartTime = "firstSlotStartTime"
            case purchaseToken = "purchaseToken"
            case availableInstanceCount = "availableInstanceCount"
            case minTermDurationInDays = "minTermDurationInDays"
            case recurrence = "recurrence"
            case slotDurationInHours = "slotDurationInHours"
            case networkPlatform = "networkPlatform"
            case maxTermDurationInDays = "maxTermDurationInDays"
            case platform = "platform"
        }
    }

    public struct ExportToS3TaskSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Prefix", location: .body(locationName: "s3Prefix"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageFormat", location: .body(locationName: "diskImageFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "ContainerFormat", location: .body(locationName: "containerFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string)
        ]
        /// The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
        public let s3Prefix: String?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?

        public init(s3Prefix: String? = nil, diskImageFormat: DiskImageFormat? = nil, containerFormat: ContainerFormat? = nil, s3Bucket: String? = nil) {
            self.s3Prefix = s3Prefix
            self.diskImageFormat = diskImageFormat
            self.containerFormat = containerFormat
            self.s3Bucket = s3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case s3Prefix = "s3Prefix"
            case diskImageFormat = "diskImageFormat"
            case containerFormat = "containerFormat"
            case s3Bucket = "s3Bucket"
        }
    }

    public struct DescribeInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reservations", location: .body(locationName: "reservationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Zero or more reservations.
        public let reservations: ReservationList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(reservations: ReservationList? = nil, nextToken: String? = nil) {
            self.reservations = reservations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case reservations = "reservationSet"
            case nextToken = "nextToken"
        }
    }

    public struct ServiceTypeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceType", location: .body(locationName: "serviceType"), required: false, type: .enum)
        ]
        /// The type of service.
        public let serviceType: ServiceType?

        public init(serviceType: ServiceType? = nil) {
            self.serviceType = serviceType
        }

        private enum CodingKeys: String, CodingKey {
            case serviceType = "serviceType"
        }
    }

    public struct NetworkInterfaceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkInterface]?

        public init(item: [NetworkInterface]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RegisterImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]
        /// The ID of the newly registered AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct TransitGatewayRouteTableList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayRouteTable]?

        public init(item: [TransitGatewayRouteTable]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ScheduledInstancesPlacement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string)
        ]
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?

        public init(availabilityZone: String? = nil, groupName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case groupName = "GroupName"
        }
    }

    public struct PurchaseSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Purchase]?

        public init(item: [Purchase]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifySubnetAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignIpv6AddressOnCreation", required: false, type: .structure), 
            AWSShapeMember(label: "MapPublicIpOnLaunch", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]
        /// Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).  If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API.
        public let assignIpv6AddressOnCreation: AttributeBooleanValue?
        /// Specify true to indicate that network interfaces created in the specified subnet should be assigned a public IPv4 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives a public IPv4 address).
        public let mapPublicIpOnLaunch: AttributeBooleanValue?
        /// The ID of the subnet.
        public let subnetId: String

        public init(assignIpv6AddressOnCreation: AttributeBooleanValue? = nil, mapPublicIpOnLaunch: AttributeBooleanValue? = nil, subnetId: String) {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case assignIpv6AddressOnCreation = "AssignIpv6AddressOnCreation"
            case mapPublicIpOnLaunch = "MapPublicIpOnLaunch"
            case subnetId = "subnetId"
        }
    }

    public struct InternetGatewayList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InternetGateway]?

        public init(item: [InternetGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PrefixListSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PrefixList]?

        public init(item: [PrefixList]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ElasticGpus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticGpuType", location: .body(locationName: "elasticGpuType"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuHealth", location: .body(locationName: "elasticGpuHealth"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuState", location: .body(locationName: "elasticGpuState"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuId", location: .body(locationName: "elasticGpuId"), required: false, type: .string)
        ]
        /// The type of Elastic Graphics accelerator.
        public let elasticGpuType: String?
        /// The status of the Elastic Graphics accelerator.
        public let elasticGpuHealth: ElasticGpuHealth?
        /// The ID of the instance to which the Elastic Graphics accelerator is attached.
        public let instanceId: String?
        /// The state of the Elastic Graphics accelerator.
        public let elasticGpuState: ElasticGpuState?
        /// The Availability Zone in the which the Elastic Graphics accelerator resides.
        public let availabilityZone: String?
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?

        public init(elasticGpuType: String? = nil, elasticGpuHealth: ElasticGpuHealth? = nil, instanceId: String? = nil, elasticGpuState: ElasticGpuState? = nil, availabilityZone: String? = nil, elasticGpuId: String? = nil) {
            self.elasticGpuType = elasticGpuType
            self.elasticGpuHealth = elasticGpuHealth
            self.instanceId = instanceId
            self.elasticGpuState = elasticGpuState
            self.availabilityZone = availabilityZone
            self.elasticGpuId = elasticGpuId
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuType = "elasticGpuType"
            case elasticGpuHealth = "elasticGpuHealth"
            case instanceId = "instanceId"
            case elasticGpuState = "elasticGpuState"
            case availabilityZone = "availabilityZone"
            case elasticGpuId = "elasticGpuId"
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentIds", required: false, type: .list)
        ]
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// One or more filters. The possible values are:    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-attachment-state - The state of the attachment (pendingAcceptance | pending | available | modifying | deleting | deleted | failed | rejected).    transit-gateway-id - The ID of the transit gateway.    vpc-id - The ID of the VPC.  
        public let filters: FilterList?
        /// The token for the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the attachments.
        public let transitGatewayAttachmentIds: [String]?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct UserData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Data", location: .body(locationName: "data"), required: false, type: .string)
        ]
        /// The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let data: String?

        public init(data: String? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "data"
        }
    }

    public struct PlacementResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]
        /// The name of the placement group the instance is in.
        public let groupName: String?

        public init(groupName: String? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
        }
    }

    public struct DescribeAggregateIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct AssociateIamInstanceProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: true, type: .structure)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification

        public init(instanceId: String, iamInstanceProfile: IamInstanceProfileSpecification) {
            self.instanceId = instanceId
            self.iamInstanceProfile = iamInstanceProfile
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case iamInstanceProfile = "IamInstanceProfile"
        }
    }

    public struct NatGatewayList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NatGateway]?

        public init(item: [NatGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum UnsuccessfulInstanceCreditSpecificationErrorCode: String, CustomStringConvertible, Codable {
        case invalidinstanceidMalformed = "InvalidInstanceID.Malformed"
        case invalidinstanceidNotfound = "InvalidInstanceID.NotFound"
        case incorrectinstancestate = "IncorrectInstanceState"
        case instancecreditspecificationNotsupported = "InstanceCreditSpecification.NotSupported"
        public var description: String { return self.rawValue }
    }

    public struct ModifyVolumeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeModification", location: .body(locationName: "volumeModification"), required: false, type: .structure)
        ]
        /// Information about the volume modification.
        public let volumeModification: VolumeModification?

        public init(volumeModification: VolumeModification? = nil) {
            self.volumeModification = volumeModification
        }

        private enum CodingKeys: String, CodingKey {
            case volumeModification = "volumeModification"
        }
    }

    public struct SnapshotIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .list)
        ]
        public let snapshotId: [String]?

        public init(snapshotId: [String]? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct DescribeConversionTaskList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ConversionTask]?

        public init(item: [ConversionTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayAttachmentId: String, transitGatewayRouteTableId: String, dryRun: Bool? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
            case dryRun = "DryRun"
        }
    }

    public struct ZoneIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZoneId", required: false, type: .list)
        ]
        public let zoneId: [String]?

        public init(zoneId: [String]? = nil) {
            self.zoneId = zoneId
        }

        private enum CodingKeys: String, CodingKey {
            case zoneId = "ZoneId"
        }
    }

    public enum VolumeStatusName: String, CustomStringConvertible, Codable {
        case ioEnabled = "io-enabled"
        case ioPerformance = "io-performance"
        public var description: String { return self.rawValue }
    }

    public struct ZoneNameStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZoneName", required: false, type: .list)
        ]
        public let zoneName: [String]?

        public init(zoneName: [String]? = nil) {
            self.zoneName = zoneName
        }

        private enum CodingKeys: String, CodingKey {
            case zoneName = "ZoneName"
        }
    }

    public struct FleetLaunchTemplateConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", required: false, type: .structure)
        ]
        /// The launch template to use. You must specify either the launch template ID or launch template name in the request. 
        public let launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: FleetLaunchTemplateOverridesListRequest?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest? = nil, overrides: FleetLaunchTemplateOverridesListRequest? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "LaunchTemplateSpecification"
            case overrides = "Overrides"
        }
    }

    public struct VolumeAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "Device", location: .body(locationName: "device"), required: false, type: .string), 
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// The ID of the volume.
        public let volumeId: String?
        /// The device name.
        public let device: String?
        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// The attachment state of the volume.
        public let state: VolumeAttachmentState?

        public init(deleteOnTermination: Bool? = nil, instanceId: String? = nil, volumeId: String? = nil, device: String? = nil, attachTime: TimeStamp? = nil, state: VolumeAttachmentState? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.instanceId = instanceId
            self.volumeId = volumeId
            self.device = device
            self.attachTime = attachTime
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case instanceId = "instanceId"
            case volumeId = "volumeId"
            case device = "device"
            case attachTime = "attachTime"
            case state = "status"
        }
    }

    public struct DescribeReservedInstancesListingsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .structure)
        ]
        /// Information about the Reserved Instance listing.
        public let reservedInstancesListings: ReservedInstancesListingList?

        public init(reservedInstancesListings: ReservedInstancesListingList? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct AdvertiseByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct ExportTransitGatewayRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Location", location: .body(locationName: "s3Location"), required: false, type: .string)
        ]
        /// The URL of the exported file in Amazon S3. For example, s3://bucket_name/VPCTransitGateway/TransitGatewayRouteTables/file_name.
        public let s3Location: String?

        public init(s3Location: String? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
        }
    }

    public struct DescribeAvailabilityZonesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZoneNames", location: .body(locationName: "ZoneName"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ZoneIds", location: .body(locationName: "ZoneId"), required: false, type: .structure)
        ]
        /// The names of one or more Availability Zones.
        public let zoneNames: ZoneNameStringList?
        /// One or more filters.    message - Information about the Availability Zone.    region-name - The name of the region for the Availability Zone (for example, us-east-1).    state - The state of the Availability Zone (available | information | impaired | unavailable).    zone-id - The ID of the Availability Zone (for example, use1-az1).    zone-name - The name of the Availability Zone (for example, us-east-1a).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more Availability Zones.
        public let zoneIds: ZoneIdStringList?

        public init(zoneNames: ZoneNameStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, zoneIds: ZoneIdStringList? = nil) {
            self.zoneNames = zoneNames
            self.filters = filters
            self.dryRun = dryRun
            self.zoneIds = zoneIds
        }

        private enum CodingKeys: String, CodingKey {
            case zoneNames = "ZoneName"
            case filters = "Filter"
            case dryRun = "dryRun"
            case zoneIds = "ZoneId"
        }
    }

    public struct VolumeModification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "TargetIops", location: .body(locationName: "targetIops"), required: false, type: .integer), 
            AWSShapeMember(label: "ModificationState", location: .body(locationName: "modificationState"), required: false, type: .enum), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .long), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OriginalSize", location: .body(locationName: "originalSize"), required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TargetVolumeType", location: .body(locationName: "targetVolumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "TargetSize", location: .body(locationName: "targetSize"), required: false, type: .integer), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "OriginalVolumeType", location: .body(locationName: "originalVolumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "OriginalIops", location: .body(locationName: "originalIops"), required: false, type: .integer)
        ]
        /// The ID of the volume.
        public let volumeId: String?
        /// The target IOPS rate of the volume.
        public let targetIops: Int32?
        /// The current modification state. The modification state is null for unmodified volumes.
        public let modificationState: VolumeModificationState?
        /// The modification progress, from 0 to 100 percent complete.
        public let progress: Int64?
        /// The modification completion or failure time.
        public let endTime: TimeStamp?
        /// The original size of the volume.
        public let originalSize: Int32?
        /// The modification start time.
        public let startTime: TimeStamp?
        /// The target EBS volume type of the volume.
        public let targetVolumeType: VolumeType?
        /// The target size of the volume, in GiB.
        public let targetSize: Int32?
        /// A status message about the modification progress or failure.
        public let statusMessage: String?
        /// The original EBS volume type of the volume.
        public let originalVolumeType: VolumeType?
        /// The original IOPS rate of the volume.
        public let originalIops: Int32?

        public init(volumeId: String? = nil, targetIops: Int32? = nil, modificationState: VolumeModificationState? = nil, progress: Int64? = nil, endTime: TimeStamp? = nil, originalSize: Int32? = nil, startTime: TimeStamp? = nil, targetVolumeType: VolumeType? = nil, targetSize: Int32? = nil, statusMessage: String? = nil, originalVolumeType: VolumeType? = nil, originalIops: Int32? = nil) {
            self.volumeId = volumeId
            self.targetIops = targetIops
            self.modificationState = modificationState
            self.progress = progress
            self.endTime = endTime
            self.originalSize = originalSize
            self.startTime = startTime
            self.targetVolumeType = targetVolumeType
            self.targetSize = targetSize
            self.statusMessage = statusMessage
            self.originalVolumeType = originalVolumeType
            self.originalIops = originalIops
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "volumeId"
            case targetIops = "targetIops"
            case modificationState = "modificationState"
            case progress = "progress"
            case endTime = "endTime"
            case originalSize = "originalSize"
            case startTime = "startTime"
            case targetVolumeType = "targetVolumeType"
            case targetSize = "targetSize"
            case statusMessage = "statusMessage"
            case originalVolumeType = "originalVolumeType"
            case originalIops = "originalIops"
        }
    }

    public struct SuccessfulInstanceCreditSpecificationItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The ID of the instance.
        public let instanceId: String?

        public init(instanceId: String? = nil) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
        }
    }

    public struct NetworkInterfaceAttachmentChanges: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string)
        ]
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The ID of the network interface attachment.
        public let attachmentId: String?

        public init(deleteOnTermination: Bool? = nil, attachmentId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.attachmentId = attachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case attachmentId = "attachmentId"
        }
    }

    public struct DeleteRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string)
        ]
        /// The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationIpv6CidrBlock: String?
        /// The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String

        public init(destinationIpv6CidrBlock: String? = nil, destinationCidrBlock: String? = nil, dryRun: Bool? = nil, routeTableId: String) {
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationCidrBlock = "destinationCidrBlock"
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
        }
    }

    public struct LaunchTemplateInstanceMarketOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotOptions", location: .body(locationName: "spotOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "MarketType", location: .body(locationName: "marketType"), required: false, type: .enum)
        ]
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptions?
        /// The market type.
        public let marketType: MarketType?

        public init(spotOptions: LaunchTemplateSpotMarketOptions? = nil, marketType: MarketType? = nil) {
            self.spotOptions = spotOptions
            self.marketType = marketType
        }

        private enum CodingKeys: String, CodingKey {
            case spotOptions = "spotOptions"
            case marketType = "marketType"
        }
    }

    public struct TransitGatewayRouteTableAssociationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayRouteTableAssociation]?

        public init(item: [TransitGatewayRouteTableAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DetachNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Force", location: .body(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Specifies whether to force a detachment.
        public let force: Bool?
        /// The ID of the attachment.
        public let attachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(force: Bool? = nil, attachmentId: String, dryRun: Bool? = nil) {
            self.force = force
            self.attachmentId = attachmentId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case force = "force"
            case attachmentId = "attachmentId"
            case dryRun = "dryRun"
        }
    }

    public enum CapacityReservationTenancy: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case dedicated = "dedicated"
        public var description: String { return self.rawValue }
    }

    public struct CancelBundleTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the bundle task.
        public let bundleId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bundleId: String, dryRun: Bool? = nil) {
            self.bundleId = bundleId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "BundleId"
            case dryRun = "dryRun"
        }
    }

    public struct CustomerGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "IpAddress", location: .body(locationName: "ipAddress"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "BgpAsn", location: .body(locationName: "bgpAsn"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerGatewayId", location: .body(locationName: "customerGatewayId"), required: false, type: .string)
        ]
        /// The type of VPN connection the customer gateway supports (ipsec.1).
        public let `type`: String?
        /// Any tags assigned to the customer gateway.
        public let tags: TagList?
        /// The Internet-routable IP address of the customer gateway's outside interface.
        public let ipAddress: String?
        /// The current state of the customer gateway (pending | available | deleting | deleted).
        public let state: String?
        /// The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
        public let bgpAsn: String?
        /// The ID of the customer gateway.
        public let customerGatewayId: String?

        public init(type: String? = nil, tags: TagList? = nil, ipAddress: String? = nil, state: String? = nil, bgpAsn: String? = nil, customerGatewayId: String? = nil) {
            self.`type` = `type`
            self.tags = tags
            self.ipAddress = ipAddress
            self.state = state
            self.bgpAsn = bgpAsn
            self.customerGatewayId = customerGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case tags = "tagSet"
            case ipAddress = "ipAddress"
            case state = "state"
            case bgpAsn = "bgpAsn"
            case customerGatewayId = "customerGatewayId"
        }
    }

    public struct ReservedInstancesIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", required: false, type: .list)
        ]
        public let reservedInstancesId: [String]?

        public init(reservedInstancesId: [String]? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "ReservedInstancesId"
        }
    }

    public struct AttachClassicLinkVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: true, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.
        public let groups: GroupIdStringList
        /// The ID of a ClassicLink-enabled VPC.
        public let vpcId: String
        /// The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(groups: GroupIdStringList, vpcId: String, instanceId: String, dryRun: Bool? = nil) {
            self.groups = groups
            self.vpcId = vpcId
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "SecurityGroupId"
            case vpcId = "vpcId"
            case instanceId = "instanceId"
            case dryRun = "dryRun"
        }
    }

    public struct UnassignIpv6AddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "UnassignedIpv6Addresses", location: .body(locationName: "unassignedIpv6Addresses"), required: false, type: .structure)
        ]
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv6 addresses that have been unassigned from the network interface.
        public let unassignedIpv6Addresses: Ipv6AddressList?

        public init(networkInterfaceId: String? = nil, unassignedIpv6Addresses: Ipv6AddressList? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.unassignedIpv6Addresses = unassignedIpv6Addresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case unassignedIpv6Addresses = "unassignedIpv6Addresses"
        }
    }

    public enum ElasticGpuState: String, CustomStringConvertible, Codable {
        case attached = "ATTACHED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeNetworkInterfacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more network interfaces.
        public let networkInterfaces: NetworkInterfaceList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInterfaces: NetworkInterfaceList? = nil, nextToken: String? = nil) {
            self.networkInterfaces = networkInterfaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaces = "networkInterfaceSet"
            case nextToken = "nextToken"
        }
    }

    public struct CreateVpnGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGateway", location: .body(locationName: "vpnGateway"), required: false, type: .structure)
        ]
        /// Information about the virtual private gateway.
        public let vpnGateway: VpnGateway?

        public init(vpnGateway: VpnGateway? = nil) {
            self.vpnGateway = vpnGateway
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateway = "vpnGateway"
        }
    }

    public struct VpnStaticRouteList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpnStaticRoute]?

        public init(item: [VpnStaticRoute]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RestoreAddressToClassicRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The Elastic IP address.
        public let publicIp: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(publicIp: String, dryRun: Bool? = nil) {
            self.publicIp = publicIp
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "publicIp"
            case dryRun = "dryRun"
        }
    }

    public struct ScheduledInstanceIdRequestSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceId", required: false, type: .list)
        ]
        public let scheduledInstanceId: [String]?

        public init(scheduledInstanceId: [String]? = nil) {
            self.scheduledInstanceId = scheduledInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceId = "ScheduledInstanceId"
        }
    }

    public struct PriceScheduleList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PriceSchedule]?

        public init(item: [PriceSchedule]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum FlowLogsResourceType: String, CustomStringConvertible, Codable {
        case vpc = "VPC"
        case subnet = "Subnet"
        case networkinterface = "NetworkInterface"
        public var description: String { return self.rawValue }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "TagSet", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "RequesterId", location: .body(locationName: "requesterId"), required: false, type: .string), 
            AWSShapeMember(label: "RequesterManaged", location: .body(locationName: "requesterManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "MacAddress", location: .body(locationName: "macAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "InterfaceType", location: .body(locationName: "interfaceType"), required: false, type: .enum), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure)
        ]
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The private IPv4 addresses associated with the network interface.
        public let privateIpAddresses: NetworkInterfacePrivateIpAddressList?
        /// Any tags assigned to the network interface.
        public let tagSet: TagList?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).
        public let requesterId: String?
        /// Indicates whether the network interface is being managed by AWS.
        public let requesterManaged: Bool?
        /// Indicates whether traffic to or from the instance is validated.
        public let sourceDestCheck: Bool?
        /// A description.
        public let description: String?
        /// The IPv6 addresses associated with the network interface.
        public let ipv6Addresses: NetworkInterfaceIpv6AddressesList?
        /// The network interface attachment.
        public let attachment: NetworkInterfaceAttachment?
        /// Any security groups for the network interface.
        public let groups: GroupIdentifierList?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The AWS account ID of the owner of the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The type of interface.
        public let interfaceType: NetworkInterfaceType?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?

        public init(availabilityZone: String? = nil, privateIpAddresses: NetworkInterfacePrivateIpAddressList? = nil, tagSet: TagList? = nil, vpcId: String? = nil, requesterId: String? = nil, requesterManaged: Bool? = nil, sourceDestCheck: Bool? = nil, description: String? = nil, ipv6Addresses: NetworkInterfaceIpv6AddressesList? = nil, attachment: NetworkInterfaceAttachment? = nil, groups: GroupIdentifierList? = nil, macAddress: String? = nil, subnetId: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, interfaceType: NetworkInterfaceType? = nil, privateIpAddress: String? = nil, status: NetworkInterfaceStatus? = nil, association: NetworkInterfaceAssociation? = nil) {
            self.availabilityZone = availabilityZone
            self.privateIpAddresses = privateIpAddresses
            self.tagSet = tagSet
            self.vpcId = vpcId
            self.requesterId = requesterId
            self.requesterManaged = requesterManaged
            self.sourceDestCheck = sourceDestCheck
            self.description = description
            self.ipv6Addresses = ipv6Addresses
            self.attachment = attachment
            self.groups = groups
            self.macAddress = macAddress
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.interfaceType = interfaceType
            self.privateIpAddress = privateIpAddress
            self.status = status
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case privateIpAddresses = "privateIpAddressesSet"
            case tagSet = "tagSet"
            case vpcId = "vpcId"
            case requesterId = "requesterId"
            case requesterManaged = "requesterManaged"
            case sourceDestCheck = "sourceDestCheck"
            case description = "description"
            case ipv6Addresses = "ipv6AddressesSet"
            case attachment = "attachment"
            case groups = "groupSet"
            case macAddress = "macAddress"
            case subnetId = "subnetId"
            case networkInterfaceId = "networkInterfaceId"
            case ownerId = "ownerId"
            case privateDnsName = "privateDnsName"
            case interfaceType = "interfaceType"
            case privateIpAddress = "privateIpAddress"
            case status = "status"
            case association = "association"
        }
    }

    public struct RegionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Region]?

        public init(item: [Region]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstanceAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .structure), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure)
        ]
        /// The instance type.
        public let instanceType: AttributeValue?
        /// A list of product codes.
        public let productCodes: ProductCodeList?
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        public let ebsOptimized: AttributeBooleanValue?
        /// If the value is true, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.
        public let disableApiTermination: AttributeBooleanValue?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: AttributeValue?
        /// The block device mapping of the instance.
        public let blockDeviceMappings: InstanceBlockDeviceMappingList?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// Indicates whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT.
        public let sourceDestCheck: AttributeBooleanValue?
        /// The security groups associated with the instance.
        public let groups: GroupIdentifierList?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// The user data.
        public let userData: AttributeValue?
        /// Indicates whether enhanced networking with ENA is enabled.
        public let enaSupport: AttributeBooleanValue?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?

        public init(instanceType: AttributeValue? = nil, productCodes: ProductCodeList? = nil, ebsOptimized: AttributeBooleanValue? = nil, disableApiTermination: AttributeBooleanValue? = nil, kernelId: AttributeValue? = nil, rootDeviceName: AttributeValue? = nil, blockDeviceMappings: InstanceBlockDeviceMappingList? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, groups: GroupIdentifierList? = nil, ramdiskId: AttributeValue? = nil, userData: AttributeValue? = nil, enaSupport: AttributeBooleanValue? = nil, instanceId: String? = nil, sriovNetSupport: AttributeValue? = nil) {
            self.instanceType = instanceType
            self.productCodes = productCodes
            self.ebsOptimized = ebsOptimized
            self.disableApiTermination = disableApiTermination
            self.kernelId = kernelId
            self.rootDeviceName = rootDeviceName
            self.blockDeviceMappings = blockDeviceMappings
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.sourceDestCheck = sourceDestCheck
            self.groups = groups
            self.ramdiskId = ramdiskId
            self.userData = userData
            self.enaSupport = enaSupport
            self.instanceId = instanceId
            self.sriovNetSupport = sriovNetSupport
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case productCodes = "productCodes"
            case ebsOptimized = "ebsOptimized"
            case disableApiTermination = "disableApiTermination"
            case kernelId = "kernel"
            case rootDeviceName = "rootDeviceName"
            case blockDeviceMappings = "blockDeviceMapping"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case sourceDestCheck = "sourceDestCheck"
            case groups = "groupSet"
            case ramdiskId = "ramdisk"
            case userData = "userData"
            case enaSupport = "enaSupport"
            case instanceId = "instanceId"
            case sriovNetSupport = "sriovNetSupport"
        }
    }

    public struct InstanceIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct FlowLogSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FlowLog]?

        public init(item: [FlowLog]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VolumeStatusAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventId", location: .body(locationName: "eventId"), required: false, type: .string), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .string)
        ]
        /// The ID of the event associated with this operation.
        public let eventId: String?
        /// The code identifying the operation, for example, enable-volume-io.
        public let code: String?
        /// A description of the operation.
        public let description: String?
        /// The event type associated with this operation.
        public let eventType: String?

        public init(eventId: String? = nil, code: String? = nil, description: String? = nil, eventType: String? = nil) {
            self.eventId = eventId
            self.code = code
            self.description = description
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case eventId = "eventId"
            case code = "code"
            case description = "description"
            case eventType = "eventType"
        }
    }

    public struct DescribeBundleTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTasks", location: .body(locationName: "bundleInstanceTasksSet"), required: false, type: .structure)
        ]
        /// Information about one or more bundle tasks.
        public let bundleTasks: BundleTaskList?

        public init(bundleTasks: BundleTaskList? = nil) {
            self.bundleTasks = bundleTasks
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTasks = "bundleInstanceTasksSet"
        }
    }

    public struct CreateVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "AmazonProvidedIpv6CidrBlock", location: .body(locationName: "amazonProvidedIpv6CidrBlock"), required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
        public let cidrBlock: String
        /// The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
        public let instanceTenancy: Tenancy?
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidrBlock: String, instanceTenancy: Tenancy? = nil, amazonProvidedIpv6CidrBlock: Bool? = nil, dryRun: Bool? = nil) {
            self.cidrBlock = cidrBlock
            self.instanceTenancy = instanceTenancy
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "CidrBlock"
            case instanceTenancy = "instanceTenancy"
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
            case dryRun = "dryRun"
        }
    }

    public struct InternetGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// The ID of the AWS account that owns the internet gateway.
        public let ownerId: String?
        /// The ID of the internet gateway.
        public let internetGatewayId: String?
        /// Any VPCs attached to the internet gateway.
        public let attachments: InternetGatewayAttachmentList?
        /// Any tags assigned to the internet gateway.
        public let tags: TagList?

        public init(ownerId: String? = nil, internetGatewayId: String? = nil, attachments: InternetGatewayAttachmentList? = nil, tags: TagList? = nil) {
            self.ownerId = ownerId
            self.internetGatewayId = internetGatewayId
            self.attachments = attachments
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "ownerId"
            case internetGatewayId = "internetGatewayId"
            case attachments = "attachmentSet"
            case tags = "tagSet"
        }
    }

    public struct CreateVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnection", location: .body(locationName: "vpcPeeringConnection"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "CapacityReservationSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the instance to be modified.
        public let instanceId: String
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecification
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, capacityReservationSpecification: CapacityReservationSpecification, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.capacityReservationSpecification = capacityReservationSpecification
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ServiceIds", location: .body(locationName: "ServiceId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned.
        public let maxResults: Int32?
        /// The IDs of one or more services.
        public let serviceIds: ValueStringList?
        /// One or more filters.    service-name - The name of the service.    service-id - The ID of the service.    service-state - The state of the service (Pending | Available | Deleting | Deleted | Failed).   
        public let filters: FilterList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, serviceIds: ValueStringList? = nil, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.serviceIds = serviceIds
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case serviceIds = "ServiceId"
            case filters = "Filter"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
        }
    }

    public struct InstanceMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The monitoring for the instance.
        public let monitoring: Monitoring?
        /// The ID of the instance.
        public let instanceId: String?

        public init(monitoring: Monitoring? = nil, instanceId: String? = nil) {
            self.monitoring = monitoring
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case monitoring = "monitoring"
            case instanceId = "instanceId"
        }
    }

    public struct SpotPrice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string)
        ]
        /// The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp?
        /// The maximum price per hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// A general description of the AMI.
        public let productDescription: RIProductDescription?
        /// The Availability Zone.
        public let availabilityZone: String?

        public init(timestamp: TimeStamp? = nil, spotPrice: String? = nil, instanceType: InstanceType? = nil, productDescription: RIProductDescription? = nil, availabilityZone: String? = nil) {
            self.timestamp = timestamp
            self.spotPrice = spotPrice
            self.instanceType = instanceType
            self.productDescription = productDescription
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "timestamp"
            case spotPrice = "spotPrice"
            case instanceType = "instanceType"
            case productDescription = "productDescription"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct IpRanges: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateVpnConnectionRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string)
        ]
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(destinationCidrBlock: String, vpnConnectionId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct ValueStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum TransitGatewayRouteType: String, CustomStringConvertible, Codable {
        case `static` = "static"
        case propagated = "propagated"
        public var description: String { return self.rawValue }
    }

    public struct SpotInstanceRequestList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotInstanceRequest]?

        public init(item: [SpotInstanceRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LoadPermissionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LoadPermission]?

        public init(item: [LoadPermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateSpotDatafeedSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotDatafeedSubscription", location: .body(locationName: "spotDatafeedSubscription"), required: false, type: .structure)
        ]
        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public struct DescribeSpotFleetInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "ActiveInstances", location: .body(locationName: "activeInstanceSet"), required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// The running instances. This list is refreshed periodically and might be out of date.
        public let activeInstances: ActiveInstanceSet
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(spotFleetRequestId: String, activeInstances: ActiveInstanceSet, nextToken: String? = nil) {
            self.spotFleetRequestId = spotFleetRequestId
            self.activeInstances = activeInstances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestId = "spotFleetRequestId"
            case activeInstances = "activeInstanceSet"
            case nextToken = "nextToken"
        }
    }

    public struct DisableVpcClassicLinkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct AssociateTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure)
        ]
        /// The ID of the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct TargetGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TargetGroup]?

        public init(item: [TargetGroup]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GroupIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CpuOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", location: .body(locationName: "coreCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", location: .body(locationName: "threadsPerCore"), required: false, type: .integer)
        ]
        /// The number of CPU cores for the instance.
        public let coreCount: Int32?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int32?

        public init(coreCount: Int32? = nil, threadsPerCore: Int32? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "coreCount"
            case threadsPerCore = "threadsPerCore"
        }
    }

    public struct Snapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "DataEncryptionKeyId", location: .body(locationName: "dataEncryptionKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "StateMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer)
        ]
        /// The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.
        public let volumeId: String?
        /// The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.
        public let kmsKeyId: String?
        /// The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
        public let snapshotId: String?
        ///  Value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console. 
        public let ownerAlias: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by the DescribeSnapshots API operation.
        public let dataEncryptionKeyId: String?
        /// The progress of the snapshot, as a percentage.
        public let progress: String?
        /// The time stamp when the snapshot was initiated.
        public let startTime: TimeStamp?
        /// The snapshot state.
        public let state: SnapshotState?
        /// The description for the snapshot.
        public let description: String?
        /// The AWS account ID of the EBS snapshot owner.
        public let ownerId: String?
        /// Any tags assigned to the snapshot.
        public let tags: TagList?
        /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by the DescribeSnapshots API operation.
        public let stateMessage: String?
        /// The size of the volume, in GiB.
        public let volumeSize: Int32?

        public init(volumeId: String? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, ownerAlias: String? = nil, encrypted: Bool? = nil, dataEncryptionKeyId: String? = nil, progress: String? = nil, startTime: TimeStamp? = nil, state: SnapshotState? = nil, description: String? = nil, ownerId: String? = nil, tags: TagList? = nil, stateMessage: String? = nil, volumeSize: Int32? = nil) {
            self.volumeId = volumeId
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.ownerAlias = ownerAlias
            self.encrypted = encrypted
            self.dataEncryptionKeyId = dataEncryptionKeyId
            self.progress = progress
            self.startTime = startTime
            self.state = state
            self.description = description
            self.ownerId = ownerId
            self.tags = tags
            self.stateMessage = stateMessage
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "volumeId"
            case kmsKeyId = "kmsKeyId"
            case snapshotId = "snapshotId"
            case ownerAlias = "ownerAlias"
            case encrypted = "encrypted"
            case dataEncryptionKeyId = "dataEncryptionKeyId"
            case progress = "progress"
            case startTime = "startTime"
            case state = "status"
            case description = "description"
            case ownerId = "ownerId"
            case tags = "tagSet"
            case stateMessage = "statusMessage"
            case volumeSize = "volumeSize"
        }
    }

    public struct TargetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct InstanceStatusEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "NotBefore", location: .body(locationName: "notBefore"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NotAfter", location: .body(locationName: "notAfter"), required: false, type: .timestamp)
        ]
        /// The event code.
        public let code: EventCode?
        /// A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
        public let description: String?
        /// The earliest scheduled start time for the event.
        public let notBefore: TimeStamp?
        /// The latest scheduled end time for the event.
        public let notAfter: TimeStamp?

        public init(code: EventCode? = nil, description: String? = nil, notBefore: TimeStamp? = nil, notAfter: TimeStamp? = nil) {
            self.code = code
            self.description = description
            self.notBefore = notBefore
            self.notAfter = notAfter
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case description = "description"
            case notBefore = "notBefore"
            case notAfter = "notAfter"
        }
    }

    public struct DescribeSecurityGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroupInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more security groups.
        public let securityGroups: SecurityGroupList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(securityGroups: SecurityGroupList? = nil, nextToken: String? = nil) {
            self.securityGroups = securityGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroups = "securityGroupInfo"
            case nextToken = "nextToken"
        }
    }

    public enum LaunchTemplateErrorCode: String, CustomStringConvertible, Codable {
        case launchtemplateiddoesnotexist = "launchTemplateIdDoesNotExist"
        case launchtemplateidmalformed = "launchTemplateIdMalformed"
        case launchtemplatenamedoesnotexist = "launchTemplateNameDoesNotExist"
        case launchtemplatenamemalformed = "launchTemplateNameMalformed"
        case launchtemplateversiondoesnotexist = "launchTemplateVersionDoesNotExist"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public struct Region: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegionName", location: .body(locationName: "regionName"), required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", location: .body(locationName: "regionEndpoint"), required: false, type: .string)
        ]
        /// The name of the region.
        public let regionName: String?
        /// The region service endpoint.
        public let endpoint: String?

        public init(regionName: String? = nil, endpoint: String? = nil) {
            self.regionName = regionName
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "regionName"
            case endpoint = "regionEndpoint"
        }
    }

    public struct VpnGatewayIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGatewayId", required: false, type: .list)
        ]
        public let vpnGatewayId: [String]?

        public init(vpnGatewayId: [String]? = nil) {
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct FleetLaunchTemplateConfigListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FleetLaunchTemplateConfigRequest]?

        public init(item: [FleetLaunchTemplateConfigRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NetworkInterfacePermissionState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// A status message, if applicable.
        public let statusMessage: String?
        /// The state of the permission.
        public let state: NetworkInterfacePermissionStateCode?

        public init(statusMessage: String? = nil, state: NetworkInterfacePermissionStateCode? = nil) {
            self.statusMessage = statusMessage
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case statusMessage = "statusMessage"
            case state = "state"
        }
    }

    public struct TransitGatewayAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The resource type.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?

        public init(resourceType: TransitGatewayAttachmentResourceType? = nil, resourceId: String? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil, state: TransitGatewayAssociationState? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case resourceId = "resourceId"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
            case state = "state"
        }
    }

    public struct AttachVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, vpnGatewayId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeImportSnapshotTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ImportTaskIds", location: .body(locationName: "ImportTaskId"), required: false, type: .structure)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// One or more filters.
        public let filters: FilterList?
        /// A token that indicates the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A list of import snapshot task IDs.
        public let importTaskIds: ImportTaskIdList?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil, importTaskIds: ImportTaskIdList? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.importTaskIds = importTaskIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filters"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case importTaskIds = "ImportTaskId"
        }
    }

    public struct AllocateAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "PublicIpv4Pool", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
        public let address: String?
        /// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
        public let publicIpv4Pool: String?
        /// Set to vpc to allocate the address for use with instances in a VPC. Default: The address is for use with instances in EC2-Classic.
        public let domain: DomainType?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(address: String? = nil, publicIpv4Pool: String? = nil, domain: DomainType? = nil, dryRun: Bool? = nil) {
            self.address = address
            self.publicIpv4Pool = publicIpv4Pool
            self.domain = domain
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case publicIpv4Pool = "PublicIpv4Pool"
            case domain = "Domain"
            case dryRun = "dryRun"
        }
    }

    public struct ReservationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemainingTotalValue", location: .body(locationName: "remainingTotalValue"), required: false, type: .string), 
            AWSShapeMember(label: "RemainingUpfrontValue", location: .body(locationName: "remainingUpfrontValue"), required: false, type: .string), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string)
        ]
        /// The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
        public let remainingTotalValue: String?
        /// The remaining upfront cost of the reservation.
        public let remainingUpfrontValue: String?
        /// The hourly rate of the reservation.
        public let hourlyPrice: String?

        public init(remainingTotalValue: String? = nil, remainingUpfrontValue: String? = nil, hourlyPrice: String? = nil) {
            self.remainingTotalValue = remainingTotalValue
            self.remainingUpfrontValue = remainingUpfrontValue
            self.hourlyPrice = hourlyPrice
        }

        private enum CodingKeys: String, CodingKey {
            case remainingTotalValue = "remainingTotalValue"
            case remainingUpfrontValue = "remainingUpfrontValue"
            case hourlyPrice = "hourlyPrice"
        }
    }

    public struct PublicIpv4Pool: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalAddressCount", location: .body(locationName: "totalAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "PoolAddressRanges", location: .body(locationName: "poolAddressRangeSet"), required: false, type: .structure), 
            AWSShapeMember(label: "TotalAvailableAddressCount", location: .body(locationName: "totalAvailableAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "PoolId", location: .body(locationName: "poolId"), required: false, type: .string)
        ]
        /// The total number of addresses.
        public let totalAddressCount: Int32?
        /// A description of the address pool.
        public let description: String?
        /// The address ranges.
        public let poolAddressRanges: PublicIpv4PoolRangeSet?
        /// The total number of available addresses.
        public let totalAvailableAddressCount: Int32?
        /// The ID of the IPv4 address pool.
        public let poolId: String?

        public init(totalAddressCount: Int32? = nil, description: String? = nil, poolAddressRanges: PublicIpv4PoolRangeSet? = nil, totalAvailableAddressCount: Int32? = nil, poolId: String? = nil) {
            self.totalAddressCount = totalAddressCount
            self.description = description
            self.poolAddressRanges = poolAddressRanges
            self.totalAvailableAddressCount = totalAvailableAddressCount
            self.poolId = poolId
        }

        private enum CodingKeys: String, CodingKey {
            case totalAddressCount = "totalAddressCount"
            case description = "description"
            case poolAddressRanges = "poolAddressRangeSet"
            case totalAvailableAddressCount = "totalAvailableAddressCount"
            case poolId = "poolId"
        }
    }

    public struct DescribePublicIpv4PoolsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIpv4Pools", location: .body(locationName: "publicIpv4PoolSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the address pools.
        public let publicIpv4Pools: PublicIpv4PoolSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(publicIpv4Pools: PublicIpv4PoolSet? = nil, nextToken: String? = nil) {
            self.publicIpv4Pools = publicIpv4Pools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case publicIpv4Pools = "publicIpv4PoolSet"
            case nextToken = "nextToken"
        }
    }

    public struct DnsEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostedZoneId", location: .body(locationName: "hostedZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "DnsName", location: .body(locationName: "dnsName"), required: false, type: .string)
        ]
        /// The ID of the private hosted zone.
        public let hostedZoneId: String?
        /// The DNS name.
        public let dnsName: String?

        public init(hostedZoneId: String? = nil, dnsName: String? = nil) {
            self.hostedZoneId = hostedZoneId
            self.dnsName = dnsName
        }

        private enum CodingKeys: String, CodingKey {
            case hostedZoneId = "hostedZoneId"
            case dnsName = "dnsName"
        }
    }

    public struct SlotStartTimeRangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LatestTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EarliestTime", required: false, type: .timestamp)
        ]
        /// The latest date and time, in UTC, for the Scheduled Instance to start.
        public let latestTime: TimeStamp?
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: TimeStamp?

        public init(latestTime: TimeStamp? = nil, earliestTime: TimeStamp? = nil) {
            self.latestTime = latestTime
            self.earliestTime = earliestTime
        }

        private enum CodingKeys: String, CodingKey {
            case latestTime = "LatestTime"
            case earliestTime = "EarliestTime"
        }
    }

    public struct PurchaseHostReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalHourlyPrice", location: .body(locationName: "totalHourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "TotalUpfrontPrice", location: .body(locationName: "totalUpfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "Purchase", location: .body(locationName: "purchase"), required: false, type: .structure), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum)
        ]
        /// The total hourly price of the reservation calculated per hour.
        public let totalHourlyPrice: String?
        /// The total amount charged to your account when you purchase the reservation.
        public let totalUpfrontPrice: String?
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
        public let clientToken: String?
        /// Describes the details of the purchase.
        public let purchase: PurchaseSet?
        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?

        public init(totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil, clientToken: String? = nil, purchase: PurchaseSet? = nil, currencyCode: CurrencyCodeValues? = nil) {
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
            self.clientToken = clientToken
            self.purchase = purchase
            self.currencyCode = currencyCode
        }

        private enum CodingKeys: String, CodingKey {
            case totalHourlyPrice = "totalHourlyPrice"
            case totalUpfrontPrice = "totalUpfrontPrice"
            case clientToken = "clientToken"
            case purchase = "purchase"
            case currencyCode = "currencyCode"
        }
    }

    public struct CreateDefaultVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct CreateLaunchTemplateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplate", location: .body(locationName: "launchTemplate"), required: false, type: .structure)
        ]
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
        }
    }

    public enum ListingState: String, CustomStringConvertible, Codable {
        case available = "available"
        case sold = "sold"
        case cancelled = "cancelled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public enum SubnetCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        case failing = "failing"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct DescribeStaleSecurityGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The ID of the VPC.
        public let vpcId: String
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(nextToken: String? = nil, vpcId: String, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.nextToken = nextToken
            self.vpcId = vpcId
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case vpcId = "VpcId"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
        }
    }

    public struct AuthorizeSecurityGroupIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "ToPort", required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "FromPort", required: false, type: .integer), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpProtocol", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "IpPermissions", required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", required: false, type: .string)
        ]
        /// [EC2-Classic] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code number. For the ICMP/ICMPv6 code number, use -1 to specify all codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let toPort: Int32?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. For the ICMP/ICMPv6 type number, use -1 to specify all types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let fromPort: Int32?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). (VPC only) Use -1 to specify all protocols. If you specify -1, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6), traffic on all ports is allowed, regardless of any ports you specify. For tcp, udp, and icmp, you must specify a port range. For protocol 58 (ICMPv6), you can optionally specify a port range; if you don't, traffic for all types and codes is allowed.
        public let ipProtocol: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more sets of IP permissions. Can be used to specify multiple rules in a single command.
        public let ipPermissions: IpPermissionList?
        /// The CIDR IPv4 address range. You can't specify this parameter when specifying a source security group.
        public let cidrIp: String?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.
        public let sourceSecurityGroupName: String?

        public init(sourceSecurityGroupOwnerId: String? = nil, toPort: Int32? = nil, groupId: String? = nil, fromPort: Int32? = nil, groupName: String? = nil, ipProtocol: String? = nil, dryRun: Bool? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
            self.groupId = groupId
            self.fromPort = fromPort
            self.groupName = groupName
            self.ipProtocol = ipProtocol
            self.dryRun = dryRun
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case toPort = "ToPort"
            case groupId = "GroupId"
            case fromPort = "FromPort"
            case groupName = "GroupName"
            case ipProtocol = "IpProtocol"
            case dryRun = "dryRun"
            case ipPermissions = "IpPermissions"
            case cidrIp = "CidrIp"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
        }
    }

    public struct VpcPeeringConnectionOptionsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", location: .body(locationName: "allowEgressFromLocalVpcToRemoteClassicLink"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", location: .body(locationName: "allowDnsResolutionFromRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", location: .body(locationName: "allowEgressFromLocalClassicLinkToRemoteVpc"), required: false, type: .boolean)
        ]
        /// Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
        /// Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?

        public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil, allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil) {
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
        }

        private enum CodingKeys: String, CodingKey {
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
        }
    }

    public struct UnsuccessfulItemSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UnsuccessfulItem]?

        public init(item: [UnsuccessfulItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct TransitGatewayList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGateway]?

        public init(item: [TransitGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RequestSpotInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .structure)
        ]
        /// One or more Spot Instance requests.
        public let spotInstanceRequests: SpotInstanceRequestList?

        public init(spotInstanceRequests: SpotInstanceRequestList? = nil) {
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "TargetConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstanceIds", location: .body(locationName: "ReservedInstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        public let targetConfigurations: TargetConfigurationRequestSet?
        /// The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
        public let reservedInstanceIds: ReservedInstanceIdSet
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(targetConfigurations: TargetConfigurationRequestSet? = nil, reservedInstanceIds: ReservedInstanceIdSet, dryRun: Bool? = nil) {
            self.targetConfigurations = targetConfigurations
            self.reservedInstanceIds = reservedInstanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case targetConfigurations = "TargetConfiguration"
            case reservedInstanceIds = "ReservedInstanceId"
            case dryRun = "DryRun"
        }
    }

    public struct LaunchTemplateConfigList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateConfig]?

        public init(item: [LaunchTemplateConfig]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Propagation", location: .body(locationName: "propagation"), required: false, type: .structure)
        ]
        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation = "propagation"
        }
    }

    public struct Volume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .integer), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer)
        ]
        /// The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.
        public let kmsKeyId: String?
        /// The ID of the volume.
        public let volumeId: String?
        /// The snapshot from which the volume was created, if applicable.
        public let snapshotId: String?
        /// The size of the volume, in GiBs.
        public let size: Int32?
        /// Any tags assigned to the volume.
        public let tags: TagList?
        /// The time stamp when volume creation was initiated.
        public let createTime: TimeStamp?
        /// The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
        public let volumeType: VolumeType?
        /// The volume state.
        public let state: VolumeState?
        /// The Availability Zone for the volume.
        public let availabilityZone: String?
        /// Information about the volume attachments.
        public let attachments: VolumeAttachmentList?
        /// Indicates whether the volume will be encrypted.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports. For Provisioned IOPS SSD volumes, this represents the number of IOPS that are provisioned for the volume. For General Purpose SSD volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraints: Range is 100-10,000 IOPS for gp2 volumes and 100 to 64,000IOPS for io1 volumes in most regions. Maximum io1IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int32?

        public init(kmsKeyId: String? = nil, volumeId: String? = nil, snapshotId: String? = nil, size: Int32? = nil, tags: TagList? = nil, createTime: TimeStamp? = nil, volumeType: VolumeType? = nil, state: VolumeState? = nil, availabilityZone: String? = nil, attachments: VolumeAttachmentList? = nil, encrypted: Bool? = nil, iops: Int32? = nil) {
            self.kmsKeyId = kmsKeyId
            self.volumeId = volumeId
            self.snapshotId = snapshotId
            self.size = size
            self.tags = tags
            self.createTime = createTime
            self.volumeType = volumeType
            self.state = state
            self.availabilityZone = availabilityZone
            self.attachments = attachments
            self.encrypted = encrypted
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case volumeId = "volumeId"
            case snapshotId = "snapshotId"
            case size = "size"
            case tags = "tagSet"
            case createTime = "createTime"
            case volumeType = "volumeType"
            case state = "status"
            case availabilityZone = "availabilityZone"
            case attachments = "attachmentSet"
            case encrypted = "encrypted"
            case iops = "iops"
        }
    }

    public enum ListingStatus: String, CustomStringConvertible, Codable {
        case active = "active"
        case pending = "pending"
        case cancelled = "cancelled"
        case closed = "closed"
        public var description: String { return self.rawValue }
    }

    public struct TagDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]
        /// The resource type.
        public let resourceType: ResourceType?
        /// The ID of the resource.
        public let resourceId: String?
        /// The tag key.
        public let key: String?
        /// The tag value.
        public let value: String?

        public init(resourceType: ResourceType? = nil, resourceId: String? = nil, key: String? = nil, value: String? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case resourceId = "resourceId"
            case key = "key"
            case value = "value"
        }
    }

    public struct IamInstanceProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]
        /// The ID of the instance profile.
        public let id: String?
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?

        public init(id: String? = nil, arn: String? = nil) {
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case arn = "arn"
        }
    }

    public struct DescribeDhcpOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptions", location: .body(locationName: "dhcpOptionsSet"), required: false, type: .structure)
        ]
        /// Information about one or more DHCP options sets.
        public let dhcpOptions: DhcpOptionsList?

        public init(dhcpOptions: DhcpOptionsList? = nil) {
            self.dhcpOptions = dhcpOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptionsSet"
        }
    }

    public struct InstanceCreditSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceCreditSpecification]?

        public init(item: [InstanceCreditSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EgressOnlyInternetGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .structure), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string)
        ]
        /// Information about the attachment of the egress-only internet gateway.
        public let attachments: InternetGatewayAttachmentList?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?

        public init(attachments: InternetGatewayAttachmentList? = nil, egressOnlyInternetGatewayId: String? = nil) {
            self.attachments = attachments
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
        }
    }

    public struct HistoryRecord: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventInformation", location: .body(locationName: "eventInformation"), required: true, type: .structure), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: true, type: .enum), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: true, type: .timestamp)
        ]
        /// Information about the event.
        public let eventInformation: EventInformation
        /// The event type.    error - An error with the Spot Fleet request.    fleetRequestChange - A change in the status or configuration of the Spot Fleet request.    instanceChange - An instance was launched or terminated.    Information - An informational event.  
        public let eventType: EventType
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp

        public init(eventInformation: EventInformation, eventType: EventType, timestamp: TimeStamp) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation = "eventInformation"
            case eventType = "eventType"
            case timestamp = "timestamp"
        }
    }

    public struct ReservedInstancesModificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesModification]?

        public init(item: [ReservedInstancesModification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSnapshotsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshots", location: .body(locationName: "snapshotSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the snapshots.
        public let snapshots: SnapshotList?
        /// The NextToken value to include in a future DescribeSnapshots request. When the results of a DescribeSnapshots request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(snapshots: SnapshotList? = nil, nextToken: String? = nil) {
            self.snapshots = snapshots
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case snapshots = "snapshotSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeLaunchTemplateVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateVersions", location: .body(locationName: "launchTemplateVersionSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the launch template versions.
        public let launchTemplateVersions: LaunchTemplateVersionSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplateVersions: LaunchTemplateVersionSet? = nil, nextToken: String? = nil) {
            self.launchTemplateVersions = launchTemplateVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersions = "launchTemplateVersionSet"
            case nextToken = "nextToken"
        }
    }

    public struct MonitorInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct SecurityGroupStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroup", required: false, type: .list)
        ]
        public let securityGroup: [String]?

        public init(securityGroup: [String]? = nil) {
            self.securityGroup = securityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroup = "SecurityGroup"
        }
    }

    public struct ElasticGpuIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSpotPriceHistoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotPriceHistory", location: .body(locationName: "spotPriceHistorySet"), required: false, type: .structure)
        ]
        /// The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.
        public let nextToken: String?
        /// The historical Spot prices.
        public let spotPriceHistory: SpotPriceHistoryList?

        public init(nextToken: String? = nil, spotPriceHistory: SpotPriceHistoryList? = nil) {
            self.nextToken = nextToken
            self.spotPriceHistory = spotPriceHistory
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotPriceHistory = "spotPriceHistorySet"
        }
    }

    public struct DeleteVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the volume.
        public let volumeId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(volumeId: String, dryRun: Bool? = nil) {
            self.volumeId = volumeId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
            case dryRun = "dryRun"
        }
    }

    public struct ScheduledInstancesBlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VirtualName", required: false, type: .string), 
            AWSShapeMember(label: "Ebs", required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string)
        ]
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?
        /// Parameters used to set up EBS volumes automatically when the instance is launched.
        public let ebs: ScheduledInstancesEbs?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?

        public init(virtualName: String? = nil, ebs: ScheduledInstancesEbs? = nil, noDevice: String? = nil, deviceName: String? = nil) {
            self.virtualName = virtualName
            self.ebs = ebs
            self.noDevice = noDevice
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case virtualName = "VirtualName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case deviceName = "DeviceName"
        }
    }

    public struct VpnStaticRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: false, type: .enum)
        ]
        /// The CIDR block associated with the local subnet of the customer data center.
        public let destinationCidrBlock: String?
        /// The current state of the static route.
        public let state: VpnState?
        /// Indicates how the routes were provided.
        public let source: VpnStaticRouteSource?

        public init(destinationCidrBlock: String? = nil, state: VpnState? = nil, source: VpnStaticRouteSource? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.state = state
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case state = "state"
            case source = "source"
        }
    }

    public enum ReportStatusType: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        public var description: String { return self.rawValue }
    }

    public struct CpuOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", required: false, type: .integer)
        ]
        /// The number of CPU cores for the instance.
        public let coreCount: Int32?
        /// The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int32?

        public init(coreCount: Int32? = nil, threadsPerCore: Int32? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct LaunchPermissionModifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Add", required: false, type: .structure), 
            AWSShapeMember(label: "Remove", required: false, type: .structure)
        ]
        /// The AWS account ID to add to the list of launch permissions for the AMI.
        public let add: LaunchPermissionList?
        /// The AWS account ID to remove from the list of launch permissions for the AMI.
        public let remove: LaunchPermissionList?

        public init(add: LaunchPermissionList? = nil, remove: LaunchPermissionList? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct DescribeVpnGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGateways", location: .body(locationName: "vpnGatewaySet"), required: false, type: .structure)
        ]
        /// Information about one or more virtual private gateways.
        public let vpnGateways: VpnGatewayList?

        public init(vpnGateways: VpnGatewayList? = nil) {
            self.vpnGateways = vpnGateways
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateways = "vpnGatewaySet"
        }
    }

    public struct ServiceConfigurationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ServiceConfiguration]?

        public init(item: [ServiceConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeNetworkInterfacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceIds", location: .body(locationName: "NetworkInterfaceId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more filters.    addresses.private-ip-address - The private IPv4 addresses associated with the network interface.    addresses.primary - Whether the private IPv4 address is the primary IP address associated with the network interface.     addresses.association.public-ip - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).    addresses.association.owner-id - The owner ID of the addresses associated with the network interface.    association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    association.public-dns-name - The public DNS name for the network interface (IPv4).    attachment.attachment-id - The ID of the interface attachment.    attachment.attach.time - The time that the network interface was attached to an instance.    attachment.delete-on-termination - Indicates whether the attachment is deleted when an instance is terminated.    attachment.device-index - The device index to which the network interface is attached.    attachment.instance-id - The ID of the instance to which the network interface is attached.    attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    attachment.nat-gateway-id - The ID of the NAT gateway to which the network interface is attached.    attachment.status - The status of the attachment (attaching | attached | detaching | detached).    availability-zone - The Availability Zone of the network interface.    description - The description of the network interface.    group-id - The ID of a security group associated with the network interface.    group-name - The name of a security group associated with the network interface.    ipv6-addresses.ipv6-address - An IPv6 address associated with the network interface.    mac-address - The MAC address of the network interface.    network-interface-id - The ID of the network interface.    owner-id - The AWS account ID of the network interface owner.    private-ip-address - The private IPv4 address or addresses of the network interface.    private-dns-name - The private DNS name of the network interface (IPv4).    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    requester-managed - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).    source-desk-check - Indicates whether the network interface performs source/destination checking. A value of true means checking is enabled, and false means checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.     status - The status of the network interface. If the network interface is not attached to an instance, the status is available; if a network interface is attached to an instance the status is in-use.    subnet-id - The ID of the subnet for the network interface.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network interface.  
        public let filters: FilterList?
        /// One or more network interface IDs. Default: Describes all your network interfaces.
        public let networkInterfaceIds: NetworkInterfaceIdList?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, networkInterfaceIds: NetworkInterfaceIdList? = nil, maxResults: Int32? = nil, nextToken: String? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.networkInterfaceIds = networkInterfaceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filter"
            case networkInterfaceIds = "NetworkInterfaceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case dryRun = "dryRun"
        }
    }

    public struct VpcClassicLinkList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcClassicLink]?

        public init(item: [VpcClassicLink]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ConnectionNotificationState: String, CustomStringConvertible, Codable {
        case enabled = "Enabled"
        case disabled = "Disabled"
        public var description: String { return self.rawValue }
    }

    public enum OfferingTypeValues: String, CustomStringConvertible, Codable {
        case heavyUtilization = "Heavy Utilization"
        case mediumUtilization = "Medium Utilization"
        case lightUtilization = "Light Utilization"
        case noUpfront = "No Upfront"
        case partialUpfront = "Partial Upfront"
        case allUpfront = "All Upfront"
        public var description: String { return self.rawValue }
    }

    public enum StatusName: String, CustomStringConvertible, Codable {
        case reachability = "reachability"
        public var description: String { return self.rawValue }
    }

    public struct VpcIpv6CidrBlockAssociationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcIpv6CidrBlockAssociation]?

        public init(item: [VpcIpv6CidrBlockAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyInstanceCreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCreditSpecifications", location: .body(locationName: "InstanceCreditSpecification"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Information about the credit option for CPU usage.
        public let instanceCreditSpecifications: InstanceCreditSpecificationListRequest
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientToken: String? = nil, instanceCreditSpecifications: InstanceCreditSpecificationListRequest, dryRun: Bool? = nil) {
            self.clientToken = clientToken
            self.instanceCreditSpecifications = instanceCreditSpecifications
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case instanceCreditSpecifications = "InstanceCreditSpecification"
            case dryRun = "DryRun"
        }
    }

    public struct SpotFleetMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: false, type: .boolean)
        ]
        /// Enables monitoring for the instance. Default: false 
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct DescribeVpcAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "EnableDnsSupport", location: .body(locationName: "enableDnsSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "EnableDnsHostnames", location: .body(locationName: "enableDnsHostnames"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.
        public let enableDnsSupport: AttributeBooleanValue?
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.
        public let enableDnsHostnames: AttributeBooleanValue?

        public init(vpcId: String? = nil, enableDnsSupport: AttributeBooleanValue? = nil, enableDnsHostnames: AttributeBooleanValue? = nil) {
            self.vpcId = vpcId
            self.enableDnsSupport = enableDnsSupport
            self.enableDnsHostnames = enableDnsHostnames
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case enableDnsSupport = "enableDnsSupport"
            case enableDnsHostnames = "enableDnsHostnames"
        }
    }

    public struct VolumeStatusEventsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusEvent]?

        public init(item: [VolumeStatusEvent]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct OwnerStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .list)
        ]
        public let owner: [String]?

        public init(owner: [String]? = nil) {
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
        }
    }

    public struct VpcCidrBlockState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?
        /// The state of the CIDR block.
        public let state: VpcCidrBlockStateCode?

        public init(statusMessage: String? = nil, state: VpcCidrBlockStateCode? = nil) {
            self.statusMessage = statusMessage
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case statusMessage = "statusMessage"
            case state = "state"
        }
    }

    public struct AvailableInstanceCapacityList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceCapacity]?

        public init(item: [InstanceCapacity]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateTransitGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Blackhole", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether traffic matching this route is to be dropped.
        public let blackhole: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, blackhole: Bool? = nil, transitGatewayAttachmentId: String? = nil, destinationCidrBlock: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.blackhole = blackhole
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.destinationCidrBlock = destinationCidrBlock
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case blackhole = "Blackhole"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case destinationCidrBlock = "DestinationCidrBlock"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public enum NetworkInterfaceStatus: String, CustomStringConvertible, Codable {
        case available = "available"
        case associated = "associated"
        case attaching = "attaching"
        case inUse = "in-use"
        case detaching = "detaching"
        public var description: String { return self.rawValue }
    }

    public struct DeleteVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]
        /// The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
        public let key: String?
        /// The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct CreateSubnetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "CidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
        public let ipv6CidrBlock: String?
        /// The ID of the VPC.
        public let vpcId: String
        /// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.
        public let cidrBlock: String
        /// The AZ ID of the subnet.
        public let availabilityZoneId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Availability Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.
        public let availabilityZone: String?

        public init(ipv6CidrBlock: String? = nil, vpcId: String, cidrBlock: String, availabilityZoneId: String? = nil, dryRun: Bool? = nil, availabilityZone: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.vpcId = vpcId
            self.cidrBlock = cidrBlock
            self.availabilityZoneId = availabilityZoneId
            self.dryRun = dryRun
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case vpcId = "VpcId"
            case cidrBlock = "CidrBlock"
            case availabilityZoneId = "AvailabilityZoneId"
            case dryRun = "dryRun"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct CreateLaunchTemplateVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceVersion", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "VersionDescription", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateData", required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string)
        ]
        /// The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in LaunchTemplateData.
        public let sourceVersion: String?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the version of the launch template.
        public let versionDescription: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?

        public init(sourceVersion: String? = nil, clientToken: String? = nil, versionDescription: String? = nil, launchTemplateName: String? = nil, launchTemplateData: RequestLaunchTemplateData, dryRun: Bool? = nil, launchTemplateId: String? = nil) {
            self.sourceVersion = sourceVersion
            self.clientToken = clientToken
            self.versionDescription = versionDescription
            self.launchTemplateName = launchTemplateName
            self.launchTemplateData = launchTemplateData
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceVersion = "SourceVersion"
            case clientToken = "ClientToken"
            case versionDescription = "VersionDescription"
            case launchTemplateName = "LaunchTemplateName"
            case launchTemplateData = "LaunchTemplateData"
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
        }
    }

    public enum DeviceType: String, CustomStringConvertible, Codable {
        case ebs = "ebs"
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public struct ResetImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String
        /// The attribute to reset (currently you can only reset the launch permission attribute).
        public let attribute: ResetImageAttributeName

        public init(dryRun: Bool? = nil, imageId: String, attribute: ResetImageAttributeName) {
            self.dryRun = dryRun
            self.imageId = imageId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case imageId = "ImageId"
            case attribute = "Attribute"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExchangeId", location: .body(locationName: "exchangeId"), required: false, type: .string)
        ]
        /// The ID of the successful exchange.
        public let exchangeId: String?

        public init(exchangeId: String? = nil) {
            self.exchangeId = exchangeId
        }

        private enum CodingKeys: String, CodingKey {
            case exchangeId = "exchangeId"
        }
    }

    public enum BundleTaskState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case waitingForShutdown = "waiting-for-shutdown"
        case bundling = "bundling"
        case storing = "storing"
        case cancelling = "cancelling"
        case complete = "complete"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct FpgaImage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageGlobalId", location: .body(locationName: "fpgaImageGlobalId"), required: false, type: .string), 
            AWSShapeMember(label: "ShellVersion", location: .body(locationName: "shellVersion"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .structure), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PciId", location: .body(locationName: "pciId"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .structure), 
            AWSShapeMember(label: "Public", location: .body(locationName: "public"), required: false, type: .boolean)
        ]
        /// The product codes for the AFI.
        public let productCodes: ProductCodeList?
        /// The date and time the AFI was created.
        public let createTime: TimeStamp?
        /// The alias of the AFI owner. Possible values include self, amazon, and aws-marketplace.
        public let ownerAlias: String?
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The version of the AWS Shell that was used to create the bitstream.
        public let shellVersion: String?
        /// The description of the AFI.
        public let description: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?
        /// The name of the AFI.
        public let name: String?
        /// Information about the state of the AFI.
        public let state: FpgaImageState?
        /// The time of the most recent update to the AFI.
        public let updateTime: TimeStamp?
        /// Information about the PCI bus.
        public let pciId: PciId?
        /// The AWS account ID of the AFI owner.
        public let ownerId: String?
        /// Any tags assigned to the AFI.
        public let tags: TagList?
        /// Indicates whether the AFI is public.
        public let `public`: Bool?

        public init(productCodes: ProductCodeList? = nil, createTime: TimeStamp? = nil, ownerAlias: String? = nil, fpgaImageGlobalId: String? = nil, shellVersion: String? = nil, description: String? = nil, fpgaImageId: String? = nil, name: String? = nil, state: FpgaImageState? = nil, updateTime: TimeStamp? = nil, pciId: PciId? = nil, ownerId: String? = nil, tags: TagList? = nil, public: Bool? = nil) {
            self.productCodes = productCodes
            self.createTime = createTime
            self.ownerAlias = ownerAlias
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.shellVersion = shellVersion
            self.description = description
            self.fpgaImageId = fpgaImageId
            self.name = name
            self.state = state
            self.updateTime = updateTime
            self.pciId = pciId
            self.ownerId = ownerId
            self.tags = tags
            self.`public` = `public`
        }

        private enum CodingKeys: String, CodingKey {
            case productCodes = "productCodes"
            case createTime = "createTime"
            case ownerAlias = "ownerAlias"
            case fpgaImageGlobalId = "fpgaImageGlobalId"
            case shellVersion = "shellVersion"
            case description = "description"
            case fpgaImageId = "fpgaImageId"
            case name = "name"
            case state = "state"
            case updateTime = "updateTime"
            case pciId = "pciId"
            case ownerId = "ownerId"
            case tags = "tags"
            case `public` = "public"
        }
    }

    public struct ImportVolumeTaskDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "BytesConverted", location: .body(locationName: "bytesConverted"), required: false, type: .long), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: false, type: .structure)
        ]
        /// The volume.
        public let volume: DiskImageVolumeDescription?
        /// The description you provided when starting the import volume task.
        public let description: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// The Availability Zone where the resulting volume will reside.
        public let availabilityZone: String?
        /// The image.
        public let image: DiskImageDescription?

        public init(volume: DiskImageVolumeDescription? = nil, description: String? = nil, bytesConverted: Int64? = nil, availabilityZone: String? = nil, image: DiskImageDescription? = nil) {
            self.volume = volume
            self.description = description
            self.bytesConverted = bytesConverted
            self.availabilityZone = availabilityZone
            self.image = image
        }

        private enum CodingKeys: String, CodingKey {
            case volume = "volume"
            case description = "description"
            case bytesConverted = "bytesConverted"
            case availabilityZone = "availabilityZone"
            case image = "image"
        }
    }

    public struct CancelSpotInstanceRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotInstanceRequestIds", location: .body(locationName: "SpotInstanceRequestId"), required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more Spot Instance request IDs.
        public let spotInstanceRequestIds: SpotInstanceRequestIdList

        public init(dryRun: Bool? = nil, spotInstanceRequestIds: SpotInstanceRequestIdList) {
            self.dryRun = dryRun
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct ExportTaskIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskId", required: false, type: .list)
        ]
        public let exportTaskId: [String]?

        public init(exportTaskId: [String]? = nil) {
            self.exportTaskId = exportTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskId = "ExportTaskId"
        }
    }

    public struct UnsuccessfulItemError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: true, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: true, type: .string)
        ]
        /// The error code.
        public let code: String
        /// The error message accompanying the error code.
        public let message: String

        public init(code: String, message: String) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DescribeFleetInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "ActiveInstances", location: .body(locationName: "activeInstanceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The running instances. This list is refreshed periodically and might be out of date.
        public let activeInstances: ActiveInstanceSet?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(fleetId: String? = nil, activeInstances: ActiveInstanceSet? = nil, nextToken: String? = nil) {
            self.fleetId = fleetId
            self.activeInstances = activeInstances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "fleetId"
            case activeInstances = "activeInstanceSet"
            case nextToken = "nextToken"
        }
    }

    public struct TargetCapacitySpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultTargetCapacityType", required: false, type: .enum), 
            AWSShapeMember(label: "TotalTargetCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "OnDemandTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "SpotTargetCapacity", required: false, type: .integer)
        ]
        /// The default TotalTargetCapacity, which is either Spot or On-Demand.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of units to request, filled using DefaultTargetCapacityType.
        public let totalTargetCapacity: Int32
        /// The number of On-Demand units to request.
        public let onDemandTargetCapacity: Int32?
        /// The number of Spot units to request.
        public let spotTargetCapacity: Int32?

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, totalTargetCapacity: Int32, onDemandTargetCapacity: Int32? = nil, spotTargetCapacity: Int32? = nil) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.totalTargetCapacity = totalTargetCapacity
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType = "DefaultTargetCapacityType"
            case totalTargetCapacity = "TotalTargetCapacity"
            case onDemandTargetCapacity = "OnDemandTargetCapacity"
            case spotTargetCapacity = "SpotTargetCapacity"
        }
    }

    public struct ReservedInstancesListingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesListing]?

        public init(item: [ReservedInstancesListing]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LoadPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string)
        ]
        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct DeleteTransitGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String
        /// The CIDR range for the route. This must match the CIDR for the route exactly.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayRouteTableId: String, destinationCidrBlock: String, dryRun: Bool? = nil) {
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
        }
    }

    public enum ServiceState: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case available = "Available"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct FpgaImageState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The state. The following are the possible values:    pending - AFI bitstream generation is in progress.    available - The AFI is available for use.    failed - AFI bitstream generation failed.    unavailable - The AFI is no longer available for use.  
        public let code: FpgaImageStateCode?
        /// If the state is failed, this is the error message.
        public let message: String?

        public init(code: FpgaImageStateCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct LaunchTemplateTagSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceType", required: false, type: .enum)
        ]
        /// The tags to apply to the resource.
        public let tags: TagList?
        /// The type of resource to tag. Currently, the resource types that support tagging on creation are instance and volume. To tag a resource after it has been created, see CreateTags.
        public let resourceType: ResourceType?

        public init(tags: TagList? = nil, resourceType: ResourceType? = nil) {
            self.tags = tags
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case resourceType = "ResourceType"
        }
    }

    public struct ReplaceTransitGatewayRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Blackhole", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether traffic matching this route is to be dropped.
        public let blackhole: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The CIDR range used for the destination match. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, blackhole: Bool? = nil, transitGatewayAttachmentId: String? = nil, destinationCidrBlock: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.blackhole = blackhole
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.destinationCidrBlock = destinationCidrBlock
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case blackhole = "Blackhole"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case destinationCidrBlock = "DestinationCidrBlock"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public enum EventCode: String, CustomStringConvertible, Codable {
        case instanceReboot = "instance-reboot"
        case systemReboot = "system-reboot"
        case systemMaintenance = "system-maintenance"
        case instanceRetirement = "instance-retirement"
        case instanceStop = "instance-stop"
        public var description: String { return self.rawValue }
    }

    public struct VpcAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]
        /// The current state of the attachment.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case vpcId = "vpcId"
        }
    }

    public struct CustomerGatewayList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CustomerGateway]?

        public init(item: [CustomerGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AcceptVpcEndpointConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: true, type: .structure), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more interface VPC endpoints.
        public let vpcEndpointIds: ValueStringList
        /// The ID of the endpoint service.
        public let serviceId: String

        public init(dryRun: Bool? = nil, vpcEndpointIds: ValueStringList, serviceId: String) {
            self.dryRun = dryRun
            self.vpcEndpointIds = vpcEndpointIds
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpcEndpointIds = "VpcEndpointId"
            case serviceId = "ServiceId"
        }
    }

    public struct HostReservationIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TransitGatewayVpcAttachmentOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Support", location: .body(locationName: "ipv6Support"), required: false, type: .enum), 
            AWSShapeMember(label: "DnsSupport", location: .body(locationName: "dnsSupport"), required: false, type: .enum)
        ]
        /// Indicates whether IPv6 support is enabled.
        public let ipv6Support: Ipv6SupportValue?
        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?

        public init(ipv6Support: Ipv6SupportValue? = nil, dnsSupport: DnsSupportValue? = nil) {
            self.ipv6Support = ipv6Support
            self.dnsSupport = dnsSupport
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Support = "ipv6Support"
            case dnsSupport = "dnsSupport"
        }
    }

    public struct LoadPermissionModifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Add", required: false, type: .structure), 
            AWSShapeMember(label: "Remove", required: false, type: .structure)
        ]
        /// The load permissions to add.
        public let add: LoadPermissionListRequest?
        /// The load permissions to remove.
        public let remove: LoadPermissionListRequest?

        public init(add: LoadPermissionListRequest? = nil, remove: LoadPermissionListRequest? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct LaunchTemplateBlockDeviceMappingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateBlockDeviceMapping]?

        public init(item: [LaunchTemplateBlockDeviceMapping]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct Ipv6CidrBlock: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string)
        ]
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?

        public init(ipv6CidrBlock: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
        }
    }

    public enum RouteOrigin: String, CustomStringConvertible, Codable {
        case createroutetable = "CreateRouteTable"
        case createroute = "CreateRoute"
        case enablevgwroutepropagation = "EnableVgwRoutePropagation"
        public var description: String { return self.rawValue }
    }

    public struct InstanceStatusDetailsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStatusDetails]?

        public init(item: [InstanceStatusDetails]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ConnectionNotificationId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value.
        public let maxResults: Int32?
        /// One or more filters.    connection-notification-arn - The ARN of SNS topic for the notification.    connection-notification-id - The ID of the notification.    connection-notification-state - The state of the notification (Enabled | Disabled).    connection-notification-type - The type of notification (Topic).    service-id - The ID of the endpoint service.    vpc-endpoint-id - The ID of the VPC endpoint.  
        public let filters: FilterList?
        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, connectionNotificationId: String? = nil, nextToken: String? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.connectionNotificationId = connectionNotificationId
            self.nextToken = nextToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case connectionNotificationId = "ConnectionNotificationId"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeVpcEndpointsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcEndpoints", location: .body(locationName: "vpcEndpointSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the endpoints.
        public let vpcEndpoints: VpcEndpointSet?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(vpcEndpoints: VpcEndpointSet? = nil, nextToken: String? = nil) {
            self.vpcEndpoints = vpcEndpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case vpcEndpoints = "vpcEndpointSet"
            case nextToken = "nextToken"
        }
    }

    public struct LaunchTemplateSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplate]?

        public init(item: [LaunchTemplate]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SpotDatafeedSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Fault", location: .body(locationName: "fault"), required: false, type: .structure)
        ]
        /// The Amazon S3 bucket where the Spot Instance data feed is located.
        public let bucket: String?
        /// The prefix that is prepended to data feed files.
        public let prefix: String?
        /// The AWS account ID of the account.
        public let ownerId: String?
        /// The state of the Spot Instance data feed subscription.
        public let state: DatafeedSubscriptionState?
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?

        public init(bucket: String? = nil, prefix: String? = nil, ownerId: String? = nil, state: DatafeedSubscriptionState? = nil, fault: SpotInstanceStateFault? = nil) {
            self.bucket = bucket
            self.prefix = prefix
            self.ownerId = ownerId
            self.state = state
            self.fault = fault
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case prefix = "prefix"
            case ownerId = "ownerId"
            case state = "state"
            case fault = "fault"
        }
    }

    public struct DisassociateIamInstanceProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: true, type: .string)
        ]
        /// The ID of the IAM instance profile association.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
        }
    }

    public enum RuleAction: String, CustomStringConvertible, Codable {
        case allow = "allow"
        case deny = "deny"
        public var description: String { return self.rawValue }
    }

    public struct AvailabilityZoneMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The message about the Availability Zone.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
        }
    }

    public struct StaleSecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "StaleIpPermissionsEgress", location: .body(locationName: "staleIpPermissionsEgress"), required: false, type: .structure), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "StaleIpPermissions", location: .body(locationName: "staleIpPermissions"), required: false, type: .structure)
        ]
        /// The ID of the security group.
        public let groupId: String?
        /// The ID of the VPC for the security group.
        public let vpcId: String?
        /// Information about the stale outbound rules in the security group.
        public let staleIpPermissionsEgress: StaleIpPermissionSet?
        /// The name of the security group.
        public let groupName: String?
        /// The description of the security group.
        public let description: String?
        /// Information about the stale inbound rules in the security group.
        public let staleIpPermissions: StaleIpPermissionSet?

        public init(groupId: String? = nil, vpcId: String? = nil, staleIpPermissionsEgress: StaleIpPermissionSet? = nil, groupName: String? = nil, description: String? = nil, staleIpPermissions: StaleIpPermissionSet? = nil) {
            self.groupId = groupId
            self.vpcId = vpcId
            self.staleIpPermissionsEgress = staleIpPermissionsEgress
            self.groupName = groupName
            self.description = description
            self.staleIpPermissions = staleIpPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case vpcId = "vpcId"
            case staleIpPermissionsEgress = "staleIpPermissionsEgress"
            case groupName = "groupName"
            case description = "description"
            case staleIpPermissions = "staleIpPermissions"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociations", location: .body(locationName: "iamInstanceProfileAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more IAM instance profile associations.
        public let iamInstanceProfileAssociations: IamInstanceProfileAssociationSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(iamInstanceProfileAssociations: IamInstanceProfileAssociationSet? = nil, nextToken: String? = nil) {
            self.iamInstanceProfileAssociations = iamInstanceProfileAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociations = "iamInstanceProfileAssociationSet"
            case nextToken = "nextToken"
        }
    }

    public struct FleetLaunchTemplateOverridesListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FleetLaunchTemplateOverridesRequest]?

        public init(item: [FleetLaunchTemplateOverridesRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UnmonitorInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct LaunchTemplateInstanceMarketOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "MarketType", required: false, type: .enum)
        ]
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptionsRequest?
        /// The market type.
        public let marketType: MarketType?

        public init(spotOptions: LaunchTemplateSpotMarketOptionsRequest? = nil, marketType: MarketType? = nil) {
            self.spotOptions = spotOptions
            self.marketType = marketType
        }

        private enum CodingKeys: String, CodingKey {
            case spotOptions = "SpotOptions"
            case marketType = "MarketType"
        }
    }

    public struct DeleteLaunchTemplateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplate", location: .body(locationName: "launchTemplate"), required: false, type: .structure)
        ]
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItemError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The error code.
        public let code: UnsuccessfulInstanceCreditSpecificationErrorCode?
        /// The applicable error message.
        public let message: String?

        public init(code: UnsuccessfulInstanceCreditSpecificationErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct HostList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Host]?

        public init(item: [Host]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ResetFpgaImageAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public enum AllocationState: String, CustomStringConvertible, Codable {
        case available = "available"
        case underAssessment = "under-assessment"
        case permanentFailure = "permanent-failure"
        case released = "released"
        case releasedPermanentFailure = "released-permanent-failure"
        public var description: String { return self.rawValue }
    }

    public struct TransitGatewayRouteAttachmentList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayRouteAttachment]?

        public init(item: [TransitGatewayRouteAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum MarketType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        public var description: String { return self.rawValue }
    }

    public struct DeleteSpotDatafeedSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct CreateLaunchTemplateVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateVersion", location: .body(locationName: "launchTemplateVersion"), required: false, type: .structure)
        ]
        /// Information about the launch template version.
        public let launchTemplateVersion: LaunchTemplateVersion?

        public init(launchTemplateVersion: LaunchTemplateVersion? = nil) {
            self.launchTemplateVersion = launchTemplateVersion
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersion = "launchTemplateVersion"
        }
    }

    public struct CreateDhcpOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptions", location: .body(locationName: "dhcpOptions"), required: false, type: .structure)
        ]
        /// A set of DHCP options.
        public let dhcpOptions: DhcpOptions?

        public init(dhcpOptions: DhcpOptions? = nil) {
            self.dhcpOptions = dhcpOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptions"
        }
    }

    public struct DescribeFleetError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "ErrorCode", location: .body(locationName: "errorCode"), required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", location: .body(locationName: "errorMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum)
        ]
        /// The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see ee Error Codes.
        public let errorMessage: String?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, errorCode: String? = nil, errorMessage: String? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
            case lifecycle = "lifecycle"
        }
    }

    public struct GetPasswordDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the Windows instance.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case passed = "passed"
        case failed = "failed"
        case insufficientData = "insufficient-data"
        case initializing = "initializing"
        public var description: String { return self.rawValue }
    }

    public enum VpcState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public struct DescribeNetworkInterfacePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfacePermissionIds", location: .body(locationName: "NetworkInterfacePermissionId"), required: false, type: .list)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. If this parameter is not specified, up to 50 results are returned by default.
        public let maxResults: Int32?
        /// One or more filters.    network-interface-permission.network-interface-permission-id - The ID of the permission.    network-interface-permission.network-interface-id - The ID of the network interface.    network-interface-permission.aws-account-id - The AWS account ID.    network-interface-permission.aws-service - The AWS service.    network-interface-permission.permission - The type of permission (INSTANCE-ATTACH | EIP-ASSOCIATE).  
        public let filters: FilterList?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// One or more network interface permission IDs.
        public let networkInterfacePermissionIds: [String]?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, networkInterfacePermissionIds: [String]? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.networkInterfacePermissionIds = networkInterfacePermissionIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case networkInterfacePermissionIds = "NetworkInterfacePermissionId"
        }
    }

    public struct VgwTelemetryList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VgwTelemetry]?

        public init(item: [VgwTelemetry]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceNetworkInterfaceSpecification", required: false, type: .list)
        ]
        public let instanceNetworkInterfaceSpecification: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]?

        public init(instanceNetworkInterfaceSpecification: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]? = nil) {
            self.instanceNetworkInterfaceSpecification = instanceNetworkInterfaceSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNetworkInterfaceSpecification = "InstanceNetworkInterfaceSpecification"
        }
    }

    public struct DeleteSubnetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetId", required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet.
        public let subnetId: String

        public init(dryRun: Bool? = nil, subnetId: String) {
            self.dryRun = dryRun
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case subnetId = "SubnetId"
        }
    }

    public struct VpcIpv6CidrBlockAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlockState", location: .body(locationName: "ipv6CidrBlockState"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: VpcCidrBlockState?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// The association ID for the IPv6 CIDR block.
        public let associationId: String?

        public init(ipv6CidrBlockState: VpcCidrBlockState? = nil, ipv6CidrBlock: String? = nil, associationId: String? = nil) {
            self.ipv6CidrBlockState = ipv6CidrBlockState
            self.ipv6CidrBlock = ipv6CidrBlock
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockState = "ipv6CidrBlockState"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case associationId = "associationId"
        }
    }

    public struct NewDhcpConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "Value"), required: false, type: .structure)
        ]
        public let key: String?
        public let values: ValueStringList?

        public init(key: String? = nil, values: ValueStringList? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "Value"
        }
    }

    public struct CancelImportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelReason", required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The reason for canceling the task.
        public let cancelReason: String?
        /// The ID of the import image or import snapshot task to be canceled.
        public let importTaskId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cancelReason: String? = nil, importTaskId: String? = nil, dryRun: Bool? = nil) {
            self.cancelReason = cancelReason
            self.importTaskId = importTaskId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cancelReason = "CancelReason"
            case importTaskId = "ImportTaskId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeCapacityReservationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "CapacityReservationIds", location: .body(locationName: "CapacityReservationId"), required: false, type: .structure)
        ]
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.
        public let maxResults: Int32?
        /// One or more filters.
        public let filters: FilterList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Capacity Reservation.
        public let capacityReservationIds: CapacityReservationIdSet?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil, capacityReservationIds: CapacityReservationIdSet? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.capacityReservationIds = capacityReservationIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case capacityReservationIds = "CapacityReservationId"
        }
    }

    public struct DescribeLaunchTemplatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "LaunchTemplateNames", location: .body(locationName: "LaunchTemplateName"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateIds", location: .body(locationName: "LaunchTemplateId"), required: false, type: .structure)
        ]
        /// The token to request the next page of results.
        public let nextToken: String?
        /// One or more filters.    create-time - The time the launch template was created.    launch-template-name - The name of the launch template.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: FilterList?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int32?
        /// One or more launch template names.
        public let launchTemplateNames: LaunchTemplateNameStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more launch template IDs.
        public let launchTemplateIds: ValueStringList?

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, launchTemplateNames: LaunchTemplateNameStringList? = nil, dryRun: Bool? = nil, launchTemplateIds: ValueStringList? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.launchTemplateNames = launchTemplateNames
            self.dryRun = dryRun
            self.launchTemplateIds = launchTemplateIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case launchTemplateNames = "LaunchTemplateName"
            case dryRun = "DryRun"
            case launchTemplateIds = "LaunchTemplateId"
        }
    }

    public struct DescribePrincipalIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "Resource"), required: false, type: .structure)
        ]
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. 
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
        public let resources: ResourceList?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil, resources: ResourceList? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
            case resources = "Resource"
        }
    }

    public enum VpnState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct ImportVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: true, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: true, type: .structure)
        ]
        /// The volume size.
        public let volume: VolumeDetail
        /// A description of the volume.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Availability Zone for the resulting EBS volume.
        public let availabilityZone: String
        /// The disk image.
        public let image: DiskImageDetail

        public init(volume: VolumeDetail, description: String? = nil, dryRun: Bool? = nil, availabilityZone: String, image: DiskImageDetail) {
            self.volume = volume
            self.description = description
            self.dryRun = dryRun
            self.availabilityZone = availabilityZone
            self.image = image
        }

        private enum CodingKeys: String, CodingKey {
            case volume = "volume"
            case description = "description"
            case dryRun = "dryRun"
            case availabilityZone = "availabilityZone"
            case image = "image"
        }
    }

    public struct DisassociateRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The association ID representing the current association between the route table and subnet.
        public let associationId: String

        public init(dryRun: Bool? = nil, associationId: String) {
            self.dryRun = dryRun
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case associationId = "associationId"
        }
    }

    public struct ScheduledInstancesMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Indicates whether monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct NetworkInterfaceIpv6Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", location: .body(locationName: "ipv6Address"), required: false, type: .string)
        ]
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
        }
    }

    public struct RouteTableAssociationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [RouteTableAssociation]?

        public init(item: [RouteTableAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSpotFleetRequestsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestConfigs", location: .body(locationName: "spotFleetRequestConfigSet"), required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the configuration of your Spot Fleet.
        public let spotFleetRequestConfigs: SpotFleetRequestConfigSet
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(spotFleetRequestConfigs: SpotFleetRequestConfigSet, nextToken: String? = nil) {
            self.spotFleetRequestConfigs = spotFleetRequestConfigs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestConfigs = "spotFleetRequestConfigSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeFleetInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// One or more filters.    instance-type - The instance type.  
        public let filters: FilterList?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, fleetId: String, dryRun: Bool? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.fleetId = fleetId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case fleetId = "FleetId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeFlowLogsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowLogs", location: .body(locationName: "flowLogSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the flow logs.
        public let flowLogs: FlowLogSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(flowLogs: FlowLogSet? = nil, nextToken: String? = nil) {
            self.flowLogs = flowLogs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogs = "flowLogSet"
            case nextToken = "nextToken"
        }
    }

    public struct ModifyVpcAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableDnsSupport", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "EnableDnsHostnames", required: false, type: .structure)
        ]
        /// Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.
        public let enableDnsSupport: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.
        public let enableDnsHostnames: AttributeBooleanValue?

        public init(enableDnsSupport: AttributeBooleanValue? = nil, vpcId: String, enableDnsHostnames: AttributeBooleanValue? = nil) {
            self.enableDnsSupport = enableDnsSupport
            self.vpcId = vpcId
            self.enableDnsHostnames = enableDnsHostnames
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsSupport = "EnableDnsSupport"
            case vpcId = "vpcId"
            case enableDnsHostnames = "EnableDnsHostnames"
        }
    }

    public struct ExportToS3Task: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Key", location: .body(locationName: "s3Key"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageFormat", location: .body(locationName: "diskImageFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "ContainerFormat", location: .body(locationName: "containerFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string)
        ]
        /// The encryption key for your S3 bucket.
        public let s3Key: String?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?

        public init(s3Key: String? = nil, diskImageFormat: DiskImageFormat? = nil, containerFormat: ContainerFormat? = nil, s3Bucket: String? = nil) {
            self.s3Key = s3Key
            self.diskImageFormat = diskImageFormat
            self.containerFormat = containerFormat
            self.s3Bucket = s3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case s3Key = "s3Key"
            case diskImageFormat = "diskImageFormat"
            case containerFormat = "containerFormat"
            case s3Bucket = "s3Bucket"
        }
    }

    public struct RevokeSecurityGroupIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "ToPort", required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "FromPort", required: false, type: .integer), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpProtocol", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "IpPermissions", required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", required: false, type: .string)
        ]
        /// [EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type.
        public let toPort: Int32?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all ICMP types.
        public let fromPort: Int32?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). Use -1 to specify all.
        public let ipProtocol: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
        public let ipPermissions: IpPermissionList?
        /// The CIDR IP address range. You can't specify this parameter when specifying a source security group.
        public let cidrIp: String?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupName: String?

        public init(sourceSecurityGroupOwnerId: String? = nil, toPort: Int32? = nil, groupId: String? = nil, fromPort: Int32? = nil, groupName: String? = nil, ipProtocol: String? = nil, dryRun: Bool? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
            self.groupId = groupId
            self.fromPort = fromPort
            self.groupName = groupName
            self.ipProtocol = ipProtocol
            self.dryRun = dryRun
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case toPort = "ToPort"
            case groupId = "GroupId"
            case fromPort = "FromPort"
            case groupName = "GroupName"
            case ipProtocol = "IpProtocol"
            case dryRun = "dryRun"
            case ipPermissions = "IpPermissions"
            case cidrIp = "CidrIp"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
        }
    }

    public enum ReservedInstanceState: String, CustomStringConvertible, Codable {
        case paymentPending = "payment-pending"
        case active = "active"
        case paymentFailed = "payment-failed"
        case retired = "retired"
        public var description: String { return self.rawValue }
    }

    public struct ModifyIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UseLongIds", required: true, type: .boolean), 
            AWSShapeMember(label: "Resource", required: true, type: .string)
        ]
        /// Indicate whether the resource should use longer IDs (17-character IDs).
        public let useLongIds: Bool
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String

        public init(useLongIds: Bool, resource: String) {
            self.useLongIds = useLongIds
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case useLongIds = "UseLongIds"
            case resource = "Resource"
        }
    }

    public struct CancelConversionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReasonMessage", location: .body(locationName: "reasonMessage"), required: false, type: .string), 
            AWSShapeMember(label: "ConversionTaskId", location: .body(locationName: "conversionTaskId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The reason for canceling the conversion task.
        public let reasonMessage: String?
        /// The ID of the conversion task.
        public let conversionTaskId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(reasonMessage: String? = nil, conversionTaskId: String, dryRun: Bool? = nil) {
            self.reasonMessage = reasonMessage
            self.conversionTaskId = conversionTaskId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case reasonMessage = "reasonMessage"
            case conversionTaskId = "conversionTaskId"
            case dryRun = "dryRun"
        }
    }

    public struct AccountAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValues", location: .body(locationName: "attributeValueSet"), required: false, type: .structure), 
            AWSShapeMember(label: "AttributeName", location: .body(locationName: "attributeName"), required: false, type: .string)
        ]
        /// One or more values for the account attribute.
        public let attributeValues: AccountAttributeValueList?
        /// The name of the account attribute.
        public let attributeName: String?

        public init(attributeValues: AccountAttributeValueList? = nil, attributeName: String? = nil) {
            self.attributeValues = attributeValues
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValues = "attributeValueSet"
            case attributeName = "attributeName"
        }
    }

    public struct EgressOnlyInternetGatewayList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [EgressOnlyInternetGateway]?

        public init(item: [EgressOnlyInternetGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ElasticGpuSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .string)
        ]
        /// The type of Elastic Graphics accelerator.
        public let `type`: String

        public init(type: String) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct HostOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string)
        ]
        /// The available payment option.
        public let paymentOption: PaymentOption?
        /// The ID of the offering.
        public let offeringId: String?
        /// The currency of the offering.
        public let currencyCode: CurrencyCodeValues?
        /// The instance family of the offering.
        public let instanceFamily: String?
        /// The duration of the offering (in seconds).
        public let duration: Int32?
        /// The hourly price of the offering.
        public let hourlyPrice: String?
        /// The upfront price of the offering. Does not apply to No Upfront offerings.
        public let upfrontPrice: String?

        public init(paymentOption: PaymentOption? = nil, offeringId: String? = nil, currencyCode: CurrencyCodeValues? = nil, instanceFamily: String? = nil, duration: Int32? = nil, hourlyPrice: String? = nil, upfrontPrice: String? = nil) {
            self.paymentOption = paymentOption
            self.offeringId = offeringId
            self.currencyCode = currencyCode
            self.instanceFamily = instanceFamily
            self.duration = duration
            self.hourlyPrice = hourlyPrice
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case paymentOption = "paymentOption"
            case offeringId = "offeringId"
            case currencyCode = "currencyCode"
            case instanceFamily = "instanceFamily"
            case duration = "duration"
            case hourlyPrice = "hourlyPrice"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public struct VolumeStatusDetailsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusDetails]?

        public init(item: [VolumeStatusDetails]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeRouteTablesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "RouteTableId"), required: false, type: .structure)
        ]
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more filters.    association.route-table-association-id - The ID of an association ID for the route table.    association.route-table-id - The ID of the route table involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    association.main - Indicates whether the route table is the main route table for the VPC (true | false). Route tables that do not have an association ID are not returned in the response.    owner-id - The ID of the AWS account that owns the route table.    route-table-id - The ID of the route table.    route.destination-cidr-block - The IPv4 CIDR range specified in a route in the table.    route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in a route in the route table.    route.destination-prefix-list-id - The ID (prefix) of the AWS service specified in a route in the table.    route.egress-only-internet-gateway-id - The ID of an egress-only Internet gateway specified in a route in the route table.    route.gateway-id - The ID of a gateway specified in a route in the table.    route.instance-id - The ID of an instance specified in a route in the table.    route.nat-gateway-id - The ID of a NAT gateway.    route.transit-gateway-id - The ID of a transit gateway.    route.origin - Describes how the route was created. CreateRouteTable indicates that the route was automatically created when the route table was created; CreateRoute indicates that the route was manually added to the route table; EnableVgwRoutePropagation indicates that the route was propagated by route propagation.    route.state - The state of a route in the route table (active | blackhole). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).    route.vpc-peering-connection-id - The ID of a VPC peering connection specified in a route in the table.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    transit-gateway-id - The ID of a transit gateway.    vpc-id - The ID of the VPC for the route table.  
        public let filters: FilterList?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 100.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more route table IDs. Default: Describes all your route tables.
        public let routeTableIds: ValueStringList?

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil, routeTableIds: ValueStringList? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.routeTableIds = routeTableIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case dryRun = "dryRun"
            case routeTableIds = "RouteTableId"
        }
    }

    public struct InstanceNetworkInterfaceAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "IpOwnerId", location: .body(locationName: "ipOwnerId"), required: false, type: .string)
        ]
        /// The public DNS name.
        public let publicDnsName: String?
        /// The public IP address or Elastic IP address bound to the network interface.
        public let publicIp: String?
        /// The ID of the owner of the Elastic IP address.
        public let ipOwnerId: String?

        public init(publicDnsName: String? = nil, publicIp: String? = nil, ipOwnerId: String? = nil) {
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
            self.ipOwnerId = ipOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case publicDnsName = "publicDnsName"
            case publicIp = "publicIp"
            case ipOwnerId = "ipOwnerId"
        }
    }

    public struct DescribeTransitGatewayRouteTablesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTables", location: .body(locationName: "transitGatewayRouteTables"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the transit gateway route tables.
        public let transitGatewayRouteTables: TransitGatewayRouteTableList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(transitGatewayRouteTables: TransitGatewayRouteTableList? = nil, nextToken: String? = nil) {
            self.transitGatewayRouteTables = transitGatewayRouteTables
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTables = "transitGatewayRouteTables"
            case nextToken = "nextToken"
        }
    }

    public struct InstanceCreditSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "CpuCredits", location: .body(locationName: "cpuCredits"), required: false, type: .string)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// The credit option for CPU usage of the instance. Valid values are standard and unlimited.
        public let cpuCredits: String?

        public init(instanceId: String? = nil, cpuCredits: String? = nil) {
            self.instanceId = instanceId
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case cpuCredits = "cpuCredits"
        }
    }

    public struct DescribeFleetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fleets", location: .body(locationName: "fleetSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the EC2 Fleets.
        public let fleets: FleetSet?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(fleets: FleetSet? = nil, nextToken: String? = nil) {
            self.fleets = fleets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleets = "fleetSet"
            case nextToken = "nextToken"
        }
    }

    public struct ModifyFleetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DescribeReservedInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "ReservedInstancesId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "OfferingClass", required: false, type: .enum)
        ]
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (one year or three years), in seconds (31536000 | 94608000).    end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    scope - The scope of the Reserved Instance (Region or Availability Zone).    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web | Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC)).    reserved-instances-id - The ID of the Reserved Instance.    start - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).    state - The state of the Reserved Instance (payment-pending | active | payment-failed | retired).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
        public let filters: FilterList?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified.
        public let reservedInstancesIds: ReservedInstancesIdStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Describes whether the Reserved Instance is Standard or Convertible.
        public let offeringClass: OfferingClassType?

        public init(filters: FilterList? = nil, offeringType: OfferingTypeValues? = nil, reservedInstancesIds: ReservedInstancesIdStringList? = nil, dryRun: Bool? = nil, offeringClass: OfferingClassType? = nil) {
            self.filters = filters
            self.offeringType = offeringType
            self.reservedInstancesIds = reservedInstancesIds
            self.dryRun = dryRun
            self.offeringClass = offeringClass
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case offeringType = "offeringType"
            case reservedInstancesIds = "ReservedInstancesId"
            case dryRun = "dryRun"
            case offeringClass = "OfferingClass"
        }
    }

    public struct ScheduledInstanceAvailabilitySet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ScheduledInstanceAvailability]?

        public init(item: [ScheduledInstanceAvailability]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseErrorSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DeleteLaunchTemplateVersionsResponseErrorItem]?

        public init(item: [DeleteLaunchTemplateVersionsResponseErrorItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CapacityReservationTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", required: false, type: .string)
        ]
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?

        public init(capacityReservationId: String? = nil) {
            self.capacityReservationId = capacityReservationId
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfile", required: true, type: .structure), 
            AWSShapeMember(label: "AssociationId", required: true, type: .string)
        ]
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification
        /// The ID of the existing IAM instance profile association.
        public let associationId: String

        public init(iamInstanceProfile: IamInstanceProfileSpecification, associationId: String) {
            self.iamInstanceProfile = iamInstanceProfile
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfile = "IamInstanceProfile"
            case associationId = "AssociationId"
        }
    }

    public struct HostReservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .timestamp), 
            AWSShapeMember(label: "HostIdSet", location: .body(locationName: "hostIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer)
        ]
        /// The currency in which the upfrontPrice and hourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
        public let instanceFamily: String?
        /// The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
        public let offeringId: String?
        /// The hourly price of the reservation.
        public let hourlyPrice: String?
        /// The date and time that the reservation ends.
        public let end: TimeStamp?
        /// The date and time that the reservation started.
        public let start: TimeStamp?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        public let hostIdSet: ResponseHostIdSet?
        /// The state of the reservation.
        public let state: ReservationState?
        /// The length of the reservation's term, specified in seconds. Can be 31536000 (1 year) | 94608000 (3 years).
        public let duration: Int32?
        /// The payment option selected for this reservation.
        public let paymentOption: PaymentOption?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?
        /// The ID of the reservation that specifies the associated Dedicated Hosts.
        public let hostReservationId: String?
        /// The number of Dedicated Hosts the reservation is associated with.
        public let count: Int32?

        public init(currencyCode: CurrencyCodeValues? = nil, instanceFamily: String? = nil, offeringId: String? = nil, hourlyPrice: String? = nil, end: TimeStamp? = nil, start: TimeStamp? = nil, hostIdSet: ResponseHostIdSet? = nil, state: ReservationState? = nil, duration: Int32? = nil, paymentOption: PaymentOption? = nil, upfrontPrice: String? = nil, hostReservationId: String? = nil, count: Int32? = nil) {
            self.currencyCode = currencyCode
            self.instanceFamily = instanceFamily
            self.offeringId = offeringId
            self.hourlyPrice = hourlyPrice
            self.end = end
            self.start = start
            self.hostIdSet = hostIdSet
            self.state = state
            self.duration = duration
            self.paymentOption = paymentOption
            self.upfrontPrice = upfrontPrice
            self.hostReservationId = hostReservationId
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case instanceFamily = "instanceFamily"
            case offeringId = "offeringId"
            case hourlyPrice = "hourlyPrice"
            case end = "end"
            case start = "start"
            case hostIdSet = "hostIdSet"
            case state = "state"
            case duration = "duration"
            case paymentOption = "paymentOption"
            case upfrontPrice = "upfrontPrice"
            case hostReservationId = "hostReservationId"
            case count = "count"
        }
    }

    public struct CreateImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NoReboot", location: .body(locationName: "noReboot"), required: false, type: .boolean)
        ]
        /// A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String
        /// The ID of the instance.
        public let instanceId: String
        /// Information about one or more block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the CopyImage action.
        public let blockDeviceMappings: BlockDeviceMappingRequestList?
        /// A description for the new image.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.
        public let noReboot: Bool?

        public init(name: String, instanceId: String, blockDeviceMappings: BlockDeviceMappingRequestList? = nil, description: String? = nil, dryRun: Bool? = nil, noReboot: Bool? = nil) {
            self.name = name
            self.instanceId = instanceId
            self.blockDeviceMappings = blockDeviceMappings
            self.description = description
            self.dryRun = dryRun
            self.noReboot = noReboot
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case instanceId = "instanceId"
            case blockDeviceMappings = "blockDeviceMapping"
            case description = "description"
            case dryRun = "dryRun"
            case noReboot = "noReboot"
        }
    }

    public struct PrefixList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixListName", location: .body(locationName: "prefixListName"), required: false, type: .string), 
            AWSShapeMember(label: "Cidrs", location: .body(locationName: "cidrSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string)
        ]
        /// The name of the prefix.
        public let prefixListName: String?
        /// The IP address range of the AWS service.
        public let cidrs: ValueStringList?
        /// The ID of the prefix.
        public let prefixListId: String?

        public init(prefixListName: String? = nil, cidrs: ValueStringList? = nil, prefixListId: String? = nil) {
            self.prefixListName = prefixListName
            self.cidrs = cidrs
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case prefixListName = "prefixListName"
            case cidrs = "cidrSet"
            case prefixListId = "prefixListId"
        }
    }

    public struct VpcCidrBlockAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlockState", location: .body(locationName: "cidrBlockState"), required: false, type: .structure), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// Information about the state of the CIDR block.
        public let cidrBlockState: VpcCidrBlockState?
        /// The IPv4 CIDR block.
        public let cidrBlock: String?
        /// The association ID for the IPv4 CIDR block.
        public let associationId: String?

        public init(cidrBlockState: VpcCidrBlockState? = nil, cidrBlock: String? = nil, associationId: String? = nil) {
            self.cidrBlockState = cidrBlockState
            self.cidrBlock = cidrBlock
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlockState = "cidrBlockState"
            case cidrBlock = "cidrBlock"
            case associationId = "associationId"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcIds", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// One or more VPC IDs.
        public let vpcIds: VpcClassicLinkIdList?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?

        public init(vpcIds: VpcClassicLinkIdList? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.vpcIds = vpcIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case vpcIds = "VpcIds"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "groupDescription"), required: false, type: .string), 
            AWSShapeMember(label: "IpPermissionsEgress", location: .body(locationName: "ipPermissionsEgress"), required: false, type: .structure)
        ]
        /// [EC2-VPC] The ID of the VPC for the security group.
        public let vpcId: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?
        /// Any tags assigned to the security group.
        public let tags: TagList?
        /// The AWS account ID of the owner of the security group.
        public let ownerId: String?
        /// One or more inbound rules associated with the security group.
        public let ipPermissions: IpPermissionList?
        /// A description of the security group.
        public let description: String?
        /// [EC2-VPC] One or more outbound rules associated with the security group.
        public let ipPermissionsEgress: IpPermissionList?

        public init(vpcId: String? = nil, groupId: String? = nil, groupName: String? = nil, tags: TagList? = nil, ownerId: String? = nil, ipPermissions: IpPermissionList? = nil, description: String? = nil, ipPermissionsEgress: IpPermissionList? = nil) {
            self.vpcId = vpcId
            self.groupId = groupId
            self.groupName = groupName
            self.tags = tags
            self.ownerId = ownerId
            self.ipPermissions = ipPermissions
            self.description = description
            self.ipPermissionsEgress = ipPermissionsEgress
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case groupId = "groupId"
            case groupName = "groupName"
            case tags = "tagSet"
            case ownerId = "ownerId"
            case ipPermissions = "ipPermissions"
            case description = "groupDescription"
            case ipPermissionsEgress = "ipPermissionsEgress"
        }
    }

    public enum ArchitectureValues: String, CustomStringConvertible, Codable {
        case i386 = "i386"
        case x8664 = "x86_64"
        case arm64 = "arm64"
        public var description: String { return self.rawValue }
    }

    public struct AssociateTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayAttachmentId: String, transitGatewayRouteTableId: String, dryRun: Bool? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
            case dryRun = "DryRun"
        }
    }

    public struct Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceOwnerId", location: .body(locationName: "networkInterfaceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicIpv4Pool", location: .body(locationName: "publicIpv4Pool"), required: false, type: .string)
        ]
        /// The ID representing the association of the address with an instance in a VPC.
        public let associationId: String?
        /// The ID representing the allocation of the address for use with EC2-VPC.
        public let allocationId: String?
        /// The ID of the instance that the address is associated with (if any).
        public let instanceId: String?
        /// Any tags assigned to the Elastic IP address.
        public let tags: TagList?
        /// The private IP address associated with the Elastic IP address.
        public let privateIpAddress: String?
        /// The ID of the AWS account that owns the network interface.
        public let networkInterfaceOwnerId: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
        public let domain: DomainType?
        /// The ID of an address pool.
        public let publicIpv4Pool: String?

        public init(associationId: String? = nil, allocationId: String? = nil, instanceId: String? = nil, tags: TagList? = nil, privateIpAddress: String? = nil, networkInterfaceOwnerId: String? = nil, publicIp: String? = nil, networkInterfaceId: String? = nil, domain: DomainType? = nil, publicIpv4Pool: String? = nil) {
            self.associationId = associationId
            self.allocationId = allocationId
            self.instanceId = instanceId
            self.tags = tags
            self.privateIpAddress = privateIpAddress
            self.networkInterfaceOwnerId = networkInterfaceOwnerId
            self.publicIp = publicIp
            self.networkInterfaceId = networkInterfaceId
            self.domain = domain
            self.publicIpv4Pool = publicIpv4Pool
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case allocationId = "allocationId"
            case instanceId = "instanceId"
            case tags = "tagSet"
            case privateIpAddress = "privateIpAddress"
            case networkInterfaceOwnerId = "networkInterfaceOwnerId"
            case publicIp = "publicIp"
            case networkInterfaceId = "networkInterfaceId"
            case domain = "domain"
            case publicIpv4Pool = "publicIpv4Pool"
        }
    }

    public struct KeyPairInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string)
        ]
        /// If you used CreateKeyPair to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used ImportKeyPair to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.
        public let keyFingerprint: String?
        /// The name of the key pair.
        public let keyName: String?

        public init(keyFingerprint: String? = nil, keyName: String? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
        }
    }

    public enum VpnStaticRouteSource: String, CustomStringConvertible, Codable {
        case `static` = "Static"
        public var description: String { return self.rawValue }
    }

    public struct Ipv6Range: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "CidrIpv6", location: .body(locationName: "cidrIpv6"), required: false, type: .string)
        ]
        /// A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
        public let cidrIpv6: String?

        public init(description: String? = nil, cidrIpv6: String? = nil) {
            self.description = description
            self.cidrIpv6 = cidrIpv6
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case cidrIpv6 = "cidrIpv6"
        }
    }

    public enum FleetOnDemandAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestPrice = "lowest-price"
        case prioritized = "prioritized"
        public var description: String { return self.rawValue }
    }

    public struct DescribeHostReservationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "HostReservationIdSet", required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int32?
        /// One or more filters.    instance-family - The instance family (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).  
        public let filter: FilterList?
        /// One or more host reservation IDs.
        public let hostReservationIdSet: HostReservationIdSet?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filter: FilterList? = nil, hostReservationIdSet: HostReservationIdSet? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filter = filter
            self.hostReservationIdSet = hostReservationIdSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case filter = "Filter"
            case hostReservationIdSet = "HostReservationIdSet"
        }
    }

    public struct ModifyVpcEndpointResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct LaunchTemplateSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string)
        ]
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The version number of the launch template. Default: The default version for the launch template.
        public let version: String?
        /// The name of the launch template.
        public let launchTemplateName: String?

        public init(launchTemplateId: String? = nil, version: String? = nil, launchTemplateName: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.version = version
            self.launchTemplateName = launchTemplateName
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case version = "Version"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct TargetConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer)
        ]
        /// The ID of the Convertible Reserved Instance offering.
        public let offeringId: String?
        /// The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int32?

        public init(offeringId: String? = nil, instanceCount: Int32? = nil) {
            self.offeringId = offeringId
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case offeringId = "offeringId"
            case instanceCount = "instanceCount"
        }
    }

    public struct PlacementGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PlacementGroup]?

        public init(item: [PlacementGroup]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum DiskImageFormat: String, CustomStringConvertible, Codable {
        case vmdk = "VMDK"
        case raw = "RAW"
        case vhd = "VHD"
        public var description: String { return self.rawValue }
    }

    public struct ImportInstanceLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "GroupName"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupIds", location: .body(locationName: "GroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .boolean), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum)
        ]
        /// One or more security group names.
        public let groupNames: SecurityGroupStringList?
        /// [EC2-VPC] The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// One or more security group IDs.
        public let groupIds: SecurityGroupIdStringList?
        /// Reserved.
        public let additionalInfo: String?
        /// [EC2-VPC] An available IP address from the IP address range of the subnet.
        public let privateIpAddress: String?
        /// The placement information for the instance.
        public let placement: Placement?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// Indicates whether monitoring is enabled.
        public let monitoring: Bool?
        /// The architecture of the instance.
        public let architecture: ArchitectureValues?
        /// The Base64-encoded user data to make available to the instance.
        public let userData: UserData?
        /// The instance type. For more information about the instance types that you can import, see Instance Types in the VM Import/Export User Guide.
        public let instanceType: InstanceType?

        public init(groupNames: SecurityGroupStringList? = nil, subnetId: String? = nil, groupIds: SecurityGroupIdStringList? = nil, additionalInfo: String? = nil, privateIpAddress: String? = nil, placement: Placement? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, monitoring: Bool? = nil, architecture: ArchitectureValues? = nil, userData: UserData? = nil, instanceType: InstanceType? = nil) {
            self.groupNames = groupNames
            self.subnetId = subnetId
            self.groupIds = groupIds
            self.additionalInfo = additionalInfo
            self.privateIpAddress = privateIpAddress
            self.placement = placement
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.monitoring = monitoring
            self.architecture = architecture
            self.userData = userData
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case groupNames = "GroupName"
            case subnetId = "subnetId"
            case groupIds = "GroupId"
            case additionalInfo = "additionalInfo"
            case privateIpAddress = "privateIpAddress"
            case placement = "placement"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case monitoring = "monitoring"
            case architecture = "architecture"
            case userData = "userData"
            case instanceType = "instanceType"
        }
    }

    public struct ProductCodeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ProductCode]?

        public init(item: [ProductCode]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVolumesModificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more filters. Supported filters: volume-id, modification-state, target-size, target-iops, target-volume-type, original-size, original-iops, original-volume-type, start-time. 
        public let filters: FilterList?
        /// The nextToken value returned by a previous paginated request.
        public let nextToken: String?
        /// One or more volume IDs for which in-progress modifications will be described.
        public let volumeIds: VolumeIdStringList?
        /// The maximum number of results (up to a limit of 500) to be returned in a paginated request.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, nextToken: String? = nil, volumeIds: VolumeIdStringList? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.volumeIds = volumeIds
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
        }
    }

    public struct CreateTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: true, type: .structure), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "ResourceId"), required: true, type: .list), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. 
        public let tags: TagList
        /// The IDs of one or more resources, separated by spaces.
        public let resources: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(tags: TagList, resources: [String], dryRun: Bool? = nil) {
            self.tags = tags
            self.resources = resources
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case resources = "ResourceId"
            case dryRun = "dryRun"
        }
    }

    public struct NetworkInterfaceIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct BillingProductList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImportVolumeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTask", location: .body(locationName: "conversionTask"), required: false, type: .structure)
        ]
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct DescribeFleetsErrorSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DescribeFleetError]?

        public init(item: [DescribeFleetError]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetConsoleScreenshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "WakeUp", required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// When set to true, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.
        public let wakeUp: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, wakeUp: Bool? = nil, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.wakeUp = wakeUp
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case wakeUp = "WakeUp"
            case dryRun = "DryRun"
        }
    }

    public enum GatewayType: String, CustomStringConvertible, Codable {
        case ipsec1 = "ipsec.1"
        public var description: String { return self.rawValue }
    }

    public struct CreateSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The tags to apply to the snapshot during creation.
        public let tagSpecifications: TagSpecificationList?
        /// The ID of the EBS volume.
        public let volumeId: String
        /// A description for the snapshot.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(tagSpecifications: TagSpecificationList? = nil, volumeId: String, description: String? = nil, dryRun: Bool? = nil) {
            self.tagSpecifications = tagSpecifications
            self.volumeId = volumeId
            self.description = description
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case tagSpecifications = "TagSpecification"
            case volumeId = "VolumeId"
            case description = "Description"
            case dryRun = "dryRun"
        }
    }

    public struct TransitGatewayRouteAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The resource type.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the resource.
        public let resourceId: String?

        public init(transitGatewayAttachmentId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, resourceId: String? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case resourceType = "resourceType"
            case resourceId = "resourceId"
        }
    }

    public struct CreateTransitGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The tags to apply to the transit gateway.
        public let tagSpecifications: TagSpecificationList?
        /// The transit gateway options.
        public let options: TransitGatewayRequestOptions?
        /// A description of the transit gateway.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(tagSpecifications: TagSpecificationList? = nil, options: TransitGatewayRequestOptions? = nil, description: String? = nil, dryRun: Bool? = nil) {
            self.tagSpecifications = tagSpecifications
            self.options = options
            self.description = description
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case tagSpecifications = "TagSpecification"
            case options = "Options"
            case description = "Description"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcs"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the ClassicLink DNS support status of the VPCs.
        public let vpcs: ClassicLinkDnsSupportList?
        /// The token to use when requesting the next set of items.
        public let nextToken: String?

        public init(vpcs: ClassicLinkDnsSupportList? = nil, nextToken: String? = nil) {
            self.vpcs = vpcs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcs"
            case nextToken = "nextToken"
        }
    }

    public struct FpgaImageAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "LoadPermissions", location: .body(locationName: "loadPermissions"), required: false, type: .structure)
        ]
        /// The name of the AFI.
        public let name: String?
        /// The description of the AFI.
        public let description: String?
        /// The ID of the AFI.
        public let fpgaImageId: String?
        /// One or more product codes.
        public let productCodes: ProductCodeList?
        /// One or more load permissions.
        public let loadPermissions: LoadPermissionList?

        public init(name: String? = nil, description: String? = nil, fpgaImageId: String? = nil, productCodes: ProductCodeList? = nil, loadPermissions: LoadPermissionList? = nil) {
            self.name = name
            self.description = description
            self.fpgaImageId = fpgaImageId
            self.productCodes = productCodes
            self.loadPermissions = loadPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case description = "description"
            case fpgaImageId = "fpgaImageId"
            case productCodes = "productCodes"
            case loadPermissions = "loadPermissions"
        }
    }

    public struct VpnConnectionOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticRoutesOnly", location: .body(locationName: "staticRoutesOnly"), required: false, type: .boolean)
        ]
        /// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
        public let staticRoutesOnly: Bool?

        public init(staticRoutesOnly: Bool? = nil) {
            self.staticRoutesOnly = staticRoutesOnly
        }

        private enum CodingKeys: String, CodingKey {
            case staticRoutesOnly = "staticRoutesOnly"
        }
    }

    public enum SnapshotAttributeName: String, CustomStringConvertible, Codable {
        case productcodes = "productCodes"
        case createvolumepermission = "createVolumePermission"
        public var description: String { return self.rawValue }
    }

    public struct ReservedInstanceLimitPrice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Amount", location: .body(locationName: "amount"), required: false, type: .double)
        ]
        /// The currency in which the limitPrice amount is specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
        public let amount: Double?

        public init(currencyCode: CurrencyCodeValues? = nil, amount: Double? = nil) {
            self.currencyCode = currencyCode
            self.amount = amount
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case amount = "amount"
        }
    }

    public struct ExecutableByStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutableBy", required: false, type: .list)
        ]
        public let executableBy: [String]?

        public init(executableBy: [String]? = nil) {
            self.executableBy = executableBy
        }

        private enum CodingKeys: String, CodingKey {
            case executableBy = "ExecutableBy"
        }
    }

    public struct InstanceMarketOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "MarketType", required: false, type: .enum)
        ]
        /// The options for Spot Instances.
        public let spotOptions: SpotMarketOptions?
        /// The market type.
        public let marketType: MarketType?

        public init(spotOptions: SpotMarketOptions? = nil, marketType: MarketType? = nil) {
            self.spotOptions = spotOptions
            self.marketType = marketType
        }

        private enum CodingKeys: String, CodingKey {
            case spotOptions = "SpotOptions"
            case marketType = "MarketType"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateInstanceNetworkInterfaceSpecification]?

        public init(item: [LaunchTemplateInstanceNetworkInterfaceSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImageList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Image]?

        public init(item: [Image]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SpotInstanceStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string)
        ]
        /// The description for the status code.
        public let message: String?
        /// The date and time of the most recent status update, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let updateTime: TimeStamp?
        /// The status code. For a list of status codes, see Spot Status Codes in the Amazon EC2 User Guide for Linux Instances.
        public let code: String?

        public init(message: String? = nil, updateTime: TimeStamp? = nil, code: String? = nil) {
            self.message = message
            self.updateTime = updateTime
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case updateTime = "updateTime"
            case code = "code"
        }
    }

    public struct ConfirmProductInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// The AWS account ID of the instance owner. This is only present if the product code is attached to the instance.
        public let ownerId: String?
        /// The return value of the request. Returns true if the specified product code is owned by the requester and associated with the specified instance.
        public let `return`: Bool?

        public init(ownerId: String? = nil, return: Bool? = nil) {
            self.ownerId = ownerId
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "ownerId"
            case `return` = "return"
        }
    }

    public struct ScheduledInstanceRecurrence: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OccurrenceDaySet", location: .body(locationName: "occurrenceDaySet"), required: false, type: .structure), 
            AWSShapeMember(label: "Frequency", location: .body(locationName: "frequency"), required: false, type: .string), 
            AWSShapeMember(label: "OccurrenceRelativeToEnd", location: .body(locationName: "occurrenceRelativeToEnd"), required: false, type: .boolean), 
            AWSShapeMember(label: "OccurrenceUnit", location: .body(locationName: "occurrenceUnit"), required: false, type: .string), 
            AWSShapeMember(label: "Interval", location: .body(locationName: "interval"), required: false, type: .integer)
        ]
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
        public let occurrenceDaySet: OccurrenceDaySet?
        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// Indicates whether the occurrence is relative to the end of the specified week or month.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
        public let occurrenceUnit: String?
        /// The interval quantity. The interval unit depends on the value of frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int32?

        public init(occurrenceDaySet: OccurrenceDaySet? = nil, frequency: String? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil, interval: Int32? = nil) {
            self.occurrenceDaySet = occurrenceDaySet
            self.frequency = frequency
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
            self.interval = interval
        }

        private enum CodingKeys: String, CodingKey {
            case occurrenceDaySet = "occurrenceDaySet"
            case frequency = "frequency"
            case occurrenceRelativeToEnd = "occurrenceRelativeToEnd"
            case occurrenceUnit = "occurrenceUnit"
            case interval = "interval"
        }
    }

    public enum PermissionGroup: String, CustomStringConvertible, Codable {
        case all = "all"
        public var description: String { return self.rawValue }
    }

    public struct CancelSpotFleetRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TerminateInstances", location: .body(locationName: "terminateInstances"), required: true, type: .boolean), 
            AWSShapeMember(label: "SpotFleetRequestIds", location: .body(locationName: "spotFleetRequestId"), required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.
        public let terminateInstances: Bool
        /// The IDs of the Spot Fleet requests.
        public let spotFleetRequestIds: ValueStringList

        public init(dryRun: Bool? = nil, terminateInstances: Bool, spotFleetRequestIds: ValueStringList) {
            self.dryRun = dryRun
            self.terminateInstances = terminateInstances
            self.spotFleetRequestIds = spotFleetRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case terminateInstances = "terminateInstances"
            case spotFleetRequestIds = "spotFleetRequestId"
        }
    }

    public struct DescribeExportTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTasks", location: .body(locationName: "exportTaskSet"), required: false, type: .structure)
        ]
        /// Information about the export tasks.
        public let exportTasks: ExportTaskList?

        public init(exportTasks: ExportTaskList? = nil) {
            self.exportTasks = exportTasks
        }

        private enum CodingKeys: String, CodingKey {
            case exportTasks = "exportTaskSet"
        }
    }

    public enum PlatformValues: String, CustomStringConvertible, Codable {
        case windows = "Windows"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRouteTablesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTables", location: .body(locationName: "routeTableSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more route tables.
        public let routeTables: RouteTableList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(routeTables: RouteTableList? = nil, nextToken: String? = nil) {
            self.routeTables = routeTables
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case routeTables = "routeTableSet"
            case nextToken = "nextToken"
        }
    }

    public struct AllocateAddressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIpv4Pool", location: .body(locationName: "publicIpv4Pool"), required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .enum)
        ]
        /// The ID of an address pool.
        public let publicIpv4Pool: String?
        /// [EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
        public let allocationId: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
        public let domain: DomainType?

        public init(publicIpv4Pool: String? = nil, allocationId: String? = nil, publicIp: String? = nil, domain: DomainType? = nil) {
            self.publicIpv4Pool = publicIpv4Pool
            self.allocationId = allocationId
            self.publicIp = publicIp
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case publicIpv4Pool = "publicIpv4Pool"
            case allocationId = "allocationId"
            case publicIp = "publicIp"
            case domain = "domain"
        }
    }

    public struct AssociateSubnetCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: true, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]
        /// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
        public let ipv6CidrBlock: String
        /// The ID of your subnet.
        public let subnetId: String

        public init(ipv6CidrBlock: String, subnetId: String) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
            case subnetId = "subnetId"
        }
    }

    public struct RequestLaunchTemplateData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreditSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "ElasticInferenceAccelerators", location: .body(locationName: "ElasticInferenceAccelerator"), required: false, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "LicenseSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .structure), 
            AWSShapeMember(label: "RamDiskId", required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuSpecifications", location: .body(locationName: "ElasticGpuSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "CpuOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "HibernationOptions", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "DisableApiTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .structure), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceMarketOptions", required: false, type: .structure), 
            AWSShapeMember(label: "UserData", required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservationSpecification", required: false, type: .structure)
        ]
        /// The credit option for CPU usage of the instance. Valid for T2 or T3 instances only.
        public let creditSpecification: CreditSpecificationRequest?
        /// The ID of the AMI, which you can get by using DescribeImages.
        public let imageId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in. 
        public let keyName: String?
        /// [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
        public let securityGroups: SecurityGroupStringList?
        /// The block device mapping.  Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action. 
        public let blockDeviceMappings: LaunchTemplateBlockDeviceMappingRequestList?
        ///  The elastic inference accelerator for the instance. 
        public let elasticInferenceAccelerators: LaunchTemplateElasticInferenceAcceleratorList?
        /// The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
        public let tagSpecifications: LaunchTemplateTagSpecificationRequestList?
        /// The license configurations.
        public let licenseSpecifications: LaunchTemplateLicenseSpecificationListRequest?
        /// The IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest?
        /// The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide. 
        public let ramDiskId: String?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
        public let ebsOptimized: Bool?
        /// An elastic GPU to associate with the instance.
        public let elasticGpuSpecifications: ElasticGpuSpecificationList?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptionsRequest?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoringRequest?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide. 
        public let kernelId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop 
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites. Hibernation is currently supported only for Amazon Linux. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptionsRequest?
        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// If set to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API. To change this attribute to false after launch, use ModifyInstanceAttribute.
        public let disableApiTermination: Bool?
        /// One or more network interfaces.
        public let networkInterfaces: LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList?
        /// One or more security group IDs. You can create a security group using CreateSecurityGroup. You cannot specify both a security group ID and security name in the same request.
        public let securityGroupIds: SecurityGroupIdStringList?
        /// The placement for the instance.
        public let placement: LaunchTemplatePlacementRequest?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest?
        /// The Base64-encoded user data to make available to the instance. For more information, see Running Commands on Your Linux Instance at Launch (Linux) and Adding User Data (Windows).
        public let userData: String?
        /// The Capacity Reservation targeting option.
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest?

        public init(creditSpecification: CreditSpecificationRequest? = nil, imageId: String? = nil, keyName: String? = nil, securityGroups: SecurityGroupStringList? = nil, blockDeviceMappings: LaunchTemplateBlockDeviceMappingRequestList? = nil, elasticInferenceAccelerators: LaunchTemplateElasticInferenceAcceleratorList? = nil, tagSpecifications: LaunchTemplateTagSpecificationRequestList? = nil, licenseSpecifications: LaunchTemplateLicenseSpecificationListRequest? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest? = nil, ramDiskId: String? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: ElasticGpuSpecificationList? = nil, cpuOptions: LaunchTemplateCpuOptionsRequest? = nil, monitoring: LaunchTemplatesMonitoringRequest? = nil, kernelId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, hibernationOptions: LaunchTemplateHibernationOptionsRequest? = nil, instanceType: InstanceType? = nil, disableApiTermination: Bool? = nil, networkInterfaces: LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList? = nil, securityGroupIds: SecurityGroupIdStringList? = nil, placement: LaunchTemplatePlacementRequest? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest? = nil, userData: String? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest? = nil) {
            self.creditSpecification = creditSpecification
            self.imageId = imageId
            self.keyName = keyName
            self.securityGroups = securityGroups
            self.blockDeviceMappings = blockDeviceMappings
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.tagSpecifications = tagSpecifications
            self.licenseSpecifications = licenseSpecifications
            self.iamInstanceProfile = iamInstanceProfile
            self.ramDiskId = ramDiskId
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.cpuOptions = cpuOptions
            self.monitoring = monitoring
            self.kernelId = kernelId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.hibernationOptions = hibernationOptions
            self.instanceType = instanceType
            self.disableApiTermination = disableApiTermination
            self.networkInterfaces = networkInterfaces
            self.securityGroupIds = securityGroupIds
            self.placement = placement
            self.instanceMarketOptions = instanceMarketOptions
            self.userData = userData
            self.capacityReservationSpecification = capacityReservationSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case creditSpecification = "CreditSpecification"
            case imageId = "ImageId"
            case keyName = "KeyName"
            case securityGroups = "SecurityGroup"
            case blockDeviceMappings = "BlockDeviceMapping"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case tagSpecifications = "TagSpecification"
            case licenseSpecifications = "LicenseSpecification"
            case iamInstanceProfile = "IamInstanceProfile"
            case ramDiskId = "RamDiskId"
            case ebsOptimized = "EbsOptimized"
            case elasticGpuSpecifications = "ElasticGpuSpecification"
            case cpuOptions = "CpuOptions"
            case monitoring = "Monitoring"
            case kernelId = "KernelId"
            case instanceInitiatedShutdownBehavior = "InstanceInitiatedShutdownBehavior"
            case hibernationOptions = "HibernationOptions"
            case instanceType = "InstanceType"
            case disableApiTermination = "DisableApiTermination"
            case networkInterfaces = "NetworkInterface"
            case securityGroupIds = "SecurityGroupId"
            case placement = "Placement"
            case instanceMarketOptions = "InstanceMarketOptions"
            case userData = "UserData"
            case capacityReservationSpecification = "CapacityReservationSpecification"
        }
    }

    public struct ProvisionByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrAuthorizationContext", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.
        public let cidrAuthorizationContext: CidrAuthorizationContext?
        /// A description for the address range and the address pool.
        public let description: String?
        /// The public IPv4 address range, in CIDR notation. The most specific prefix that you can specify is /24. The address range cannot overlap with another address range that you've brought to this or another region.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidrAuthorizationContext: CidrAuthorizationContext? = nil, description: String? = nil, cidr: String, dryRun: Bool? = nil) {
            self.cidrAuthorizationContext = cidrAuthorizationContext
            self.description = description
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidrAuthorizationContext = "CidrAuthorizationContext"
            case description = "Description"
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct TransitGatewayRouteList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayRoute]?

        public init(item: [TransitGatewayRoute]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplatePlacementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tenancy", required: false, type: .enum), 
            AWSShapeMember(label: "HostId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "Affinity", required: false, type: .string), 
            AWSShapeMember(label: "SpreadDomain", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
        public let tenancy: Tenancy?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The affinity setting for an instance on a Dedicated Host.
        public let affinity: String?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The Availability Zone for the instance.
        public let availabilityZone: String?

        public init(tenancy: Tenancy? = nil, hostId: String? = nil, groupName: String? = nil, affinity: String? = nil, spreadDomain: String? = nil, availabilityZone: String? = nil) {
            self.tenancy = tenancy
            self.hostId = hostId
            self.groupName = groupName
            self.affinity = affinity
            self.spreadDomain = spreadDomain
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case tenancy = "Tenancy"
            case hostId = "HostId"
            case groupName = "GroupName"
            case affinity = "Affinity"
            case spreadDomain = "SpreadDomain"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct TransitGatewayRouteTablePropagation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The type of resource.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The state of the resource.
        public let state: TransitGatewayPropagationState?

        public init(resourceType: TransitGatewayAttachmentResourceType? = nil, resourceId: String? = nil, transitGatewayAttachmentId: String? = nil, state: TransitGatewayPropagationState? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case resourceId = "resourceId"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case state = "state"
        }
    }

    public struct DescribeFpgaImagesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImages", location: .body(locationName: "fpgaImageSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more FPGA images.
        public let fpgaImages: FpgaImageList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fpgaImages: FpgaImageList? = nil, nextToken: String? = nil) {
            self.fpgaImages = fpgaImages
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImages = "fpgaImageSet"
            case nextToken = "nextToken"
        }
    }

    public struct ClassicLinkInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// A list of security groups.
        public let groups: GroupIdentifierList?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// Any tags assigned to the instance.
        public let tags: TagList?

        public init(groups: GroupIdentifierList? = nil, vpcId: String? = nil, instanceId: String? = nil, tags: TagList? = nil) {
            self.groups = groups
            self.vpcId = vpcId
            self.instanceId = instanceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case vpcId = "vpcId"
            case instanceId = "instanceId"
            case tags = "tagSet"
        }
    }

    public struct ScheduledInstancesIpv6AddressList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .list)
        ]
        public let ipv6Address: [ScheduledInstancesIpv6Address]?

        public init(ipv6Address: [ScheduledInstancesIpv6Address]? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public enum HostTenancy: String, CustomStringConvertible, Codable {
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public struct DescribeFleetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "FleetIds", location: .body(locationName: "FleetId"), required: false, type: .list), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// One or more filters.    activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).    excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).    fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).    replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).    type - The type of request (instant | request | maintain).  
        public let filters: FilterList?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The ID of the EC2 Fleets.
        public let fleetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, fleetIds: [String]? = nil, dryRun: Bool? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.fleetIds = fleetIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case fleetIds = "FleetId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeIdentityIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalArn", location: .body(locationName: "principalArn"), required: true, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: false, type: .string)
        ]
        /// The ARN of the principal, which can be an IAM role, IAM user, or the root user.
        public let principalArn: String
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
        public let resource: String?

        public init(principalArn: String, resource: String? = nil) {
            self.principalArn = principalArn
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn = "principalArn"
            case resource = "resource"
        }
    }

    public struct DescribeVpcClassicLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcIds", location: .body(locationName: "VpcId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more VPCs for which you want to describe the ClassicLink status.
        public let vpcIds: VpcClassicLinkIdList?
        /// One or more filters.    is-classic-link-enabled - Whether the VPC is enabled for ClassicLink (true | false).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcIds: VpcClassicLinkIdList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.vpcIds = vpcIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcIds = "VpcId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteVpcEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more VPC endpoint IDs.
        public let vpcEndpointIds: ValueStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcEndpointIds: ValueStringList, dryRun: Bool? = nil) {
            self.vpcEndpointIds = vpcEndpointIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcEndpointIds = "VpcEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ElasticGpuAssociationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ElasticGpuAssociation]?

        public init(item: [ElasticGpuAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImportImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ClientData", required: false, type: .structure), 
            AWSShapeMember(label: "DiskContainers", location: .body(locationName: "DiskContainer"), required: false, type: .structure), 
            AWSShapeMember(label: "LicenseType", required: false, type: .string), 
            AWSShapeMember(label: "Hypervisor", required: false, type: .string), 
            AWSShapeMember(label: "Architecture", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean)
        ]
        /// An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias, in the form alias/ExampleAlias     ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the region that the AMI is being copied to. 
        public let kmsKeyId: String?
        /// The token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// The client-specific data.
        public let clientData: ClientData?
        /// Information about the disk containers.
        public let diskContainers: ImageDiskContainerList?
        /// The license type to be used for the Amazon Machine Image (AMI) after importing.  Note: You may only use BYOL if you have existing licenses with rights to use these licenses in a third party cloud like AWS. For more information, see Prerequisites in the VM Import/Export User Guide. Valid values: AWS | BYOL 
        public let licenseType: String?
        /// The target hypervisor platform. Valid values: xen 
        public let hypervisor: String?
        /// The architecture of the virtual machine. Valid values: i386 | x86_64 
        public let architecture: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// A description string for the import image task.
        public let description: String?
        /// The operating system of the virtual machine. Valid values: Windows | Linux 
        public let platform: String?
        /// Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?

        public init(kmsKeyId: String? = nil, clientToken: String? = nil, clientData: ClientData? = nil, diskContainers: ImageDiskContainerList? = nil, licenseType: String? = nil, hypervisor: String? = nil, architecture: String? = nil, dryRun: Bool? = nil, roleName: String? = nil, description: String? = nil, platform: String? = nil, encrypted: Bool? = nil) {
            self.kmsKeyId = kmsKeyId
            self.clientToken = clientToken
            self.clientData = clientData
            self.diskContainers = diskContainers
            self.licenseType = licenseType
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.dryRun = dryRun
            self.roleName = roleName
            self.description = description
            self.platform = platform
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case clientToken = "ClientToken"
            case clientData = "ClientData"
            case diskContainers = "DiskContainer"
            case licenseType = "LicenseType"
            case hypervisor = "Hypervisor"
            case architecture = "Architecture"
            case dryRun = "DryRun"
            case roleName = "RoleName"
            case description = "Description"
            case platform = "Platform"
            case encrypted = "Encrypted"
        }
    }

    public struct CreateFleetInstancesSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CreateFleetInstance]?

        public init(item: [CreateFleetInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateFleetInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "instanceIds"), required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum)
        ]
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// The value is Windows for Windows instances; otherwise blank.
        public let platform: PlatformValues?
        /// The IDs of the instances.
        public let instanceIds: InstanceIdsSet?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, platform: PlatformValues? = nil, instanceIds: InstanceIdsSet? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.platform = platform
            self.instanceIds = instanceIds
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case platform = "platform"
            case instanceIds = "instanceIds"
            case lifecycle = "lifecycle"
        }
    }

    public struct SubnetList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Subnet]?

        public init(item: [Subnet]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeTransitGatewayAttachmentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachments", location: .body(locationName: "transitGatewayAttachments"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the attachments.
        public let transitGatewayAttachments: TransitGatewayAttachmentList?

        public init(nextToken: String? = nil, transitGatewayAttachments: TransitGatewayAttachmentList? = nil) {
            self.nextToken = nextToken
            self.transitGatewayAttachments = transitGatewayAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case transitGatewayAttachments = "transitGatewayAttachments"
        }
    }

    public struct RunInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreditSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "Ipv6Address"), required: false, type: .structure), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceMarketOptions", required: false, type: .structure), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticInferenceAccelerators", location: .body(locationName: "ElasticInferenceAccelerator"), required: false, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "LicenseSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "CpuOptions", required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "MinCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxCount", required: true, type: .integer), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "HibernationOptions", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterface"), required: false, type: .structure), 
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "UserData", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "CapacityReservationSpecification", required: false, type: .structure)
        ]
        /// The credit option for CPU usage of the instance. Valid values are standard and unlimited. To change this attribute after launch, use ModifyInstanceCreditSpecification. For more information, see Burstable Performance Instances in the Amazon Elastic Compute Cloud User Guide. Default: standard (T2 instances) or unlimited (T3 instances)
        public let creditSpecification: CreditSpecificationRequest?
        /// The ID of the AMI, which you can get by calling DescribeImages. An AMI is required to launch an instance and must be specified here or in a launch template.
        public let imageId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in. 
        public let keyName: String?
        /// [EC2-VPC] Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. Default: Amazon EC2 uses the default security group.
        public let securityGroups: SecurityGroupStringList?
        /// The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
        public let ramdiskId: String?
        /// The market (purchasing) option for the instances. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
        public let instanceMarketOptions: InstanceMarketOptionsRequest?
        /// One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        public let blockDeviceMappings: BlockDeviceMappingRequestList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  An elastic inference accelerator. 
        public let elasticInferenceAccelerators: ElasticInferenceAccelerators?
        /// The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
        public let tagSpecifications: TagSpecificationList?
        /// The license configurations.
        public let licenseSpecifications: LicenseSpecificationListRequest?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: CpuOptionsRequest?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// An elastic GPU to associate with the instance.
        public let elasticGpuSpecification: ElasticGpuSpecifications?
        /// The monitoring for the instance.
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
        public let kernelId: String?
        /// [EC2-VPC] A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public let ipv6AddressCount: Int32?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 General FAQ.
        public let minCount: Int32
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop 
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 FAQ.
        public let maxCount: Int32
        /// [EC2-VPC] The ID of the subnet to launch the instance into.
        public let subnetId: String?
        /// Indicates whether an instance is enabled for hibernation. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: HibernationOptionsRequest?
        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide. Default: m1.small 
        public let instanceType: InstanceType?
        /// One or more network interfaces.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// Reserved.
        public let additionalInfo: String?
        /// The placement for the instance.
        public let placement: Placement?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute to false after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false 
        public let disableApiTermination: Bool?
        /// The user data to make available to the instance. For more information, see Running Commands on Your Linux Instance at Launch (Linux) and Adding User Data (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
        public let userData: String?
        /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.
        public let privateIpAddress: String?
        /// One or more security group IDs. You can create a security group using CreateSecurityGroup. Default: Amazon EC2 uses the default security group.
        public let securityGroupIds: SecurityGroupIdStringList?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecification?

        public init(creditSpecification: CreditSpecificationRequest? = nil, imageId: String? = nil, keyName: String? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, securityGroups: SecurityGroupStringList? = nil, launchTemplate: LaunchTemplateSpecification? = nil, ramdiskId: String? = nil, instanceMarketOptions: InstanceMarketOptionsRequest? = nil, blockDeviceMappings: BlockDeviceMappingRequestList? = nil, dryRun: Bool? = nil, elasticInferenceAccelerators: ElasticInferenceAccelerators? = nil, tagSpecifications: TagSpecificationList? = nil, licenseSpecifications: LicenseSpecificationListRequest? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, cpuOptions: CpuOptionsRequest? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecification: ElasticGpuSpecifications? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, kernelId: String? = nil, ipv6AddressCount: Int32? = nil, clientToken: String? = nil, minCount: Int32, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, maxCount: Int32, subnetId: String? = nil, hibernationOptions: HibernationOptionsRequest? = nil, instanceType: InstanceType? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, additionalInfo: String? = nil, placement: Placement? = nil, disableApiTermination: Bool? = nil, userData: String? = nil, privateIpAddress: String? = nil, securityGroupIds: SecurityGroupIdStringList? = nil, capacityReservationSpecification: CapacityReservationSpecification? = nil) {
            self.creditSpecification = creditSpecification
            self.imageId = imageId
            self.keyName = keyName
            self.ipv6Addresses = ipv6Addresses
            self.securityGroups = securityGroups
            self.launchTemplate = launchTemplate
            self.ramdiskId = ramdiskId
            self.instanceMarketOptions = instanceMarketOptions
            self.blockDeviceMappings = blockDeviceMappings
            self.dryRun = dryRun
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.tagSpecifications = tagSpecifications
            self.licenseSpecifications = licenseSpecifications
            self.iamInstanceProfile = iamInstanceProfile
            self.cpuOptions = cpuOptions
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecification = elasticGpuSpecification
            self.monitoring = monitoring
            self.kernelId = kernelId
            self.ipv6AddressCount = ipv6AddressCount
            self.clientToken = clientToken
            self.minCount = minCount
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.maxCount = maxCount
            self.subnetId = subnetId
            self.hibernationOptions = hibernationOptions
            self.instanceType = instanceType
            self.networkInterfaces = networkInterfaces
            self.additionalInfo = additionalInfo
            self.placement = placement
            self.disableApiTermination = disableApiTermination
            self.userData = userData
            self.privateIpAddress = privateIpAddress
            self.securityGroupIds = securityGroupIds
            self.capacityReservationSpecification = capacityReservationSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case creditSpecification = "CreditSpecification"
            case imageId = "ImageId"
            case keyName = "KeyName"
            case ipv6Addresses = "Ipv6Address"
            case securityGroups = "SecurityGroup"
            case launchTemplate = "LaunchTemplate"
            case ramdiskId = "RamdiskId"
            case instanceMarketOptions = "InstanceMarketOptions"
            case blockDeviceMappings = "BlockDeviceMapping"
            case dryRun = "dryRun"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case tagSpecifications = "TagSpecification"
            case licenseSpecifications = "LicenseSpecification"
            case iamInstanceProfile = "iamInstanceProfile"
            case cpuOptions = "CpuOptions"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuSpecification = "ElasticGpuSpecification"
            case monitoring = "Monitoring"
            case kernelId = "KernelId"
            case ipv6AddressCount = "Ipv6AddressCount"
            case clientToken = "clientToken"
            case minCount = "MinCount"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case maxCount = "MaxCount"
            case subnetId = "SubnetId"
            case hibernationOptions = "HibernationOptions"
            case instanceType = "InstanceType"
            case networkInterfaces = "networkInterface"
            case additionalInfo = "additionalInfo"
            case placement = "Placement"
            case disableApiTermination = "disableApiTermination"
            case userData = "UserData"
            case privateIpAddress = "privateIpAddress"
            case securityGroupIds = "SecurityGroupId"
            case capacityReservationSpecification = "CapacityReservationSpecification"
        }
    }

    public struct CopyFpgaImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "SourceFpgaImageId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string)
        ]
        /// The name for the new AFI. The default is the name of the source AFI.
        public let name: String?
        /// The ID of the source AFI.
        public let sourceFpgaImageId: String
        /// The description for the new AFI.
        public let description: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The region that contains the source AFI.
        public let sourceRegion: String

        public init(name: String? = nil, sourceFpgaImageId: String, description: String? = nil, clientToken: String? = nil, dryRun: Bool? = nil, sourceRegion: String) {
            self.name = name
            self.sourceFpgaImageId = sourceFpgaImageId
            self.description = description
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case sourceFpgaImageId = "SourceFpgaImageId"
            case description = "Description"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct DescribeNetworkInterfaceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: false, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The attribute of the network interface. This parameter is required.
        public let attribute: NetworkInterfaceAttribute?

        public init(dryRun: Bool? = nil, networkInterfaceId: String, attribute: NetworkInterfaceAttribute? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
            case attribute = "attribute"
        }
    }

    public struct ReasonCodesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReportInstanceReasonCodes]?

        public init(item: [ReportInstanceReasonCodes]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateNameStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeTransitGatewayRouteTablesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayRouteTableIds", required: false, type: .structure)
        ]
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// One or more filters. The possible values are:    default-association-route-table - Indicates whether this is the default association route table for the transit gateway (true | false).    default-propagation-route-table - Indicates whether this is the default propagation route table for the transit gateway (true | false).    transit-gateway-id - The ID of the transit gateway.    transit-gateway-route-table-id - The ID of the transit gateway route table.    transit-gateway-route-table-state - The state (pending | available | deleting | deleted).  
        public let filters: FilterList?
        /// The token for the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the transit gateway route tables.
        public let transitGatewayRouteTableIds: TransitGatewayRouteTableIdStringList?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil, transitGatewayRouteTableIds: TransitGatewayRouteTableIdStringList? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.transitGatewayRouteTableIds = transitGatewayRouteTableIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case transitGatewayRouteTableIds = "TransitGatewayRouteTableIds"
        }
    }

    public enum CapacityReservationState: String, CustomStringConvertible, Codable {
        case active = "active"
        case expired = "expired"
        case cancelled = "cancelled"
        case pending = "pending"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct DescribeImportSnapshotTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportSnapshotTasks", location: .body(locationName: "importSnapshotTaskSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.
        public let importSnapshotTasks: ImportSnapshotTaskList?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importSnapshotTasks: ImportSnapshotTaskList? = nil, nextToken: String? = nil) {
            self.importSnapshotTasks = importSnapshotTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importSnapshotTasks = "importSnapshotTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct VolumeStatusActionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusAction]?

        public init(item: [VolumeStatusAction]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NatGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedBandwidth", location: .body(locationName: "provisionedBandwidth"), required: false, type: .structure), 
            AWSShapeMember(label: "FailureMessage", location: .body(locationName: "failureMessage"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "FailureCode", location: .body(locationName: "failureCode"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "NatGatewayAddresses", location: .body(locationName: "natGatewayAddressSet"), required: false, type: .structure), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteTime", location: .body(locationName: "deleteTime"), required: false, type: .timestamp)
        ]
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionedBandwidth: ProvisionedBandwidth?
        /// If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"   For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"   For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"   For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"   For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."   For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."  
        public let failureMessage: String?
        /// The ID of the VPC in which the NAT gateway is located.
        public let vpcId: String?
        /// If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
        public let failureCode: String?
        /// The ID of the subnet in which the NAT gateway is located.
        public let subnetId: String?
        /// The tags for the NAT gateway.
        public let tags: TagList?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// The state of the NAT gateway.    pending: The NAT gateway is being created and is not ready to process traffic.    failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.    available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.    deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.    deleted: The NAT gateway has been terminated and is no longer processing traffic.  
        public let state: NatGatewayState?
        /// Information about the IP addresses and network interface associated with the NAT gateway.
        public let natGatewayAddresses: NatGatewayAddressList?
        /// The date and time the NAT gateway was created.
        public let createTime: TimeStamp?
        /// The date and time the NAT gateway was deleted, if applicable.
        public let deleteTime: TimeStamp?

        public init(provisionedBandwidth: ProvisionedBandwidth? = nil, failureMessage: String? = nil, vpcId: String? = nil, failureCode: String? = nil, subnetId: String? = nil, tags: TagList? = nil, natGatewayId: String? = nil, state: NatGatewayState? = nil, natGatewayAddresses: NatGatewayAddressList? = nil, createTime: TimeStamp? = nil, deleteTime: TimeStamp? = nil) {
            self.provisionedBandwidth = provisionedBandwidth
            self.failureMessage = failureMessage
            self.vpcId = vpcId
            self.failureCode = failureCode
            self.subnetId = subnetId
            self.tags = tags
            self.natGatewayId = natGatewayId
            self.state = state
            self.natGatewayAddresses = natGatewayAddresses
            self.createTime = createTime
            self.deleteTime = deleteTime
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedBandwidth = "provisionedBandwidth"
            case failureMessage = "failureMessage"
            case vpcId = "vpcId"
            case failureCode = "failureCode"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case natGatewayId = "natGatewayId"
            case state = "state"
            case natGatewayAddresses = "natGatewayAddressSet"
            case createTime = "createTime"
            case deleteTime = "deleteTime"
        }
    }

    public struct DeleteSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the security group. Required for a nondefault VPC.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.
        public let groupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(groupId: String? = nil, groupName: String? = nil, dryRun: Bool? = nil) {
            self.groupId = groupId
            self.groupName = groupName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
            case dryRun = "dryRun"
        }
    }

    public struct Placement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .string), 
            AWSShapeMember(label: "SpreadDomain", location: .body(locationName: "spreadDomain"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string)
        ]
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the ImportInstance command.
        public let tenancy: Tenancy?
        /// The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the ImportInstance command.
        public let hostId: String?
        /// The name of the placement group the instance is in.
        public let groupName: String?
        /// The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the ImportInstance command.
        public let affinity: String?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The Availability Zone of the instance.
        public let availabilityZone: String?

        public init(tenancy: Tenancy? = nil, hostId: String? = nil, groupName: String? = nil, affinity: String? = nil, spreadDomain: String? = nil, availabilityZone: String? = nil) {
            self.tenancy = tenancy
            self.hostId = hostId
            self.groupName = groupName
            self.affinity = affinity
            self.spreadDomain = spreadDomain
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case tenancy = "tenancy"
            case hostId = "hostId"
            case groupName = "groupName"
            case affinity = "affinity"
            case spreadDomain = "spreadDomain"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct VpcCidrBlockAssociationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcCidrBlockAssociation]?

        public init(item: [VpcCidrBlockAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ExportTransitGatewayRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "S3Bucket", required: true, type: .string)
        ]
        /// One or more filters. The possible values are:    transit-gateway-route-destination-cidr-block - The CIDR range.    transit-gateway-route-state - The state of the route (active | blackhole).    transit-gateway-route-transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-route-type - The route type (static | propagated).    transit-gateway-route-vpn-connection-id - The ID of the VPN connection.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String
        /// The name of the S3 bucket.
        public let s3Bucket: String

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, transitGatewayRouteTableId: String, s3Bucket: String) {
            self.filters = filters
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.s3Bucket = s3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
            case s3Bucket = "S3Bucket"
        }
    }

    public struct CreateInstanceExportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetEnvironment", location: .body(locationName: "targetEnvironment"), required: false, type: .enum), 
            AWSShapeMember(label: "ExportToS3Task", location: .body(locationName: "exportToS3"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?
        /// The format and location for an instance export task.
        public let exportToS3Task: ExportToS3TaskSpecification?
        /// The ID of the instance.
        public let instanceId: String
        /// A description for the conversion task or the resource being exported. The maximum length is 255 bytes.
        public let description: String?

        public init(targetEnvironment: ExportEnvironment? = nil, exportToS3Task: ExportToS3TaskSpecification? = nil, instanceId: String, description: String? = nil) {
            self.targetEnvironment = targetEnvironment
            self.exportToS3Task = exportToS3Task
            self.instanceId = instanceId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case targetEnvironment = "targetEnvironment"
            case exportToS3Task = "exportToS3"
            case instanceId = "instanceId"
            case description = "description"
        }
    }

    public struct DeleteInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String

        public init(dryRun: Bool? = nil, internetGatewayId: String) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case internetGatewayId = "internetGatewayId"
        }
    }

    public struct CreateSecurityGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "GroupDescription"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
        public let vpcId: String?
        /// The name of the security group. Constraints: Up to 255 characters in length. Cannot start with sg-. Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let groupName: String
        /// A description for the security group. This is informational only. Constraints: Up to 255 characters in length Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String? = nil, groupName: String, description: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.groupName = groupName
            self.description = description
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case groupName = "GroupName"
            case description = "GroupDescription"
            case dryRun = "dryRun"
        }
    }

    public struct ImportInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTask", location: .body(locationName: "conversionTask"), required: false, type: .structure)
        ]
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct EbsInstanceBlockDeviceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(deleteOnTermination: Bool? = nil, volumeId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case volumeId = "volumeId"
        }
    }

    public struct ModifyReservedInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "ReservedInstancesId"), required: true, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "ReservedInstancesConfigurationSetItemType"), required: true, type: .structure)
        ]
        /// The IDs of the Reserved Instances to modify.
        public let reservedInstancesIds: ReservedInstancesIdStringList
        /// A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The configuration settings for the Reserved Instances to modify.
        public let targetConfigurations: ReservedInstancesConfigurationList

        public init(reservedInstancesIds: ReservedInstancesIdStringList, clientToken: String? = nil, targetConfigurations: ReservedInstancesConfigurationList) {
            self.reservedInstancesIds = reservedInstancesIds
            self.clientToken = clientToken
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesIds = "ReservedInstancesId"
            case clientToken = "clientToken"
            case targetConfigurations = "ReservedInstancesConfigurationSetItemType"
        }
    }

    public struct ModifyInstanceCreditSpecificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnsuccessfulInstanceCreditSpecifications", location: .body(locationName: "unsuccessfulInstanceCreditSpecificationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SuccessfulInstanceCreditSpecifications", location: .body(locationName: "successfulInstanceCreditSpecificationSet"), required: false, type: .structure)
        ]
        /// Information about the instances whose credit option for CPU usage was not modified.
        public let unsuccessfulInstanceCreditSpecifications: UnsuccessfulInstanceCreditSpecificationSet?
        /// Information about the instances whose credit option for CPU usage was successfully modified.
        public let successfulInstanceCreditSpecifications: SuccessfulInstanceCreditSpecificationSet?

        public init(unsuccessfulInstanceCreditSpecifications: UnsuccessfulInstanceCreditSpecificationSet? = nil, successfulInstanceCreditSpecifications: SuccessfulInstanceCreditSpecificationSet? = nil) {
            self.unsuccessfulInstanceCreditSpecifications = unsuccessfulInstanceCreditSpecifications
            self.successfulInstanceCreditSpecifications = successfulInstanceCreditSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessfulInstanceCreditSpecifications = "unsuccessfulInstanceCreditSpecificationSet"
            case successfulInstanceCreditSpecifications = "successfulInstanceCreditSpecificationSet"
        }
    }

    public struct DescribeSpotFleetRequestHistoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "HistoryRecords", location: .body(locationName: "historyRecordSet"), required: true, type: .structure), 
            AWSShapeMember(label: "LastEvaluatedTime", location: .body(locationName: "lastEvaluatedTime"), required: true, type: .timestamp)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp
        /// Information about the events in the history of the Spot Fleet request.
        public let historyRecords: HistoryRecords
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
        public let lastEvaluatedTime: TimeStamp

        public init(nextToken: String? = nil, spotFleetRequestId: String, startTime: TimeStamp, historyRecords: HistoryRecords, lastEvaluatedTime: TimeStamp) {
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.startTime = startTime
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case startTime = "startTime"
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime = "lastEvaluatedTime"
        }
    }

    public struct NetworkInterfaceIpv6AddressesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkInterfaceIpv6Address]?

        public init(item: [NetworkInterfaceIpv6Address]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSubnetsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", location: .body(locationName: "subnetSet"), required: false, type: .structure)
        ]
        /// Information about one or more subnets.
        public let subnets: SubnetList?

        public init(subnets: SubnetList? = nil) {
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "subnetSet"
        }
    }

    public struct VpcIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .list)
        ]
        public let vpcId: [String]?

        public init(vpcId: [String]? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct CapacityReservationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CapacityReservation]?

        public init(item: [CapacityReservation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TransitGatewayVpcAttachmentList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayVpcAttachment]?

        public init(item: [TransitGatewayVpcAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NatGatewayAddressList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NatGatewayAddress]?

        public init(item: [NatGatewayAddress]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum SpotInstanceType: String, CustomStringConvertible, Codable {
        case oneTime = "one-time"
        case persistent = "persistent"
        public var description: String { return self.rawValue }
    }

    public struct CapacityReservationTargetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationId", location: .body(locationName: "capacityReservationId"), required: false, type: .string)
        ]
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?

        public init(capacityReservationId: String? = nil) {
            self.capacityReservationId = capacityReservationId
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "capacityReservationId"
        }
    }

    public struct ReservedInstancesModificationIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesModificationId", required: false, type: .list)
        ]
        public let reservedInstancesModificationId: [String]?

        public init(reservedInstancesModificationId: [String]? = nil) {
            self.reservedInstancesModificationId = reservedInstancesModificationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationId = "ReservedInstancesModificationId"
        }
    }

    public struct LaunchTemplateSpotMarketOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceType", location: .body(locationName: "spotInstanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", location: .body(locationName: "maxPrice"), required: false, type: .string), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer)
        ]
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances.
        public let maxPrice: String?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
        public let validUntil: TimeStamp?
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int32?

        public init(spotInstanceType: SpotInstanceType? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, validUntil: TimeStamp? = nil, blockDurationMinutes: Int32? = nil) {
            self.spotInstanceType = spotInstanceType
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.validUntil = validUntil
            self.blockDurationMinutes = blockDurationMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceType = "spotInstanceType"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case maxPrice = "maxPrice"
            case validUntil = "validUntil"
            case blockDurationMinutes = "blockDurationMinutes"
        }
    }

    public struct ImportSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotTaskDetail", location: .body(locationName: "snapshotTaskDetail"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string)
        ]
        /// Information about the import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?

        public init(snapshotTaskDetail: SnapshotTaskDetail? = nil, description: String? = nil, importTaskId: String? = nil) {
            self.snapshotTaskDetail = snapshotTaskDetail
            self.description = description
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotTaskDetail = "snapshotTaskDetail"
            case description = "description"
            case importTaskId = "importTaskId"
        }
    }

    public struct DescribeFpgaImageAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageAttribute", location: .body(locationName: "fpgaImageAttribute"), required: false, type: .structure)
        ]
        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute = "fpgaImageAttribute"
        }
    }

    public struct PublicIpv4PoolRangeSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PublicIpv4PoolRange]?

        public init(item: [PublicIpv4PoolRange]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VersionStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TransitGatewayRouteTableAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The resource type.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?

        public init(resourceType: TransitGatewayAttachmentResourceType? = nil, resourceId: String? = nil, transitGatewayAttachmentId: String? = nil, state: TransitGatewayAssociationState? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case resourceId = "resourceId"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case state = "state"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionEvents", required: true, type: .structure), 
            AWSShapeMember(label: "ServiceId", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectionNotificationArn", required: true, type: .string)
        ]
        /// One or more endpoint events for which to receive notifications. Valid values are Accept, Connect, Delete, and Reject.
        public let connectionEvents: ValueStringList
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the endpoint. 
        public let vpcEndpointId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ARN of the SNS topic for the notifications.
        public let connectionNotificationArn: String

        public init(connectionEvents: ValueStringList, serviceId: String? = nil, clientToken: String? = nil, vpcEndpointId: String? = nil, dryRun: Bool? = nil, connectionNotificationArn: String) {
            self.connectionEvents = connectionEvents
            self.serviceId = serviceId
            self.clientToken = clientToken
            self.vpcEndpointId = vpcEndpointId
            self.dryRun = dryRun
            self.connectionNotificationArn = connectionNotificationArn
        }

        private enum CodingKeys: String, CodingKey {
            case connectionEvents = "ConnectionEvents"
            case serviceId = "ServiceId"
            case clientToken = "ClientToken"
            case vpcEndpointId = "VpcEndpointId"
            case dryRun = "DryRun"
            case connectionNotificationArn = "ConnectionNotificationArn"
        }
    }

    public struct AttachVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Device", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
        public let volumeId: String
        /// The device name (for example, /dev/sdh or xvdh).
        public let device: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, volumeId: String, device: String, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.volumeId = volumeId
            self.device = device
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
            case device = "Device"
            case dryRun = "dryRun"
        }
    }

    public struct ElasticGpuAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticGpuId", location: .body(locationName: "elasticGpuId"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuAssociationState", location: .body(locationName: "elasticGpuAssociationState"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuAssociationTime", location: .body(locationName: "elasticGpuAssociationTime"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuAssociationId", location: .body(locationName: "elasticGpuAssociationId"), required: false, type: .string)
        ]
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?
        /// The state of the association between the instance and the Elastic Graphics accelerator.
        public let elasticGpuAssociationState: String?
        /// The time the Elastic Graphics accelerator was associated with the instance.
        public let elasticGpuAssociationTime: String?
        /// The ID of the association.
        public let elasticGpuAssociationId: String?

        public init(elasticGpuId: String? = nil, elasticGpuAssociationState: String? = nil, elasticGpuAssociationTime: String? = nil, elasticGpuAssociationId: String? = nil) {
            self.elasticGpuId = elasticGpuId
            self.elasticGpuAssociationState = elasticGpuAssociationState
            self.elasticGpuAssociationTime = elasticGpuAssociationTime
            self.elasticGpuAssociationId = elasticGpuAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuId = "elasticGpuId"
            case elasticGpuAssociationState = "elasticGpuAssociationState"
            case elasticGpuAssociationTime = "elasticGpuAssociationTime"
            case elasticGpuAssociationId = "elasticGpuAssociationId"
        }
    }

    public struct CreateNetworkAclResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAcl", location: .body(locationName: "networkAcl"), required: false, type: .structure)
        ]
        /// Information about the network ACL.
        public let networkAcl: NetworkAcl?

        public init(networkAcl: NetworkAcl? = nil) {
            self.networkAcl = networkAcl
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcl = "networkAcl"
        }
    }

    public struct VpnConnectionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpnConnection]?

        public init(item: [VpnConnection]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteTransitGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGateway", location: .body(locationName: "transitGateway"), required: false, type: .structure)
        ]
        /// Information about the deleted transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct GroupIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string)
        ]
        /// The name of the security group.
        public let groupName: String?
        /// The ID of the security group.
        public let groupId: String?

        public init(groupName: String? = nil, groupId: String? = nil) {
            self.groupName = groupName
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case groupId = "groupId"
        }
    }

    public struct TransitGatewayAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceOwnerId", location: .body(locationName: "resourceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TransitGatewayOwnerId", location: .body(locationName: "transitGatewayOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string)
        ]
        /// The ID of the AWS account that owns the resource.
        public let resourceOwnerId: String?
        /// The tags for the attachment.
        public let tags: TagList?
        /// The resource type.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The ID of the AWS account that owns the transit gateway.
        public let transitGatewayOwnerId: String?
        /// The attachment state.
        public let state: TransitGatewayAttachmentState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The association.
        public let association: TransitGatewayAttachmentAssociation?
        /// The ID of the resource.
        public let resourceId: String?

        public init(resourceOwnerId: String? = nil, tags: TagList? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, creationTime: TimeStamp? = nil, transitGatewayOwnerId: String? = nil, state: TransitGatewayAttachmentState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, association: TransitGatewayAttachmentAssociation? = nil, resourceId: String? = nil) {
            self.resourceOwnerId = resourceOwnerId
            self.tags = tags
            self.resourceType = resourceType
            self.creationTime = creationTime
            self.transitGatewayOwnerId = transitGatewayOwnerId
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.association = association
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceOwnerId = "resourceOwnerId"
            case tags = "tagSet"
            case resourceType = "resourceType"
            case creationTime = "creationTime"
            case transitGatewayOwnerId = "transitGatewayOwnerId"
            case state = "state"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayId = "transitGatewayId"
            case association = "association"
            case resourceId = "resourceId"
        }
    }

    public struct EnableVpcClassicLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public struct EnableVgwRoutePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "GatewayId", required: true, type: .string)
        ]
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of the virtual private gateway.
        public let gatewayId: String

        public init(routeTableId: String, gatewayId: String) {
            self.routeTableId = routeTableId
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "RouteTableId"
            case gatewayId = "GatewayId"
        }
    }

    public struct CancelReservedInstancesListingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .structure)
        ]
        /// The Reserved Instance listing.
        public let reservedInstancesListings: ReservedInstancesListingList?

        public init(reservedInstancesListings: ReservedInstancesListingList? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// The applicable error for the T2 or T3 instance whose credit option for CPU usage was not modified.
        public let error: UnsuccessfulInstanceCreditSpecificationItemError?

        public init(instanceId: String? = nil, error: UnsuccessfulInstanceCreditSpecificationItemError? = nil) {
            self.instanceId = instanceId
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case error = "error"
        }
    }

    public struct LaunchTemplateIamInstanceProfileSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The name of the instance profile.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct ServiceDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", location: .body(locationName: "owner"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZoneSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "AcceptanceRequired", location: .body(locationName: "acceptanceRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "BaseEndpointDnsNames", location: .body(locationName: "baseEndpointDnsNameSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcEndpointPolicySupported", location: .body(locationName: "vpcEndpointPolicySupported"), required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceType", location: .body(locationName: "serviceType"), required: false, type: .structure)
        ]
        /// The AWS account ID of the service owner.
        public let owner: String?
        /// The Availability Zones in which the service is available.
        public let availabilityZones: ValueStringList?
        /// The Amazon Resource Name (ARN) of the service.
        public let serviceName: String?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.
        public let acceptanceRequired: Bool?
        /// The DNS names for the service.
        public let baseEndpointDnsNames: ValueStringList?
        /// Indicates whether the service supports endpoint policies.
        public let vpcEndpointPolicySupported: Bool?
        /// The type of service.
        public let serviceType: ServiceTypeDetailSet?

        public init(owner: String? = nil, availabilityZones: ValueStringList? = nil, serviceName: String? = nil, privateDnsName: String? = nil, acceptanceRequired: Bool? = nil, baseEndpointDnsNames: ValueStringList? = nil, vpcEndpointPolicySupported: Bool? = nil, serviceType: ServiceTypeDetailSet? = nil) {
            self.owner = owner
            self.availabilityZones = availabilityZones
            self.serviceName = serviceName
            self.privateDnsName = privateDnsName
            self.acceptanceRequired = acceptanceRequired
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.vpcEndpointPolicySupported = vpcEndpointPolicySupported
            self.serviceType = serviceType
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "owner"
            case availabilityZones = "availabilityZoneSet"
            case serviceName = "serviceName"
            case privateDnsName = "privateDnsName"
            case acceptanceRequired = "acceptanceRequired"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case vpcEndpointPolicySupported = "vpcEndpointPolicySupported"
            case serviceType = "serviceType"
        }
    }

    public struct ExportTaskList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ExportTask]?

        public init(item: [ExportTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateLicenseList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateLicenseConfiguration]?

        public init(item: [LaunchTemplateLicenseConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum TransitGatewayPropagationState: String, CustomStringConvertible, Codable {
        case enabling = "enabling"
        case enabled = "enabled"
        case disabling = "disabling"
        case disabled = "disabled"
        public var description: String { return self.rawValue }
    }

    public struct ReservedInstancesId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct CreateInstanceExportTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTask", location: .body(locationName: "exportTask"), required: false, type: .structure)
        ]
        /// Information about the instance export task.
        public let exportTask: ExportTask?

        public init(exportTask: ExportTask? = nil) {
            self.exportTask = exportTask
        }

        private enum CodingKeys: String, CodingKey {
            case exportTask = "exportTask"
        }
    }

    public struct PurchaseRequestSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PurchaseRequest", required: false, type: .list)
        ]
        public let purchaseRequest: [PurchaseRequest]?

        public init(purchaseRequest: [PurchaseRequest]? = nil) {
            self.purchaseRequest = purchaseRequest
        }

        private enum CodingKeys: String, CodingKey {
            case purchaseRequest = "PurchaseRequest"
        }
    }

    public struct InstanceIpv6Address: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", location: .body(locationName: "ipv6Address"), required: false, type: .string)
        ]
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
        }
    }

    public struct ExportTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportToS3Task", location: .body(locationName: "exportToS3"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceExportDetails", location: .body(locationName: "instanceExport"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ExportTaskId", location: .body(locationName: "exportTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// Information about the export task.
        public let exportToS3Task: ExportToS3Task?
        /// Information about the instance to export.
        public let instanceExportDetails: InstanceExportDetails?
        /// A description of the resource being exported.
        public let description: String?
        /// The ID of the export task.
        public let exportTaskId: String?
        /// The state of the export task.
        public let state: ExportTaskState?
        /// The status message related to the export task.
        public let statusMessage: String?

        public init(exportToS3Task: ExportToS3Task? = nil, instanceExportDetails: InstanceExportDetails? = nil, description: String? = nil, exportTaskId: String? = nil, state: ExportTaskState? = nil, statusMessage: String? = nil) {
            self.exportToS3Task = exportToS3Task
            self.instanceExportDetails = instanceExportDetails
            self.description = description
            self.exportTaskId = exportTaskId
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case exportToS3Task = "exportToS3"
            case instanceExportDetails = "instanceExport"
            case description = "description"
            case exportTaskId = "exportTaskId"
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct DescribeSpotInstanceRequestsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .structure)
        ]
        /// One or more Spot Instance requests.
        public let spotInstanceRequests: SpotInstanceRequestList?

        public init(spotInstanceRequests: SpotInstanceRequestList? = nil) {
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct DeleteNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(networkInterfaceId: String, dryRun: Bool? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case dryRun = "dryRun"
        }
    }

    public struct VpnGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcAttachments", location: .body(locationName: "attachments"), required: false, type: .structure), 
            AWSShapeMember(label: "AmazonSideAsn", location: .body(locationName: "amazonSideAsn"), required: false, type: .long), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "VpnGatewayId", location: .body(locationName: "vpnGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string)
        ]
        /// Any tags assigned to the virtual private gateway.
        public let tags: TagList?
        /// Any VPCs attached to the virtual private gateway.
        public let vpcAttachments: VpcAttachmentList?
        /// The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
        public let amazonSideAsn: Int64?
        /// The type of VPN connection the virtual private gateway supports.
        public let `type`: GatewayType?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?
        /// The current state of the virtual private gateway.
        public let state: VpnState?
        /// The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
        public let availabilityZone: String?

        public init(tags: TagList? = nil, vpcAttachments: VpcAttachmentList? = nil, amazonSideAsn: Int64? = nil, type: GatewayType? = nil, vpnGatewayId: String? = nil, state: VpnState? = nil, availabilityZone: String? = nil) {
            self.tags = tags
            self.vpcAttachments = vpcAttachments
            self.amazonSideAsn = amazonSideAsn
            self.`type` = `type`
            self.vpnGatewayId = vpnGatewayId
            self.state = state
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case vpcAttachments = "attachments"
            case amazonSideAsn = "amazonSideAsn"
            case `type` = "type"
            case vpnGatewayId = "vpnGatewayId"
            case state = "state"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct Purchase: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "HostIdSet", location: .body(locationName: "hostIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string)
        ]
        /// The payment option for the reservation.
        public let paymentOption: PaymentOption?
        /// The ID of the reservation.
        public let hostReservationId: String?
        /// The currency in which the UpfrontPrice and HourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The instance family on the Dedicated Host that the reservation can be associated with.
        public let instanceFamily: String?
        /// The duration of the reservation's term in seconds.
        public let duration: Int32?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        public let hostIdSet: ResponseHostIdSet?
        /// The hourly price of the reservation per hour.
        public let hourlyPrice: String?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?

        public init(paymentOption: PaymentOption? = nil, hostReservationId: String? = nil, currencyCode: CurrencyCodeValues? = nil, instanceFamily: String? = nil, duration: Int32? = nil, hostIdSet: ResponseHostIdSet? = nil, hourlyPrice: String? = nil, upfrontPrice: String? = nil) {
            self.paymentOption = paymentOption
            self.hostReservationId = hostReservationId
            self.currencyCode = currencyCode
            self.instanceFamily = instanceFamily
            self.duration = duration
            self.hostIdSet = hostIdSet
            self.hourlyPrice = hourlyPrice
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case paymentOption = "paymentOption"
            case hostReservationId = "hostReservationId"
            case currencyCode = "currencyCode"
            case instanceFamily = "instanceFamily"
            case duration = "duration"
            case hostIdSet = "hostIdSet"
            case hourlyPrice = "hourlyPrice"
            case upfrontPrice = "upfrontPrice"
        }
    }

    public enum DeleteFleetErrorCode: String, CustomStringConvertible, Codable {
        case fleetiddoesnotexist = "fleetIdDoesNotExist"
        case fleetidmalformed = "fleetIdMalformed"
        case fleetnotindeletablestate = "fleetNotInDeletableState"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRegionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegionNames", location: .body(locationName: "RegionName"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The names of one or more regions.
        public let regionNames: RegionNameStringList?
        /// One or more filters.    endpoint - The endpoint of the region (for example, ec2.us-east-1.amazonaws.com).    region-name - The name of the region (for example, us-east-1).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(regionNames: RegionNameStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.regionNames = regionNames
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case regionNames = "RegionName"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct ActiveInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceHealth", location: .body(locationName: "instanceHealth"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string)
        ]
        /// The instance type.
        public let instanceType: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The health status of the instance. If the status of either the instance status check or the system status check is impaired, the health status of the instance is unhealthy. Otherwise, the health status is healthy.
        public let instanceHealth: InstanceHealthStatus?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?

        public init(instanceType: String? = nil, instanceId: String? = nil, instanceHealth: InstanceHealthStatus? = nil, spotInstanceRequestId: String? = nil) {
            self.instanceType = instanceType
            self.instanceId = instanceId
            self.instanceHealth = instanceHealth
            self.spotInstanceRequestId = spotInstanceRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case instanceId = "instanceId"
            case instanceHealth = "instanceHealth"
            case spotInstanceRequestId = "spotInstanceRequestId"
        }
    }

    public struct InstanceIpv6AddressListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIpv6Address", required: false, type: .list)
        ]
        public let instanceIpv6Address: [InstanceIpv6AddressRequest]?

        public init(instanceIpv6Address: [InstanceIpv6AddressRequest]? = nil) {
            self.instanceIpv6Address = instanceIpv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIpv6Address = "InstanceIpv6Address"
        }
    }

    public struct FleetLaunchTemplateConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", location: .body(locationName: "launchTemplateSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", location: .body(locationName: "overrides"), required: false, type: .structure)
        ]
        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: FleetLaunchTemplateOverridesList?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: FleetLaunchTemplateOverridesList? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct RejectVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct TargetConfigurationRequestSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetConfigurationRequest", required: false, type: .list)
        ]
        public let targetConfigurationRequest: [TargetConfigurationRequest]?

        public init(targetConfigurationRequest: [TargetConfigurationRequest]? = nil) {
            self.targetConfigurationRequest = targetConfigurationRequest
        }

        private enum CodingKeys: String, CodingKey {
            case targetConfigurationRequest = "TargetConfigurationRequest"
        }
    }

    public struct CreateNatGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: true, type: .string)
        ]
        /// The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        public let allocationId: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters.
        public let clientToken: String?
        /// The subnet in which to create the NAT gateway.
        public let subnetId: String

        public init(allocationId: String, clientToken: String? = nil, subnetId: String) {
            self.allocationId = allocationId
            self.clientToken = clientToken
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case clientToken = "ClientToken"
            case subnetId = "SubnetId"
        }
    }

    public struct VolumeIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: false, type: .list)
        ]
        public let volumeId: [String]?

        public init(volumeId: [String]? = nil) {
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
        }
    }

    public struct HibernationOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", required: false, type: .boolean)
        ]
        /// If you set this parameter to true, your instance is enabled for hibernation. Default: false 
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct ReservationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Reservation]?

        public init(item: [Reservation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum BatchState: String, CustomStringConvertible, Codable {
        case submitted = "submitted"
        case active = "active"
        case cancelled = "cancelled"
        case failed = "failed"
        case cancelledRunning = "cancelled_running"
        case cancelledTerminating = "cancelled_terminating"
        case modifying = "modifying"
        public var description: String { return self.rawValue }
    }

    public struct Reservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instancesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservationId", location: .body(locationName: "reservationId"), required: false, type: .string), 
            AWSShapeMember(label: "RequesterId", location: .body(locationName: "requesterId"), required: false, type: .string)
        ]
        /// [EC2-Classic only] One or more security groups.
        public let groups: GroupIdentifierList?
        /// The ID of the AWS account that owns the reservation.
        public let ownerId: String?
        /// One or more instances.
        public let instances: InstanceList?
        /// The ID of the reservation.
        public let reservationId: String?
        /// The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
        public let requesterId: String?

        public init(groups: GroupIdentifierList? = nil, ownerId: String? = nil, instances: InstanceList? = nil, reservationId: String? = nil, requesterId: String? = nil) {
            self.groups = groups
            self.ownerId = ownerId
            self.instances = instances
            self.reservationId = reservationId
            self.requesterId = requesterId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case ownerId = "ownerId"
            case instances = "instancesSet"
            case reservationId = "reservationId"
            case requesterId = "requesterId"
        }
    }

    public struct ReservedInstancesOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingClass", location: .body(locationName: "offeringClass"), required: false, type: .enum), 
            AWSShapeMember(label: "PricingDetails", location: .body(locationName: "pricingDetailsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .float), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .float), 
            AWSShapeMember(label: "RecurringCharges", location: .body(locationName: "recurringCharges"), required: false, type: .structure), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .long), 
            AWSShapeMember(label: "ReservedInstancesOfferingId", location: .body(locationName: "reservedInstancesOfferingId"), required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum), 
            AWSShapeMember(label: "Marketplace", location: .body(locationName: "marketplace"), required: false, type: .boolean)
        ]
        /// The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// If convertible it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If standard, it is not possible to perform an exchange.
        public let offeringClass: OfferingClassType?
        /// The pricing details of the Reserved Instance offering.
        public let pricingDetails: PricingDetailsList?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The recurring charge tag assigned to the resource.
        public let recurringCharges: RecurringChargesList?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The ID of the Reserved Instance offering. This is the offering ID used in GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
        public let reservedInstancesOfferingId: String?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// Whether the Reserved Instance is applied to instances in a region or an Availability Zone.
        public let scope: Scope?
        /// Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is true.
        public let marketplace: Bool?

        public init(currencyCode: CurrencyCodeValues? = nil, availabilityZone: String? = nil, instanceType: InstanceType? = nil, offeringType: OfferingTypeValues? = nil, instanceTenancy: Tenancy? = nil, offeringClass: OfferingClassType? = nil, pricingDetails: PricingDetailsList? = nil, usagePrice: Float? = nil, fixedPrice: Float? = nil, recurringCharges: RecurringChargesList? = nil, duration: Int64? = nil, reservedInstancesOfferingId: String? = nil, productDescription: RIProductDescription? = nil, scope: Scope? = nil, marketplace: Bool? = nil) {
            self.currencyCode = currencyCode
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.offeringType = offeringType
            self.instanceTenancy = instanceTenancy
            self.offeringClass = offeringClass
            self.pricingDetails = pricingDetails
            self.usagePrice = usagePrice
            self.fixedPrice = fixedPrice
            self.recurringCharges = recurringCharges
            self.duration = duration
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
            self.productDescription = productDescription
            self.scope = scope
            self.marketplace = marketplace
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case offeringType = "offeringType"
            case instanceTenancy = "instanceTenancy"
            case offeringClass = "offeringClass"
            case pricingDetails = "pricingDetailsSet"
            case usagePrice = "usagePrice"
            case fixedPrice = "fixedPrice"
            case recurringCharges = "recurringCharges"
            case duration = "duration"
            case reservedInstancesOfferingId = "reservedInstancesOfferingId"
            case productDescription = "productDescription"
            case scope = "scope"
            case marketplace = "marketplace"
        }
    }

    public struct DescribeCustomerGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGateways", location: .body(locationName: "customerGatewaySet"), required: false, type: .structure)
        ]
        /// Information about one or more customer gateways.
        public let customerGateways: CustomerGatewayList?

        public init(customerGateways: CustomerGatewayList? = nil) {
            self.customerGateways = customerGateways
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateways = "customerGatewaySet"
        }
    }

    public enum AttachmentStatus: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        public var description: String { return self.rawValue }
    }

    public struct InstanceBlockDeviceMappingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceBlockDeviceMapping]?

        public init(item: [InstanceBlockDeviceMapping]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateVpnConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "CustomerGatewayId", required: true, type: .string)
        ]
        /// The type of VPN connection (ipsec.1).
        public let `type`: String
        /// The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
        public let vpnGatewayId: String?
        /// The options for the VPN connection.
        public let options: VpnConnectionOptionsSpecification?
        /// The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
        public let transitGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the customer gateway.
        public let customerGatewayId: String

        public init(type: String, vpnGatewayId: String? = nil, options: VpnConnectionOptionsSpecification? = nil, transitGatewayId: String? = nil, dryRun: Bool? = nil, customerGatewayId: String) {
            self.`type` = `type`
            self.vpnGatewayId = vpnGatewayId
            self.options = options
            self.transitGatewayId = transitGatewayId
            self.dryRun = dryRun
            self.customerGatewayId = customerGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case vpnGatewayId = "VpnGatewayId"
            case options = "options"
            case transitGatewayId = "TransitGatewayId"
            case dryRun = "dryRun"
            case customerGatewayId = "CustomerGatewayId"
        }
    }

    public struct DescribeVpcEndpointConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointConnections", location: .body(locationName: "vpcEndpointConnectionSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more VPC endpoint connections.
        public let vpcEndpointConnections: VpcEndpointConnectionSet?

        public init(nextToken: String? = nil, vpcEndpointConnections: VpcEndpointConnectionSet? = nil) {
            self.nextToken = nextToken
            self.vpcEndpointConnections = vpcEndpointConnections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcEndpointConnections = "vpcEndpointConnectionSet"
        }
    }

    public struct IamInstanceProfileSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]
        /// The name of the instance profile.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case arn = "arn"
        }
    }

    public struct DhcpConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "valueSet"), required: false, type: .structure)
        ]
        /// The name of a DHCP option.
        public let key: String?
        /// One or more values for the DHCP option.
        public let values: DhcpConfigurationValueList?

        public init(key: String? = nil, values: DhcpConfigurationValueList? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "valueSet"
        }
    }

    public struct UserBucketDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "S3Key", location: .body(locationName: "s3Key"), required: false, type: .string)
        ]
        /// The S3 bucket from which the disk image was created.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct BundleInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTask", location: .body(locationName: "bundleInstanceTask"), required: false, type: .structure)
        ]
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct FleetLaunchTemplateOverrides: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Priority", location: .body(locationName: "priority"), required: false, type: .double), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "WeightedCapacity", location: .body(locationName: "weightedCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "MaxPrice", location: .body(locationName: "maxPrice"), required: false, type: .string)
        ]
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The priority for the launch template override. If AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the override has the lowest priority.
        public let priority: Double?
        /// The location where the instance launched, if applicable.
        public let placement: PlacementResponse?
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let maxPrice: String?

        public init(subnetId: String? = nil, priority: Double? = nil, placement: PlacementResponse? = nil, availabilityZone: String? = nil, instanceType: InstanceType? = nil, weightedCapacity: Double? = nil, maxPrice: String? = nil) {
            self.subnetId = subnetId
            self.priority = priority
            self.placement = placement
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
            self.maxPrice = maxPrice
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case priority = "priority"
            case placement = "placement"
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case weightedCapacity = "weightedCapacity"
            case maxPrice = "maxPrice"
        }
    }

    public struct ResourceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TransitGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TransitGatewayArn", location: .body(locationName: "transitGatewayArn"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The tags for the transit gateway.
        public let tags: TagList?
        /// The transit gateway options.
        public let options: TransitGatewayOptions?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the transit gateway.
        public let transitGatewayArn: String?
        /// The ID of the AWS account ID that owns the transit gateway.
        public let ownerId: String?
        /// The state of the transit gateway.
        public let state: TransitGatewayState?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The description of the transit gateway.
        public let description: String?

        public init(tags: TagList? = nil, options: TransitGatewayOptions? = nil, creationTime: TimeStamp? = nil, transitGatewayArn: String? = nil, ownerId: String? = nil, state: TransitGatewayState? = nil, transitGatewayId: String? = nil, description: String? = nil) {
            self.tags = tags
            self.options = options
            self.creationTime = creationTime
            self.transitGatewayArn = transitGatewayArn
            self.ownerId = ownerId
            self.state = state
            self.transitGatewayId = transitGatewayId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case options = "options"
            case creationTime = "creationTime"
            case transitGatewayArn = "transitGatewayArn"
            case ownerId = "ownerId"
            case state = "state"
            case transitGatewayId = "transitGatewayId"
            case description = "description"
        }
    }

    public struct PciId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceId", required: false, type: .string), 
            AWSShapeMember(label: "SubsystemId", required: false, type: .string), 
            AWSShapeMember(label: "VendorId", required: false, type: .string), 
            AWSShapeMember(label: "SubsystemVendorId", required: false, type: .string)
        ]
        /// The ID of the device.
        public let deviceId: String?
        /// The ID of the subsystem.
        public let subsystemId: String?
        /// The ID of the vendor.
        public let vendorId: String?
        /// The ID of the vendor for the subsystem.
        public let subsystemVendorId: String?

        public init(deviceId: String? = nil, subsystemId: String? = nil, vendorId: String? = nil, subsystemVendorId: String? = nil) {
            self.deviceId = deviceId
            self.subsystemId = subsystemId
            self.vendorId = vendorId
            self.subsystemVendorId = subsystemVendorId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case subsystemId = "SubsystemId"
            case vendorId = "VendorId"
            case subsystemVendorId = "SubsystemVendorId"
        }
    }

    public struct VpcList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Vpc]?

        public init(item: [Vpc]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotIds", location: .body(locationName: "SnapshotId"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerIds", location: .body(locationName: "Owner"), required: false, type: .structure), 
            AWSShapeMember(label: "RestorableByUserIds", location: .body(locationName: "RestorableBy"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters.    description - A description of the snapshot.    owner-alias - Value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.    owner-id - The ID of the AWS account that owns the snapshot.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.  
        public let filters: FilterList?
        /// One or more snapshot IDs. Default: Describes snapshots for which you have launch permissions.
        public let snapshotIds: SnapshotIdStringList?
        /// Returns the snapshots owned by the specified owner. Multiple owners can be specified.
        public let ownerIds: OwnerStringList?
        /// One or more AWS accounts IDs that can create volumes from the snapshot.
        public let restorableByUserIds: [String]?
        /// The NextToken value returned from a previous paginated DescribeSnapshots request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of snapshot results returned by DescribeSnapshots in paginated output. When this parameter is used, DescribeSnapshots only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeSnapshots request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeSnapshots returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, snapshotIds: SnapshotIdStringList? = nil, ownerIds: OwnerStringList? = nil, restorableByUserIds: [String]? = nil, nextToken: String? = nil, dryRun: Bool? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.snapshotIds = snapshotIds
            self.ownerIds = ownerIds
            self.restorableByUserIds = restorableByUserIds
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case snapshotIds = "SnapshotId"
            case ownerIds = "Owner"
            case restorableByUserIds = "RestorableBy"
            case nextToken = "NextToken"
            case dryRun = "dryRun"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeConversionTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTaskIds", location: .body(locationName: "conversionTaskId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more conversion task IDs.
        public let conversionTaskIds: ConversionIdStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(conversionTaskIds: ConversionIdStringList? = nil, dryRun: Bool? = nil) {
            self.conversionTaskIds = conversionTaskIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskIds = "conversionTaskId"
            case dryRun = "dryRun"
        }
    }

    public struct ReplaceNetworkAclEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "Icmp"), required: false, type: .structure), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: true, type: .enum), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string)
        ]
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// The rule number of the entry to replace.
        public let ruleNumber: Int32
        /// The ID of the ACL.
        public let networkAclId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
        public let cidrBlock: String?
        /// Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule.
        public let egress: Bool
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
        public let ipv6CidrBlock: String?

        public init(icmpTypeCode: IcmpTypeCode? = nil, portRange: PortRange? = nil, ruleAction: RuleAction, ruleNumber: Int32, networkAclId: String, dryRun: Bool? = nil, protocol: String, cidrBlock: String? = nil, egress: Bool, ipv6CidrBlock: String? = nil) {
            self.icmpTypeCode = icmpTypeCode
            self.portRange = portRange
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.networkAclId = networkAclId
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case icmpTypeCode = "Icmp"
            case portRange = "portRange"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
            case networkAclId = "networkAclId"
            case dryRun = "dryRun"
            case `protocol` = "protocol"
            case cidrBlock = "cidrBlock"
            case egress = "egress"
            case ipv6CidrBlock = "ipv6CidrBlock"
        }
    }

    public struct UnassignPrivateIpAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddress"), required: true, type: .structure)
        ]
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
        public let privateIpAddresses: PrivateIpAddressStringList

        public init(networkInterfaceId: String, privateIpAddresses: PrivateIpAddressStringList) {
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddresses = "privateIpAddress"
        }
    }

    public struct GetHostReservationPurchasePreviewRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingId", required: true, type: .string), 
            AWSShapeMember(label: "HostIdSet", required: true, type: .structure)
        ]
        /// The offering ID of the reservation.
        public let offeringId: String
        /// The IDs of the Dedicated Hosts with which the reservation is associated.
        public let hostIdSet: RequestHostIdSet

        public init(offeringId: String, hostIdSet: RequestHostIdSet) {
            self.offeringId = offeringId
            self.hostIdSet = hostIdSet
        }

        private enum CodingKeys: String, CodingKey {
            case offeringId = "OfferingId"
            case hostIdSet = "HostIdSet"
        }
    }

    public enum ExportTaskState: String, CustomStringConvertible, Codable {
        case active = "active"
        case cancelling = "cancelling"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public struct HostReservationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [HostReservation]?

        public init(item: [HostReservation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ReportInstanceReasonCodes: String, CustomStringConvertible, Codable {
        case instanceStuckInState = "instance-stuck-in-state"
        case unresponsive = "unresponsive"
        case notAcceptingCredentials = "not-accepting-credentials"
        case passwordNotAvailable = "password-not-available"
        case performanceNetwork = "performance-network"
        case performanceInstanceStore = "performance-instance-store"
        case performanceEbsVolume = "performance-ebs-volume"
        case performanceOther = "performance-other"
        case other = "other"
        public var description: String { return self.rawValue }
    }

    public struct UnsuccessfulItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: true, type: .structure), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string)
        ]
        /// Information about the error.
        public let error: UnsuccessfulItemError
        /// The ID of the resource.
        public let resourceId: String?

        public init(error: UnsuccessfulItemError, resourceId: String? = nil) {
            self.error = error
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case resourceId = "resourceId"
        }
    }

    public struct LaunchTemplatePlacement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .string), 
            AWSShapeMember(label: "SpreadDomain", location: .body(locationName: "spreadDomain"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string)
        ]
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. 
        public let tenancy: Tenancy?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The affinity setting for the instance on the Dedicated Host.
        public let affinity: String?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The Availability Zone of the instance.
        public let availabilityZone: String?

        public init(tenancy: Tenancy? = nil, hostId: String? = nil, groupName: String? = nil, affinity: String? = nil, spreadDomain: String? = nil, availabilityZone: String? = nil) {
            self.tenancy = tenancy
            self.hostId = hostId
            self.groupName = groupName
            self.affinity = affinity
            self.spreadDomain = spreadDomain
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case tenancy = "tenancy"
            case hostId = "hostId"
            case groupName = "groupName"
            case affinity = "affinity"
            case spreadDomain = "spreadDomain"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionNotificationSet", location: .body(locationName: "connectionNotificationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// One or more notifications.
        public let connectionNotificationSet: ConnectionNotificationSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(connectionNotificationSet: ConnectionNotificationSet? = nil, nextToken: String? = nil) {
            self.connectionNotificationSet = connectionNotificationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationSet = "connectionNotificationSet"
            case nextToken = "nextToken"
        }
    }

    public struct CreateTransitGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGateway", location: .body(locationName: "transitGateway"), required: false, type: .structure)
        ]
        /// Information about the transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway = "transitGateway"
        }
    }

    public struct TargetReservationValueSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TargetReservationValue]?

        public init(item: [TargetReservationValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetConsoleOutputResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Output", location: .body(locationName: "output"), required: false, type: .string), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.
        public let output: String?
        /// The time at which the output was last updated.
        public let timestamp: TimeStamp?
        /// The ID of the instance.
        public let instanceId: String?

        public init(output: String? = nil, timestamp: TimeStamp? = nil, instanceId: String? = nil) {
            self.output = output
            self.timestamp = timestamp
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
            case timestamp = "timestamp"
            case instanceId = "instanceId"
        }
    }

    public struct CreateVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "AmazonSideAsn", required: false, type: .long), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// The type of VPN connection this virtual private gateway supports.
        public let `type`: GatewayType
        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range. Default: 64512
        public let amazonSideAsn: Int64?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Availability Zone for the virtual private gateway.
        public let availabilityZone: String?

        public init(type: GatewayType, amazonSideAsn: Int64? = nil, dryRun: Bool? = nil, availabilityZone: String? = nil) {
            self.`type` = `type`
            self.amazonSideAsn = amazonSideAsn
            self.dryRun = dryRun
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case amazonSideAsn = "AmazonSideAsn"
            case dryRun = "dryRun"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct InstanceNetworkInterfaceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceNetworkInterface]?

        public init(item: [InstanceNetworkInterface]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type (vpc | vpn).    transit-gateway-attachment-id - The ID of the attachment.  
        public let filters: FilterList?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil, transitGatewayRouteTableId: String) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct Vpc: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", location: .body(locationName: "dhcpOptionsId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociationSet", location: .body(locationName: "ipv6CidrBlockAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "CidrBlockAssociationSet", location: .body(locationName: "cidrBlockAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "IsDefault", location: .body(locationName: "isDefault"), required: false, type: .boolean)
        ]
        /// The ID of the set of DHCP options you've associated with the VPC (or default if the default options are associated with the VPC).
        public let dhcpOptionsId: String?
        /// The allowed tenancy of instances launched into the VPC.
        public let instanceTenancy: Tenancy?
        /// The ID of the VPC.
        public let vpcId: String?
        /// Any tags assigned to the VPC.
        public let tags: TagList?
        /// Information about the IPv6 CIDR blocks associated with the VPC.
        public let ipv6CidrBlockAssociationSet: VpcIpv6CidrBlockAssociationSet?
        /// Information about the IPv4 CIDR blocks associated with the VPC.
        public let cidrBlockAssociationSet: VpcCidrBlockAssociationSet?
        /// The current state of the VPC.
        public let state: VpcState?
        /// The ID of the AWS account that owns the VPC.
        public let ownerId: String?
        /// The primary IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// Indicates whether the VPC is the default VPC.
        public let isDefault: Bool?

        public init(dhcpOptionsId: String? = nil, instanceTenancy: Tenancy? = nil, vpcId: String? = nil, tags: TagList? = nil, ipv6CidrBlockAssociationSet: VpcIpv6CidrBlockAssociationSet? = nil, cidrBlockAssociationSet: VpcCidrBlockAssociationSet? = nil, state: VpcState? = nil, ownerId: String? = nil, cidrBlock: String? = nil, isDefault: Bool? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.instanceTenancy = instanceTenancy
            self.vpcId = vpcId
            self.tags = tags
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.cidrBlockAssociationSet = cidrBlockAssociationSet
            self.state = state
            self.ownerId = ownerId
            self.cidrBlock = cidrBlock
            self.isDefault = isDefault
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "dhcpOptionsId"
            case instanceTenancy = "instanceTenancy"
            case vpcId = "vpcId"
            case tags = "tagSet"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case cidrBlockAssociationSet = "cidrBlockAssociationSet"
            case state = "state"
            case ownerId = "ownerId"
            case cidrBlock = "cidrBlock"
            case isDefault = "isDefault"
        }
    }

    public struct DescribeSpotInstanceRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "SpotInstanceRequestIds", location: .body(locationName: "SpotInstanceRequestId"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot Request Status in the Amazon EC2 User Guide for Linux Instances.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.  
        public let filters: FilterList?
        /// One or more Spot Instance request IDs.
        public let spotInstanceRequestIds: SpotInstanceRequestIdList?

        public init(dryRun: Bool? = nil, filters: FilterList? = nil, spotInstanceRequestIds: SpotInstanceRequestIdList? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct DeleteFleetError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The error code.
        public let code: DeleteFleetErrorCode?
        /// The description for the error code.
        public let message: String?

        public init(code: DeleteFleetErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct LaunchPermissionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchPermission]?

        public init(item: [LaunchPermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateBlockDeviceMappingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VirtualName", required: false, type: .string), 
            AWSShapeMember(label: "Ebs", required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string)
        ]
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
        public let virtualName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: LaunchTemplateEbsBlockDeviceRequest?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?

        public init(virtualName: String? = nil, ebs: LaunchTemplateEbsBlockDeviceRequest? = nil, noDevice: String? = nil, deviceName: String? = nil) {
            self.virtualName = virtualName
            self.ebs = ebs
            self.noDevice = noDevice
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case virtualName = "VirtualName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case deviceName = "DeviceName"
        }
    }

    public struct CreateVpcEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "RouteTableId"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "SubnetId"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcEndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "PolicyDocument", required: false, type: .string), 
            AWSShapeMember(label: "ServiceName", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateDnsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure)
        ]
        /// (Gateway endpoint) One or more route table IDs.
        public let routeTableIds: ValueStringList?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the VPC in which the endpoint will be used.
        public let vpcId: String
        /// (Interface endpoint) The ID of one or more subnets in which to create an endpoint network interface.
        public let subnetIds: ValueStringList?
        /// The type of endpoint. Default: Gateway
        public let vpcEndpointType: VpcEndpointType?
        /// (Gateway endpoint) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
        public let policyDocument: String?
        /// The service name. To get a list of available services, use the DescribeVpcEndpointServices request, or get the name from the service provider.
        public let serviceName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// (Interface endpoint) Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the region (for example, kinesis.us-east-1.amazonaws.com) which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes. Default: false 
        public let privateDnsEnabled: Bool?
        /// (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
        public let securityGroupIds: ValueStringList?

        public init(routeTableIds: ValueStringList? = nil, clientToken: String? = nil, vpcId: String, subnetIds: ValueStringList? = nil, vpcEndpointType: VpcEndpointType? = nil, policyDocument: String? = nil, serviceName: String, dryRun: Bool? = nil, privateDnsEnabled: Bool? = nil, securityGroupIds: ValueStringList? = nil) {
            self.routeTableIds = routeTableIds
            self.clientToken = clientToken
            self.vpcId = vpcId
            self.subnetIds = subnetIds
            self.vpcEndpointType = vpcEndpointType
            self.policyDocument = policyDocument
            self.serviceName = serviceName
            self.dryRun = dryRun
            self.privateDnsEnabled = privateDnsEnabled
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableIds = "RouteTableId"
            case clientToken = "ClientToken"
            case vpcId = "VpcId"
            case subnetIds = "SubnetId"
            case vpcEndpointType = "VpcEndpointType"
            case policyDocument = "PolicyDocument"
            case serviceName = "ServiceName"
            case dryRun = "DryRun"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case securityGroupIds = "SecurityGroupId"
        }
    }

    public struct BundleIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleId", required: false, type: .list)
        ]
        public let bundleId: [String]?

        public init(bundleId: [String]? = nil) {
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "BundleId"
        }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case add = "add"
        case remove = "remove"
        public var description: String { return self.rawValue }
    }

    public struct DescribeIamInstanceProfileAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AssociationIds", location: .body(locationName: "AssociationId"), required: false, type: .structure)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// One or more filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating | disassociated).  
        public let filters: FilterList?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// One or more IAM instance profile associations.
        public let associationIds: AssociationIdList?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, associationIds: AssociationIdList? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.associationIds = associationIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case associationIds = "AssociationId"
        }
    }

    public enum SubnetState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public struct DeleteVpcEndpointConnectionNotificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the notifications that could not be deleted successfully.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct SpotFleetRequestConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "ActivityStatus", location: .body(locationName: "activityStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotFleetRequestConfig", location: .body(locationName: "spotFleetRequestConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "SpotFleetRequestState", location: .body(locationName: "spotFleetRequestState"), required: true, type: .enum), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: true, type: .timestamp)
        ]
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// The progress of the Spot Fleet request. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the fleet is decreased, the status is pending_termination while Spot Instances are terminating.
        public let activityStatus: ActivityStatus?
        /// The configuration of the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData
        /// The state of the Spot Fleet request.
        public let spotFleetRequestState: BatchState
        /// The creation date and time of the request.
        public let createTime: TimeStamp

        public init(spotFleetRequestId: String, activityStatus: ActivityStatus? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData, spotFleetRequestState: BatchState, createTime: TimeStamp) {
            self.spotFleetRequestId = spotFleetRequestId
            self.activityStatus = activityStatus
            self.spotFleetRequestConfig = spotFleetRequestConfig
            self.spotFleetRequestState = spotFleetRequestState
            self.createTime = createTime
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestId = "spotFleetRequestId"
            case activityStatus = "activityStatus"
            case spotFleetRequestConfig = "spotFleetRequestConfig"
            case spotFleetRequestState = "spotFleetRequestState"
            case createTime = "createTime"
        }
    }

    public struct InstancePrivateIpAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string)
        ]
        /// The private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// Indicates whether this IPv4 address is the primary private IP address of the network interface.
        public let primary: Bool?
        /// The association information for an Elastic IP address for the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// The private IPv4 DNS name.
        public let privateDnsName: String?

        public init(privateIpAddress: String? = nil, primary: Bool? = nil, association: InstanceNetworkInterfaceAssociation? = nil, privateDnsName: String? = nil) {
            self.privateIpAddress = privateIpAddress
            self.primary = primary
            self.association = association
            self.privateDnsName = privateDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
            case primary = "primary"
            case association = "association"
            case privateDnsName = "privateDnsName"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "IpPermissions", required: true, type: .structure)
        ]
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP permissions for the security group rule. 
        public let ipPermissions: IpPermissionList

        public init(groupId: String? = nil, groupName: String? = nil, dryRun: Bool? = nil, ipPermissions: IpPermissionList) {
            self.groupId = groupId
            self.groupName = groupName
            self.dryRun = dryRun
            self.ipPermissions = ipPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
            case dryRun = "DryRun"
            case ipPermissions = "IpPermissions"
        }
    }

    public struct UserGroupStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserGroup", required: false, type: .list)
        ]
        public let userGroup: [String]?

        public init(userGroup: [String]? = nil) {
            self.userGroup = userGroup
        }

        private enum CodingKeys: String, CodingKey {
            case userGroup = "UserGroup"
        }
    }

    public struct LaunchTemplateTagSpecificationRequestList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateTagSpecificationRequest", required: false, type: .list)
        ]
        public let launchTemplateTagSpecificationRequest: [LaunchTemplateTagSpecificationRequest]?

        public init(launchTemplateTagSpecificationRequest: [LaunchTemplateTagSpecificationRequest]? = nil) {
            self.launchTemplateTagSpecificationRequest = launchTemplateTagSpecificationRequest
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateTagSpecificationRequest = "LaunchTemplateTagSpecificationRequest"
        }
    }

    public struct FleetLaunchTemplateOverridesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FleetLaunchTemplateOverrides]?

        public init(item: [FleetLaunchTemplateOverrides]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RequestSpotInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer), 
            AWSShapeMember(label: "LaunchSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "LaunchGroup", location: .body(locationName: "launchGroup"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneGroup", location: .body(locationName: "availabilityZoneGroup"), required: false, type: .string)
        ]
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon EC2 User Guide for Linux Instances.
        public let clientToken: String?
        /// The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. You can't specify an Availability Zone group or a launch group if you specify a duration.
        public let blockDurationMinutes: Int32?
        /// The launch specification.
        public let launchSpecification: RequestSpotLaunchSpecification?
        /// The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.
        public let validFrom: TimeStamp?
        /// The Spot Instance request type. Default: one-time 
        public let `type`: SpotInstanceType?
        /// The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
        public let spotPrice: String?
        /// The maximum number of Spot Instances to launch. Default: 1
        public let instanceCount: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together. Default: Instances are launched and terminated individually
        public let launchGroup: String?
        /// The user-specified name for a logical grouping of requests. When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone.
        public let availabilityZoneGroup: String?

        public init(clientToken: String? = nil, validUntil: TimeStamp? = nil, blockDurationMinutes: Int32? = nil, launchSpecification: RequestSpotLaunchSpecification? = nil, validFrom: TimeStamp? = nil, type: SpotInstanceType? = nil, spotPrice: String? = nil, instanceCount: Int32? = nil, dryRun: Bool? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, launchGroup: String? = nil, availabilityZoneGroup: String? = nil) {
            self.clientToken = clientToken
            self.validUntil = validUntil
            self.blockDurationMinutes = blockDurationMinutes
            self.launchSpecification = launchSpecification
            self.validFrom = validFrom
            self.`type` = `type`
            self.spotPrice = spotPrice
            self.instanceCount = instanceCount
            self.dryRun = dryRun
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.launchGroup = launchGroup
            self.availabilityZoneGroup = availabilityZoneGroup
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case validUntil = "validUntil"
            case blockDurationMinutes = "blockDurationMinutes"
            case launchSpecification = "LaunchSpecification"
            case validFrom = "validFrom"
            case `type` = "type"
            case spotPrice = "spotPrice"
            case instanceCount = "instanceCount"
            case dryRun = "dryRun"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case launchGroup = "launchGroup"
            case availabilityZoneGroup = "availabilityZoneGroup"
        }
    }

    public enum VolumeState: String, CustomStringConvertible, Codable {
        case creating = "creating"
        case available = "available"
        case inUse = "in-use"
        case deleting = "deleting"
        case deleted = "deleted"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public struct ScheduledInstancesLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "UserData", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "Placement", required: false, type: .structure)
        ]
        /// The instance type.
        public let instanceType: String?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: ScheduledInstancesIamInstanceProfile?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String
        /// One or more block device mapping entries.
        public let blockDeviceMappings: ScheduledInstancesBlockDeviceMappingSet?
        /// One or more network interfaces.
        public let networkInterfaces: ScheduledInstancesNetworkInterfaceSet?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The IDs of one or more security groups.
        public let securityGroupIds: ScheduledInstancesSecurityGroupIdSet?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The base64-encoded MIME user data.
        public let userData: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: ScheduledInstancesMonitoring?
        /// The placement information.
        public let placement: ScheduledInstancesPlacement?

        public init(instanceType: String? = nil, ebsOptimized: Bool? = nil, kernelId: String? = nil, iamInstanceProfile: ScheduledInstancesIamInstanceProfile? = nil, imageId: String, blockDeviceMappings: ScheduledInstancesBlockDeviceMappingSet? = nil, networkInterfaces: ScheduledInstancesNetworkInterfaceSet? = nil, ramdiskId: String? = nil, securityGroupIds: ScheduledInstancesSecurityGroupIdSet? = nil, subnetId: String? = nil, userData: String? = nil, keyName: String? = nil, monitoring: ScheduledInstancesMonitoring? = nil, placement: ScheduledInstancesPlacement? = nil) {
            self.instanceType = instanceType
            self.ebsOptimized = ebsOptimized
            self.kernelId = kernelId
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.blockDeviceMappings = blockDeviceMappings
            self.networkInterfaces = networkInterfaces
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.userData = userData
            self.keyName = keyName
            self.monitoring = monitoring
            self.placement = placement
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case ebsOptimized = "EbsOptimized"
            case kernelId = "KernelId"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case blockDeviceMappings = "BlockDeviceMapping"
            case networkInterfaces = "NetworkInterface"
            case ramdiskId = "RamdiskId"
            case securityGroupIds = "SecurityGroupId"
            case subnetId = "SubnetId"
            case userData = "UserData"
            case keyName = "KeyName"
            case monitoring = "Monitoring"
            case placement = "Placement"
        }
    }

    public struct DescribeVolumesModificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumesModifications", location: .body(locationName: "volumeModificationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// A list of returned VolumeModification objects.
        public let volumesModifications: VolumeModificationList?
        /// Token for pagination, null if there are no more results 
        public let nextToken: String?

        public init(volumesModifications: VolumeModificationList? = nil, nextToken: String? = nil) {
            self.volumesModifications = volumesModifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case volumesModifications = "volumeModificationSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeNetworkInterfaceAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]
        /// The security groups associated with the network interface.
        public let groups: GroupIdentifierList?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: AttributeBooleanValue?
        /// The attachment (if any) of the network interface.
        public let attachment: NetworkInterfaceAttachment?
        /// The description of the network interface.
        public let description: AttributeValue?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(groups: GroupIdentifierList? = nil, sourceDestCheck: AttributeBooleanValue? = nil, attachment: NetworkInterfaceAttachment? = nil, description: AttributeValue? = nil, networkInterfaceId: String? = nil) {
            self.groups = groups
            self.sourceDestCheck = sourceDestCheck
            self.attachment = attachment
            self.description = description
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case sourceDestCheck = "sourceDestCheck"
            case attachment = "attachment"
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct InstanceNetworkInterfaceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "AssociatePublicIpAddress", location: .body(locationName: "associatePublicIpAddress"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer)
        ]
        /// The ID of the subnet associated with the network string. Applies only if creating a network interface when launching an instance.
        public let subnetId: String?
        /// If set to true, the interface is deleted when the instance is terminated. You can specify true only if creating a new network interface when launching an instance.
        public let deleteOnTermination: Bool?
        /// The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let privateIpAddresses: PrivateIpAddressSpecificationList?
        /// A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public let ipv6AddressCount: Int32?
        /// Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
        public let groups: SecurityGroupIdStringList?
        /// The index of the device on the instance for the network interface attachment. If you are specifying a network interface in a RunInstances request, you must provide the device index.
        public let deviceIndex: Int32?
        /// The description of the network interface. Applies only if creating a network interface when launching an instance.
        public let description: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let secondaryPrivateIpAddressCount: Int32?

        public init(subnetId: String? = nil, deleteOnTermination: Bool? = nil, privateIpAddress: String? = nil, privateIpAddresses: PrivateIpAddressSpecificationList? = nil, ipv6AddressCount: Int32? = nil, associatePublicIpAddress: Bool? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, groups: SecurityGroupIdStringList? = nil, deviceIndex: Int32? = nil, description: String? = nil, networkInterfaceId: String? = nil, secondaryPrivateIpAddressCount: Int32? = nil) {
            self.subnetId = subnetId
            self.deleteOnTermination = deleteOnTermination
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.ipv6AddressCount = ipv6AddressCount
            self.associatePublicIpAddress = associatePublicIpAddress
            self.ipv6Addresses = ipv6Addresses
            self.groups = groups
            self.deviceIndex = deviceIndex
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case deleteOnTermination = "deleteOnTermination"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case ipv6AddressCount = "ipv6AddressCount"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case ipv6Addresses = "ipv6AddressesSet"
            case groups = "SecurityGroupId"
            case deviceIndex = "deviceIndex"
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccepterPeeringConnectionOptions", location: .body(locationName: "accepterPeeringConnectionOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "RequesterPeeringConnectionOptions", location: .body(locationName: "requesterPeeringConnectionOptions"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptions?
        /// Information about the VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptions?

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptions? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptions? = nil) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "accepterPeeringConnectionOptions"
            case requesterPeeringConnectionOptions = "requesterPeeringConnectionOptions"
        }
    }

    public struct DisassociateTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayAttachmentId: String, transitGatewayRouteTableId: String, dryRun: Bool? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
            case dryRun = "DryRun"
        }
    }

    public struct ScheduledInstancesEbs: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "Iops", required: false, type: .integer)
        ]
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.
        public let encrypted: Bool?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The volume type. gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, Throughput Optimized HDD for st1, Cold HDD for sc1, or standard for Magnetic. Default: standard 
        public let volumeType: String?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// The number of I/O operations per second (IOPS) that the volume supports. For io1 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about gp2 baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for gp2 volumes. Condition: This parameter is required for requests to create io1volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int32?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, snapshotId: String? = nil, volumeType: String? = nil, volumeSize: Int32? = nil, iops: Int32? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.snapshotId = snapshotId
            self.volumeType = volumeType
            self.volumeSize = volumeSize
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case snapshotId = "SnapshotId"
            case volumeType = "VolumeType"
            case volumeSize = "VolumeSize"
            case iops = "Iops"
        }
    }

    public struct OccurrenceDaySet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Int32]?

        public init(item: [Int32]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelCapacityReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DescribeInstanceCreditSpecificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCreditSpecifications", location: .body(locationName: "instanceCreditSpecificationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the credit option for CPU usage of an instance.
        public let instanceCreditSpecifications: InstanceCreditSpecificationList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceCreditSpecifications: InstanceCreditSpecificationList? = nil, nextToken: String? = nil) {
            self.instanceCreditSpecifications = instanceCreditSpecifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCreditSpecifications = "instanceCreditSpecificationSet"
            case nextToken = "nextToken"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionNotification", location: .body(locationName: "connectionNotification"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// Information about the notification.
        public let connectionNotification: ConnectionNotification?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(connectionNotification: ConnectionNotification? = nil, clientToken: String? = nil) {
            self.connectionNotification = connectionNotification
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotification = "connectionNotification"
            case clientToken = "clientToken"
        }
    }

    public struct SpotPriceHistoryList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotPrice]?

        public init(item: [SpotPrice]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyLaunchTemplateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplate", location: .body(locationName: "launchTemplate"), required: false, type: .structure)
        ]
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate = "launchTemplate"
        }
    }

    public struct VpcAttachmentList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcAttachment]?

        public init(item: [VpcAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeByoipCidrsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: true, type: .integer)
        ]
        /// The token for the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32

        public init(nextToken: String? = nil, dryRun: Bool? = nil, maxResults: Int32) {
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
        }
    }

    public struct AttachNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: true, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int32
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(instanceId: String, deviceIndex: Int32, dryRun: Bool? = nil, networkInterfaceId: String) {
            self.instanceId = instanceId
            self.deviceIndex = deviceIndex
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case deviceIndex = "deviceIndex"
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct NetworkAclAssociationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkAclAssociation]?

        public init(item: [NetworkAclAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PeeringConnectionOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", location: .body(locationName: "allowEgressFromLocalVpcToRemoteClassicLink"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", location: .body(locationName: "allowDnsResolutionFromRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", location: .body(locationName: "allowEgressFromLocalClassicLinkToRemoteVpc"), required: false, type: .boolean)
        ]
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
        /// If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?

        public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil, allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil) {
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
        }

        private enum CodingKeys: String, CodingKey {
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
        }
    }

    public enum AllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestprice = "lowestPrice"
        case diversified = "diversified"
        public var description: String { return self.rawValue }
    }

    public struct CreateNetworkAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeClassicLinkInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", location: .body(locationName: "instancesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more linked EC2-Classic instances.
        public let instances: ClassicLinkInstanceList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instances: ClassicLinkInstanceList? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instancesSet"
            case nextToken = "nextToken"
        }
    }

    public struct ActiveInstanceSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ActiveInstance]?

        public init(item: [ActiveInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImportImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "LicenseType", location: .body(locationName: "licenseType"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .string), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDetails", location: .body(locationName: "snapshotDetailSet"), required: false, type: .structure), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string)
        ]
        /// The operating system of the virtual machine.
        public let platform: String?
        /// The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted AMI.
        public let kmsKeyId: String?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// Indicates whether the AMI is encypted.
        public let encrypted: Bool?
        /// The ID of the Amazon Machine Image (AMI) created by the import task.
        public let imageId: String?
        /// The progress of the task.
        public let progress: String?
        /// A description of the import task.
        public let description: String?
        /// The target hypervisor of the import task.
        public let hypervisor: String?
        /// The architecture of the virtual machine.
        public let architecture: String?
        /// Information about the snapshots.
        public let snapshotDetails: SnapshotDetailList?
        /// A detailed status message of the import task.
        public let statusMessage: String?
        /// A brief status of the task.
        public let status: String?
        /// The task ID of the import image task.
        public let importTaskId: String?

        public init(platform: String? = nil, kmsKeyId: String? = nil, licenseType: String? = nil, encrypted: Bool? = nil, imageId: String? = nil, progress: String? = nil, description: String? = nil, hypervisor: String? = nil, architecture: String? = nil, snapshotDetails: SnapshotDetailList? = nil, statusMessage: String? = nil, status: String? = nil, importTaskId: String? = nil) {
            self.platform = platform
            self.kmsKeyId = kmsKeyId
            self.licenseType = licenseType
            self.encrypted = encrypted
            self.imageId = imageId
            self.progress = progress
            self.description = description
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.snapshotDetails = snapshotDetails
            self.statusMessage = statusMessage
            self.status = status
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case kmsKeyId = "kmsKeyId"
            case licenseType = "licenseType"
            case encrypted = "encrypted"
            case imageId = "imageId"
            case progress = "progress"
            case description = "description"
            case hypervisor = "hypervisor"
            case architecture = "architecture"
            case snapshotDetails = "snapshotDetailSet"
            case statusMessage = "statusMessage"
            case status = "status"
            case importTaskId = "importTaskId"
        }
    }

    public struct ModifyFpgaImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum), 
            AWSShapeMember(label: "UserGroups", location: .body(locationName: "UserGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "ProductCode"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LoadPermission", required: false, type: .structure), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum), 
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// One or more AWS account IDs. This parameter is valid only when modifying the loadPermission attribute.
        public let userIds: UserIdStringList?
        /// A name for the AFI.
        public let name: String?
        /// The name of the attribute.
        public let attribute: FpgaImageAttributeName?
        /// One or more user groups. This parameter is valid only when modifying the loadPermission attribute.
        public let userGroups: UserGroupStringList?
        /// One or more product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the productCodes attribute.
        public let productCodes: ProductCodeStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The load permission for the AFI.
        public let loadPermission: LoadPermissionModifications?
        /// The operation type.
        public let operationType: OperationType?
        /// The ID of the AFI.
        public let fpgaImageId: String
        /// A description for the AFI.
        public let description: String?

        public init(userIds: UserIdStringList? = nil, name: String? = nil, attribute: FpgaImageAttributeName? = nil, userGroups: UserGroupStringList? = nil, productCodes: ProductCodeStringList? = nil, dryRun: Bool? = nil, loadPermission: LoadPermissionModifications? = nil, operationType: OperationType? = nil, fpgaImageId: String, description: String? = nil) {
            self.userIds = userIds
            self.name = name
            self.attribute = attribute
            self.userGroups = userGroups
            self.productCodes = productCodes
            self.dryRun = dryRun
            self.loadPermission = loadPermission
            self.operationType = operationType
            self.fpgaImageId = fpgaImageId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case userIds = "UserId"
            case name = "Name"
            case attribute = "Attribute"
            case userGroups = "UserGroup"
            case productCodes = "ProductCode"
            case dryRun = "DryRun"
            case loadPermission = "LoadPermission"
            case operationType = "OperationType"
            case fpgaImageId = "FpgaImageId"
            case description = "Description"
        }
    }

    public struct TransitGatewayAttachmentAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The ID of the route table for the transit gateway.
        public let transitGatewayRouteTableId: String?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?

        public init(transitGatewayRouteTableId: String? = nil, state: TransitGatewayAssociationState? = nil) {
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
            case state = "state"
        }
    }

    public struct LaunchTemplateHibernationOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", location: .body(locationName: "configured"), required: false, type: .boolean)
        ]
        /// If this parameter is set to true, the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "configured"
        }
    }

    public struct DescribeClassicLinkInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000. If MaxResults is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the instance IDs parameter in the same request. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?
        /// One or more filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC to which the instance is linked.  vpc-id - The ID of the VPC that the instance is linked to.  
        public let filters: FilterList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
        public let instanceIds: InstanceIdStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, instanceIds: InstanceIdStringList? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filters = "Filter"
            case nextToken = "nextToken"
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteTransitGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]
        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociations", location: .body(locationName: "elasticInferenceAcceleratorAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "CpuOptions", location: .body(locationName: "cpuOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "RootDeviceType", location: .body(locationName: "rootDeviceType"), required: false, type: .enum), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "AmiLaunchIndex", location: .body(locationName: "amiLaunchIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "instanceState"), required: false, type: .structure), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "dnsName"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceLifecycle", location: .body(locationName: "instanceLifecycle"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTime", location: .body(locationName: "launchTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Licenses", location: .body(locationName: "licenseSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "StateReason", location: .body(locationName: "stateReason"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "StateTransitionReason", location: .body(locationName: "reason"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "HibernationOptions", location: .body(locationName: "hibernationOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "ElasticGpuAssociations", location: .body(locationName: "elasticGpuAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservationSpecification", location: .body(locationName: "capacityReservationSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationId", location: .body(locationName: "capacityReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIpAddress", location: .body(locationName: "ipAddress"), required: false, type: .string)
        ]
        /// The ID of the AMI used to launch the instance.
        public let imageId: String?
        /// The name of the key pair, if this instance was launched with an associated key pair.
        public let keyName: String?
        ///  The elastic inference accelerator associated with the instance. 
        public let elasticInferenceAcceleratorAssociations: ElasticInferenceAcceleratorAssociationList?
        /// One or more security groups for the instance.
        public let securityGroups: GroupIdentifierList?
        /// The RAM disk associated with this instance, if applicable.
        public let ramdiskId: String?
        /// [EC2-VPC] The ID of the VPC in which the instance is running.
        public let vpcId: String?
        /// Any block device mapping entries for the instance.
        public let blockDeviceMappings: InstanceBlockDeviceMappingList?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The CPU options for the instance.
        public let cpuOptions: CpuOptions?
        /// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: Bool?
        /// The IAM instance profile associated with the instance, if applicable.
        public let iamInstanceProfile: IamInstanceProfile?
        /// Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
        public let sourceDestCheck: Bool?
        /// The AMI launch index, which can be used to find this instance in the launch group.
        public let amiLaunchIndex: Int32?
        /// The current state of the instance.
        public let state: InstanceState?
        /// The hypervisor type of the instance.
        public let hypervisor: HypervisorType?
        /// (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
        public let publicDnsName: String?
        /// Indicates whether this is a Spot Instance or a Scheduled Instance.
        public let instanceLifecycle: InstanceLifecycleType?
        /// The ID of the instance.
        public let instanceId: String?
        /// The time the instance was launched.
        public let launchTime: TimeStamp?
        /// The license configurations.
        public let licenses: LicenseList?
        /// The value is Windows for Windows instances; otherwise blank.
        public let platform: PlatformValues?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?
        /// The reason for the most recent state transition.
        public let stateReason: StateReason?
        /// The product codes attached to this instance, if applicable.
        public let productCodes: ProductCodeList?
        /// The kernel associated with this instance, if applicable.
        public let kernelId: String?
        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// If the request is a Spot Instance request, the ID of the request.
        public let spotInstanceRequestId: String?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.  [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
        public let privateDnsName: String?
        /// The reason for the most recent state transition. This might be an empty string.
        public let stateTransitionReason: String?
        /// The idempotency token you provided when you launched the instance, if applicable.
        public let clientToken: String?
        /// [EC2-VPC] The ID of the subnet in which the instance is running.
        public let subnetId: String?
        /// Any tags assigned to the instance.
        public let tags: TagList?
        /// Indicates whether the instance is enabled for hibernation.
        public let hibernationOptions: HibernationOptions?
        /// The Elastic GPU associated with the instance.
        public let elasticGpuAssociations: ElasticGpuAssociationList?
        /// The instance type.
        public let instanceType: InstanceType?
        /// [EC2-VPC] One or more network interfaces for the instance.
        public let networkInterfaces: InstanceNetworkInterfaceList?
        /// The private IPv4 address assigned to the instance.
        public let privateIpAddress: String?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecificationResponse?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The virtualization type of the instance.
        public let virtualizationType: VirtualizationType?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The public IPv4 address assigned to the instance, if applicable.
        public let publicIpAddress: String?

        public init(imageId: String? = nil, keyName: String? = nil, elasticInferenceAcceleratorAssociations: ElasticInferenceAcceleratorAssociationList? = nil, securityGroups: GroupIdentifierList? = nil, ramdiskId: String? = nil, vpcId: String? = nil, blockDeviceMappings: InstanceBlockDeviceMappingList? = nil, rootDeviceName: String? = nil, sriovNetSupport: String? = nil, cpuOptions: CpuOptions? = nil, rootDeviceType: DeviceType? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfile? = nil, sourceDestCheck: Bool? = nil, amiLaunchIndex: Int32? = nil, state: InstanceState? = nil, hypervisor: HypervisorType? = nil, publicDnsName: String? = nil, instanceLifecycle: InstanceLifecycleType? = nil, instanceId: String? = nil, launchTime: TimeStamp? = nil, licenses: LicenseList? = nil, platform: PlatformValues? = nil, monitoring: Monitoring? = nil, stateReason: StateReason? = nil, productCodes: ProductCodeList? = nil, kernelId: String? = nil, architecture: ArchitectureValues? = nil, spotInstanceRequestId: String? = nil, enaSupport: Bool? = nil, privateDnsName: String? = nil, stateTransitionReason: String? = nil, clientToken: String? = nil, subnetId: String? = nil, tags: TagList? = nil, hibernationOptions: HibernationOptions? = nil, elasticGpuAssociations: ElasticGpuAssociationList? = nil, instanceType: InstanceType? = nil, networkInterfaces: InstanceNetworkInterfaceList? = nil, privateIpAddress: String? = nil, capacityReservationSpecification: CapacityReservationSpecificationResponse? = nil, placement: Placement? = nil, virtualizationType: VirtualizationType? = nil, capacityReservationId: String? = nil, publicIpAddress: String? = nil) {
            self.imageId = imageId
            self.keyName = keyName
            self.elasticInferenceAcceleratorAssociations = elasticInferenceAcceleratorAssociations
            self.securityGroups = securityGroups
            self.ramdiskId = ramdiskId
            self.vpcId = vpcId
            self.blockDeviceMappings = blockDeviceMappings
            self.rootDeviceName = rootDeviceName
            self.sriovNetSupport = sriovNetSupport
            self.cpuOptions = cpuOptions
            self.rootDeviceType = rootDeviceType
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.sourceDestCheck = sourceDestCheck
            self.amiLaunchIndex = amiLaunchIndex
            self.state = state
            self.hypervisor = hypervisor
            self.publicDnsName = publicDnsName
            self.instanceLifecycle = instanceLifecycle
            self.instanceId = instanceId
            self.launchTime = launchTime
            self.licenses = licenses
            self.platform = platform
            self.monitoring = monitoring
            self.stateReason = stateReason
            self.productCodes = productCodes
            self.kernelId = kernelId
            self.architecture = architecture
            self.spotInstanceRequestId = spotInstanceRequestId
            self.enaSupport = enaSupport
            self.privateDnsName = privateDnsName
            self.stateTransitionReason = stateTransitionReason
            self.clientToken = clientToken
            self.subnetId = subnetId
            self.tags = tags
            self.hibernationOptions = hibernationOptions
            self.elasticGpuAssociations = elasticGpuAssociations
            self.instanceType = instanceType
            self.networkInterfaces = networkInterfaces
            self.privateIpAddress = privateIpAddress
            self.capacityReservationSpecification = capacityReservationSpecification
            self.placement = placement
            self.virtualizationType = virtualizationType
            self.capacityReservationId = capacityReservationId
            self.publicIpAddress = publicIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
            case keyName = "keyName"
            case elasticInferenceAcceleratorAssociations = "elasticInferenceAcceleratorAssociationSet"
            case securityGroups = "groupSet"
            case ramdiskId = "ramdiskId"
            case vpcId = "vpcId"
            case blockDeviceMappings = "blockDeviceMapping"
            case rootDeviceName = "rootDeviceName"
            case sriovNetSupport = "sriovNetSupport"
            case cpuOptions = "cpuOptions"
            case rootDeviceType = "rootDeviceType"
            case ebsOptimized = "ebsOptimized"
            case iamInstanceProfile = "iamInstanceProfile"
            case sourceDestCheck = "sourceDestCheck"
            case amiLaunchIndex = "amiLaunchIndex"
            case state = "instanceState"
            case hypervisor = "hypervisor"
            case publicDnsName = "dnsName"
            case instanceLifecycle = "instanceLifecycle"
            case instanceId = "instanceId"
            case launchTime = "launchTime"
            case licenses = "licenseSet"
            case platform = "platform"
            case monitoring = "monitoring"
            case stateReason = "stateReason"
            case productCodes = "productCodes"
            case kernelId = "kernelId"
            case architecture = "architecture"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case enaSupport = "enaSupport"
            case privateDnsName = "privateDnsName"
            case stateTransitionReason = "reason"
            case clientToken = "clientToken"
            case subnetId = "subnetId"
            case tags = "tagSet"
            case hibernationOptions = "hibernationOptions"
            case elasticGpuAssociations = "elasticGpuAssociationSet"
            case instanceType = "instanceType"
            case networkInterfaces = "networkInterfaceSet"
            case privateIpAddress = "privateIpAddress"
            case capacityReservationSpecification = "capacityReservationSpecification"
            case placement = "placement"
            case virtualizationType = "virtualizationType"
            case capacityReservationId = "capacityReservationId"
            case publicIpAddress = "ipAddress"
        }
    }

    public struct AuthorizeSecurityGroupEgressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", location: .body(locationName: "sourceSecurityGroupOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", location: .body(locationName: "sourceSecurityGroupName"), required: false, type: .string)
        ]
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupOwnerId: String?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let toPort: Int32?
        /// The ID of the security group.
        public let groupId: String
        /// Not supported. Use a set of IP permissions to specify the port.
        public let fromPort: Int32?
        /// Not supported. Use a set of IP permissions to specify the protocol name or number.
        public let ipProtocol: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
        public let ipPermissions: IpPermissionList?
        /// Not supported. Use a set of IP permissions to specify the CIDR.
        public let cidrIp: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupName: String?

        public init(sourceSecurityGroupOwnerId: String? = nil, toPort: Int32? = nil, groupId: String, fromPort: Int32? = nil, ipProtocol: String? = nil, dryRun: Bool? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
            self.groupId = groupId
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.dryRun = dryRun
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case toPort = "toPort"
            case groupId = "groupId"
            case fromPort = "fromPort"
            case ipProtocol = "ipProtocol"
            case dryRun = "dryRun"
            case ipPermissions = "ipPermissions"
            case cidrIp = "cidrIp"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
        }
    }

    public struct ProductCodeStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCode", required: false, type: .list)
        ]
        public let productCode: [String]?

        public init(productCode: [String]? = nil) {
            self.productCode = productCode
        }

        private enum CodingKeys: String, CodingKey {
            case productCode = "ProductCode"
        }
    }

    public struct LaunchTemplateConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", location: .body(locationName: "launchTemplateSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", location: .body(locationName: "overrides"), required: false, type: .structure)
        ]
        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: LaunchTemplateOverridesList?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: LaunchTemplateOverridesList? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct MovingAddressStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MoveStatus", location: .body(locationName: "moveStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]
        /// The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.
        public let moveStatus: MoveStatus?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(moveStatus: MoveStatus? = nil, publicIp: String? = nil) {
            self.moveStatus = moveStatus
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case moveStatus = "moveStatus"
            case publicIp = "publicIp"
        }
    }

    public struct LaunchTemplateSpotMarketOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", required: false, type: .string), 
            AWSShapeMember(label: "ValidUntil", required: false, type: .timestamp), 
            AWSShapeMember(label: "BlockDurationMinutes", required: false, type: .integer)
        ]
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances.
        public let maxPrice: String?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int32?

        public init(spotInstanceType: SpotInstanceType? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, validUntil: TimeStamp? = nil, blockDurationMinutes: Int32? = nil) {
            self.spotInstanceType = spotInstanceType
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.validUntil = validUntil
            self.blockDurationMinutes = blockDurationMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceType = "SpotInstanceType"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case validUntil = "ValidUntil"
            case blockDurationMinutes = "BlockDurationMinutes"
        }
    }

    public enum MonitoringState: String, CustomStringConvertible, Codable {
        case disabled = "disabled"
        case disabling = "disabling"
        case enabled = "enabled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "AssociatePublicIpAddress", location: .body(locationName: "associatePublicIpAddress"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer)
        ]
        /// The ID of the subnet for the network interface.
        public let subnetId: String?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        public let privateIpAddresses: PrivateIpAddressSpecificationList?
        /// The number of IPv6 addresses for the network interface.
        public let ipv6AddressCount: Int32?
        /// Indicates whether to associate a public IPv4 address with eth0 for a new network interface.
        public let associatePublicIpAddress: Bool?
        /// The IPv6 addresses for the network interface.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// The IDs of one or more security groups.
        public let groups: GroupIdStringList?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int32?
        /// A description for the network interface.
        public let description: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The number of secondary private IPv4 addresses for the network interface.
        public let secondaryPrivateIpAddressCount: Int32?

        public init(subnetId: String? = nil, deleteOnTermination: Bool? = nil, privateIpAddress: String? = nil, privateIpAddresses: PrivateIpAddressSpecificationList? = nil, ipv6AddressCount: Int32? = nil, associatePublicIpAddress: Bool? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, groups: GroupIdStringList? = nil, deviceIndex: Int32? = nil, description: String? = nil, networkInterfaceId: String? = nil, secondaryPrivateIpAddressCount: Int32? = nil) {
            self.subnetId = subnetId
            self.deleteOnTermination = deleteOnTermination
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.ipv6AddressCount = ipv6AddressCount
            self.associatePublicIpAddress = associatePublicIpAddress
            self.ipv6Addresses = ipv6Addresses
            self.groups = groups
            self.deviceIndex = deviceIndex
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case deleteOnTermination = "deleteOnTermination"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddressesSet"
            case ipv6AddressCount = "ipv6AddressCount"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case ipv6Addresses = "ipv6AddressesSet"
            case groups = "groupSet"
            case deviceIndex = "deviceIndex"
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
        }
    }

    public struct ModifyVpcTenancyResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnValue", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct DeleteFleetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TerminateInstances", required: true, type: .boolean), 
            AWSShapeMember(label: "FleetIds", location: .body(locationName: "FleetId"), required: true, type: .list)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to terminate instances for an EC2 Fleet if it is deleted successfully.
        public let terminateInstances: Bool
        /// The IDs of the EC2 Fleets.
        public let fleetIds: [String]

        public init(dryRun: Bool? = nil, terminateInstances: Bool, fleetIds: [String]) {
            self.dryRun = dryRun
            self.terminateInstances = terminateInstances
            self.fleetIds = fleetIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case terminateInstances = "TerminateInstances"
            case fleetIds = "FleetId"
        }
    }

    public struct SubnetIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .list)
        ]
        public let subnetId: [String]?

        public init(subnetId: [String]? = nil) {
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
        }
    }

    public struct DescribeKeyPairsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPairs", location: .body(locationName: "keySet"), required: false, type: .structure)
        ]
        /// Information about one or more key pairs.
        public let keyPairs: KeyPairList?

        public init(keyPairs: KeyPairList? = nil) {
            self.keyPairs = keyPairs
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairs = "keySet"
        }
    }

    public struct NetworkAclAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkAclAssociationId", location: .body(locationName: "networkAclAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the association between a network ACL and a subnet.
        public let networkAclAssociationId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(networkAclId: String? = nil, networkAclAssociationId: String? = nil, subnetId: String? = nil) {
            self.networkAclId = networkAclId
            self.networkAclAssociationId = networkAclAssociationId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case networkAclId = "networkAclId"
            case networkAclAssociationId = "networkAclAssociationId"
            case subnetId = "subnetId"
        }
    }

    public enum PaymentOption: String, CustomStringConvertible, Codable {
        case allupfront = "AllUpfront"
        case partialupfront = "PartialUpfront"
        case noupfront = "NoUpfront"
        public var description: String { return self.rawValue }
    }

    public struct LaunchTemplateAndOverridesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateSpecification", location: .body(locationName: "launchTemplateSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Overrides", location: .body(locationName: "overrides"), required: false, type: .structure)
        ]
        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: FleetLaunchTemplateOverrides?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: FleetLaunchTemplateOverrides? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "launchTemplateSpecification"
            case overrides = "overrides"
        }
    }

    public struct DescribeIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", required: false, type: .string)
        ]
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway 
        public let resource: String?

        public init(resource: String? = nil) {
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
        }
    }

    public struct WithdrawByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The public IPv4 address range, in CIDR notation.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeAggregateIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UseLongIdsAggregated", location: .body(locationName: "useLongIdsAggregated"), required: false, type: .boolean)
        ]
        /// Information about each resource's ID format.
        public let statuses: IdFormatList?
        /// Indicates whether all resource types in the region are configured to use longer IDs. This value is only true if all users are configured to use longer IDs for all resources types in the region.
        public let useLongIdsAggregated: Bool?

        public init(statuses: IdFormatList? = nil, useLongIdsAggregated: Bool? = nil) {
            self.statuses = statuses
            self.useLongIdsAggregated = useLongIdsAggregated
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
            case useLongIdsAggregated = "useLongIdsAggregated"
        }
    }

    public struct PrefixListId: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string)
        ]
        /// A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The ID of the prefix.
        public let prefixListId: String?

        public init(description: String? = nil, prefixListId: String? = nil) {
            self.description = description
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case prefixListId = "prefixListId"
        }
    }

    public struct ElasticInferenceAcceleratorAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociationTime", location: .body(locationName: "elasticInferenceAcceleratorAssociationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociationState", location: .body(locationName: "elasticInferenceAcceleratorAssociationState"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorArn", location: .body(locationName: "elasticInferenceAcceleratorArn"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticInferenceAcceleratorAssociationId", location: .body(locationName: "elasticInferenceAcceleratorAssociationId"), required: false, type: .string)
        ]
        ///  The time at which the elastic inference accelerator is associated with an instance. 
        public let elasticInferenceAcceleratorAssociationTime: TimeStamp?
        ///  The state of the elastic inference accelerator. 
        public let elasticInferenceAcceleratorAssociationState: String?
        ///  The Amazon Resource Name (ARN) of the elastic inference accelerator. 
        public let elasticInferenceAcceleratorArn: String?
        ///  The ID of the association. 
        public let elasticInferenceAcceleratorAssociationId: String?

        public init(elasticInferenceAcceleratorAssociationTime: TimeStamp? = nil, elasticInferenceAcceleratorAssociationState: String? = nil, elasticInferenceAcceleratorArn: String? = nil, elasticInferenceAcceleratorAssociationId: String? = nil) {
            self.elasticInferenceAcceleratorAssociationTime = elasticInferenceAcceleratorAssociationTime
            self.elasticInferenceAcceleratorAssociationState = elasticInferenceAcceleratorAssociationState
            self.elasticInferenceAcceleratorArn = elasticInferenceAcceleratorArn
            self.elasticInferenceAcceleratorAssociationId = elasticInferenceAcceleratorAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case elasticInferenceAcceleratorAssociationTime = "elasticInferenceAcceleratorAssociationTime"
            case elasticInferenceAcceleratorAssociationState = "elasticInferenceAcceleratorAssociationState"
            case elasticInferenceAcceleratorArn = "elasticInferenceAcceleratorArn"
            case elasticInferenceAcceleratorAssociationId = "elasticInferenceAcceleratorAssociationId"
        }
    }

    public struct ImportKeyPairResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string)
        ]
        /// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        public let keyFingerprint: String?
        /// The key pair name you provided.
        public let keyName: String?

        public init(keyFingerprint: String? = nil, keyName: String? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
        }
    }

    public struct ImportSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DiskContainer", required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ClientData", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean)
        ]
        /// An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias, in the form alias/ExampleAlias     ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the region that the snapshot is being copied to. 
        public let kmsKeyId: String?
        /// Information about the disk container.
        public let diskContainer: SnapshotDiskContainer?
        /// Token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// The client-specific data.
        public let clientData: ClientData?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The description string for the import snapshot task.
        public let description: String?
        /// Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?

        public init(kmsKeyId: String? = nil, diskContainer: SnapshotDiskContainer? = nil, clientToken: String? = nil, clientData: ClientData? = nil, dryRun: Bool? = nil, roleName: String? = nil, description: String? = nil, encrypted: Bool? = nil) {
            self.kmsKeyId = kmsKeyId
            self.diskContainer = diskContainer
            self.clientToken = clientToken
            self.clientData = clientData
            self.dryRun = dryRun
            self.roleName = roleName
            self.description = description
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case diskContainer = "DiskContainer"
            case clientToken = "ClientToken"
            case clientData = "ClientData"
            case dryRun = "DryRun"
            case roleName = "RoleName"
            case description = "Description"
            case encrypted = "Encrypted"
        }
    }

    public struct DescribeFleetHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EventType", required: false, type: .enum)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: FleetEventType?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, startTime: TimeStamp, fleetId: String, dryRun: Bool? = nil, eventType: FleetEventType? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.startTime = startTime
            self.fleetId = fleetId
            self.dryRun = dryRun
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case startTime = "StartTime"
            case fleetId = "FleetId"
            case dryRun = "DryRun"
            case eventType = "EventType"
        }
    }

    public struct CreateVolumePermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string)
        ]
        /// The specific group that is to be added or removed from a volume's list of create volume permissions.
        public let group: PermissionGroup?
        /// The specific AWS account ID that is to be added or removed from a volume's list of create volume permissions.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct AttributeBooleanValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .boolean)
        ]
        /// The attribute value. The valid values are true or false.
        public let value: Bool?

        public init(value: Bool? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct ReservedInstancesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstances]?

        public init(item: [ReservedInstances]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelSpotFleetRequestsErrorSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CancelSpotFleetRequestsErrorItem]?

        public init(item: [CancelSpotFleetRequestsErrorItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVolumeStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).  
        public let filters: FilterList?
        /// The NextToken value to include in a future DescribeVolumeStatus request. When the results of the request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// One or more volume IDs. Default: Describes all your volumes.
        public let volumeIds: VolumeIdStringList?
        /// The maximum number of volume results returned by DescribeVolumeStatus in paginated output. When this parameter is used, the request only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeVolumeStatus returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, nextToken: String? = nil, volumeIds: VolumeIdStringList? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.volumeIds = volumeIds
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
            case maxResults = "MaxResults"
            case dryRun = "dryRun"
        }
    }

    public struct NetworkInterfacePermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsService", location: .body(locationName: "awsService"), required: false, type: .string), 
            AWSShapeMember(label: "PermissionState", location: .body(locationName: "permissionState"), required: false, type: .structure), 
            AWSShapeMember(label: "AwsAccountId", location: .body(locationName: "awsAccountId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfacePermissionId", location: .body(locationName: "networkInterfacePermissionId"), required: false, type: .string), 
            AWSShapeMember(label: "Permission", location: .body(locationName: "permission"), required: false, type: .enum), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]
        /// The AWS service.
        public let awsService: String?
        /// Information about the state of the permission.
        public let permissionState: NetworkInterfacePermissionState?
        /// The AWS account ID.
        public let awsAccountId: String?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String?
        /// The type of permission.
        public let permission: InterfacePermissionType?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(awsService: String? = nil, permissionState: NetworkInterfacePermissionState? = nil, awsAccountId: String? = nil, networkInterfacePermissionId: String? = nil, permission: InterfacePermissionType? = nil, networkInterfaceId: String? = nil) {
            self.awsService = awsService
            self.permissionState = permissionState
            self.awsAccountId = awsAccountId
            self.networkInterfacePermissionId = networkInterfacePermissionId
            self.permission = permission
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case awsService = "awsService"
            case permissionState = "permissionState"
            case awsAccountId = "awsAccountId"
            case networkInterfacePermissionId = "networkInterfacePermissionId"
            case permission = "permission"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct VpcPeeringConnectionStateReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The status of the VPC peering connection.
        public let code: VpcPeeringConnectionStateReasonCode?
        /// A message that provides more information about the status, if applicable.
        public let message: String?

        public init(code: VpcPeeringConnectionStateReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct IpPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpRanges", location: .body(locationName: "ipRanges"), required: false, type: .structure), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "prefixListIds"), required: false, type: .structure), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Ranges", location: .body(locationName: "ipv6Ranges"), required: false, type: .structure), 
            AWSShapeMember(label: "UserIdGroupPairs", location: .body(locationName: "groups"), required: false, type: .structure)
        ]
        /// One or more IPv4 ranges.
        public let ipRanges: IpRangeList?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let toPort: Int32?
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let fromPort: Int32?
        /// [EC2-VPC only] One or more prefix list IDs for an AWS service. With AuthorizeSecurityGroupEgress, this is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.
        public let prefixListIds: PrefixListIdList?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers).  [EC2-VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6) allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For 58 (ICMPv6), you can optionally specify a port range; if you don't, traffic for all types and codes is allowed when authorizing rules. 
        public let ipProtocol: String?
        /// [EC2-VPC only] One or more IPv6 ranges.
        public let ipv6Ranges: Ipv6RangeList?
        /// One or more security group and AWS account ID pairs.
        public let userIdGroupPairs: UserIdGroupPairList?

        public init(ipRanges: IpRangeList? = nil, toPort: Int32? = nil, fromPort: Int32? = nil, prefixListIds: PrefixListIdList? = nil, ipProtocol: String? = nil, ipv6Ranges: Ipv6RangeList? = nil, userIdGroupPairs: UserIdGroupPairList? = nil) {
            self.ipRanges = ipRanges
            self.toPort = toPort
            self.fromPort = fromPort
            self.prefixListIds = prefixListIds
            self.ipProtocol = ipProtocol
            self.ipv6Ranges = ipv6Ranges
            self.userIdGroupPairs = userIdGroupPairs
        }

        private enum CodingKeys: String, CodingKey {
            case ipRanges = "ipRanges"
            case toPort = "toPort"
            case fromPort = "fromPort"
            case prefixListIds = "prefixListIds"
            case ipProtocol = "ipProtocol"
            case ipv6Ranges = "ipv6Ranges"
            case userIdGroupPairs = "groups"
        }
    }

    public struct TransitGatewayRequestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoAcceptSharedAttachments", required: false, type: .enum), 
            AWSShapeMember(label: "AmazonSideAsn", required: false, type: .long), 
            AWSShapeMember(label: "VpnEcmpSupport", required: false, type: .enum), 
            AWSShapeMember(label: "DnsSupport", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTablePropagation", required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTableAssociation", required: false, type: .enum)
        ]
        /// Enable or disable automatic acceptance of attachment requests. The default is disable.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
        public let amazonSideAsn: Int64?
        /// Enable or disable Equal Cost Multipath Protocol support.
        public let vpnEcmpSupport: VpnEcmpSupportValue?
        /// Enable or disable DNS support.
        public let dnsSupport: DnsSupportValue?
        /// Enable or disable automatic propagation of routes to the default propagation route table. The default is enable.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Enable or disable automatic association with the default association route table. The default is enable.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?

        public init(autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, amazonSideAsn: Int64? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil, dnsSupport: DnsSupportValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil) {
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.amazonSideAsn = amazonSideAsn
            self.vpnEcmpSupport = vpnEcmpSupport
            self.dnsSupport = dnsSupport
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
            case amazonSideAsn = "AmazonSideAsn"
            case vpnEcmpSupport = "VpnEcmpSupport"
            case dnsSupport = "DnsSupport"
            case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
            case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
        }
    }

    public struct AttachNetworkInterfaceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string)
        ]
        /// The ID of the network interface attachment.
        public let attachmentId: String?

        public init(attachmentId: String? = nil) {
            self.attachmentId = attachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
        }
    }

    public struct CapacityReservationSpecificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", location: .body(locationName: "capacityReservationPreference"), required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", location: .body(locationName: "capacityReservationTarget"), required: false, type: .structure)
        ]
        /// Describes the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the targeted Capacity Reservation.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "capacityReservationPreference"
            case capacityReservationTarget = "capacityReservationTarget"
        }
    }

    public struct CreateReservedInstancesListingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: true, type: .string), 
            AWSShapeMember(label: "PriceSchedules", location: .body(locationName: "priceSchedules"), required: true, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: true, type: .integer)
        ]
        /// The ID of the active Standard Reserved Instance.
        public let reservedInstancesId: String
        /// A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.
        public let priceSchedules: PriceScheduleSpecificationList
        /// Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String
        /// The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.
        public let instanceCount: Int32

        public init(reservedInstancesId: String, priceSchedules: PriceScheduleSpecificationList, clientToken: String, instanceCount: Int32) {
            self.reservedInstancesId = reservedInstancesId
            self.priceSchedules = priceSchedules
            self.clientToken = clientToken
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
            case priceSchedules = "priceSchedules"
            case clientToken = "clientToken"
            case instanceCount = "instanceCount"
        }
    }

    public struct DescribeSpotFleetRequestHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .enum)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: EventType?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, startTime: TimeStamp, spotFleetRequestId: String, dryRun: Bool? = nil, eventType: EventType? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.startTime = startTime
            self.spotFleetRequestId = spotFleetRequestId
            self.dryRun = dryRun
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case startTime = "startTime"
            case spotFleetRequestId = "spotFleetRequestId"
            case dryRun = "dryRun"
            case eventType = "eventType"
        }
    }

    public struct IpPermissionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IpPermission]?

        public init(item: [IpPermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateEbsBlockDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum), 
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer)
        ]
        /// The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The volume type.
        public let volumeType: VolumeType?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports. For io1, this represents the number of IOPS that are provisioned for the volume. For gp2, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int32?

        public init(kmsKeyId: String? = nil, snapshotId: String? = nil, deleteOnTermination: Bool? = nil, volumeType: VolumeType? = nil, volumeSize: Int32? = nil, encrypted: Bool? = nil, iops: Int32? = nil) {
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.volumeType = volumeType
            self.volumeSize = volumeSize
            self.encrypted = encrypted
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case snapshotId = "SnapshotId"
            case deleteOnTermination = "DeleteOnTermination"
            case volumeType = "VolumeType"
            case volumeSize = "VolumeSize"
            case encrypted = "Encrypted"
            case iops = "Iops"
        }
    }

    public struct InstanceBlockDeviceMappingSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceBlockDeviceMappingSpecification]?

        public init(item: [InstanceBlockDeviceMappingSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateFlowLogsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogDestinationType", required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceIds", location: .body(locationName: "ResourceId"), required: true, type: .structure), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "LogGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LogDestination", required: false, type: .string), 
            AWSShapeMember(label: "TrafficType", required: true, type: .enum), 
            AWSShapeMember(label: "DeliverLogsPermissionArn", required: false, type: .string)
        ]
        /// Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify cloud-watch-logs. To publish flow log data to Amazon S3, specify s3. Default: cloud-watch-logs 
        public let logDestinationType: LogDestinationType?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// One or more subnet, network interface, or VPC IDs. Constraints: Maximum of 1000 resources
        public let resourceIds: ValueStringList
        /// The type of resource on which to create the flow log.
        public let resourceType: FlowLogsResourceType
        /// The name of the log group.
        public let logGroupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies the destination to which the flow log data is to be published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType. If LogDestinationType is not specified or cloud-watch-logs, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. If LogDestinationType is s3, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: bucket_ARN/subfolder_name/. For example, to specify a subfolder named my-logs in a bucket named my-bucket, use the following ARN: arn:aws:s3:::my-bucket/my-logs/. You cannot use AWSLogs as a subfolder name. This is a reserved term.
        public let logDestination: String?
        /// The type of traffic to log.
        public let trafficType: TrafficType
        /// The ARN for the IAM role that's used to post flow logs to a log group.
        public let deliverLogsPermissionArn: String?

        public init(logDestinationType: LogDestinationType? = nil, clientToken: String? = nil, resourceIds: ValueStringList, resourceType: FlowLogsResourceType, logGroupName: String? = nil, dryRun: Bool? = nil, logDestination: String? = nil, trafficType: TrafficType, deliverLogsPermissionArn: String? = nil) {
            self.logDestinationType = logDestinationType
            self.clientToken = clientToken
            self.resourceIds = resourceIds
            self.resourceType = resourceType
            self.logGroupName = logGroupName
            self.dryRun = dryRun
            self.logDestination = logDestination
            self.trafficType = trafficType
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
        }

        private enum CodingKeys: String, CodingKey {
            case logDestinationType = "LogDestinationType"
            case clientToken = "ClientToken"
            case resourceIds = "ResourceId"
            case resourceType = "ResourceType"
            case logGroupName = "LogGroupName"
            case dryRun = "DryRun"
            case logDestination = "LogDestination"
            case trafficType = "TrafficType"
            case deliverLogsPermissionArn = "DeliverLogsPermissionArn"
        }
    }

    public struct HibernationOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", location: .body(locationName: "configured"), required: false, type: .boolean)
        ]
        /// If this parameter is set to true, your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "configured"
        }
    }

    public struct FpgaImageIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateVolumePermissionModifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Add", required: false, type: .structure), 
            AWSShapeMember(label: "Remove", required: false, type: .structure)
        ]
        /// Adds a specific AWS account ID or group to a volume's list of create volume permissions.
        public let add: CreateVolumePermissionList?
        /// Removes a specific AWS account ID or group from a volume's list of create volume permissions.
        public let remove: CreateVolumePermissionList?

        public init(add: CreateVolumePermissionList? = nil, remove: CreateVolumePermissionList? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct DescribePublicIpv4PoolsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PoolIds", location: .body(locationName: "PoolId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the address pools.
        public let poolIds: ValueStringList?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, poolIds: ValueStringList? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.poolIds = poolIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case poolIds = "PoolId"
            case maxResults = "MaxResults"
        }
    }

    public struct PrefixListIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeNetworkAclsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclIds", location: .body(locationName: "NetworkAclId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more network ACL IDs. Default: Describes all your network ACLs.
        public let networkAclIds: ValueStringList?
        /// One or more filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.rule-number - The number of an entry (in other words, rule) in the set of ACL entries.    network-acl-id - The ID of the network ACL.    owner-id - The ID of the AWS account that owns the network ACL.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network ACL.  
        public let filters: FilterList?

        public init(dryRun: Bool? = nil, networkAclIds: ValueStringList? = nil, filters: FilterList? = nil) {
            self.dryRun = dryRun
            self.networkAclIds = networkAclIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkAclIds = "NetworkAclId"
            case filters = "Filter"
        }
    }

    public struct DescribeVpcPeeringConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnectionIds", location: .body(locationName: "VpcPeeringConnectionId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more VPC peering connection IDs. Default: Describes all your VPC peering connections.
        public let vpcPeeringConnectionIds: ValueStringList?
        /// One or more filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The AWS account ID of the owner of the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The AWS account ID of the owner of the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcPeeringConnectionIds: ValueStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.vpcPeeringConnectionIds = vpcPeeringConnectionIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnectionIds = "VpcPeeringConnectionId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct MonitorInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceMonitorings", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// The monitoring information.
        public let instanceMonitorings: InstanceMonitoringList?

        public init(instanceMonitorings: InstanceMonitoringList? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct IamInstanceProfileAssociationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IamInstanceProfileAssociation]?

        public init(item: [IamInstanceProfileAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct FpgaImageList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FpgaImage]?

        public init(item: [FpgaImage]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReservedInstanceReservationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstanceId", location: .body(locationName: "reservedInstanceId"), required: false, type: .string), 
            AWSShapeMember(label: "ReservationValue", location: .body(locationName: "reservationValue"), required: false, type: .structure)
        ]
        /// The ID of the Convertible Reserved Instance that you are exchanging.
        public let reservedInstanceId: String?
        /// The total value of the Convertible Reserved Instance that you are exchanging.
        public let reservationValue: ReservationValue?

        public init(reservedInstanceId: String? = nil, reservationValue: ReservationValue? = nil) {
            self.reservedInstanceId = reservedInstanceId
            self.reservationValue = reservationValue
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstanceId = "reservedInstanceId"
            case reservationValue = "reservationValue"
        }
    }

    public struct PrivateIpAddressSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PrivateIpAddressSpecification]?

        public init(item: [PrivateIpAddressSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", location: .body(locationName: "Value"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// One or more filter values. Filter values are case-sensitive.
        public let values: ValueStringList?
        /// The name of the filter. Filter names are case-sensitive.
        public let name: String?

        public init(values: ValueStringList? = nil, name: String? = nil) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Value"
            case name = "Name"
        }
    }

    public struct InstanceCount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer)
        ]
        /// The states of the listed Reserved Instances.
        public let state: ListingState?
        /// The number of listed Reserved Instances in the state specified by the state.
        public let instanceCount: Int32?

        public init(state: ListingState? = nil, instanceCount: Int32? = nil) {
            self.state = state
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case instanceCount = "instanceCount"
        }
    }

    public struct LaunchTemplateOverrides: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "WeightedCapacity", location: .body(locationName: "weightedCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "Priority", location: .body(locationName: "priority"), required: false, type: .double), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]
        /// The instance type.
        public let instanceType: InstanceType?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?
        /// The priority for the launch template override. If OnDemandAllocationStrategy is set to prioritized, Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
        public let priority: Double?
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?

        public init(instanceType: InstanceType? = nil, spotPrice: String? = nil, weightedCapacity: Double? = nil, priority: Double? = nil, availabilityZone: String? = nil, subnetId: String? = nil) {
            self.instanceType = instanceType
            self.spotPrice = spotPrice
            self.weightedCapacity = weightedCapacity
            self.priority = priority
            self.availabilityZone = availabilityZone
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case spotPrice = "spotPrice"
            case weightedCapacity = "weightedCapacity"
            case priority = "priority"
            case availabilityZone = "availabilityZone"
            case subnetId = "subnetId"
        }
    }

    public struct DescribePrincipalIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principals", location: .body(locationName: "principalSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the ID format settings for the ARN.
        public let principals: PrincipalIdFormatList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(principals: PrincipalIdFormatList? = nil, nextToken: String? = nil) {
            self.principals = principals
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "principalSet"
            case nextToken = "nextToken"
        }
    }

    public struct CreateFpgaImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageGlobalId", location: .body(locationName: "fpgaImageGlobalId"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string)
        ]
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?

        public init(fpgaImageGlobalId: String? = nil, fpgaImageId: String? = nil) {
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageGlobalId = "fpgaImageGlobalId"
            case fpgaImageId = "fpgaImageId"
        }
    }

    public struct VolumeStatusItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "Actions", location: .body(locationName: "actionsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VolumeStatus", location: .body(locationName: "volumeStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "Events", location: .body(locationName: "eventsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string)
        ]
        /// The volume ID.
        public let volumeId: String?
        /// The details of the operation.
        public let actions: VolumeStatusActionsList?
        /// The volume status.
        public let volumeStatus: VolumeStatusInfo?
        /// A list of events associated with the volume.
        public let events: VolumeStatusEventsList?
        /// The Availability Zone of the volume.
        public let availabilityZone: String?

        public init(volumeId: String? = nil, actions: VolumeStatusActionsList? = nil, volumeStatus: VolumeStatusInfo? = nil, events: VolumeStatusEventsList? = nil, availabilityZone: String? = nil) {
            self.volumeId = volumeId
            self.actions = actions
            self.volumeStatus = volumeStatus
            self.events = events
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "volumeId"
            case actions = "actionsSet"
            case volumeStatus = "volumeStatus"
            case events = "eventsSet"
            case availabilityZone = "availabilityZone"
        }
    }

    public enum SpotInstanceState: String, CustomStringConvertible, Codable {
        case open = "open"
        case active = "active"
        case closed = "closed"
        case cancelled = "cancelled"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct IamInstanceProfileAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfile?
        /// The time the IAM instance profile was associated with the instance.
        public let timestamp: TimeStamp?
        /// The ID of the instance.
        public let instanceId: String?
        /// The ID of the association.
        public let associationId: String?
        /// The state of the association.
        public let state: IamInstanceProfileAssociationState?

        public init(iamInstanceProfile: IamInstanceProfile? = nil, timestamp: TimeStamp? = nil, instanceId: String? = nil, associationId: String? = nil, state: IamInstanceProfileAssociationState? = nil) {
            self.iamInstanceProfile = iamInstanceProfile
            self.timestamp = timestamp
            self.instanceId = instanceId
            self.associationId = associationId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfile = "iamInstanceProfile"
            case timestamp = "timestamp"
            case instanceId = "instanceId"
            case associationId = "associationId"
            case state = "state"
        }
    }

    public struct ReservedInstancesConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesConfiguration]?

        public init(item: [ReservedInstancesConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetHostReservationPurchasePreviewResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalHourlyPrice", location: .body(locationName: "totalHourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "TotalUpfrontPrice", location: .body(locationName: "totalUpfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "Purchase", location: .body(locationName: "purchase"), required: false, type: .structure), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum)
        ]
        /// The potential total hourly price of the reservation per hour.
        public let totalHourlyPrice: String?
        /// The potential total upfront price. This is billed immediately.
        public let totalUpfrontPrice: String?
        /// The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.
        public let purchase: PurchaseSet?
        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?

        public init(totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil, purchase: PurchaseSet? = nil, currencyCode: CurrencyCodeValues? = nil) {
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
            self.purchase = purchase
            self.currencyCode = currencyCode
        }

        private enum CodingKeys: String, CodingKey {
            case totalHourlyPrice = "totalHourlyPrice"
            case totalUpfrontPrice = "totalUpfrontPrice"
            case purchase = "purchase"
            case currencyCode = "currencyCode"
        }
    }

    public struct InstanceNetworkInterfaceSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceNetworkInterfaceSpecification]?

        public init(item: [InstanceNetworkInterfaceSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CopyImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct MoveAddressToVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The Elastic IP address.
        public let publicIp: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(publicIp: String, dryRun: Bool? = nil) {
            self.publicIp = publicIp
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "publicIp"
            case dryRun = "dryRun"
        }
    }

    public struct CustomerGatewayIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", required: false, type: .list)
        ]
        public let customerGatewayId: [String]?

        public init(customerGatewayId: [String]? = nil) {
            self.customerGatewayId = customerGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DisassociateIamInstanceProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct CreateNetworkInterfacePermissionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InterfacePermission", location: .body(locationName: "interfacePermission"), required: false, type: .structure)
        ]
        /// Information about the permission for the network interface.
        public let interfacePermission: NetworkInterfacePermission?

        public init(interfacePermission: NetworkInterfacePermission? = nil) {
            self.interfacePermission = interfacePermission
        }

        private enum CodingKeys: String, CodingKey {
            case interfacePermission = "interfacePermission"
        }
    }

    public struct SecurityGroupIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .list)
        ]
        public let securityGroupId: [String]?

        public init(securityGroupId: [String]? = nil) {
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
        }
    }

    public struct AdvertiseByoipCidrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The IPv4 address range, in CIDR notation.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct ElasticGpuSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ElasticGpus]?

        public init(item: [ElasticGpus]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeReservedInstancesOfferingsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesOfferings", location: .body(locationName: "reservedInstancesOfferingsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// A list of Reserved Instances offerings.
        public let reservedInstancesOfferings: ReservedInstancesOfferingList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(reservedInstancesOfferings: ReservedInstancesOfferingList? = nil, nextToken: String? = nil) {
            self.reservedInstancesOfferings = reservedInstancesOfferings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesOfferings = "reservedInstancesOfferingsSet"
            case nextToken = "nextToken"
        }
    }

    public struct NetworkAclEntryList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkAclEntry]?

        public init(item: [NetworkAclEntry]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeScheduledInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ScheduledInstanceIds", location: .body(locationName: "ScheduledInstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SlotStartTimeRange", required: false, type: .structure)
        ]
        /// One or more filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
        public let filters: FilterList?
        /// One or more Scheduled Instance IDs.
        public let scheduledInstanceIds: ScheduledInstanceIdRequestSet?
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The time period for the first schedule to start.
        public let slotStartTimeRange: SlotStartTimeRangeRequest?

        public init(filters: FilterList? = nil, scheduledInstanceIds: ScheduledInstanceIdRequestSet? = nil, maxResults: Int32? = nil, nextToken: String? = nil, dryRun: Bool? = nil, slotStartTimeRange: SlotStartTimeRangeRequest? = nil) {
            self.filters = filters
            self.scheduledInstanceIds = scheduledInstanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.slotStartTimeRange = slotStartTimeRange
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case scheduledInstanceIds = "ScheduledInstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case slotStartTimeRange = "SlotStartTimeRange"
        }
    }

    public struct ReservedInstancesModificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetConfiguration", location: .body(locationName: "targetConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]
        /// The target Reserved Instances configurations supplied as part of the modification request.
        public let targetConfiguration: ReservedInstancesConfiguration?
        /// The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
        public let reservedInstancesId: String?

        public init(targetConfiguration: ReservedInstancesConfiguration? = nil, reservedInstancesId: String? = nil) {
            self.targetConfiguration = targetConfiguration
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case targetConfiguration = "targetConfiguration"
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct CreateDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpConfigurations", location: .body(locationName: "dhcpConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// A DHCP configuration option.
        public let dhcpConfigurations: NewDhcpConfigurationList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpConfigurations: NewDhcpConfigurationList, dryRun: Bool? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfiguration"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotDatafeedSubscription", location: .body(locationName: "spotDatafeedSubscription"), required: false, type: .structure)
        ]
        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public struct DescribeLaunchTemplatesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplates", location: .body(locationName: "launchTemplates"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the launch templates.
        public let launchTemplates: LaunchTemplateSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplates: LaunchTemplateSet? = nil, nextToken: String? = nil) {
            self.launchTemplates = launchTemplates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplates = "launchTemplates"
            case nextToken = "nextToken"
        }
    }

    public enum FleetExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable {
        case noTermination = "no-termination"
        case termination = "termination"
        public var description: String { return self.rawValue }
    }

    public struct DescribePrefixListsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixLists", location: .body(locationName: "prefixListSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// All available prefix lists.
        public let prefixLists: PrefixListSet?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(prefixLists: PrefixListSet? = nil, nextToken: String? = nil) {
            self.prefixLists = prefixLists
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case prefixLists = "prefixListSet"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteNatGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string)
        ]
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayId: String? = nil) {
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayId = "natGatewayId"
        }
    }

    public struct DescribeAccountAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNames", location: .body(locationName: "attributeName"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more account attribute names.
        public let attributeNames: AccountAttributeNameStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(attributeNames: AccountAttributeNameStringList? = nil, dryRun: Bool? = nil) {
            self.attributeNames = attributeNames
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "attributeName"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeLaunchTemplateVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Versions", location: .body(locationName: "LaunchTemplateVersion"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "MinVersion", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "MaxVersion", required: false, type: .string)
        ]
        /// One or more versions of the launch template.
        public let versions: VersionStringList?
        /// One or more filters.    create-time - The time the launch template version was created.    ebs-optimized - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.    iam-instance-profile - The ARN of the IAM instance profile.    image-id - The ID of the AMI.    instance-type - The instance type.    is-default-version - A boolean that indicates whether the launch template version is the default version.    kernel-id - The kernel ID.    ram-disk-id - The RAM disk ID.  
        public let filters: FilterList?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// The version number after which to describe launch template versions.
        public let minVersion: String?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int32?
        /// The version number up to which to describe launch template versions.
        public let maxVersion: String?

        public init(versions: VersionStringList? = nil, filters: FilterList? = nil, launchTemplateName: String? = nil, minVersion: String? = nil, nextToken: String? = nil, dryRun: Bool? = nil, launchTemplateId: String? = nil, maxResults: Int32? = nil, maxVersion: String? = nil) {
            self.versions = versions
            self.filters = filters
            self.launchTemplateName = launchTemplateName
            self.minVersion = minVersion
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.maxResults = maxResults
            self.maxVersion = maxVersion
        }

        private enum CodingKeys: String, CodingKey {
            case versions = "LaunchTemplateVersion"
            case filters = "Filter"
            case launchTemplateName = "LaunchTemplateName"
            case minVersion = "MinVersion"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case maxResults = "MaxResults"
            case maxVersion = "MaxVersion"
        }
    }

    public struct RouteList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Route]?

        public init(item: [Route]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedPrincipals", location: .body(locationName: "allowedPrincipals"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more allowed principals.
        public let allowedPrincipals: AllowedPrincipalSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(allowedPrincipals: AllowedPrincipalSet? = nil, nextToken: String? = nil) {
            self.allowedPrincipals = allowedPrincipals
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case allowedPrincipals = "allowedPrincipals"
            case nextToken = "nextToken"
        }
    }

    public struct AcceptVpcPeeringConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnection", location: .body(locationName: "vpcPeeringConnection"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct DescribeVolumeAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "AutoEnableIO", location: .body(locationName: "autoEnableIO"), required: false, type: .structure)
        ]
        /// A list of product codes.
        public let productCodes: ProductCodeList?
        /// The ID of the volume.
        public let volumeId: String?
        /// The state of autoEnableIO attribute.
        public let autoEnableIO: AttributeBooleanValue?

        public init(productCodes: ProductCodeList? = nil, volumeId: String? = nil, autoEnableIO: AttributeBooleanValue? = nil) {
            self.productCodes = productCodes
            self.volumeId = volumeId
            self.autoEnableIO = autoEnableIO
        }

        private enum CodingKeys: String, CodingKey {
            case productCodes = "productCodes"
            case volumeId = "volumeId"
            case autoEnableIO = "autoEnableIO"
        }
    }

    public struct TagDescriptionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TagDescription]?

        public init(item: [TagDescription]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateCapacityReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "InstanceType", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "Tenancy", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "InstancePlatform", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EndDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "EphemeralStorage", required: false, type: .boolean), 
            AWSShapeMember(label: "EndDateType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceMatchCriteria", required: false, type: .enum)
        ]
        /// The Availability Zone in which to create the Capacity Reservation.
        public let availabilityZone: String
        /// The instance type for which to reserve capacity. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: String
        /// The tags to apply to the Capacity Reservation during launch.
        public let tagSpecifications: TagSpecificationList?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other AWS accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.  
        public let tenancy: CapacityReservationTenancy?
        /// The number of instances for which to reserve capacity.
        public let instanceCount: Int32
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters.
        public let clientToken: String?
        /// The type of operating system for which to reserve capacity.
        public let instancePlatform: CapacityReservationInstancePlatform
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited. If the EndDateType is limited, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
        public let endDate: TimeStamp?
        /// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
        public let ephemeralStorage: Bool?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate if the EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if the EndDateType value is limited.  
        public let endDateType: EndDateType?
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.    Default: open 
        public let instanceMatchCriteria: InstanceMatchCriteria?

        public init(availabilityZone: String, instanceType: String, tagSpecifications: TagSpecificationList? = nil, ebsOptimized: Bool? = nil, tenancy: CapacityReservationTenancy? = nil, instanceCount: Int32, clientToken: String? = nil, instancePlatform: CapacityReservationInstancePlatform, dryRun: Bool? = nil, endDate: TimeStamp? = nil, ephemeralStorage: Bool? = nil, endDateType: EndDateType? = nil, instanceMatchCriteria: InstanceMatchCriteria? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.tagSpecifications = tagSpecifications
            self.ebsOptimized = ebsOptimized
            self.tenancy = tenancy
            self.instanceCount = instanceCount
            self.clientToken = clientToken
            self.instancePlatform = instancePlatform
            self.dryRun = dryRun
            self.endDate = endDate
            self.ephemeralStorage = ephemeralStorage
            self.endDateType = endDateType
            self.instanceMatchCriteria = instanceMatchCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case instanceType = "InstanceType"
            case tagSpecifications = "TagSpecifications"
            case ebsOptimized = "EbsOptimized"
            case tenancy = "Tenancy"
            case instanceCount = "InstanceCount"
            case clientToken = "ClientToken"
            case instancePlatform = "InstancePlatform"
            case dryRun = "DryRun"
            case endDate = "EndDate"
            case ephemeralStorage = "EphemeralStorage"
            case endDateType = "EndDateType"
            case instanceMatchCriteria = "InstanceMatchCriteria"
        }
    }

    public enum ContainerFormat: String, CustomStringConvertible, Codable {
        case ova = "ova"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstances", location: .body(locationName: "reservedInstancesSet"), required: false, type: .structure)
        ]
        /// A list of Reserved Instances.
        public let reservedInstances: ReservedInstancesList?

        public init(reservedInstances: ReservedInstancesList? = nil) {
            self.reservedInstances = reservedInstances
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstances = "reservedInstancesSet"
        }
    }

    public struct CreateVpcEndpointServiceConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkLoadBalancerArns", location: .body(locationName: "NetworkLoadBalancerArn"), required: true, type: .structure), 
            AWSShapeMember(label: "AcceptanceRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string)
        ]
        /// The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.
        public let networkLoadBalancerArns: ValueStringList
        /// Indicate whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use AcceptVpcEndpointConnections.
        public let acceptanceRequired: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?

        public init(networkLoadBalancerArns: ValueStringList, acceptanceRequired: Bool? = nil, dryRun: Bool? = nil, clientToken: String? = nil) {
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.acceptanceRequired = acceptanceRequired
            self.dryRun = dryRun
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkLoadBalancerArns = "NetworkLoadBalancerArn"
            case acceptanceRequired = "AcceptanceRequired"
            case dryRun = "DryRun"
            case clientToken = "ClientToken"
        }
    }

    public enum AutoPlacement: String, CustomStringConvertible, Codable {
        case on = "on"
        case off = "off"
        public var description: String { return self.rawValue }
    }

    public enum ResetFpgaImageAttributeName: String, CustomStringConvertible, Codable {
        case loadpermission = "loadPermission"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedInstancesModificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesModificationIds", location: .body(locationName: "ReservedInstancesModificationId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// IDs for the submitted modification request.
        public let reservedInstancesModificationIds: ReservedInstancesModificationIdStringList?
        /// One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    modification-result.target-configuration.platform - The network platform of the new Reserved Instances (EC2-Classic | EC2-VPC).    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.  
        public let filters: FilterList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(reservedInstancesModificationIds: ReservedInstancesModificationIdStringList? = nil, filters: FilterList? = nil, nextToken: String? = nil) {
            self.reservedInstancesModificationIds = reservedInstancesModificationIds
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationIds = "ReservedInstancesModificationId"
            case filters = "Filter"
            case nextToken = "nextToken"
        }
    }

    public enum VolumeStatusInfoStatus: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        case insufficientData = "insufficient-data"
        public var description: String { return self.rawValue }
    }

    public struct DisableTransitGatewayRouteTablePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayAttachmentId: String, transitGatewayRouteTableId: String, dryRun: Bool? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "PublicIps", location: .body(locationName: "PublicIp"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllocationIds", location: .body(locationName: "AllocationId"), required: false, type: .structure)
        ]
        /// One or more filters. Filter names and values are case-sensitive.    allocation-id - [EC2-VPC] The allocation ID for the address.    association-id - [EC2-VPC] The association ID for the address.    domain - Indicates whether the address is for use in EC2-Classic (standard) or in a VPC (vpc).    instance-id - The ID of the instance the address is associated with, if any.    network-interface-id - [EC2-VPC] The ID of the network interface that the address is associated with, if any.    network-interface-owner-id - The AWS account ID of the owner.    private-ip-address - [EC2-VPC] The private IP address associated with the Elastic IP address.    public-ip - The Elastic IP address.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: FilterList?
        /// [EC2-Classic] One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses.
        public let publicIps: PublicIpStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-VPC] One or more allocation IDs. Default: Describes all your Elastic IP addresses.
        public let allocationIds: AllocationIdList?

        public init(filters: FilterList? = nil, publicIps: PublicIpStringList? = nil, dryRun: Bool? = nil, allocationIds: AllocationIdList? = nil) {
            self.filters = filters
            self.publicIps = publicIps
            self.dryRun = dryRun
            self.allocationIds = allocationIds
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case publicIps = "PublicIp"
            case dryRun = "dryRun"
            case allocationIds = "AllocationId"
        }
    }

    public struct SpotMarketOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "MaxPrice", required: false, type: .string), 
            AWSShapeMember(label: "ValidUntil", required: false, type: .timestamp), 
            AWSShapeMember(label: "BlockDurationMinutes", required: false, type: .integer)
        ]
        /// The Spot Instance request type. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
        public let spotInstanceType: SpotInstanceType?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances. The default is the On-Demand price.
        public let maxPrice: String?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int32?

        public init(spotInstanceType: SpotInstanceType? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, validUntil: TimeStamp? = nil, blockDurationMinutes: Int32? = nil) {
            self.spotInstanceType = spotInstanceType
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.validUntil = validUntil
            self.blockDurationMinutes = blockDurationMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceType = "SpotInstanceType"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case validUntil = "ValidUntil"
            case blockDurationMinutes = "BlockDurationMinutes"
        }
    }

    public struct DescribePrefixListsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "PrefixListId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.  
        public let filters: FilterList?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value specified is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?
        /// One or more prefix list IDs.
        public let prefixListIds: ValueStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, prefixListIds: ValueStringList? = nil, dryRun: Bool? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.prefixListIds = prefixListIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case prefixListIds = "PrefixListId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteFleetSuccessSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DeleteFleetSuccessItem]?

        public init(item: [DeleteFleetSuccessItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelSpotFleetRequestsSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentSpotFleetRequestState", location: .body(locationName: "currentSpotFleetRequestState"), required: true, type: .enum), 
            AWSShapeMember(label: "PreviousSpotFleetRequestState", location: .body(locationName: "previousSpotFleetRequestState"), required: true, type: .enum), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The current state of the Spot Fleet request.
        public let currentSpotFleetRequestState: BatchState
        /// The previous state of the Spot Fleet request.
        public let previousSpotFleetRequestState: BatchState
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String

        public init(currentSpotFleetRequestState: BatchState, previousSpotFleetRequestState: BatchState, spotFleetRequestId: String) {
            self.currentSpotFleetRequestState = currentSpotFleetRequestState
            self.previousSpotFleetRequestState = previousSpotFleetRequestState
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case currentSpotFleetRequestState = "currentSpotFleetRequestState"
            case previousSpotFleetRequestState = "previousSpotFleetRequestState"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public enum InterfacePermissionType: String, CustomStringConvertible, Codable {
        case instanceAttach = "INSTANCE-ATTACH"
        case eipAssociate = "EIP-ASSOCIATE"
        public var description: String { return self.rawValue }
    }

    public enum DefaultTargetCapacityType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case onDemand = "on-demand"
        public var description: String { return self.rawValue }
    }

    public struct ElasticGpuSpecificationResponseList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ElasticGpuSpecificationResponse]?

        public init(item: [ElasticGpuSpecificationResponse]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateElasticInferenceAcceleratorResponseList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateElasticInferenceAcceleratorResponse]?

        public init(item: [LaunchTemplateElasticInferenceAcceleratorResponse]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeInstanceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The instance attribute. Note: The enaSupport attribute is not supported at this time.
        public let attribute: InstanceAttributeName

        public init(dryRun: Bool? = nil, instanceId: String, attribute: InstanceAttributeName) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case attribute = "attribute"
        }
    }

    public struct DeleteNetworkAclRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the network ACL.
        public let networkAclId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(networkAclId: String, dryRun: Bool? = nil) {
            self.networkAclId = networkAclId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case networkAclId = "networkAclId"
            case dryRun = "dryRun"
        }
    }

    public struct VpnConnectionOptionsSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticRoutesOnly", location: .body(locationName: "staticRoutesOnly"), required: false, type: .boolean), 
            AWSShapeMember(label: "TunnelOptions", required: false, type: .structure)
        ]
        /// Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify true. Use CreateVpnConnectionRoute to create a static route. Default: false 
        public let staticRoutesOnly: Bool?
        /// The tunnel options for the VPN connection.
        public let tunnelOptions: TunnelOptionsList?

        public init(staticRoutesOnly: Bool? = nil, tunnelOptions: TunnelOptionsList? = nil) {
            self.staticRoutesOnly = staticRoutesOnly
            self.tunnelOptions = tunnelOptions
        }

        private enum CodingKeys: String, CodingKey {
            case staticRoutesOnly = "staticRoutesOnly"
            case tunnelOptions = "TunnelOptions"
        }
    }

    public struct LoadPermissionListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LoadPermissionRequest]?

        public init(item: [LoadPermissionRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ActivityStatus: String, CustomStringConvertible, Codable {
        case error = "error"
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        case fulfilled = "fulfilled"
        public var description: String { return self.rawValue }
    }

    public struct Route: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationPrefixListId", location: .body(locationName: "destinationPrefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceOwnerId", location: .body(locationName: "instanceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "Origin", location: .body(locationName: "origin"), required: false, type: .enum), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The IPv6 CIDR block used for the destination match.
        public let destinationIpv6CidrBlock: String?
        /// The prefix of the AWS service.
        public let destinationPrefixListId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The AWS account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// The state of the route. The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
        public let state: RouteState?
        /// The IPv4 CIDR block used for the destination match.
        public let destinationCidrBlock: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Describes how the route was created.    CreateRouteTable - The route was automatically created when the route table was created.    CreateRoute - The route was manually added to the route table.    EnableVgwRoutePropagation - The route was propagated by route propagation.  
        public let origin: RouteOrigin?
        /// The ID of a gateway attached to your VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?

        public init(egressOnlyInternetGatewayId: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, vpcPeeringConnectionId: String? = nil, transitGatewayId: String? = nil, natGatewayId: String? = nil, instanceOwnerId: String? = nil, state: RouteState? = nil, destinationCidrBlock: String? = nil, networkInterfaceId: String? = nil, origin: RouteOrigin? = nil, gatewayId: String? = nil, instanceId: String? = nil) {
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.transitGatewayId = transitGatewayId
            self.natGatewayId = natGatewayId
            self.instanceOwnerId = instanceOwnerId
            self.state = state
            self.destinationCidrBlock = destinationCidrBlock
            self.networkInterfaceId = networkInterfaceId
            self.origin = origin
            self.gatewayId = gatewayId
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "destinationPrefixListId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case transitGatewayId = "transitGatewayId"
            case natGatewayId = "natGatewayId"
            case instanceOwnerId = "instanceOwnerId"
            case state = "state"
            case destinationCidrBlock = "destinationCidrBlock"
            case networkInterfaceId = "networkInterfaceId"
            case origin = "origin"
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
        }
    }

    public struct AttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]
        /// The attribute value. The value is case-sensitive.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct OnDemandOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinTargetCapacity", location: .body(locationName: "minTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "SingleInstanceType", location: .body(locationName: "singleInstanceType"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllocationStrategy", location: .body(locationName: "allocationStrategy"), required: false, type: .enum)
        ]
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int32?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
        public let singleInstanceType: Bool?
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
        public let allocationStrategy: FleetOnDemandAllocationStrategy?

        public init(minTargetCapacity: Int32? = nil, singleInstanceType: Bool? = nil, allocationStrategy: FleetOnDemandAllocationStrategy? = nil) {
            self.minTargetCapacity = minTargetCapacity
            self.singleInstanceType = singleInstanceType
            self.allocationStrategy = allocationStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case minTargetCapacity = "minTargetCapacity"
            case singleInstanceType = "singleInstanceType"
            case allocationStrategy = "allocationStrategy"
        }
    }

    public struct ByoipCidrSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ByoipCidr]?

        public init(item: [ByoipCidr]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DisassociateAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?
        /// [EC2-VPC] The association ID. Required for EC2-VPC.
        public let associationId: String?

        public init(dryRun: Bool? = nil, publicIp: String? = nil, associationId: String? = nil) {
            self.dryRun = dryRun
            self.publicIp = publicIp
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case publicIp = "PublicIp"
            case associationId = "AssociationId"
        }
    }

    public struct DeleteKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyName", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The name of the key pair.
        public let keyName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(keyName: String, dryRun: Bool? = nil) {
            self.keyName = keyName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case keyName = "KeyName"
            case dryRun = "dryRun"
        }
    }

    public struct PriceSchedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Term", location: .body(locationName: "term"), required: false, type: .long), 
            AWSShapeMember(label: "Active", location: .body(locationName: "active"), required: false, type: .boolean), 
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum)
        ]
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?
        /// The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
        public let active: Bool?
        /// The fixed price for the term.
        public let price: Double?
        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?

        public init(term: Int64? = nil, active: Bool? = nil, price: Double? = nil, currencyCode: CurrencyCodeValues? = nil) {
            self.term = term
            self.active = active
            self.price = price
            self.currencyCode = currencyCode
        }

        private enum CodingKeys: String, CodingKey {
            case term = "term"
            case active = "active"
            case price = "price"
            case currencyCode = "currencyCode"
        }
    }

    public struct RequestHostIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum CurrencyCodeValues: String, CustomStringConvertible, Codable {
        case usd = "USD"
        public var description: String { return self.rawValue }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case all = "All"
        case service = "Service"
        case organizationunit = "OrganizationUnit"
        case account = "Account"
        case user = "User"
        case role = "Role"
        public var description: String { return self.rawValue }
    }

    public struct ImportSnapshotTaskList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImportSnapshotTask]?

        public init(item: [ImportSnapshotTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ImportInstanceVolumeDetailSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImportInstanceVolumeDetailItem]?

        public init(item: [ImportInstanceVolumeDetailItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVpnConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnections", location: .body(locationName: "vpnConnectionSet"), required: false, type: .structure)
        ]
        /// Information about one or more VPN connections.
        public let vpnConnections: VpnConnectionList?

        public init(vpnConnections: VpnConnectionList? = nil) {
            self.vpnConnections = vpnConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnections = "vpnConnectionSet"
        }
    }

    public struct DescribeImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String
        /// The AMI attribute.  Note: Depending on your account privileges, the blockDeviceMapping attribute may return a Client.AuthFailure error. If this happens, use DescribeImages to get information about the block device mapping for the AMI.
        public let attribute: ImageAttributeName

        public init(dryRun: Bool? = nil, imageId: String, attribute: ImageAttributeName) {
            self.dryRun = dryRun
            self.imageId = imageId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case imageId = "ImageId"
            case attribute = "Attribute"
        }
    }

    public struct VolumeModificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeModification]?

        public init(item: [VolumeModification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct MovingAddressStatusSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [MovingAddressStatus]?

        public init(item: [MovingAddressStatus]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeFpgaImagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageIds", location: .body(locationName: "FpgaImageId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Owners", location: .body(locationName: "Owner"), required: false, type: .structure)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// One or more filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The AWS account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the AWS Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    update-time - The time of the most recent update.  
        public let filters: FilterList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more AFI IDs.
        public let fpgaImageIds: FpgaImageIdList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filters the AFI by owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace).
        public let owners: OwnerStringList?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, fpgaImageIds: FpgaImageIdList? = nil, dryRun: Bool? = nil, owners: OwnerStringList? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.fpgaImageIds = fpgaImageIds
            self.dryRun = dryRun
            self.owners = owners
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case fpgaImageIds = "FpgaImageId"
            case dryRun = "DryRun"
            case owners = "Owner"
        }
    }

    public struct InstanceIpv6AddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string)
        ]
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct PublicIpv4PoolRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastAddress", location: .body(locationName: "lastAddress"), required: false, type: .string), 
            AWSShapeMember(label: "AddressCount", location: .body(locationName: "addressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailableAddressCount", location: .body(locationName: "availableAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "FirstAddress", location: .body(locationName: "firstAddress"), required: false, type: .string)
        ]
        /// The last IP address in the range.
        public let lastAddress: String?
        /// The number of addresses in the range.
        public let addressCount: Int32?
        /// The number of available addresses in the range.
        public let availableAddressCount: Int32?
        /// The first IP address in the range.
        public let firstAddress: String?

        public init(lastAddress: String? = nil, addressCount: Int32? = nil, availableAddressCount: Int32? = nil, firstAddress: String? = nil) {
            self.lastAddress = lastAddress
            self.addressCount = addressCount
            self.availableAddressCount = availableAddressCount
            self.firstAddress = firstAddress
        }

        private enum CodingKeys: String, CodingKey {
            case lastAddress = "lastAddress"
            case addressCount = "addressCount"
            case availableAddressCount = "availableAddressCount"
            case firstAddress = "firstAddress"
        }
    }

    public struct DeleteLaunchTemplateVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnsuccessfullyDeletedLaunchTemplateVersions", location: .body(locationName: "unsuccessfullyDeletedLaunchTemplateVersionSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SuccessfullyDeletedLaunchTemplateVersions", location: .body(locationName: "successfullyDeletedLaunchTemplateVersionSet"), required: false, type: .structure)
        ]
        /// Information about the launch template versions that could not be deleted.
        public let unsuccessfullyDeletedLaunchTemplateVersions: DeleteLaunchTemplateVersionsResponseErrorSet?
        /// Information about the launch template versions that were successfully deleted.
        public let successfullyDeletedLaunchTemplateVersions: DeleteLaunchTemplateVersionsResponseSuccessSet?

        public init(unsuccessfullyDeletedLaunchTemplateVersions: DeleteLaunchTemplateVersionsResponseErrorSet? = nil, successfullyDeletedLaunchTemplateVersions: DeleteLaunchTemplateVersionsResponseSuccessSet? = nil) {
            self.unsuccessfullyDeletedLaunchTemplateVersions = unsuccessfullyDeletedLaunchTemplateVersions
            self.successfullyDeletedLaunchTemplateVersions = successfullyDeletedLaunchTemplateVersions
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessfullyDeletedLaunchTemplateVersions = "unsuccessfullyDeletedLaunchTemplateVersionSet"
            case successfullyDeletedLaunchTemplateVersions = "successfullyDeletedLaunchTemplateVersionSet"
        }
    }

    public struct PrincipalIdFormatList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PrincipalIdFormat]?

        public init(item: [PrincipalIdFormat]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReplaceRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string)
        ]
        /// The ID of an internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationIpv6CidrBlock: String?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationCidrBlock: String?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table.
        public let routeTableId: String

        public init(gatewayId: String? = nil, instanceId: String? = nil, destinationIpv6CidrBlock: String? = nil, egressOnlyInternetGatewayId: String? = nil, destinationCidrBlock: String? = nil, natGatewayId: String? = nil, dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil, transitGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String) {
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.natGatewayId = natGatewayId
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.transitGatewayId = transitGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
            case natGatewayId = "natGatewayId"
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case transitGatewayId = "TransitGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case routeTableId = "routeTableId"
        }
    }

    public enum DefaultRouteTableAssociationValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the DHCP options set.
        public let dhcpOptionsId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsId: String, dryRun: Bool? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeVpcEndpointConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more filters.    service-id - The ID of the service.    vpc-endpoint-owner - The AWS account number of the owner of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-id - The ID of the endpoint.  
        public let filters: FilterList?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
        }
    }

    public struct TransitGatewayAttachmentPropagationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayAttachmentPropagation]?

        public init(item: [TransitGatewayAttachmentPropagation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SecurityGroupIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string)
        ]
        /// The name of the security group.
        public let groupName: String?
        /// The ID of the security group.
        public let groupId: String?

        public init(groupName: String? = nil, groupId: String? = nil) {
            self.groupName = groupName
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case groupId = "groupId"
        }
    }

    public struct PricingDetailsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PricingDetail]?

        public init(item: [PricingDetail]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DetachInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the internet gateway.
        public let internetGatewayId: String

        public init(dryRun: Bool? = nil, vpcId: String, internetGatewayId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.internetGatewayId = internetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "vpcId"
            case internetGatewayId = "internetGatewayId"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", location: .body(locationName: "capacityReservationPreference"), required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", location: .body(locationName: "capacityReservationTarget"), required: false, type: .structure)
        ]
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "capacityReservationPreference"
            case capacityReservationTarget = "capacityReservationTarget"
        }
    }

    public struct RejectVpcEndpointConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the endpoints that were not rejected, if applicable.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct VpcEndpointSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcEndpoint]?

        public init(item: [VpcEndpoint]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ScheduledInstancesPrivateIpAddressConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Primary", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string)
        ]
        /// Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
        public let primary: Bool?
        /// The IPv4 address.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "Primary"
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct SecurityGroupReferences: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SecurityGroupReference]?

        public init(item: [SecurityGroupReference]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetReservedInstancesExchangeQuoteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PaymentDue", location: .body(locationName: "paymentDue"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstanceValueRollup", location: .body(locationName: "reservedInstanceValueRollup"), required: false, type: .structure), 
            AWSShapeMember(label: "ValidationFailureReason", location: .body(locationName: "validationFailureReason"), required: false, type: .string), 
            AWSShapeMember(label: "IsValidExchange", location: .body(locationName: "isValidExchange"), required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedInstanceValueSet", location: .body(locationName: "reservedInstanceValueSet"), required: false, type: .structure), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "OutputReservedInstancesWillExpireAt", location: .body(locationName: "outputReservedInstancesWillExpireAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TargetConfigurationValueRollup", location: .body(locationName: "targetConfigurationValueRollup"), required: false, type: .structure), 
            AWSShapeMember(label: "TargetConfigurationValueSet", location: .body(locationName: "targetConfigurationValueSet"), required: false, type: .structure)
        ]
        /// The total true upfront charge for the exchange.
        public let paymentDue: String?
        /// The cost associated with the Reserved Instance.
        public let reservedInstanceValueRollup: ReservationValue?
        /// Describes the reason why the exchange cannot be completed.
        public let validationFailureReason: String?
        /// If true, the exchange is valid. If false, the exchange cannot be completed.
        public let isValidExchange: Bool?
        /// The configuration of your Convertible Reserved Instances.
        public let reservedInstanceValueSet: ReservedInstanceReservationValueSet?
        /// The currency of the transaction.
        public let currencyCode: String?
        /// The new end date of the reservation term.
        public let outputReservedInstancesWillExpireAt: TimeStamp?
        /// The cost associated with the Reserved Instance.
        public let targetConfigurationValueRollup: ReservationValue?
        /// The values of the target Convertible Reserved Instances.
        public let targetConfigurationValueSet: TargetReservationValueSet?

        public init(paymentDue: String? = nil, reservedInstanceValueRollup: ReservationValue? = nil, validationFailureReason: String? = nil, isValidExchange: Bool? = nil, reservedInstanceValueSet: ReservedInstanceReservationValueSet? = nil, currencyCode: String? = nil, outputReservedInstancesWillExpireAt: TimeStamp? = nil, targetConfigurationValueRollup: ReservationValue? = nil, targetConfigurationValueSet: TargetReservationValueSet? = nil) {
            self.paymentDue = paymentDue
            self.reservedInstanceValueRollup = reservedInstanceValueRollup
            self.validationFailureReason = validationFailureReason
            self.isValidExchange = isValidExchange
            self.reservedInstanceValueSet = reservedInstanceValueSet
            self.currencyCode = currencyCode
            self.outputReservedInstancesWillExpireAt = outputReservedInstancesWillExpireAt
            self.targetConfigurationValueRollup = targetConfigurationValueRollup
            self.targetConfigurationValueSet = targetConfigurationValueSet
        }

        private enum CodingKeys: String, CodingKey {
            case paymentDue = "paymentDue"
            case reservedInstanceValueRollup = "reservedInstanceValueRollup"
            case validationFailureReason = "validationFailureReason"
            case isValidExchange = "isValidExchange"
            case reservedInstanceValueSet = "reservedInstanceValueSet"
            case currencyCode = "currencyCode"
            case outputReservedInstancesWillExpireAt = "outputReservedInstancesWillExpireAt"
            case targetConfigurationValueRollup = "targetConfigurationValueRollup"
            case targetConfigurationValueSet = "targetConfigurationValueSet"
        }
    }

    public struct SubnetCidrBlockState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?
        /// The state of a CIDR block.
        public let state: SubnetCidrBlockStateCode?

        public init(statusMessage: String? = nil, state: SubnetCidrBlockStateCode? = nil) {
            self.statusMessage = statusMessage
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case statusMessage = "statusMessage"
            case state = "state"
        }
    }

    public struct DisableVgwRoutePropagationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "GatewayId", required: true, type: .string)
        ]
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of the virtual private gateway.
        public let gatewayId: String

        public init(routeTableId: String, gatewayId: String) {
            self.routeTableId = routeTableId
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "RouteTableId"
            case gatewayId = "GatewayId"
        }
    }

    public struct DeleteNetworkInterfacePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Force", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfacePermissionId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// Specify true to remove the permission even if the network interface is attached to an instance.
        public let force: Bool?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(force: Bool? = nil, networkInterfacePermissionId: String, dryRun: Bool? = nil) {
            self.force = force
            self.networkInterfacePermissionId = networkInterfacePermissionId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case force = "Force"
            case networkInterfacePermissionId = "NetworkInterfacePermissionId"
            case dryRun = "DryRun"
        }
    }

    public struct ConfirmProductInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "ProductCode", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// The product code. This must be a product code that you own.
        public let productCode: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, productCode: String, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.productCode = productCode
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case productCode = "ProductCode"
            case dryRun = "dryRun"
        }
    }

    public struct LicenseSpecificationListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LicenseConfigurationRequest]?

        public init(item: [LicenseConfigurationRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateEbsBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer)
        ]
        /// The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The volume type.
        public let volumeType: VolumeType?
        /// The size of the volume, in GiB.
        public let volumeSize: Int32?
        /// Indicates whether the EBS volume is encrypted.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports. 
        public let iops: Int32?

        public init(kmsKeyId: String? = nil, snapshotId: String? = nil, deleteOnTermination: Bool? = nil, volumeType: VolumeType? = nil, volumeSize: Int32? = nil, encrypted: Bool? = nil, iops: Int32? = nil) {
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.volumeType = volumeType
            self.volumeSize = volumeSize
            self.encrypted = encrypted
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case snapshotId = "snapshotId"
            case deleteOnTermination = "deleteOnTermination"
            case volumeType = "volumeType"
            case volumeSize = "volumeSize"
            case encrypted = "encrypted"
            case iops = "iops"
        }
    }

    public struct VpcEndpointConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceId", location: .body(locationName: "serviceId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointState", location: .body(locationName: "vpcEndpointState"), required: false, type: .enum), 
            AWSShapeMember(label: "CreationTimestamp", location: .body(locationName: "creationTimestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VpcEndpointId", location: .body(locationName: "vpcEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointOwner", location: .body(locationName: "vpcEndpointOwner"), required: false, type: .string)
        ]
        /// The ID of the service to which the endpoint is connected.
        public let serviceId: String?
        /// The state of the VPC endpoint.
        public let vpcEndpointState: State?
        /// The date and time the VPC endpoint was created.
        public let creationTimestamp: TimeStamp?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The AWS account ID of the owner of the VPC endpoint.
        public let vpcEndpointOwner: String?

        public init(serviceId: String? = nil, vpcEndpointState: State? = nil, creationTimestamp: TimeStamp? = nil, vpcEndpointId: String? = nil, vpcEndpointOwner: String? = nil) {
            self.serviceId = serviceId
            self.vpcEndpointState = vpcEndpointState
            self.creationTimestamp = creationTimestamp
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
        }

        private enum CodingKeys: String, CodingKey {
            case serviceId = "serviceId"
            case vpcEndpointState = "vpcEndpointState"
            case creationTimestamp = "creationTimestamp"
            case vpcEndpointId = "vpcEndpointId"
            case vpcEndpointOwner = "vpcEndpointOwner"
        }
    }

    public struct DeleteFlowLogsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the flow logs that could not be deleted successfully.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct TransitGatewayAttachmentList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayAttachment]?

        public init(item: [TransitGatewayAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AttachVpnGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcAttachment", location: .body(locationName: "attachment"), required: false, type: .structure)
        ]
        /// Information about the attachment.
        public let vpcAttachment: VpcAttachment?

        public init(vpcAttachment: VpcAttachment? = nil) {
            self.vpcAttachment = vpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case vpcAttachment = "attachment"
        }
    }

    public struct StopInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Hibernate", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Force", location: .body(locationName: "force"), required: false, type: .boolean)
        ]
        /// Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.  Default: false 
        public let hibernate: Bool?
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false 
        public let force: Bool?

        public init(hibernate: Bool? = nil, instanceIds: InstanceIdStringList, dryRun: Bool? = nil, force: Bool? = nil) {
            self.hibernate = hibernate
            self.instanceIds = instanceIds
            self.dryRun = dryRun
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case hibernate = "Hibernate"
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
            case force = "force"
        }
    }

    public struct TransitGatewayOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultRouteTableAssociation", location: .body(locationName: "defaultRouteTableAssociation"), required: false, type: .enum), 
            AWSShapeMember(label: "AmazonSideAsn", location: .body(locationName: "amazonSideAsn"), required: false, type: .long), 
            AWSShapeMember(label: "DnsSupport", location: .body(locationName: "dnsSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "AssociationDefaultRouteTableId", location: .body(locationName: "associationDefaultRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "AutoAcceptSharedAttachments", location: .body(locationName: "autoAcceptSharedAttachments"), required: false, type: .enum), 
            AWSShapeMember(label: "PropagationDefaultRouteTableId", location: .body(locationName: "propagationDefaultRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "VpnEcmpSupport", location: .body(locationName: "vpnEcmpSupport"), required: false, type: .enum), 
            AWSShapeMember(label: "DefaultRouteTablePropagation", location: .body(locationName: "defaultRouteTablePropagation"), required: false, type: .enum)
        ]
        /// Indicates whether resource attachments are automatically associated with the default association route table.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
        public let amazonSideAsn: Int64?
        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?
        /// The ID of the default association route table.
        public let associationDefaultRouteTableId: String?
        /// Indicates whether attachment requests are automatically accepted.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// The ID of the default propagation route table.
        public let propagationDefaultRouteTableId: String?
        /// Indicates whether Equal Cost Multipath Protocol support is enabled.
        public let vpnEcmpSupport: VpnEcmpSupportValue?
        /// Indicates whether resource attachments automatically propagate routes to the default propagation route table.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?

        public init(defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, amazonSideAsn: Int64? = nil, dnsSupport: DnsSupportValue? = nil, associationDefaultRouteTableId: String? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, propagationDefaultRouteTableId: String? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil) {
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.amazonSideAsn = amazonSideAsn
            self.dnsSupport = dnsSupport
            self.associationDefaultRouteTableId = associationDefaultRouteTableId
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.propagationDefaultRouteTableId = propagationDefaultRouteTableId
            self.vpnEcmpSupport = vpnEcmpSupport
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
        }

        private enum CodingKeys: String, CodingKey {
            case defaultRouteTableAssociation = "defaultRouteTableAssociation"
            case amazonSideAsn = "amazonSideAsn"
            case dnsSupport = "dnsSupport"
            case associationDefaultRouteTableId = "associationDefaultRouteTableId"
            case autoAcceptSharedAttachments = "autoAcceptSharedAttachments"
            case propagationDefaultRouteTableId = "propagationDefaultRouteTableId"
            case vpnEcmpSupport = "vpnEcmpSupport"
            case defaultRouteTablePropagation = "defaultRouteTablePropagation"
        }
    }

    public struct ModifySpotFleetRequestRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetCapacity", location: .body(locationName: "targetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The size of the fleet.
        public let targetCapacity: Int32?
        /// Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String

        public init(targetCapacity: Int32? = nil, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, spotFleetRequestId: String) {
            self.targetCapacity = targetCapacity
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case targetCapacity = "targetCapacity"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public enum State: String, CustomStringConvertible, Codable {
        case pendingacceptance = "PendingAcceptance"
        case pending = "Pending"
        case available = "Available"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case rejected = "Rejected"
        case failed = "Failed"
        case expired = "Expired"
        public var description: String { return self.rawValue }
    }

    public struct ReplaceNetworkAclAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new network ACL to associate with the subnet.
        public let networkAclId: String
        /// The ID of the current association between the original network ACL and the subnet.
        public let associationId: String

        public init(dryRun: Bool? = nil, networkAclId: String, associationId: String) {
            self.dryRun = dryRun
            self.networkAclId = networkAclId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkAclId = "networkAclId"
            case associationId = "associationId"
        }
    }

    public struct DescribeSubnetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "SubnetId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more subnet IDs. Default: Describes all your subnets.
        public let subnetIds: SubnetIdStringList?
        /// One or more filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    default-for-az - Indicates whether this is the default subnet for the Availability Zone. You can also use defaultForAz as the filter name.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    owner-id - The ID of the AWS account that owns the subnet.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.  
        public let filters: FilterList?

        public init(dryRun: Bool? = nil, subnetIds: SubnetIdStringList? = nil, filters: FilterList? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case subnetIds = "SubnetId"
            case filters = "Filter"
        }
    }

    public struct LaunchSpecsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotFleetLaunchSpecification]?

        public init(item: [SpotFleetLaunchSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DiskImageVolumeDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .long)
        ]
        /// The volume identifier.
        public let id: String?
        /// The size of the volume, in GiB.
        public let size: Int64?

        public init(id: String? = nil, size: Int64? = nil) {
            self.id = id
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case size = "size"
        }
    }

    public struct ReservedIntancesIds: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesId]?

        public init(item: [ReservedInstancesId]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SubnetIpv6CidrBlockAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlockState", location: .body(locationName: "ipv6CidrBlockState"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: SubnetCidrBlockState?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// The association ID for the CIDR block.
        public let associationId: String?

        public init(ipv6CidrBlockState: SubnetCidrBlockState? = nil, ipv6CidrBlock: String? = nil, associationId: String? = nil) {
            self.ipv6CidrBlockState = ipv6CidrBlockState
            self.ipv6CidrBlock = ipv6CidrBlock
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockState = "ipv6CidrBlockState"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case associationId = "associationId"
        }
    }

    public struct DescribeNetworkAclsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAcls", location: .body(locationName: "networkAclSet"), required: false, type: .structure)
        ]
        /// Information about one or more network ACLs.
        public let networkAcls: NetworkAclList?

        public init(networkAcls: NetworkAclList? = nil) {
            self.networkAcls = networkAcls
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcls = "networkAclSet"
        }
    }

    public struct DescribeSnapshotAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS snapshot.
        public let snapshotId: String
        /// The snapshot attribute you would like to view.
        public let attribute: SnapshotAttributeName

        public init(dryRun: Bool? = nil, snapshotId: String, attribute: SnapshotAttributeName) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
            case attribute = "Attribute"
        }
    }

    public struct TransitGatewayIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PrivateIpAddressSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]
        /// Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
        public let primary: Bool?
        /// The private IPv4 addresses.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "primary"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct CreateNetworkInterfacePermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsService", required: false, type: .string), 
            AWSShapeMember(label: "AwsAccountId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Permission", required: true, type: .enum), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string)
        ]
        /// The AWS service. Currently not supported.
        public let awsService: String?
        /// The AWS account ID.
        public let awsAccountId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of permission to grant.
        public let permission: InterfacePermissionType
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(awsService: String? = nil, awsAccountId: String? = nil, dryRun: Bool? = nil, permission: InterfacePermissionType, networkInterfaceId: String) {
            self.awsService = awsService
            self.awsAccountId = awsAccountId
            self.dryRun = dryRun
            self.permission = permission
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case awsService = "AwsService"
            case awsAccountId = "AwsAccountId"
            case dryRun = "DryRun"
            case permission = "Permission"
            case networkInterfaceId = "NetworkInterfaceId"
        }
    }

    public struct OccurrenceDayRequestSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OccurenceDay", required: false, type: .list)
        ]
        public let occurenceDay: [Int32]?

        public init(occurenceDay: [Int32]? = nil) {
            self.occurenceDay = occurenceDay
        }

        private enum CodingKeys: String, CodingKey {
            case occurenceDay = "OccurenceDay"
        }
    }

    public struct DhcpOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "DhcpConfigurations", location: .body(locationName: "dhcpConfigurationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "DhcpOptionsId", location: .body(locationName: "dhcpOptionsId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// The ID of the AWS account that owns the DHCP options set.
        public let ownerId: String?
        /// One or more DHCP options in the set.
        public let dhcpConfigurations: DhcpConfigurationList?
        /// The ID of the set of DHCP options.
        public let dhcpOptionsId: String?
        /// Any tags assigned to the DHCP options set.
        public let tags: TagList?

        public init(ownerId: String? = nil, dhcpConfigurations: DhcpConfigurationList? = nil, dhcpOptionsId: String? = nil, tags: TagList? = nil) {
            self.ownerId = ownerId
            self.dhcpConfigurations = dhcpConfigurations
            self.dhcpOptionsId = dhcpOptionsId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "ownerId"
            case dhcpConfigurations = "dhcpConfigurationSet"
            case dhcpOptionsId = "dhcpOptionsId"
            case tags = "tagSet"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(egressOnlyInternetGatewayId: String, dryRun: Bool? = nil) {
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGatewayId = "EgressOnlyInternetGatewayId"
            case dryRun = "DryRun"
        }
    }

    public struct CreateImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct DescribePlacementGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementGroups", location: .body(locationName: "placementGroupSet"), required: false, type: .structure)
        ]
        /// One or more placement groups.
        public let placementGroups: PlacementGroupList?

        public init(placementGroups: PlacementGroupList? = nil) {
            self.placementGroups = placementGroups
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroups = "placementGroupSet"
        }
    }

    public struct DescribeKeyPairsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyNames", location: .body(locationName: "KeyName"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more key pair names. Default: Describes all your key pairs.
        public let keyNames: KeyNameStringList?
        /// One or more filters.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(keyNames: KeyNameStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.keyNames = keyNames
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case keyNames = "KeyName"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeInstanceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IncludeAllInstances", location: .body(locationName: "includeAllInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int32?
        /// One or more filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).  
        public let filters: FilterList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false 
        public let includeAllInstances: Bool?
        /// One or more instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
        public let instanceIds: InstanceIdStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, includeAllInstances: Bool? = nil, instanceIds: InstanceIdStringList? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.includeAllInstances = includeAllInstances
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case includeAllInstances = "includeAllInstances"
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct CancelExportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskId", location: .body(locationName: "exportTaskId"), required: true, type: .string)
        ]
        /// The ID of the export task. This is the ID returned by CreateInstanceExportTask.
        public let exportTaskId: String

        public init(exportTaskId: String) {
            self.exportTaskId = exportTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskId = "exportTaskId"
        }
    }

    public enum FleetStateCode: String, CustomStringConvertible, Codable {
        case submitted = "submitted"
        case active = "active"
        case deleted = "deleted"
        case failed = "failed"
        case deletedRunning = "deleted-running"
        case deletedTerminating = "deleted-terminating"
        case modifying = "modifying"
        public var description: String { return self.rawValue }
    }

    public struct CreateTransitGatewayVpcAttachmentRequestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Support", required: false, type: .enum), 
            AWSShapeMember(label: "DnsSupport", required: false, type: .enum)
        ]
        /// Enable or disable IPv6 support. The default is enable.
        public let ipv6Support: Ipv6SupportValue?
        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?

        public init(ipv6Support: Ipv6SupportValue? = nil, dnsSupport: DnsSupportValue? = nil) {
            self.ipv6Support = ipv6Support
            self.dnsSupport = dnsSupport
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Support = "Ipv6Support"
            case dnsSupport = "DnsSupport"
        }
    }

    public enum ImageAttributeName: String, CustomStringConvertible, Codable {
        case description = "description"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        case launchpermission = "launchPermission"
        case productcodes = "productCodes"
        case blockdevicemapping = "blockDeviceMapping"
        case sriovnetsupport = "sriovNetSupport"
        public var description: String { return self.rawValue }
    }

    public struct PurchaseScheduledInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceSet", location: .body(locationName: "scheduledInstanceSet"), required: false, type: .structure)
        ]
        /// Information about the Scheduled Instances.
        public let scheduledInstanceSet: PurchasedScheduledInstanceSet?

        public init(scheduledInstanceSet: PurchasedScheduledInstanceSet? = nil) {
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceSet = "scheduledInstanceSet"
        }
    }

    public struct AvailabilityZoneList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AvailabilityZone]?

        public init(item: [AvailabilityZone]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the EBS snapshot.
        public let snapshotId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(snapshotId: String, dryRun: Bool? = nil) {
            self.snapshotId = snapshotId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case dryRun = "dryRun"
        }
    }

    public struct DisassociateVpcCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct CancelSpotFleetRequestsError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: true, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: true, type: .string)
        ]
        /// The error code.
        public let code: CancelBatchErrorCode
        /// The description for the error code.
        public let message: String

        public init(code: CancelBatchErrorCode, message: String) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DetachVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Device", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Force", required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// The ID of the volume.
        public let volumeId: String
        /// The device name.
        public let device: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
        public let force: Bool?

        public init(instanceId: String? = nil, volumeId: String, device: String? = nil, dryRun: Bool? = nil, force: Bool? = nil) {
            self.instanceId = instanceId
            self.volumeId = volumeId
            self.device = device
            self.dryRun = dryRun
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
            case device = "Device"
            case dryRun = "dryRun"
            case force = "Force"
        }
    }

    public struct ServiceDetailSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ServiceDetail]?

        public init(item: [ServiceDetail]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeInstanceStatusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceStatuses", location: .body(locationName: "instanceStatusSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// One or more instance status descriptions.
        public let instanceStatuses: InstanceStatusList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceStatuses: InstanceStatusList? = nil, nextToken: String? = nil) {
            self.instanceStatuses = instanceStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceStatuses = "instanceStatusSet"
            case nextToken = "nextToken"
        }
    }

    public struct ModifyVpcEndpointServicePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddAllowedPrincipals", required: false, type: .structure), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveAllowedPrincipals", required: false, type: .structure)
        ]
        /// The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).
        public let addAllowedPrincipals: ValueStringList?
        /// The ID of the service.
        public let serviceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.
        public let removeAllowedPrincipals: ValueStringList?

        public init(addAllowedPrincipals: ValueStringList? = nil, serviceId: String, dryRun: Bool? = nil, removeAllowedPrincipals: ValueStringList? = nil) {
            self.addAllowedPrincipals = addAllowedPrincipals
            self.serviceId = serviceId
            self.dryRun = dryRun
            self.removeAllowedPrincipals = removeAllowedPrincipals
        }

        private enum CodingKeys: String, CodingKey {
            case addAllowedPrincipals = "AddAllowedPrincipals"
            case serviceId = "ServiceId"
            case dryRun = "DryRun"
            case removeAllowedPrincipals = "RemoveAllowedPrincipals"
        }
    }

    public struct DescribeFlowLogsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "FlowLogId"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000. If MaxResults is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the flow log IDs parameter in the same request.
        public let maxResults: Int32?
        /// One or more flow log IDs.
        public let flowLogIds: ValueStringList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    log-destination-type - The type of destination to which the flow log publishes data. Possible destination types include cloud-watch-logs and S3.    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL).  
        public let filter: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, flowLogIds: ValueStringList? = nil, nextToken: String? = nil, filter: FilterList? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.flowLogIds = flowLogIds
            self.nextToken = nextToken
            self.filter = filter
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case flowLogIds = "FlowLogId"
            case nextToken = "NextToken"
            case filter = "Filter"
            case dryRun = "DryRun"
        }
    }

    public struct InstanceNetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "MacAddress", location: .body(locationName: "macAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .structure)
        ]
        /// The association information for an Elastic IPv4 associated with the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// The ID of the VPC.
        public let vpcId: String?
        /// Indicates whether to validate network traffic to or from this network interface.
        public let sourceDestCheck: Bool?
        /// One or more IPv6 addresses associated with the network interface.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// The description.
        public let description: String?
        /// The network interface attachment.
        public let attachment: InstanceNetworkInterfaceAttachment?
        /// One or more security groups.
        public let groups: GroupIdentifierList?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the AWS account that created the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// One or more private IPv4 addresses associated with the network interface.
        public let privateIpAddresses: InstancePrivateIpAddressList?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, vpcId: String? = nil, sourceDestCheck: Bool? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, description: String? = nil, attachment: InstanceNetworkInterfaceAttachment? = nil, groups: GroupIdentifierList? = nil, macAddress: String? = nil, subnetId: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, status: NetworkInterfaceStatus? = nil, privateIpAddresses: InstancePrivateIpAddressList? = nil) {
            self.association = association
            self.vpcId = vpcId
            self.sourceDestCheck = sourceDestCheck
            self.ipv6Addresses = ipv6Addresses
            self.description = description
            self.attachment = attachment
            self.groups = groups
            self.macAddress = macAddress
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.status = status
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case vpcId = "vpcId"
            case sourceDestCheck = "sourceDestCheck"
            case ipv6Addresses = "ipv6AddressesSet"
            case description = "description"
            case attachment = "attachment"
            case groups = "groupSet"
            case macAddress = "macAddress"
            case subnetId = "subnetId"
            case networkInterfaceId = "networkInterfaceId"
            case ownerId = "ownerId"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
            case status = "status"
            case privateIpAddresses = "privateIpAddressesSet"
        }
    }

    public enum DnsSupportValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public struct GetLaunchTemplateDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateData", location: .body(locationName: "launchTemplateData"), required: false, type: .structure)
        ]
        /// The instance data.
        public let launchTemplateData: ResponseLaunchTemplateData?

        public init(launchTemplateData: ResponseLaunchTemplateData? = nil) {
            self.launchTemplateData = launchTemplateData
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateData = "launchTemplateData"
        }
    }

    public struct ModifySpotFleetRequestResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct PlacementGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "Strategy", location: .body(locationName: "strategy"), required: false, type: .enum)
        ]
        /// The state of the placement group.
        public let state: PlacementGroupState?
        /// The name of the placement group.
        public let groupName: String?
        /// The placement strategy.
        public let strategy: PlacementStrategy?

        public init(state: PlacementGroupState? = nil, groupName: String? = nil, strategy: PlacementStrategy? = nil) {
            self.state = state
            self.groupName = groupName
            self.strategy = strategy
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case groupName = "groupName"
            case strategy = "strategy"
        }
    }

    public struct ImageIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", required: false, type: .list)
        ]
        public let imageId: [String]?

        public init(imageId: [String]? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
        }
    }

    public struct InstanceCreditSpecificationListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceCreditSpecificationRequest]?

        public init(item: [InstanceCreditSpecificationRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TargetCapacitySpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultTargetCapacityType", location: .body(locationName: "defaultTargetCapacityType"), required: false, type: .enum), 
            AWSShapeMember(label: "TotalTargetCapacity", location: .body(locationName: "totalTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "OnDemandTargetCapacity", location: .body(locationName: "onDemandTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "SpotTargetCapacity", location: .body(locationName: "spotTargetCapacity"), required: false, type: .integer)
        ]
        /// The default TotalTargetCapacity, which is either Spot or On-Demand.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of units to request, filled using DefaultTargetCapacityType.
        public let totalTargetCapacity: Int32?
        /// The number of On-Demand units to request.
        public let onDemandTargetCapacity: Int32?
        /// The maximum number of Spot units to launch.
        public let spotTargetCapacity: Int32?

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, totalTargetCapacity: Int32? = nil, onDemandTargetCapacity: Int32? = nil, spotTargetCapacity: Int32? = nil) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.totalTargetCapacity = totalTargetCapacity
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType = "defaultTargetCapacityType"
            case totalTargetCapacity = "totalTargetCapacity"
            case onDemandTargetCapacity = "onDemandTargetCapacity"
            case spotTargetCapacity = "spotTargetCapacity"
        }
    }

    public struct CreateRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTable", location: .body(locationName: "routeTable"), required: false, type: .structure)
        ]
        /// Information about the route table.
        public let routeTable: RouteTable?

        public init(routeTable: RouteTable? = nil) {
            self.routeTable = routeTable
        }

        private enum CodingKeys: String, CodingKey {
            case routeTable = "routeTable"
        }
    }

    public struct UserBucket: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "S3Key", required: false, type: .string)
        ]
        /// The name of the S3 bucket where the disk image is located.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
        }
    }

    public struct DescribeTransitGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayIds", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more filters. The possible values are:    amazon-side-asn - The private ASN for the Amazon side of a BGP session.    association-default-route-table-id - The ID of the default association route table.    default-route-table-association - Indicates whether resource attachments are automatically associated with the default association route table (enable | disable).    default-route-table-propagation - Indicates whether resource attachments automatically propagate routes to the default propagation route table (enable | disable).    owner-account-id - The ID of the AWS account that owns the transit gateway.    propagation-default-route-table-id - The ID of the default propagation route table.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-state - The state of the transit gateway (pending | available | deleting | deleted).  
        public let filters: FilterList?
        /// The IDs of the transit gateways.
        public let transitGatewayIds: TransitGatewayIdStringList?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, transitGatewayIds: TransitGatewayIdStringList? = nil, nextToken: String? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.transitGatewayIds = transitGatewayIds
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case transitGatewayIds = "TransitGatewayIds"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
        }
    }

    public struct CreateNetworkAclEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "Icmp"), required: false, type: .structure), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: true, type: .enum), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string)
        ]
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.
        public let ruleNumber: Int32
        /// The ID of the network ACL.
        public let networkAclId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
        public let cidrBlock: String?
        /// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
        public let egress: Bool
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
        public let ipv6CidrBlock: String?

        public init(icmpTypeCode: IcmpTypeCode? = nil, portRange: PortRange? = nil, ruleAction: RuleAction, ruleNumber: Int32, networkAclId: String, dryRun: Bool? = nil, protocol: String, cidrBlock: String? = nil, egress: Bool, ipv6CidrBlock: String? = nil) {
            self.icmpTypeCode = icmpTypeCode
            self.portRange = portRange
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.networkAclId = networkAclId
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case icmpTypeCode = "Icmp"
            case portRange = "portRange"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
            case networkAclId = "networkAclId"
            case dryRun = "dryRun"
            case `protocol` = "protocol"
            case cidrBlock = "cidrBlock"
            case egress = "egress"
            case ipv6CidrBlock = "ipv6CidrBlock"
        }
    }

    public struct CreateNatGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "NatGateway", location: .body(locationName: "natGateway"), required: false, type: .structure)
        ]
        /// Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
        public let clientToken: String?
        /// Information about the NAT gateway.
        public let natGateway: NatGateway?

        public init(clientToken: String? = nil, natGateway: NatGateway? = nil) {
            self.clientToken = clientToken
            self.natGateway = natGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case natGateway = "natGateway"
        }
    }

    public struct CreateSecurityGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string)
        ]
        /// The ID of the security group.
        public let groupId: String?

        public init(groupId: String? = nil) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
        }
    }

    public enum InstanceStateName: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case running = "running"
        case shuttingDown = "shutting-down"
        case terminated = "terminated"
        case stopping = "stopping"
        case stopped = "stopped"
        public var description: String { return self.rawValue }
    }

    public struct LaunchTemplateIamInstanceProfileSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]
        /// The name of the instance profile.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case arn = "arn"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more filters.    principal - The ARN of the principal.    principal-type - The principal type (All | Service | OrganizationUnit | Account | User | Role).  
        public let filters: FilterList?
        /// The ID of the service.
        public let serviceId: String
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, serviceId: String, nextToken: String? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.serviceId = serviceId
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case serviceId = "ServiceId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
        }
    }

    public struct TunnelOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpnTunnelOptionsSpecification]?

        public init(item: [VpnTunnelOptionsSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVolumeStatusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeStatuses", location: .body(locationName: "volumeStatusSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of volumes.
        public let volumeStatuses: VolumeStatusList?

        public init(nextToken: String? = nil, volumeStatuses: VolumeStatusList? = nil) {
            self.nextToken = nextToken
            self.volumeStatuses = volumeStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumeStatuses = "volumeStatusSet"
        }
    }

    public struct CreateVolumePermissionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CreateVolumePermission]?

        public init(item: [CreateVolumePermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeTagsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The tags.
        public let tags: TagDescriptionList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(tags: TagDescriptionList? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case nextToken = "nextToken"
        }
    }

    public enum RecurringChargeFrequency: String, CustomStringConvertible, Codable {
        case hourly = "Hourly"
        public var description: String { return self.rawValue }
    }

    public struct AccountAttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValue", location: .body(locationName: "attributeValue"), required: false, type: .string)
        ]
        /// The value of the attribute.
        public let attributeValue: String?

        public init(attributeValue: String? = nil) {
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue = "attributeValue"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", location: .body(locationName: "frequency"), required: false, type: .enum), 
            AWSShapeMember(label: "Amount", location: .body(locationName: "amount"), required: false, type: .double)
        ]
        /// The frequency of the recurring charge.
        public let frequency: RecurringChargeFrequency?
        /// The amount of the recurring charge.
        public let amount: Double?

        public init(frequency: RecurringChargeFrequency? = nil, amount: Double? = nil) {
            self.frequency = frequency
            self.amount = amount
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "frequency"
            case amount = "amount"
        }
    }

    public enum VolumeAttributeName: String, CustomStringConvertible, Codable {
        case autoenableio = "autoEnableIO"
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public struct GroupNameStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: false, type: .list)
        ]
        public let groupName: [String]?

        public init(groupName: [String]? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
        }
    }

    public struct ModifyInstancePlacementResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ReservedInstances: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingClass", location: .body(locationName: "offeringClass"), required: false, type: .enum), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .float), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .float), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "RecurringCharges", location: .body(locationName: "recurringCharges"), required: false, type: .structure), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .long), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]
        /// The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The offering class of the Reserved Instance.
        public let offeringClass: OfferingClassType?
        /// The time when the Reserved Instance expires.
        public let end: TimeStamp?
        /// The date and time the Reserved Instance started.
        public let start: TimeStamp?
        /// The number of reservations purchased.
        public let instanceCount: Int32?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The state of the Reserved Instance purchase.
        public let state: ReservedInstanceState?
        /// The recurring charge tag assigned to the resource.
        public let recurringCharges: RecurringChargesList?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The scope of the Reserved Instance.
        public let scope: Scope?
        /// Any tags assigned to the resource.
        public let tags: TagList?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(currencyCode: CurrencyCodeValues? = nil, availabilityZone: String? = nil, instanceType: InstanceType? = nil, offeringType: OfferingTypeValues? = nil, instanceTenancy: Tenancy? = nil, offeringClass: OfferingClassType? = nil, end: TimeStamp? = nil, start: TimeStamp? = nil, instanceCount: Int32? = nil, usagePrice: Float? = nil, fixedPrice: Float? = nil, state: ReservedInstanceState? = nil, recurringCharges: RecurringChargesList? = nil, duration: Int64? = nil, productDescription: RIProductDescription? = nil, scope: Scope? = nil, tags: TagList? = nil, reservedInstancesId: String? = nil) {
            self.currencyCode = currencyCode
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.offeringType = offeringType
            self.instanceTenancy = instanceTenancy
            self.offeringClass = offeringClass
            self.end = end
            self.start = start
            self.instanceCount = instanceCount
            self.usagePrice = usagePrice
            self.fixedPrice = fixedPrice
            self.state = state
            self.recurringCharges = recurringCharges
            self.duration = duration
            self.productDescription = productDescription
            self.scope = scope
            self.tags = tags
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case offeringType = "offeringType"
            case instanceTenancy = "instanceTenancy"
            case offeringClass = "offeringClass"
            case end = "end"
            case start = "start"
            case instanceCount = "instanceCount"
            case usagePrice = "usagePrice"
            case fixedPrice = "fixedPrice"
            case state = "state"
            case recurringCharges = "recurringCharges"
            case duration = "duration"
            case productDescription = "productDescription"
            case scope = "scope"
            case tags = "tagSet"
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct DescribeImagesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Images", location: .body(locationName: "imagesSet"), required: false, type: .structure)
        ]
        /// Information about one or more images.
        public let images: ImageList?

        public init(images: ImageList? = nil) {
            self.images = images
        }

        private enum CodingKeys: String, CodingKey {
            case images = "imagesSet"
        }
    }

    public enum ExportEnvironment: String, CustomStringConvertible, Codable {
        case citrix = "citrix"
        case vmware = "vmware"
        case microsoft = "microsoft"
        public var description: String { return self.rawValue }
    }

    public struct VpcPeeringConnectionVpcInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlockSet", location: .body(locationName: "cidrBlockSet"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockSet", location: .body(locationName: "ipv6CidrBlockSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PeeringOptions", location: .body(locationName: "peeringOptions"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// The region in which the VPC is located.
        public let region: String?
        /// Information about the IPv4 CIDR blocks for the VPC.
        public let cidrBlockSet: CidrBlockSet?
        /// The AWS account ID of the VPC owner.
        public let ownerId: String?
        /// The IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// The IPv6 CIDR block for the VPC.
        public let ipv6CidrBlockSet: Ipv6CidrBlockSet?
        /// Information about the VPC peering connection options for the accepter or requester VPC.
        public let peeringOptions: VpcPeeringConnectionOptionsDescription?

        public init(vpcId: String? = nil, region: String? = nil, cidrBlockSet: CidrBlockSet? = nil, ownerId: String? = nil, cidrBlock: String? = nil, ipv6CidrBlockSet: Ipv6CidrBlockSet? = nil, peeringOptions: VpcPeeringConnectionOptionsDescription? = nil) {
            self.vpcId = vpcId
            self.region = region
            self.cidrBlockSet = cidrBlockSet
            self.ownerId = ownerId
            self.cidrBlock = cidrBlock
            self.ipv6CidrBlockSet = ipv6CidrBlockSet
            self.peeringOptions = peeringOptions
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case region = "region"
            case cidrBlockSet = "cidrBlockSet"
            case ownerId = "ownerId"
            case cidrBlock = "cidrBlock"
            case ipv6CidrBlockSet = "ipv6CidrBlockSet"
            case peeringOptions = "peeringOptions"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Messages", location: .body(locationName: "messageSet"), required: false, type: .structure), 
            AWSShapeMember(label: "RegionName", location: .body(locationName: "regionName"), required: false, type: .string), 
            AWSShapeMember(label: "ZoneId", location: .body(locationName: "zoneId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "zoneState"), required: false, type: .enum), 
            AWSShapeMember(label: "ZoneName", location: .body(locationName: "zoneName"), required: false, type: .string)
        ]
        /// Any messages about the Availability Zone.
        public let messages: AvailabilityZoneMessageList?
        /// The name of the region.
        public let regionName: String?
        /// The ID of the Availability Zone.
        public let zoneId: String?
        /// The state of the Availability Zone.
        public let state: AvailabilityZoneState?
        /// The name of the Availability Zone.
        public let zoneName: String?

        public init(messages: AvailabilityZoneMessageList? = nil, regionName: String? = nil, zoneId: String? = nil, state: AvailabilityZoneState? = nil, zoneName: String? = nil) {
            self.messages = messages
            self.regionName = regionName
            self.zoneId = zoneId
            self.state = state
            self.zoneName = zoneName
        }

        private enum CodingKeys: String, CodingKey {
            case messages = "messageSet"
            case regionName = "regionName"
            case zoneId = "zoneId"
            case state = "zoneState"
            case zoneName = "zoneName"
        }
    }

    public struct TransitGatewayPropagation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The resource type.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?
        /// The state.
        public let state: TransitGatewayPropagationState?

        public init(resourceType: TransitGatewayAttachmentResourceType? = nil, resourceId: String? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil, state: TransitGatewayPropagationState? = nil) {
            self.resourceType = resourceType
            self.resourceId = resourceId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case resourceId = "resourceId"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
            case state = "state"
        }
    }

    public struct CopyImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "SourceImageId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean)
        ]
        /// The name of the new AMI in the destination region.
        public let name: String
        /// An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias, in the form alias/ExampleAlias     ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.    ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the region that the snapshot is being copied to. 
        public let kmsKeyId: String?
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
        public let clientToken: String?
        /// The ID of the AMI to copy.
        public let sourceImageId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the region that contains the AMI to copy.
        public let sourceRegion: String
        /// A description for the new AMI in the destination region.
        public let description: String?
        /// Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?

        public init(name: String, kmsKeyId: String? = nil, clientToken: String? = nil, sourceImageId: String, dryRun: Bool? = nil, sourceRegion: String, description: String? = nil, encrypted: Bool? = nil) {
            self.name = name
            self.kmsKeyId = kmsKeyId
            self.clientToken = clientToken
            self.sourceImageId = sourceImageId
            self.dryRun = dryRun
            self.sourceRegion = sourceRegion
            self.description = description
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case kmsKeyId = "kmsKeyId"
            case clientToken = "ClientToken"
            case sourceImageId = "SourceImageId"
            case dryRun = "dryRun"
            case sourceRegion = "SourceRegion"
            case description = "Description"
            case encrypted = "encrypted"
        }
    }

    public struct SpotFleetTagSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotFleetTagSpecification]?

        public init(item: [SpotFleetTagSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EgressOnlyInternetGateways", location: .body(locationName: "egressOnlyInternetGatewaySet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the egress-only internet gateways.
        public let egressOnlyInternetGateways: EgressOnlyInternetGatewayList?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(egressOnlyInternetGateways: EgressOnlyInternetGatewayList? = nil, nextToken: String? = nil) {
            self.egressOnlyInternetGateways = egressOnlyInternetGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGateways = "egressOnlyInternetGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct CancelBundleTaskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTask", location: .body(locationName: "bundleInstanceTask"), required: false, type: .structure)
        ]
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct RunInstancesMonitoringEnabled: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: true, type: .boolean)
        ]
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool

        public init(enabled: Bool) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct PurchasedScheduledInstanceSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ScheduledInstance]?

        public init(item: [ScheduledInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AllocateHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Quantity", location: .body(locationName: "quantity"), required: true, type: .integer), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string)
        ]
        /// Specify the instance type for which to configure your Dedicated Hosts. When you specify the instance type, that is the only instance type that you can launch onto that host.
        public let instanceType: String
        /// The tags to apply to the Dedicated Host during creation.
        public let tagSpecifications: TagSpecificationList?
        /// The number of Dedicated Hosts to allocate to your account with these parameters.
        public let quantity: Int32
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide. 
        public let clientToken: String?
        /// This is enabled by default. This property allows instances to be automatically placed onto available Dedicated Hosts, when you are launching instances without specifying a host ID. Default: Enabled
        public let autoPlacement: AutoPlacement?
        /// The Availability Zone for the Dedicated Hosts.
        public let availabilityZone: String

        public init(instanceType: String, tagSpecifications: TagSpecificationList? = nil, quantity: Int32, clientToken: String? = nil, autoPlacement: AutoPlacement? = nil, availabilityZone: String) {
            self.instanceType = instanceType
            self.tagSpecifications = tagSpecifications
            self.quantity = quantity
            self.clientToken = clientToken
            self.autoPlacement = autoPlacement
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case tagSpecifications = "TagSpecification"
            case quantity = "quantity"
            case clientToken = "clientToken"
            case autoPlacement = "autoPlacement"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct VolumeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: true, type: .long)
        ]
        /// The size of the volume, in GiB.
        public let size: Int64

        public init(size: Int64) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct DeleteLaunchTemplateVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "Versions", location: .body(locationName: "LaunchTemplateVersion"), required: true, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The version numbers of one or more launch template versions to delete.
        public let versions: VersionStringList
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(launchTemplateId: String? = nil, versions: VersionStringList, launchTemplateName: String? = nil, dryRun: Bool? = nil) {
            self.launchTemplateId = launchTemplateId
            self.versions = versions
            self.launchTemplateName = launchTemplateName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case versions = "LaunchTemplateVersion"
            case launchTemplateName = "LaunchTemplateName"
            case dryRun = "DryRun"
        }
    }

    public enum TransitGatewayRouteTableState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct DescribeVpcEndpointServicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceNames", location: .body(locationName: "ServiceName"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more filters.    service-name: The name of the service.  
        public let filters: FilterList?
        /// One or more service names.
        public let serviceNames: ValueStringList?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, serviceNames: ValueStringList? = nil, nextToken: String? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.serviceNames = serviceNames
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case serviceNames = "ServiceName"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
        }
    }

    public enum VolumeAttachmentState: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        case busy = "busy"
        public var description: String { return self.rawValue }
    }

    public enum AccountAttributeName: String, CustomStringConvertible, Codable {
        case supportedPlatforms = "supported-platforms"
        case defaultVpc = "default-vpc"
        public var description: String { return self.rawValue }
    }

    public struct DetachVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, vpnGatewayId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct DiskImageDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bytes", location: .body(locationName: "bytes"), required: true, type: .long), 
            AWSShapeMember(label: "ImportManifestUrl", location: .body(locationName: "importManifestUrl"), required: true, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum)
        ]
        /// The size of the disk image, in GiB.
        public let bytes: Int64
        /// A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String
        /// The disk image format.
        public let format: DiskImageFormat

        public init(bytes: Int64, importManifestUrl: String, format: DiskImageFormat) {
            self.bytes = bytes
            self.importManifestUrl = importManifestUrl
            self.format = format
        }

        private enum CodingKeys: String, CodingKey {
            case bytes = "bytes"
            case importManifestUrl = "importManifestUrl"
            case format = "format"
        }
    }

    public struct ClassicLoadBalancers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ClassicLoadBalancer]?

        public init(item: [ClassicLoadBalancer]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetConsoleScreenshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageData", location: .body(locationName: "imageData"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The data that comprises the image.
        public let imageData: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(imageData: String? = nil, instanceId: String? = nil) {
            self.imageData = imageData
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case imageData = "imageData"
            case instanceId = "instanceId"
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]
        /// The VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct VpnTunnelOptionsSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TunnelInsideCidr", required: false, type: .string), 
            AWSShapeMember(label: "PreSharedKey", required: false, type: .string)
        ]
        /// The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30   
        public let tunnelInsideCidr: String?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters and ._. Must be between 8 and 64 characters in length and cannot start with zero (0).
        public let preSharedKey: String?

        public init(tunnelInsideCidr: String? = nil, preSharedKey: String? = nil) {
            self.tunnelInsideCidr = tunnelInsideCidr
            self.preSharedKey = preSharedKey
        }

        private enum CodingKeys: String, CodingKey {
            case tunnelInsideCidr = "TunnelInsideCidr"
            case preSharedKey = "PreSharedKey"
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FirstSlotStartTimeRange", required: true, type: .structure), 
            AWSShapeMember(label: "MaxSlotDurationInHours", required: false, type: .integer), 
            AWSShapeMember(label: "Recurrence", required: true, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "MinSlotDurationInHours", required: false, type: .integer), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The time period for the first schedule to start.
        public let firstSlotStartTimeRange: SlotDateTimeRangeRequest
        /// The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
        public let maxSlotDurationInHours: Int32?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrenceRequest
        /// One or more filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
        public let filters: FilterList?
        /// The token for the next set of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
        public let minSlotDurationInHours: Int32?
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(firstSlotStartTimeRange: SlotDateTimeRangeRequest, maxSlotDurationInHours: Int32? = nil, recurrence: ScheduledInstanceRecurrenceRequest, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil, minSlotDurationInHours: Int32? = nil, maxResults: Int32? = nil) {
            self.firstSlotStartTimeRange = firstSlotStartTimeRange
            self.maxSlotDurationInHours = maxSlotDurationInHours
            self.recurrence = recurrence
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.minSlotDurationInHours = minSlotDurationInHours
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case firstSlotStartTimeRange = "FirstSlotStartTimeRange"
            case maxSlotDurationInHours = "MaxSlotDurationInHours"
            case recurrence = "Recurrence"
            case filters = "Filter"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case minSlotDurationInHours = "MinSlotDurationInHours"
            case maxResults = "MaxResults"
        }
    }

    public struct S3Storage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "UploadPolicy", location: .body(locationName: "uploadPolicy"), required: false, type: .blob), 
            AWSShapeMember(label: "UploadPolicySignature", location: .body(locationName: "uploadPolicySignature"), required: false, type: .string), 
            AWSShapeMember(label: "AWSAccessKeyId", required: false, type: .string)
        ]
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let bucket: String?
        /// The beginning of the file name of the AMI.
        public let prefix: String?
        /// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.
        public let uploadPolicy: Data?
        /// The signature of the JSON document.
        public let uploadPolicySignature: String?
        /// The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in Best Practices for Managing AWS Access Keys.
        public let aWSAccessKeyId: String?

        public init(bucket: String? = nil, prefix: String? = nil, uploadPolicy: Data? = nil, uploadPolicySignature: String? = nil, aWSAccessKeyId: String? = nil) {
            self.bucket = bucket
            self.prefix = prefix
            self.uploadPolicy = uploadPolicy
            self.uploadPolicySignature = uploadPolicySignature
            self.aWSAccessKeyId = aWSAccessKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case prefix = "prefix"
            case uploadPolicy = "uploadPolicy"
            case uploadPolicySignature = "uploadPolicySignature"
            case aWSAccessKeyId = "AWSAccessKeyId"
        }
    }

    public struct TagSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum)
        ]
        /// The tags to apply to the resource.
        public let tags: TagList?
        /// The type of resource to tag. Currently, the resource types that support tagging on creation are fleet, dedicated-host, instance, snapshot, and volume. To tag a resource after it has been created, see CreateTags.
        public let resourceType: ResourceType?

        public init(tags: TagList? = nil, resourceType: ResourceType? = nil) {
            self.tags = tags
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case resourceType = "resourceType"
        }
    }

    public enum DatafeedSubscriptionState: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public struct VpcClassicLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "ClassicLinkEnabled", location: .body(locationName: "classicLinkEnabled"), required: false, type: .boolean)
        ]
        /// Any tags assigned to the VPC.
        public let tags: TagList?
        /// The ID of the VPC.
        public let vpcId: String?
        /// Indicates whether the VPC is enabled for ClassicLink.
        public let classicLinkEnabled: Bool?

        public init(tags: TagList? = nil, vpcId: String? = nil, classicLinkEnabled: Bool? = nil) {
            self.tags = tags
            self.vpcId = vpcId
            self.classicLinkEnabled = classicLinkEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case vpcId = "vpcId"
            case classicLinkEnabled = "classicLinkEnabled"
        }
    }

    public struct RequestHostIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeIdentityIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .structure)
        ]
        /// Information about the ID format for the resources.
        public let statuses: IdFormatList?

        public init(statuses: IdFormatList? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct CreateVpcEndpointResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpoint", location: .body(locationName: "vpcEndpoint"), required: false, type: .structure)
        ]
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the endpoint.
        public let vpcEndpoint: VpcEndpoint?

        public init(clientToken: String? = nil, vpcEndpoint: VpcEndpoint? = nil) {
            self.clientToken = clientToken
            self.vpcEndpoint = vpcEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case vpcEndpoint = "vpcEndpoint"
        }
    }

    public struct PrivateIpAddressStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .list)
        ]
        public let privateIpAddress: [String]?

        public init(privateIpAddress: [String]? = nil) {
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct ModifyHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .structure), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// The IDs of the Dedicated Hosts that were successfully modified.
        public let successful: ResponseHostIdList?
        /// The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.
        public let unsuccessful: UnsuccessfulItemList?

        public init(successful: ResponseHostIdList? = nil, unsuccessful: UnsuccessfulItemList? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct InstanceCreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "CpuCredits", required: false, type: .string)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// The credit option for CPU usage of the instance. Valid values are standard and unlimited.
        public let cpuCredits: String?

        public init(instanceId: String? = nil, cpuCredits: String? = nil) {
            self.instanceId = instanceId
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case cpuCredits = "CpuCredits"
        }
    }

    public struct CreateFleetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "Errors", location: .body(locationName: "errorSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "fleetInstanceSet"), required: false, type: .structure)
        ]
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
        public let errors: CreateFleetErrorsSet?
        /// Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
        public let instances: CreateFleetInstancesSet?

        public init(fleetId: String? = nil, errors: CreateFleetErrorsSet? = nil, instances: CreateFleetInstancesSet? = nil) {
            self.fleetId = fleetId
            self.errors = errors
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "fleetId"
            case errors = "errorSet"
            case instances = "fleetInstanceSet"
        }
    }

    public enum ElasticGpuStatus: String, CustomStringConvertible, Codable {
        case ok = "OK"
        case impaired = "IMPAIRED"
        public var description: String { return self.rawValue }
    }

    public struct InstanceStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceStatus", location: .body(locationName: "instanceStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceState", location: .body(locationName: "instanceState"), required: false, type: .structure), 
            AWSShapeMember(label: "SystemStatus", location: .body(locationName: "systemStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "Events", location: .body(locationName: "eventsSet"), required: false, type: .structure)
        ]
        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
        public let instanceStatus: InstanceStatusSummary?
        /// The ID of the instance.
        public let instanceId: String?
        /// The intended state of the instance. DescribeInstanceStatus requires that an instance be in the running state.
        public let instanceState: InstanceState?
        /// Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
        public let systemStatus: InstanceStatusSummary?
        /// Any scheduled events associated with the instance.
        public let events: InstanceStatusEventList?

        public init(availabilityZone: String? = nil, instanceStatus: InstanceStatusSummary? = nil, instanceId: String? = nil, instanceState: InstanceState? = nil, systemStatus: InstanceStatusSummary? = nil, events: InstanceStatusEventList? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceStatus = instanceStatus
            self.instanceId = instanceId
            self.instanceState = instanceState
            self.systemStatus = systemStatus
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceStatus = "instanceStatus"
            case instanceId = "instanceId"
            case instanceState = "instanceState"
            case systemStatus = "systemStatus"
            case events = "eventsSet"
        }
    }

    public struct PrivateIpAddressConfigSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddressConfigSet", required: false, type: .list)
        ]
        public let privateIpAddressConfigSet: [ScheduledInstancesPrivateIpAddressConfig]?

        public init(privateIpAddressConfigSet: [ScheduledInstancesPrivateIpAddressConfig]? = nil) {
            self.privateIpAddressConfigSet = privateIpAddressConfigSet
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddressConfigSet = "PrivateIpAddressConfigSet"
        }
    }

    public struct CreateVpnConnectionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnection", location: .body(locationName: "vpnConnection"), required: false, type: .structure)
        ]
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct CreateNetworkInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddresses"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer)
        ]
        /// The ID of the subnet to associate with the network interface.
        public let subnetId: String
        /// The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary).
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        public let privateIpAddresses: PrivateIpAddressSpecificationList?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
        public let ipv6AddressCount: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups.
        public let groups: SecurityGroupIdStringList?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// A description for the network interface.
        public let description: String?
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. The number of IP addresses you can assign to a network interface varies by instance type. For more information, see IP Addresses Per ENI Per Instance Type in the Amazon Virtual Private Cloud User Guide.
        public let secondaryPrivateIpAddressCount: Int32?

        public init(subnetId: String, privateIpAddress: String? = nil, privateIpAddresses: PrivateIpAddressSpecificationList? = nil, ipv6AddressCount: Int32? = nil, dryRun: Bool? = nil, groups: SecurityGroupIdStringList? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, description: String? = nil, secondaryPrivateIpAddressCount: Int32? = nil) {
            self.subnetId = subnetId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.ipv6AddressCount = ipv6AddressCount
            self.dryRun = dryRun
            self.groups = groups
            self.ipv6Addresses = ipv6Addresses
            self.description = description
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case privateIpAddress = "privateIpAddress"
            case privateIpAddresses = "privateIpAddresses"
            case ipv6AddressCount = "ipv6AddressCount"
            case dryRun = "dryRun"
            case groups = "SecurityGroupId"
            case ipv6Addresses = "ipv6Addresses"
            case description = "description"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]
        /// Information about the modified attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct CancelSpotInstanceRequestsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelledSpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .structure)
        ]
        /// One or more Spot Instance requests.
        public let cancelledSpotInstanceRequests: CancelledSpotInstanceRequestList?

        public init(cancelledSpotInstanceRequests: CancelledSpotInstanceRequestList? = nil) {
            self.cancelledSpotInstanceRequests = cancelledSpotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case cancelledSpotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct DescribeVpcEndpointServicesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceNames", location: .body(locationName: "serviceNameSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceDetails", location: .body(locationName: "serviceDetailSet"), required: false, type: .structure)
        ]
        /// A list of supported services.
        public let serviceNames: ValueStringList?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the service.
        public let serviceDetails: ServiceDetailSet?

        public init(serviceNames: ValueStringList? = nil, nextToken: String? = nil, serviceDetails: ServiceDetailSet? = nil) {
            self.serviceNames = serviceNames
            self.nextToken = nextToken
            self.serviceDetails = serviceDetails
        }

        private enum CodingKeys: String, CodingKey {
            case serviceNames = "serviceNameSet"
            case nextToken = "nextToken"
            case serviceDetails = "serviceDetailSet"
        }
    }

    public struct IpRangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IpRange]?

        public init(item: [IpRange]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct TransitGatewayRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayAttachments", location: .body(locationName: "transitGatewayAttachments"), required: false, type: .structure), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string)
        ]
        /// The route type.
        public let `type`: TransitGatewayRouteType?
        /// The state of the route.
        public let state: TransitGatewayRouteState?
        /// The attachments.
        public let transitGatewayAttachments: TransitGatewayRouteAttachmentList?
        /// The CIDR block used for destination matches.
        public let destinationCidrBlock: String?

        public init(type: TransitGatewayRouteType? = nil, state: TransitGatewayRouteState? = nil, transitGatewayAttachments: TransitGatewayRouteAttachmentList? = nil, destinationCidrBlock: String? = nil) {
            self.`type` = `type`
            self.state = state
            self.transitGatewayAttachments = transitGatewayAttachments
            self.destinationCidrBlock = destinationCidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case state = "state"
            case transitGatewayAttachments = "transitGatewayAttachments"
            case destinationCidrBlock = "destinationCidrBlock"
        }
    }

    public enum VpcTenancy: String, CustomStringConvertible, Codable {
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateSubnetCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case subnetId = "subnetId"
        }
    }

    public enum VpnEcmpSupportValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public struct ServiceTypeDetailSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ServiceTypeDetail]?

        public init(item: [ServiceTypeDetail]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReservedInstancesModification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesModificationId", location: .body(locationName: "reservedInstancesModificationId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "reservedInstancesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ModificationResults", location: .body(locationName: "modificationResultSet"), required: false, type: .structure), 
            AWSShapeMember(label: "EffectiveDate", location: .body(locationName: "effectiveDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "UpdateDate", location: .body(locationName: "updateDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A unique ID for the Reserved Instance modification.
        public let reservedInstancesModificationId: String?
        /// The status of the Reserved Instances modification request.
        public let status: String?
        /// The IDs of one or more Reserved Instances.
        public let reservedInstancesIds: ReservedIntancesIds?
        /// Contains target configurations along with their corresponding new Reserved Instance IDs.
        public let modificationResults: ReservedInstancesModificationResultList?
        /// The time for the modification to become effective.
        public let effectiveDate: TimeStamp?
        /// The time when the modification request was last updated.
        public let updateDate: TimeStamp?
        /// The time when the modification request was created.
        public let createDate: TimeStamp?
        /// The reason for the status.
        public let statusMessage: String?

        public init(clientToken: String? = nil, reservedInstancesModificationId: String? = nil, status: String? = nil, reservedInstancesIds: ReservedIntancesIds? = nil, modificationResults: ReservedInstancesModificationResultList? = nil, effectiveDate: TimeStamp? = nil, updateDate: TimeStamp? = nil, createDate: TimeStamp? = nil, statusMessage: String? = nil) {
            self.clientToken = clientToken
            self.reservedInstancesModificationId = reservedInstancesModificationId
            self.status = status
            self.reservedInstancesIds = reservedInstancesIds
            self.modificationResults = modificationResults
            self.effectiveDate = effectiveDate
            self.updateDate = updateDate
            self.createDate = createDate
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case reservedInstancesModificationId = "reservedInstancesModificationId"
            case status = "status"
            case reservedInstancesIds = "reservedInstancesSet"
            case modificationResults = "modificationResultSet"
            case effectiveDate = "effectiveDate"
            case updateDate = "updateDate"
            case createDate = "createDate"
            case statusMessage = "statusMessage"
        }
    }

    public struct LaunchPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string)
        ]
        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "group"
            case userId = "userId"
        }
    }

    public struct ConversionIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The tags to apply to the transit gateway route table.
        public let tagSpecifications: TagSpecificationList?
        /// The ID of the transit gateway.
        public let transitGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(tagSpecifications: TagSpecificationList? = nil, transitGatewayId: String, dryRun: Bool? = nil) {
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeVpcClassicLinkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcSet"), required: false, type: .structure)
        ]
        /// The ClassicLink status of one or more VPCs.
        public let vpcs: VpcClassicLinkList?

        public init(vpcs: VpcClassicLinkList? = nil) {
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcSet"
        }
    }

    public struct FleetLaunchTemplateSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string)
        ]
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The version number of the launch template. 
        public let version: String?
        /// The name of the launch template.
        public let launchTemplateName: String?

        public init(launchTemplateId: String? = nil, version: String? = nil, launchTemplateName: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.version = version
            self.launchTemplateName = launchTemplateName
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case version = "Version"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct InstanceStatusDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "ImpairedSince", location: .body(locationName: "impairedSince"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum)
        ]
        /// The status.
        public let status: StatusType?
        /// The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
        public let impairedSince: TimeStamp?
        /// The type of instance status.
        public let name: StatusName?

        public init(status: StatusType? = nil, impairedSince: TimeStamp? = nil, name: StatusName? = nil) {
            self.status = status
            self.impairedSince = impairedSince
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case impairedSince = "impairedSince"
            case name = "name"
        }
    }

    public enum ResetImageAttributeName: String, CustomStringConvertible, Codable {
        case launchpermission = "launchPermission"
        public var description: String { return self.rawValue }
    }

    public struct Subnet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZoneId", location: .body(locationName: "availabilityZoneId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "MapPublicIpOnLaunch", location: .body(locationName: "mapPublicIpOnLaunch"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociationSet", location: .body(locationName: "ipv6CidrBlockAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailableIpAddressCount", location: .body(locationName: "availableIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "DefaultForAz", location: .body(locationName: "defaultForAz"), required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetArn", location: .body(locationName: "subnetArn"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "AssignIpv6AddressOnCreation", location: .body(locationName: "assignIpv6AddressOnCreation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string)
        ]
        /// The Availability Zone of the subnet.
        public let availabilityZone: String?
        /// The AZ ID of the subnet.
        public let availabilityZoneId: String?
        /// The ID of the VPC the subnet is in.
        public let vpcId: String?
        /// Indicates whether instances launched in this subnet receive a public IPv4 address.
        public let mapPublicIpOnLaunch: Bool?
        /// Information about the IPv6 CIDR blocks associated with the subnet.
        public let ipv6CidrBlockAssociationSet: SubnetIpv6CidrBlockAssociationSet?
        /// The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.
        public let availableIpAddressCount: Int32?
        /// The current state of the subnet.
        public let state: SubnetState?
        /// Indicates whether this is the default subnet for the Availability Zone.
        public let defaultForAz: Bool?
        /// The Amazon Resource Name (ARN) of the subnet.
        public let subnetArn: String?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the AWS account that owns the subnet.
        public let ownerId: String?
        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
        public let assignIpv6AddressOnCreation: Bool?
        /// Any tags assigned to the subnet.
        public let tags: TagList?
        /// The IPv4 CIDR block assigned to the subnet.
        public let cidrBlock: String?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, vpcId: String? = nil, mapPublicIpOnLaunch: Bool? = nil, ipv6CidrBlockAssociationSet: SubnetIpv6CidrBlockAssociationSet? = nil, availableIpAddressCount: Int32? = nil, state: SubnetState? = nil, defaultForAz: Bool? = nil, subnetArn: String? = nil, subnetId: String? = nil, ownerId: String? = nil, assignIpv6AddressOnCreation: Bool? = nil, tags: TagList? = nil, cidrBlock: String? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.vpcId = vpcId
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.availableIpAddressCount = availableIpAddressCount
            self.state = state
            self.defaultForAz = defaultForAz
            self.subnetArn = subnetArn
            self.subnetId = subnetId
            self.ownerId = ownerId
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.tags = tags
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case availabilityZoneId = "availabilityZoneId"
            case vpcId = "vpcId"
            case mapPublicIpOnLaunch = "mapPublicIpOnLaunch"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case availableIpAddressCount = "availableIpAddressCount"
            case state = "state"
            case defaultForAz = "defaultForAz"
            case subnetArn = "subnetArn"
            case subnetId = "subnetId"
            case ownerId = "ownerId"
            case assignIpv6AddressOnCreation = "assignIpv6AddressOnCreation"
            case tags = "tagSet"
            case cidrBlock = "cidrBlock"
        }
    }

    public struct CreateFlowLogsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "flowLogIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// The IDs of the flow logs.
        public let flowLogIds: ValueStringList?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the flow logs that could not be created successfully.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(flowLogIds: ValueStringList? = nil, clientToken: String? = nil, unsuccessful: UnsuccessfulItemSet? = nil) {
            self.flowLogIds = flowLogIds
            self.clientToken = clientToken
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogIds = "flowLogIdSet"
            case clientToken = "clientToken"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DescribeElasticGpusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ElasticGpuIds", location: .body(locationName: "ElasticGpuId"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000.
        public let maxResults: Int32?
        /// One or more filters.    availability-zone - The Availability Zone in which the Elastic Graphics accelerator resides.    elastic-gpu-health - The status of the Elastic Graphics accelerator (OK | IMPAIRED).    elastic-gpu-state - The state of the Elastic Graphics accelerator (ATTACHED).    elastic-gpu-type - The type of Elastic Graphics accelerator; for example, eg1.medium.    instance-id - The ID of the instance to which the Elastic Graphics accelerator is associated.  
        public let filters: FilterList?
        /// One or more Elastic Graphics accelerator IDs.
        public let elasticGpuIds: ElasticGpuIdSet?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, elasticGpuIds: ElasticGpuIdSet? = nil, nextToken: String? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.elasticGpuIds = elasticGpuIds
            self.nextToken = nextToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case elasticGpuIds = "ElasticGpuId"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeNetworkInterfacePermissionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfacePermissions", location: .body(locationName: "networkInterfacePermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The network interface permissions.
        public let networkInterfacePermissions: NetworkInterfacePermissionList?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(networkInterfacePermissions: NetworkInterfacePermissionList? = nil, nextToken: String? = nil) {
            self.networkInterfacePermissions = networkInterfacePermissions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfacePermissions = "networkInterfacePermissions"
            case nextToken = "nextToken"
        }
    }

    public enum TrafficType: String, CustomStringConvertible, Codable {
        case accept = "ACCEPT"
        case reject = "REJECT"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public enum FpgaImageStateCode: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case failed = "failed"
        case available = "available"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public struct ImportInstanceTaskDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Volumes", location: .body(locationName: "volumes"), required: false, type: .structure)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// The instance operating system.
        public let platform: PlatformValues?
        /// A description of the task.
        public let description: String?
        /// One or more volumes.
        public let volumes: ImportInstanceVolumeDetailSet?

        public init(instanceId: String? = nil, platform: PlatformValues? = nil, description: String? = nil, volumes: ImportInstanceVolumeDetailSet? = nil) {
            self.instanceId = instanceId
            self.platform = platform
            self.description = description
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case platform = "platform"
            case description = "description"
            case volumes = "volumes"
        }
    }

    public struct StorageLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Bucket", required: false, type: .string)
        ]
        /// The key.
        public let key: String?
        /// The name of the S3 bucket.
        public let bucket: String?

        public init(key: String? = nil, bucket: String? = nil) {
            self.key = key
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case bucket = "Bucket"
        }
    }

    public struct VpcEndpointConnectionSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcEndpointConnection]?

        public init(item: [VpcEndpointConnection]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct Ipv6AddressList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ProvisionByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]
        /// Information about the address pool.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayAttachmentId: String, dryRun: Bool? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case dryRun = "DryRun"
        }
    }

    public struct LaunchTemplateTagSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateTagSpecification]?

        public init(item: [LaunchTemplateTagSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ResetNetworkInterfaceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The source/destination checking attribute. Resets the value to true.
        public let sourceDestCheck: String?

        public init(dryRun: Bool? = nil, networkInterfaceId: String, sourceDestCheck: String? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct RequestSpotFleetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String

        public init(spotFleetRequestId: String) {
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public enum FleetActivityStatus: String, CustomStringConvertible, Codable {
        case error = "error"
        case pendingFulfillment = "pending-fulfillment"
        case pendingTermination = "pending-termination"
        case fulfilled = "fulfilled"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationPreference: String, CustomStringConvertible, Codable {
        case open = "open"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public enum ShutdownBehavior: String, CustomStringConvertible, Codable {
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public struct DeleteTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]
        /// Information about the deleted VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public enum CancelSpotInstanceRequestState: String, CustomStringConvertible, Codable {
        case active = "active"
        case open = "open"
        case closed = "closed"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedInstancesModificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesModifications", location: .body(locationName: "reservedInstancesModificationsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The Reserved Instance modification information.
        public let reservedInstancesModifications: ReservedInstancesModificationList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(reservedInstancesModifications: ReservedInstancesModificationList? = nil, nextToken: String? = nil) {
            self.reservedInstancesModifications = reservedInstancesModifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModifications = "reservedInstancesModificationsSet"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteLaunchTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?

        public init(dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil) {
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct InstanceStateChangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStateChange]?

        public init(item: [InstanceStateChange]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int32?
        /// One or more filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2010-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    client-token - The idempotency token you provided when you launched the instance.    dns-name - The public DNS name of the instance.    group-id - The ID of the security group for the instance. EC2-Classic only.    group-name - The name of the security group for the instance. EC2-Classic only.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.     host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen).    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance or a Scheduled Instance (spot | scheduled).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched.    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by AWS.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    owner-id - The AWS account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    platform - The platform. Use windows if you have Windows instances; otherwise, leave blank.    private-dns-name - The private IPv4 DNS name of the instance.    private-ip-address - The private IPv4 address of the instance.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.  
        public let filters: FilterList?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// One or more instance IDs. Default: Describes all your instances.
        public let instanceIds: InstanceIdStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, instanceIds: InstanceIdStringList? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filters = "Filter"
            case nextToken = "nextToken"
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public enum TransitGatewayRouteState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case active = "active"
        case blackhole = "blackhole"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct LaunchTemplateElasticInferenceAccelerator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .string)
        ]
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. 
        public let `type`: String

        public init(type: String) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public struct DescribeSecurityGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "GroupName"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupIds", location: .body(locationName: "GroupId"), required: false, type: .structure)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.
        public let maxResults: Int32?
        /// One or more filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID (prefix) of the AWS service to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp or a protocol number).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an AWS account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that has been referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID (prefix) of the AWS service from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp or a protocol number).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an AWS account that has been referenced in an inbound security group rule.    owner-id - The AWS account ID of the owner of the security group.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.  
        public let filters: FilterList?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// [EC2-Classic and default VPC only] One or more security group names. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the group-name filter to describe security groups by name. Default: Describes all your security groups.
        public let groupNames: GroupNameStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more security group IDs. Required for security groups in a nondefault VPC. Default: Describes all your security groups.
        public let groupIds: GroupIdStringList?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, groupNames: GroupNameStringList? = nil, dryRun: Bool? = nil, groupIds: GroupIdStringList? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.groupNames = groupNames
            self.dryRun = dryRun
            self.groupIds = groupIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case groupNames = "GroupName"
            case dryRun = "dryRun"
            case groupIds = "GroupId"
        }
    }

    public struct LaunchTemplateElasticInferenceAcceleratorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string)
        ]
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. 
        public let `type`: String?

        public init(type: String? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
        }
    }

    public struct DiskImageDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Checksum", location: .body(locationName: "checksum"), required: false, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .long), 
            AWSShapeMember(label: "ImportManifestUrl", location: .body(locationName: "importManifestUrl"), required: false, type: .string)
        ]
        /// The disk image format.
        public let format: DiskImageFormat?
        /// The checksum computed for the disk image.
        public let checksum: String?
        /// The size of the disk image, in GiB.
        public let size: Int64?
        /// A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String?

        public init(format: DiskImageFormat? = nil, checksum: String? = nil, size: Int64? = nil, importManifestUrl: String? = nil) {
            self.format = format
            self.checksum = checksum
            self.size = size
            self.importManifestUrl = importManifestUrl
        }

        private enum CodingKeys: String, CodingKey {
            case format = "format"
            case checksum = "checksum"
            case size = "size"
            case importManifestUrl = "importManifestUrl"
        }
    }

    public struct EventInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "EventDescription", location: .body(locationName: "eventDescription"), required: false, type: .string), 
            AWSShapeMember(label: "EventSubType", location: .body(locationName: "eventSubType"), required: false, type: .string)
        ]
        /// The ID of the instance. This information is available only for instanceChange events.
        public let instanceId: String?
        /// The description of the event.
        public let eventDescription: String?
        /// The event. The following are the error events:    iamFleetRoleInvalid - The Spot Fleet did not have the required permissions either to launch or terminate an instance.    launchSpecTemporarilyBlacklisted - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.    spotFleetRequestConfigurationInvalid - The configuration is not valid. For more information, see the description of the event.    spotInstanceCountLimitExceeded - You've reached the limit on the number of Spot Instances that you can launch.   The following are the fleetRequestChange events:    active - The Spot Fleet has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.    cancelled - The Spot Fleet is canceled and has no running Spot Instances. The Spot Fleet will be deleted two days after its instances were terminated.    cancelled_running - The Spot Fleet is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.    cancelled_terminating - The Spot Fleet is canceled and its Spot Instances are terminating.    expired - The Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with TerminateInstancesWithExpiration set.    modify_in_progress - A request to modify the Spot Fleet request was accepted and is in progress.    modify_successful - The Spot Fleet request was modified.    price_update - The price for a launch configuration was adjusted because it was too high. This change is permanent.    submitted - The Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances.   The following are the instanceChange events:    launched - A request was fulfilled and a new instance was launched.    terminated - An instance was terminated by the user.   The following are the Information events:    launchSpecUnusable - The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.    fleetProgressHalted - The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.  
        public let eventSubType: String?

        public init(instanceId: String? = nil, eventDescription: String? = nil, eventSubType: String? = nil) {
            self.instanceId = instanceId
            self.eventDescription = eventDescription
            self.eventSubType = eventSubType
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case eventDescription = "eventDescription"
            case eventSubType = "eventSubType"
        }
    }

    public struct DisableTransitGatewayRouteTablePropagationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Propagation", location: .body(locationName: "propagation"), required: false, type: .structure)
        ]
        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation = "propagation"
        }
    }

    public struct SubnetIpv6CidrBlockAssociationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SubnetIpv6CidrBlockAssociation]?

        public init(item: [SubnetIpv6CidrBlockAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeImagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageIds", location: .body(locationName: "ImageId"), required: false, type: .structure), 
            AWSShapeMember(label: "ExecutableUsers", location: .body(locationName: "ExecutableBy"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Owners", location: .body(locationName: "Owner"), required: false, type: .structure)
        ]
        /// One or more filters.    architecture - The image architecture (i386 | x86_64).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the EBS volume.    block-device-mapping.volume-size - The volume size of the EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the EBS volume (gp2 | io1 | st1 | sc1 | standard).    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - String value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.    owner-id - The AWS account ID of the image owner.    platform - The platform. To only list Windows-based AMIs, use windows.    product-code - The product code.    product-code.type - The type of the product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).  
        public let filters: FilterList?
        /// One or more image IDs. Default: Describes all images available to you.
        public let imageIds: ImageIdStringList?
        /// Scopes the images by users with explicit launch permissions. Specify an AWS account ID, self (the sender of the request), or all (public AMIs).
        public let executableUsers: ExecutableByStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filters the images by the owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace | microsoft). Omitting this option returns all images for which you have launch permissions, regardless of ownership.
        public let owners: OwnerStringList?

        public init(filters: FilterList? = nil, imageIds: ImageIdStringList? = nil, executableUsers: ExecutableByStringList? = nil, dryRun: Bool? = nil, owners: OwnerStringList? = nil) {
            self.filters = filters
            self.imageIds = imageIds
            self.executableUsers = executableUsers
            self.dryRun = dryRun
            self.owners = owners
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case imageIds = "ImageId"
            case executableUsers = "ExecutableBy"
            case dryRun = "dryRun"
            case owners = "Owner"
        }
    }

    public struct UserIdGroupPairList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UserIdGroupPair]?

        public init(item: [UserIdGroupPair]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the route table.
        public let routeTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(routeTableId: String, dryRun: Bool? = nil) {
            self.routeTableId = routeTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "routeTableId"
            case dryRun = "dryRun"
        }
    }

    public struct ImportImageTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "LicenseType", location: .body(locationName: "licenseType"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .string), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDetails", location: .body(locationName: "snapshotDetailSet"), required: false, type: .structure), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string)
        ]
        /// The description string for the import image task.
        public let platform: String?
        /// The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted image.
        public let kmsKeyId: String?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// Indicates whether the image is encrypted.
        public let encrypted: Bool?
        /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
        public let imageId: String?
        /// The percentage of progress of the import image task.
        public let progress: String?
        /// A description of the import task.
        public let description: String?
        /// The target hypervisor for the import task. Valid values: xen 
        public let hypervisor: String?
        /// The architecture of the virtual machine. Valid values: i386 | x86_64 
        public let architecture: String?
        /// Information about the snapshots.
        public let snapshotDetails: SnapshotDetailList?
        /// A descriptive status message for the import image task.
        public let statusMessage: String?
        /// A brief status for the import image task.
        public let status: String?
        /// The ID of the import image task.
        public let importTaskId: String?

        public init(platform: String? = nil, kmsKeyId: String? = nil, licenseType: String? = nil, encrypted: Bool? = nil, imageId: String? = nil, progress: String? = nil, description: String? = nil, hypervisor: String? = nil, architecture: String? = nil, snapshotDetails: SnapshotDetailList? = nil, statusMessage: String? = nil, status: String? = nil, importTaskId: String? = nil) {
            self.platform = platform
            self.kmsKeyId = kmsKeyId
            self.licenseType = licenseType
            self.encrypted = encrypted
            self.imageId = imageId
            self.progress = progress
            self.description = description
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.snapshotDetails = snapshotDetails
            self.statusMessage = statusMessage
            self.status = status
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case kmsKeyId = "kmsKeyId"
            case licenseType = "licenseType"
            case encrypted = "encrypted"
            case imageId = "imageId"
            case progress = "progress"
            case description = "description"
            case hypervisor = "hypervisor"
            case architecture = "architecture"
            case snapshotDetails = "snapshotDetailSet"
            case statusMessage = "statusMessage"
            case status = "status"
            case importTaskId = "importTaskId"
        }
    }

    public struct TransitGatewayVpcAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIds"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcOwnerId", location: .body(locationName: "vpcOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", location: .body(locationName: "transitGatewayAttachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string)
        ]
        /// The IDs of the subnets.
        public let subnetIds: ValueStringList?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The tags for the VPC attachment.
        public let tags: TagList?
        /// The VPC attachment options.
        public let options: TransitGatewayVpcAttachmentOptions?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The state of the VPC attachment.
        public let state: TransitGatewayAttachmentState?
        /// The ID of the AWS account that owns the VPC.
        public let vpcOwnerId: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(subnetIds: ValueStringList? = nil, vpcId: String? = nil, tags: TagList? = nil, options: TransitGatewayVpcAttachmentOptions? = nil, creationTime: TimeStamp? = nil, state: TransitGatewayAttachmentState? = nil, vpcOwnerId: String? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil) {
            self.subnetIds = subnetIds
            self.vpcId = vpcId
            self.tags = tags
            self.options = options
            self.creationTime = creationTime
            self.state = state
            self.vpcOwnerId = vpcOwnerId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "subnetIds"
            case vpcId = "vpcId"
            case tags = "tagSet"
            case options = "options"
            case creationTime = "creationTime"
            case state = "state"
            case vpcOwnerId = "vpcOwnerId"
            case transitGatewayAttachmentId = "transitGatewayAttachmentId"
            case transitGatewayId = "transitGatewayId"
        }
    }

    public struct CancelSpotFleetRequestsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulFleetRequests", location: .body(locationName: "successfulFleetRequestSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UnsuccessfulFleetRequests", location: .body(locationName: "unsuccessfulFleetRequestSet"), required: false, type: .structure)
        ]
        /// Information about the Spot Fleet requests that are successfully canceled.
        public let successfulFleetRequests: CancelSpotFleetRequestsSuccessSet?
        /// Information about the Spot Fleet requests that are not successfully canceled.
        public let unsuccessfulFleetRequests: CancelSpotFleetRequestsErrorSet?

        public init(successfulFleetRequests: CancelSpotFleetRequestsSuccessSet? = nil, unsuccessfulFleetRequests: CancelSpotFleetRequestsErrorSet? = nil) {
            self.successfulFleetRequests = successfulFleetRequests
            self.unsuccessfulFleetRequests = unsuccessfulFleetRequests
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetRequests = "successfulFleetRequestSet"
            case unsuccessfulFleetRequests = "unsuccessfulFleetRequestSet"
        }
    }

    public struct DescribeIdFormatResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .structure)
        ]
        /// Information about the ID format for the resource.
        public let statuses: IdFormatList?

        public init(statuses: IdFormatList? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct VgwTelemetry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutsideIpAddress", location: .body(locationName: "outsideIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "AcceptedRouteCount", location: .body(locationName: "acceptedRouteCount"), required: false, type: .integer), 
            AWSShapeMember(label: "LastStatusChange", location: .body(locationName: "lastStatusChange"), required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// The Internet-routable IP address of the virtual private gateway's outside interface.
        public let outsideIpAddress: String?
        /// The status of the VPN tunnel.
        public let status: TelemetryStatus?
        /// The number of accepted routes.
        public let acceptedRouteCount: Int32?
        /// The date and time of the last change in status.
        public let lastStatusChange: TimeStamp?
        /// If an error occurs, a description of the error.
        public let statusMessage: String?

        public init(outsideIpAddress: String? = nil, status: TelemetryStatus? = nil, acceptedRouteCount: Int32? = nil, lastStatusChange: TimeStamp? = nil, statusMessage: String? = nil) {
            self.outsideIpAddress = outsideIpAddress
            self.status = status
            self.acceptedRouteCount = acceptedRouteCount
            self.lastStatusChange = lastStatusChange
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case outsideIpAddress = "outsideIpAddress"
            case status = "status"
            case acceptedRouteCount = "acceptedRouteCount"
            case lastStatusChange = "lastStatusChange"
            case statusMessage = "statusMessage"
        }
    }

    public struct VpcEndpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceIds", location: .body(locationName: "networkInterfaceIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcEndpointId", location: .body(locationName: "vpcEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", location: .body(locationName: "creationTimestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VpcEndpointType", location: .body(locationName: "vpcEndpointType"), required: false, type: .enum), 
            AWSShapeMember(label: "PolicyDocument", location: .body(locationName: "policyDocument"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsEnabled", location: .body(locationName: "privateDnsEnabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "subnetIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "DnsEntries", location: .body(locationName: "dnsEntrySet"), required: false, type: .structure), 
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "routeTableIdSet"), required: false, type: .structure)
        ]
        /// The name of the service to which the endpoint is associated.
        public let serviceName: String?
        /// The ID of the VPC to which the endpoint is associated.
        public let vpcId: String?
        /// (Interface endpoint) One or more network interfaces for the endpoint.
        public let networkInterfaceIds: ValueStringList?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The date and time the VPC endpoint was created.
        public let creationTimestamp: TimeStamp?
        /// The type of endpoint.
        public let vpcEndpointType: VpcEndpointType?
        /// The policy document associated with the endpoint, if applicable.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.
        public let privateDnsEnabled: Bool?
        /// The state of the VPC endpoint.
        public let state: State?
        /// (Interface endpoint) Information about the security groups associated with the network interface.
        public let groups: GroupIdentifierSet?
        /// (Interface endpoint) One or more subnets in which the endpoint is located.
        public let subnetIds: ValueStringList?
        /// (Interface endpoint) The DNS entries for the endpoint.
        public let dnsEntries: DnsEntrySet?
        /// (Gateway endpoint) One or more route tables associated with the endpoint.
        public let routeTableIds: ValueStringList?

        public init(serviceName: String? = nil, vpcId: String? = nil, networkInterfaceIds: ValueStringList? = nil, vpcEndpointId: String? = nil, creationTimestamp: TimeStamp? = nil, vpcEndpointType: VpcEndpointType? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, state: State? = nil, groups: GroupIdentifierSet? = nil, subnetIds: ValueStringList? = nil, dnsEntries: DnsEntrySet? = nil, routeTableIds: ValueStringList? = nil) {
            self.serviceName = serviceName
            self.vpcId = vpcId
            self.networkInterfaceIds = networkInterfaceIds
            self.vpcEndpointId = vpcEndpointId
            self.creationTimestamp = creationTimestamp
            self.vpcEndpointType = vpcEndpointType
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.state = state
            self.groups = groups
            self.subnetIds = subnetIds
            self.dnsEntries = dnsEntries
            self.routeTableIds = routeTableIds
        }

        private enum CodingKeys: String, CodingKey {
            case serviceName = "serviceName"
            case vpcId = "vpcId"
            case networkInterfaceIds = "networkInterfaceIdSet"
            case vpcEndpointId = "vpcEndpointId"
            case creationTimestamp = "creationTimestamp"
            case vpcEndpointType = "vpcEndpointType"
            case policyDocument = "policyDocument"
            case privateDnsEnabled = "privateDnsEnabled"
            case state = "state"
            case groups = "groupSet"
            case subnetIds = "subnetIdSet"
            case dnsEntries = "dnsEntrySet"
            case routeTableIds = "routeTableIdSet"
        }
    }

    public struct PortRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "To", location: .body(locationName: "to"), required: false, type: .integer), 
            AWSShapeMember(label: "From", location: .body(locationName: "from"), required: false, type: .integer)
        ]
        /// The last port in the range.
        public let to: Int32?
        /// The first port in the range.
        public let from: Int32?

        public init(to: Int32? = nil, from: Int32? = nil) {
            self.to = to
            self.from = from
        }

        private enum CodingKeys: String, CodingKey {
            case to = "to"
            case from = "from"
        }
    }

    public struct FleetLaunchTemplateSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "Version", location: .body(locationName: "version"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string)
        ]
        /// The ID of the launch template. You must specify either a template ID or a template name.
        public let launchTemplateId: String?
        /// The version number of the launch template. You must specify a version number.
        public let version: String?
        /// The name of the launch template. You must specify either a template name or a template ID.
        public let launchTemplateName: String?

        public init(launchTemplateId: String? = nil, version: String? = nil, launchTemplateName: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.version = version
            self.launchTemplateName = launchTemplateName
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case version = "version"
            case launchTemplateName = "launchTemplateName"
        }
    }

    public struct HostInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string)
        ]
        /// the IDs of instances that are running on the Dedicated Host.
        public let instanceId: String?
        /// The instance type size (for example, m3.medium) of the running instance.
        public let instanceType: String?

        public init(instanceId: String? = nil, instanceType: String? = nil) {
            self.instanceId = instanceId
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case instanceType = "instanceType"
        }
    }

    public struct Image: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RootDeviceType", location: .body(locationName: "rootDeviceType"), required: false, type: .enum), 
            AWSShapeMember(label: "ImageType", location: .body(locationName: "imageType"), required: false, type: .enum), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageLocation", location: .body(locationName: "imageLocation"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "StateReason", location: .body(locationName: "stateReason"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "imageState"), required: false, type: .enum), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .enum), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "imageOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "CreationDate", location: .body(locationName: "creationDate"), required: false, type: .string), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "ImageOwnerAlias", location: .body(locationName: "imageOwnerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "Public", location: .body(locationName: "isPublic"), required: false, type: .boolean)
        ]
        /// The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// The type of image.
        public let imageType: ImageTypeValues?
        /// The value is Windows for Windows AMIs; otherwise blank.
        public let platform: PlatformValues?
        /// Any tags assigned to the image.
        public let tags: TagList?
        /// Any product codes associated with the AMI.
        public let productCodes: ProductCodeList?
        /// The type of virtualization of the AMI.
        public let virtualizationType: VirtualizationType?
        /// The kernel associated with the image, if any. Only applicable for machine images.
        public let kernelId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// The ID of the AMI.
        public let imageId: String?
        /// Any block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// The location of the AMI.
        public let imageLocation: String?
        /// The description of the AMI that was provided during image creation.
        public let description: String?
        /// The name of the AMI that was provided during image creation.
        public let name: String?
        /// The reason for the state change.
        public let stateReason: StateReason?
        /// The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.
        public let state: ImageState?
        /// The hypervisor type of the image.
        public let hypervisor: HypervisorType?
        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// The RAM disk associated with the image, if any. Only applicable for machine images.
        public let ramdiskId: String?
        /// The AWS account ID of the image owner.
        public let ownerId: String?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// The date and time the image was created.
        public let creationDate: String?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
        public let imageOwnerAlias: String?
        /// Indicates whether the image has public launch permissions. The value is true if this image has public launch permissions or false if it has only implicit and explicit launch permissions.
        public let `public`: Bool?

        public init(rootDeviceType: DeviceType? = nil, imageType: ImageTypeValues? = nil, platform: PlatformValues? = nil, tags: TagList? = nil, productCodes: ProductCodeList? = nil, virtualizationType: VirtualizationType? = nil, kernelId: String? = nil, rootDeviceName: String? = nil, imageId: String? = nil, blockDeviceMappings: BlockDeviceMappingList? = nil, imageLocation: String? = nil, description: String? = nil, name: String? = nil, stateReason: StateReason? = nil, state: ImageState? = nil, hypervisor: HypervisorType? = nil, architecture: ArchitectureValues? = nil, ramdiskId: String? = nil, ownerId: String? = nil, enaSupport: Bool? = nil, creationDate: String? = nil, sriovNetSupport: String? = nil, imageOwnerAlias: String? = nil, public: Bool? = nil) {
            self.rootDeviceType = rootDeviceType
            self.imageType = imageType
            self.platform = platform
            self.tags = tags
            self.productCodes = productCodes
            self.virtualizationType = virtualizationType
            self.kernelId = kernelId
            self.rootDeviceName = rootDeviceName
            self.imageId = imageId
            self.blockDeviceMappings = blockDeviceMappings
            self.imageLocation = imageLocation
            self.description = description
            self.name = name
            self.stateReason = stateReason
            self.state = state
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.ramdiskId = ramdiskId
            self.ownerId = ownerId
            self.enaSupport = enaSupport
            self.creationDate = creationDate
            self.sriovNetSupport = sriovNetSupport
            self.imageOwnerAlias = imageOwnerAlias
            self.`public` = `public`
        }

        private enum CodingKeys: String, CodingKey {
            case rootDeviceType = "rootDeviceType"
            case imageType = "imageType"
            case platform = "platform"
            case tags = "tagSet"
            case productCodes = "productCodes"
            case virtualizationType = "virtualizationType"
            case kernelId = "kernelId"
            case rootDeviceName = "rootDeviceName"
            case imageId = "imageId"
            case blockDeviceMappings = "blockDeviceMapping"
            case imageLocation = "imageLocation"
            case description = "description"
            case name = "name"
            case stateReason = "stateReason"
            case state = "imageState"
            case hypervisor = "hypervisor"
            case architecture = "architecture"
            case ramdiskId = "ramdiskId"
            case ownerId = "imageOwnerId"
            case enaSupport = "enaSupport"
            case creationDate = "creationDate"
            case sriovNetSupport = "sriovNetSupport"
            case imageOwnerAlias = "imageOwnerAlias"
            case `public` = "isPublic"
        }
    }

    public struct UserIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", required: false, type: .list)
        ]
        public let userId: [String]?

        public init(userId: [String]? = nil) {
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
        }
    }

    public struct DescribeHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Filter", location: .body(locationName: "filter"), required: false, type: .structure), 
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: false, type: .structure)
        ]
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
        public let maxResults: Int32?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more filters.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    availability-zone - The Availability Zone of the host.    client-token - The idempotency token that you provided when you allocated the host.    host-reservation-id - The ID of the reservation assigned to this host.    instance-type - The instance type size that the Dedicated Host is configured to support.    state - The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filter: FilterList?
        /// The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
        public let hostIds: RequestHostIdList?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: FilterList? = nil, hostIds: RequestHostIdList? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case filter = "filter"
            case hostIds = "hostId"
        }
    }

    public enum TransitGatewayAttachmentResourceType: String, CustomStringConvertible, Codable {
        case vpc = "vpc"
        case vpn = "vpn"
        public var description: String { return self.rawValue }
    }

    public struct DisableVpcClassicLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public enum ImageState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case invalid = "invalid"
        case deregistered = "deregistered"
        case transient = "transient"
        case failed = "failed"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public struct LicenseConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", location: .body(locationName: "licenseConfigurationArn"), required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "licenseConfigurationArn"
        }
    }

    public struct SpotInstanceStateFault: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The reason code for the Spot Instance state change.
        public let code: String?
        /// The message for the Spot Instance state change.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct ElasticGpuSpecifications: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ElasticGpuSpecification]?

        public init(item: [ElasticGpuSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReservedInstancesConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum)
        ]
        /// The instance type for the modified Reserved Instances.
        public let instanceType: InstanceType?
        /// The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.
        public let platform: String?
        /// The number of modified Reserved Instances.
        public let instanceCount: Int32?
        /// The Availability Zone for the modified Reserved Instances.
        public let availabilityZone: String?
        /// Whether the Reserved Instance is applied to instances in a region or instances in a specific Availability Zone.
        public let scope: Scope?

        public init(instanceType: InstanceType? = nil, platform: String? = nil, instanceCount: Int32? = nil, availabilityZone: String? = nil, scope: Scope? = nil) {
            self.instanceType = instanceType
            self.platform = platform
            self.instanceCount = instanceCount
            self.availabilityZone = availabilityZone
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case platform = "platform"
            case instanceCount = "instanceCount"
            case availabilityZone = "availabilityZone"
            case scope = "scope"
        }
    }

    public struct IdFormat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UseLongIds", location: .body(locationName: "useLongIds"), required: false, type: .boolean), 
            AWSShapeMember(label: "Deadline", location: .body(locationName: "deadline"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: false, type: .string)
        ]
        /// Indicates whether longer IDs (17-character IDs) are enabled for the resource.
        public let useLongIds: Bool?
        /// The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
        public let deadline: TimeStamp?
        /// The type of resource.
        public let resource: String?

        public init(useLongIds: Bool? = nil, deadline: TimeStamp? = nil, resource: String? = nil) {
            self.useLongIds = useLongIds
            self.deadline = deadline
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case useLongIds = "useLongIds"
            case deadline = "deadline"
            case resource = "resource"
        }
    }

    public struct PurchaseHostReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIdSet", required: true, type: .structure), 
            AWSShapeMember(label: "LimitPrice", required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", required: true, type: .string), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string)
        ]
        /// The IDs of the Dedicated Hosts with which the reservation will be associated.
        public let hostIdSet: RequestHostIdSet
        /// The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00.
        public let limitPrice: String?
        /// The ID of the offering.
        public let offeringId: String
        /// The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
        public let clientToken: String?

        public init(hostIdSet: RequestHostIdSet, limitPrice: String? = nil, offeringId: String, currencyCode: CurrencyCodeValues? = nil, clientToken: String? = nil) {
            self.hostIdSet = hostIdSet
            self.limitPrice = limitPrice
            self.offeringId = offeringId
            self.currencyCode = currencyCode
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case hostIdSet = "HostIdSet"
            case limitPrice = "LimitPrice"
            case offeringId = "OfferingId"
            case currencyCode = "CurrencyCode"
            case clientToken = "ClientToken"
        }
    }

    public struct ModifyVpcEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoveSecurityGroupIds", location: .body(locationName: "RemoveSecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "AddSubnetIds", location: .body(locationName: "AddSubnetId"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "AddRouteTableIds", location: .body(locationName: "AddRouteTableId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveSubnetIds", location: .body(locationName: "RemoveSubnetId"), required: false, type: .structure), 
            AWSShapeMember(label: "AddSecurityGroupIds", location: .body(locationName: "AddSecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "ResetPolicy", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveRouteTableIds", location: .body(locationName: "RemoveRouteTableId"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateDnsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PolicyDocument", required: false, type: .string)
        ]
        /// (Interface endpoint) One or more security group IDs to disassociate from the network interface.
        public let removeSecurityGroupIds: ValueStringList?
        /// (Interface endpoint) One or more subnet IDs in which to serve the endpoint.
        public let addSubnetIds: ValueStringList?
        /// The ID of the endpoint.
        public let vpcEndpointId: String
        /// (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
        public let addRouteTableIds: ValueStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
        public let removeSubnetIds: ValueStringList?
        /// (Interface endpoint) One or more security group IDs to associate with the network interface.
        public let addSecurityGroupIds: ValueStringList?
        /// (Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service.
        public let resetPolicy: Bool?
        /// (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
        public let removeRouteTableIds: ValueStringList?
        /// (Interface endpoint) Indicate whether a private hosted zone is associated with the VPC.
        public let privateDnsEnabled: Bool?
        /// (Gateway endpoint) A policy document to attach to the endpoint. The policy must be in valid JSON format.
        public let policyDocument: String?

        public init(removeSecurityGroupIds: ValueStringList? = nil, addSubnetIds: ValueStringList? = nil, vpcEndpointId: String, addRouteTableIds: ValueStringList? = nil, dryRun: Bool? = nil, removeSubnetIds: ValueStringList? = nil, addSecurityGroupIds: ValueStringList? = nil, resetPolicy: Bool? = nil, removeRouteTableIds: ValueStringList? = nil, privateDnsEnabled: Bool? = nil, policyDocument: String? = nil) {
            self.removeSecurityGroupIds = removeSecurityGroupIds
            self.addSubnetIds = addSubnetIds
            self.vpcEndpointId = vpcEndpointId
            self.addRouteTableIds = addRouteTableIds
            self.dryRun = dryRun
            self.removeSubnetIds = removeSubnetIds
            self.addSecurityGroupIds = addSecurityGroupIds
            self.resetPolicy = resetPolicy
            self.removeRouteTableIds = removeRouteTableIds
            self.privateDnsEnabled = privateDnsEnabled
            self.policyDocument = policyDocument
        }

        private enum CodingKeys: String, CodingKey {
            case removeSecurityGroupIds = "RemoveSecurityGroupId"
            case addSubnetIds = "AddSubnetId"
            case vpcEndpointId = "VpcEndpointId"
            case addRouteTableIds = "AddRouteTableId"
            case dryRun = "DryRun"
            case removeSubnetIds = "RemoveSubnetId"
            case addSecurityGroupIds = "AddSecurityGroupId"
            case resetPolicy = "ResetPolicy"
            case removeRouteTableIds = "RemoveRouteTableId"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case policyDocument = "PolicyDocument"
        }
    }

    public struct ModifyVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The target size of the volume, in GiB. The target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see Amazon EBS Volume Types. Default: If no size is specified, the existing size is retained.
        public let size: Int32?
        /// The ID of the volume.
        public let volumeId: String
        /// The target EBS volume type of the volume. Default: If no type is specified, the existing type is retained.
        public let volumeType: VolumeType?
        /// The target IOPS rate of the volume. This is only valid for Provisioned IOPS SSD (io1) volumes. For more information, see Provisioned IOPS SSD (io1) Volumes. Default: If no IOPS value is specified, the existing value is retained.
        public let iops: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(size: Int32? = nil, volumeId: String, volumeType: VolumeType? = nil, iops: Int32? = nil, dryRun: Bool? = nil) {
            self.size = size
            self.volumeId = volumeId
            self.volumeType = volumeType
            self.iops = iops
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case size = "Size"
            case volumeId = "VolumeId"
            case volumeType = "VolumeType"
            case iops = "Iops"
            case dryRun = "DryRun"
        }
    }

    public struct AvailabilityZoneMessageList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AvailabilityZoneMessage]?

        public init(item: [AvailabilityZoneMessage]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteVpnConnectionRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string), 
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string)
        ]
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(destinationCidrBlock: String, vpnConnectionId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct AssociateAddressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// [EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct ResponseLaunchTemplateData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreditSpecification", location: .body(locationName: "creditSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMappingSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ElasticInferenceAccelerators", location: .body(locationName: "elasticInferenceAcceleratorSet"), required: false, type: .structure), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "tagSpecificationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "LicenseSpecifications", location: .body(locationName: "licenseSet"), required: false, type: .structure), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "RamDiskId", location: .body(locationName: "ramDiskId"), required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticGpuSpecifications", location: .body(locationName: "elasticGpuSpecificationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "CpuOptions", location: .body(locationName: "cpuOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "HibernationOptions", location: .body(locationName: "hibernationOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "securityGroupIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceMarketOptions", location: .body(locationName: "instanceMarketOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservationSpecification", location: .body(locationName: "capacityReservationSpecification"), required: false, type: .structure)
        ]
        /// The credit option for CPU usage of the instance.
        public let creditSpecification: CreditSpecification?
        /// The ID of the AMI that was used to launch the instance.
        public let imageId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The security group names.
        public let securityGroups: ValueStringList?
        /// The block device mappings.
        public let blockDeviceMappings: LaunchTemplateBlockDeviceMappingList?
        ///  The elastic inference accelerator for the instance. 
        public let elasticInferenceAccelerators: LaunchTemplateElasticInferenceAcceleratorResponseList?
        /// The tags.
        public let tagSpecifications: LaunchTemplateTagSpecificationList?
        /// The license configurations.
        public let licenseSpecifications: LaunchTemplateLicenseList?
        /// The IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification?
        /// The ID of the RAM disk, if applicable.
        public let ramDiskId: String?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. 
        public let ebsOptimized: Bool?
        /// The elastic GPU specification.
        public let elasticGpuSpecifications: ElasticGpuSpecificationResponseList?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptions?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoring?
        /// The ID of the kernel, if applicable.
        public let kernelId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// Indicates whether an instance is configured for hibernation. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptions?
        /// The instance type.
        public let instanceType: InstanceType?
        /// If set to true, indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.
        public let disableApiTermination: Bool?
        /// The network interfaces.
        public let networkInterfaces: LaunchTemplateInstanceNetworkInterfaceSpecificationList?
        /// The security group IDs.
        public let securityGroupIds: ValueStringList?
        /// The placement of the instance.
        public let placement: LaunchTemplatePlacement?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptions?
        /// The user data for the instance. 
        public let userData: String?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse?

        public init(creditSpecification: CreditSpecification? = nil, imageId: String? = nil, keyName: String? = nil, securityGroups: ValueStringList? = nil, blockDeviceMappings: LaunchTemplateBlockDeviceMappingList? = nil, elasticInferenceAccelerators: LaunchTemplateElasticInferenceAcceleratorResponseList? = nil, tagSpecifications: LaunchTemplateTagSpecificationList? = nil, licenseSpecifications: LaunchTemplateLicenseList? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification? = nil, ramDiskId: String? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: ElasticGpuSpecificationResponseList? = nil, cpuOptions: LaunchTemplateCpuOptions? = nil, monitoring: LaunchTemplatesMonitoring? = nil, kernelId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, hibernationOptions: LaunchTemplateHibernationOptions? = nil, instanceType: InstanceType? = nil, disableApiTermination: Bool? = nil, networkInterfaces: LaunchTemplateInstanceNetworkInterfaceSpecificationList? = nil, securityGroupIds: ValueStringList? = nil, placement: LaunchTemplatePlacement? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptions? = nil, userData: String? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse? = nil) {
            self.creditSpecification = creditSpecification
            self.imageId = imageId
            self.keyName = keyName
            self.securityGroups = securityGroups
            self.blockDeviceMappings = blockDeviceMappings
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.tagSpecifications = tagSpecifications
            self.licenseSpecifications = licenseSpecifications
            self.iamInstanceProfile = iamInstanceProfile
            self.ramDiskId = ramDiskId
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.cpuOptions = cpuOptions
            self.monitoring = monitoring
            self.kernelId = kernelId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.hibernationOptions = hibernationOptions
            self.instanceType = instanceType
            self.disableApiTermination = disableApiTermination
            self.networkInterfaces = networkInterfaces
            self.securityGroupIds = securityGroupIds
            self.placement = placement
            self.instanceMarketOptions = instanceMarketOptions
            self.userData = userData
            self.capacityReservationSpecification = capacityReservationSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case creditSpecification = "creditSpecification"
            case imageId = "imageId"
            case keyName = "keyName"
            case securityGroups = "securityGroupSet"
            case blockDeviceMappings = "blockDeviceMappingSet"
            case elasticInferenceAccelerators = "elasticInferenceAcceleratorSet"
            case tagSpecifications = "tagSpecificationSet"
            case licenseSpecifications = "licenseSet"
            case iamInstanceProfile = "iamInstanceProfile"
            case ramDiskId = "ramDiskId"
            case ebsOptimized = "ebsOptimized"
            case elasticGpuSpecifications = "elasticGpuSpecificationSet"
            case cpuOptions = "cpuOptions"
            case monitoring = "monitoring"
            case kernelId = "kernelId"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case hibernationOptions = "hibernationOptions"
            case instanceType = "instanceType"
            case disableApiTermination = "disableApiTermination"
            case networkInterfaces = "networkInterfaceSet"
            case securityGroupIds = "securityGroupIdSet"
            case placement = "placement"
            case instanceMarketOptions = "instanceMarketOptions"
            case userData = "userData"
            case capacityReservationSpecification = "capacityReservationSpecification"
        }
    }

    public struct Ipv6RangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Ipv6Range]?

        public init(item: [Ipv6Range]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteFleetErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: false, type: .structure)
        ]
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The error.
        public let error: DeleteFleetError?

        public init(fleetId: String? = nil, error: DeleteFleetError? = nil) {
            self.fleetId = fleetId
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "fleetId"
            case error = "error"
        }
    }

    public struct DeleteNetworkInterfacePermissionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds, otherwise returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public enum InstanceInterruptionBehavior: String, CustomStringConvertible, Codable {
        case hibernate = "hibernate"
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public struct CreateLaunchTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateName", required: true, type: .string), 
            AWSShapeMember(label: "LaunchTemplateData", required: true, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VersionDescription", required: false, type: .string)
        ]
        /// A name for the launch template.
        public let launchTemplateName: String
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A description for the first version of the launch template.
        public let versionDescription: String?

        public init(launchTemplateName: String, launchTemplateData: RequestLaunchTemplateData, clientToken: String? = nil, dryRun: Bool? = nil, versionDescription: String? = nil) {
            self.launchTemplateName = launchTemplateName
            self.launchTemplateData = launchTemplateData
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.versionDescription = versionDescription
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateName = "LaunchTemplateName"
            case launchTemplateData = "LaunchTemplateData"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case versionDescription = "VersionDescription"
        }
    }

    public struct CreateTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTable", location: .body(locationName: "transitGatewayRouteTable"), required: false, type: .structure)
        ]
        /// Information about the transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable = "transitGatewayRouteTable"
        }
    }

    public enum LogDestinationType: String, CustomStringConvertible, Codable {
        case cloudWatchLogs = "cloud-watch-logs"
        case s3 = "s3"
        public var description: String { return self.rawValue }
    }

    public struct TargetReservationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetConfiguration", location: .body(locationName: "targetConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservationValue", location: .body(locationName: "reservationValue"), required: false, type: .structure)
        ]
        /// The configuration of the Convertible Reserved Instances that make up the exchange.
        public let targetConfiguration: TargetConfiguration?
        /// The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
        public let reservationValue: ReservationValue?

        public init(targetConfiguration: TargetConfiguration? = nil, reservationValue: ReservationValue? = nil) {
            self.targetConfiguration = targetConfiguration
            self.reservationValue = reservationValue
        }

        private enum CodingKeys: String, CodingKey {
            case targetConfiguration = "targetConfiguration"
            case reservationValue = "reservationValue"
        }
    }

    public struct DescribeSpotFleetRequestsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotFleetRequestIds", location: .body(locationName: "spotFleetRequestId"), required: false, type: .structure)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Spot Fleet requests.
        public let spotFleetRequestIds: ValueStringList?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil, spotFleetRequestIds: ValueStringList? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.spotFleetRequestIds = spotFleetRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case dryRun = "dryRun"
            case spotFleetRequestIds = "spotFleetRequestId"
        }
    }

    public struct LicenseConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseConfigurationArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct InstanceBlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string)
        ]
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDevice?
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?

        public init(ebs: EbsInstanceBlockDevice? = nil, deviceName: String? = nil) {
            self.ebs = ebs
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case ebs = "ebs"
            case deviceName = "deviceName"
        }
    }

    public struct NetworkInterfacePermissionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkInterfacePermission]?

        public init(item: [NetworkInterfacePermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateInternetGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGateway", location: .body(locationName: "internetGateway"), required: false, type: .structure)
        ]
        /// Information about the internet gateway.
        public let internetGateway: InternetGateway?

        public init(internetGateway: InternetGateway? = nil) {
            self.internetGateway = internetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateway = "internetGateway"
        }
    }

    public struct ModifyReservedInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesModificationId", location: .body(locationName: "reservedInstancesModificationId"), required: false, type: .string)
        ]
        /// The ID for the modification.
        public let reservedInstancesModificationId: String?

        public init(reservedInstancesModificationId: String? = nil) {
            self.reservedInstancesModificationId = reservedInstancesModificationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationId = "reservedInstancesModificationId"
        }
    }

    public struct Monitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let state: MonitoringState?

        public init(state: MonitoringState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct LaunchTemplateHibernationOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Configured", required: false, type: .boolean)
        ]
        /// If you set this parameter to true, the instance is enabled for hibernation. Default: false 
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct RejectTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayAttachmentId: String, dryRun: Bool? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case dryRun = "DryRun"
        }
    }

    public struct AllocationIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: false, type: .list)
        ]
        public let allocationId: [String]?

        public init(allocationId: [String]? = nil) {
            self.allocationId = allocationId
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more filters. The possible values are:    association-id - The ID of the association.    resource-id - The ID of the resource.    resource-type - The resource type (vpc | vpn).    transit-gateway-attachment-id - The ID of the attachment.  
        public let filters: FilterList?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil, transitGatewayRouteTableId: String) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct RouteTable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routeSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Associations", location: .body(locationName: "associationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PropagatingVgws", location: .body(locationName: "propagatingVgwSet"), required: false, type: .structure)
        ]
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// Any tags assigned to the route table.
        public let tags: TagList?
        /// The routes in the route table.
        public let routes: RouteList?
        /// The associations between the route table and one or more subnets.
        public let associations: RouteTableAssociationList?
        /// The ID of the AWS account that owns the route table.
        public let ownerId: String?
        /// Any virtual private gateway (VGW) propagating routes.
        public let propagatingVgws: PropagatingVgwList?

        public init(routeTableId: String? = nil, vpcId: String? = nil, tags: TagList? = nil, routes: RouteList? = nil, associations: RouteTableAssociationList? = nil, ownerId: String? = nil, propagatingVgws: PropagatingVgwList? = nil) {
            self.routeTableId = routeTableId
            self.vpcId = vpcId
            self.tags = tags
            self.routes = routes
            self.associations = associations
            self.ownerId = ownerId
            self.propagatingVgws = propagatingVgws
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "routeTableId"
            case vpcId = "vpcId"
            case tags = "tagSet"
            case routes = "routeSet"
            case associations = "associationSet"
            case ownerId = "ownerId"
            case propagatingVgws = "propagatingVgwSet"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceConfigurations", location: .body(locationName: "serviceConfigurationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more services.
        public let serviceConfigurations: ServiceConfigurationSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(serviceConfigurations: ServiceConfigurationSet? = nil, nextToken: String? = nil) {
            self.serviceConfigurations = serviceConfigurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case serviceConfigurations = "serviceConfigurationSet"
            case nextToken = "nextToken"
        }
    }

    public struct Host: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instances"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "HostProperties", location: .body(locationName: "hostProperties"), required: false, type: .structure), 
            AWSShapeMember(label: "AllocationTime", location: .body(locationName: "allocationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "AvailableCapacity", location: .body(locationName: "availableCapacity"), required: false, type: .structure), 
            AWSShapeMember(label: "ReleaseTime", location: .body(locationName: "releaseTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: false, type: .enum)
        ]
        /// Unique, case-sensitive identifier that you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide. 
        public let clientToken: String?
        /// The IDs and instance type that are currently running on the Dedicated Host.
        public let instances: HostInstanceList?
        /// Any tags assigned to the Dedicated Host.
        public let tags: TagList?
        /// The ID of the Dedicated Host.
        public let hostId: String?
        /// The reservation ID of the Dedicated Host. This returns a null response if the Dedicated Host doesn't have an associated reservation.
        public let hostReservationId: String?
        /// The hardware specifications of the Dedicated Host.
        public let hostProperties: HostProperties?
        /// The time that the Dedicated Host was allocated.
        public let allocationTime: TimeStamp?
        /// The Dedicated Host's state.
        public let state: AllocationState?
        /// The Availability Zone of the Dedicated Host.
        public let availabilityZone: String?
        /// The number of new instances that can be launched onto the Dedicated Host.
        public let availableCapacity: AvailableCapacity?
        /// The time that the Dedicated Host was released.
        public let releaseTime: TimeStamp?
        /// Whether auto-placement is on or off.
        public let autoPlacement: AutoPlacement?

        public init(clientToken: String? = nil, instances: HostInstanceList? = nil, tags: TagList? = nil, hostId: String? = nil, hostReservationId: String? = nil, hostProperties: HostProperties? = nil, allocationTime: TimeStamp? = nil, state: AllocationState? = nil, availabilityZone: String? = nil, availableCapacity: AvailableCapacity? = nil, releaseTime: TimeStamp? = nil, autoPlacement: AutoPlacement? = nil) {
            self.clientToken = clientToken
            self.instances = instances
            self.tags = tags
            self.hostId = hostId
            self.hostReservationId = hostReservationId
            self.hostProperties = hostProperties
            self.allocationTime = allocationTime
            self.state = state
            self.availabilityZone = availabilityZone
            self.availableCapacity = availableCapacity
            self.releaseTime = releaseTime
            self.autoPlacement = autoPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case instances = "instances"
            case tags = "tagSet"
            case hostId = "hostId"
            case hostReservationId = "hostReservationId"
            case hostProperties = "hostProperties"
            case allocationTime = "allocationTime"
            case state = "state"
            case availabilityZone = "availabilityZone"
            case availableCapacity = "availableCapacity"
            case releaseTime = "releaseTime"
            case autoPlacement = "autoPlacement"
        }
    }

    public struct ConnectionNotificationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ConnectionNotification]?

        public init(item: [ConnectionNotification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ByoipCidr: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Cidr", location: .body(locationName: "cidr"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// The description of the address range.
        public let description: String?
        /// The public IPv4 address range, in CIDR notation.
        public let cidr: String?
        /// The state of the address pool.
        public let state: ByoipCidrState?
        /// Upon success, contains the ID of the address pool. Otherwise, contains an error message.
        public let statusMessage: String?

        public init(description: String? = nil, cidr: String? = nil, state: ByoipCidrState? = nil, statusMessage: String? = nil) {
            self.description = description
            self.cidr = cidr
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case cidr = "cidr"
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public enum ProductCodeValues: String, CustomStringConvertible, Codable {
        case devpay = "devpay"
        case marketplace = "marketplace"
        public var description: String { return self.rawValue }
    }

    public struct TagSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TagSpecification]?

        public init(item: [TagSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReleaseHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: true, type: .structure)
        ]
        /// The IDs of the Dedicated Hosts to release.
        public let hostIds: RequestHostIdList

        public init(hostIds: RequestHostIdList) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostId"
        }
    }

    public struct ClassicLinkDnsSupportList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ClassicLinkDnsSupport]?

        public init(item: [ClassicLinkDnsSupport]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure)
        ]
        /// The instance type.
        public let instanceType: InstanceType?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// Deprecated.
        public let addressingType: String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: GroupIdentifierList?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// One or more block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data for the instance.
        public let userData: String?
        /// The name of the key pair.
        public let keyName: String?
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The placement information for the instance.
        public let placement: SpotPlacement?

        public init(instanceType: InstanceType? = nil, ebsOptimized: Bool? = nil, addressingType: String? = nil, securityGroups: GroupIdentifierList? = nil, kernelId: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, blockDeviceMappings: BlockDeviceMappingList? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, ramdiskId: String? = nil, subnetId: String? = nil, userData: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, placement: SpotPlacement? = nil) {
            self.instanceType = instanceType
            self.ebsOptimized = ebsOptimized
            self.addressingType = addressingType
            self.securityGroups = securityGroups
            self.kernelId = kernelId
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.blockDeviceMappings = blockDeviceMappings
            self.networkInterfaces = networkInterfaces
            self.ramdiskId = ramdiskId
            self.subnetId = subnetId
            self.userData = userData
            self.keyName = keyName
            self.monitoring = monitoring
            self.placement = placement
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case ebsOptimized = "ebsOptimized"
            case addressingType = "addressingType"
            case securityGroups = "groupSet"
            case kernelId = "kernelId"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case blockDeviceMappings = "blockDeviceMapping"
            case networkInterfaces = "networkInterfaceSet"
            case ramdiskId = "ramdiskId"
            case subnetId = "subnetId"
            case userData = "userData"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case placement = "placement"
        }
    }

    public struct ElasticInferenceAcceleratorAssociationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ElasticInferenceAcceleratorAssociation]?

        public init(item: [ElasticInferenceAcceleratorAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum SpotAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestPrice = "lowest-price"
        case diversified = "diversified"
        public var description: String { return self.rawValue }
    }

    public struct ResetInstanceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The attribute to reset.  You can only reset the following attributes: kernel | ramdisk | sourceDestCheck. To change an instance attribute, use ModifyInstanceAttribute. 
        public let attribute: InstanceAttributeName

        public init(dryRun: Bool? = nil, instanceId: String, attribute: InstanceAttributeName) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case attribute = "attribute"
        }
    }

    public struct RegionNameStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegionName", required: false, type: .list)
        ]
        public let regionName: [String]?

        public init(regionName: [String]? = nil) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct ElasticInferenceAccelerator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .string)
        ]
        ///  The type of elastic inference accelerator. The possible values are eia1.small, eia1.medium, and eia1.large. 
        public let `type`: String

        public init(type: String) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
        }
    }

    public enum TelemetryStatus: String, CustomStringConvertible, Codable {
        case up = "UP"
        case down = "DOWN"
        public var description: String { return self.rawValue }
    }

    public struct InstanceMonitoringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceMonitoring]?

        public init(item: [InstanceMonitoring]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateElasticInferenceAcceleratorList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateElasticInferenceAccelerator]?

        public init(item: [LaunchTemplateElasticInferenceAccelerator]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum HypervisorType: String, CustomStringConvertible, Codable {
        case ovm = "ovm"
        case xen = "xen"
        public var description: String { return self.rawValue }
    }

    public struct CreateTransitGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]
        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct GetLaunchTemplateDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dryRun = "DryRun"
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionNotificationId", required: true, type: .string), 
            AWSShapeMember(label: "ConnectionEvents", required: false, type: .structure), 
            AWSShapeMember(label: "ConnectionNotificationArn", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the notification.
        public let connectionNotificationId: String
        /// One or more events for the endpoint. Valid values are Accept, Connect, Delete, and Reject.
        public let connectionEvents: ValueStringList?
        /// The ARN for the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(connectionNotificationId: String, connectionEvents: ValueStringList? = nil, connectionNotificationArn: String? = nil, dryRun: Bool? = nil) {
            self.connectionNotificationId = connectionNotificationId
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationId = "ConnectionNotificationId"
            case connectionEvents = "ConnectionEvents"
            case connectionNotificationArn = "ConnectionNotificationArn"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeNatGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGateways", location: .body(locationName: "natGatewaySet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the NAT gateways.
        public let natGateways: NatGatewayList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(natGateways: NatGatewayList? = nil, nextToken: String? = nil) {
            self.natGateways = natGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case natGateways = "natGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct PriceScheduleSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Term", location: .body(locationName: "term"), required: false, type: .long), 
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double)
        ]
        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?
        /// The fixed price for the term.
        public let price: Double?

        public init(currencyCode: CurrencyCodeValues? = nil, term: Int64? = nil, price: Double? = nil) {
            self.currencyCode = currencyCode
            self.term = term
            self.price = price
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case term = "term"
            case price = "price"
        }
    }

    public struct SpotFleetRequestConfigData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "OnDemandAllocationStrategy", location: .body(locationName: "onDemandAllocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "OnDemandFulfilledCapacity", location: .body(locationName: "onDemandFulfilledCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "AllocationStrategy", location: .body(locationName: "allocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "TargetCapacity", location: .body(locationName: "targetCapacity"), required: true, type: .integer), 
            AWSShapeMember(label: "LaunchTemplateConfigs", location: .body(locationName: "launchTemplateConfigs"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancersConfig", location: .body(locationName: "loadBalancersConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "ReplaceUnhealthyInstances", location: .body(locationName: "replaceUnhealthyInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "OnDemandTargetCapacity", location: .body(locationName: "onDemandTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "InstancePoolsToUseCount", location: .body(locationName: "instancePoolsToUseCount"), required: false, type: .integer), 
            AWSShapeMember(label: "FulfilledCapacity", location: .body(locationName: "fulfilledCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "LaunchSpecifications", location: .body(locationName: "launchSpecifications"), required: false, type: .structure), 
            AWSShapeMember(label: "TerminateInstancesWithExpiration", location: .body(locationName: "terminateInstancesWithExpiration"), required: false, type: .boolean), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "IamFleetRole", location: .body(locationName: "iamFleetRole"), required: true, type: .string), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp)
        ]
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
        public let spotPrice: String?
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowestPrice, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to lowestPrice.
        public let onDemandAllocationStrategy: OnDemandAllocationStrategy?
        /// The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
        public let onDemandFulfilledCapacity: Double?
        /// Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is lowestPrice.
        public let allocationStrategy: AllocationStrategy?
        /// The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacity: Int32
        /// The launch template and overrides.
        public let launchTemplateConfigs: LaunchTemplateConfigList?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
        public let loadBalancersConfig: LoadBalancersConfig?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// Indicates whether Spot Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let onDemandTargetCapacity: Int32?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
        public let instancePoolsToUseCount: Int32?
        /// The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
        public let fulfilledCapacity: Double?
        /// The launch specifications for the Spot Fleet request.
        public let launchSpecifications: LaunchSpecsList?
        /// Indicates whether running Spot Instances should be terminated when the Spot Fleet request expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot Instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?
        /// The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is request, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. To maintain a certain target capacity, the Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: maintain.
        public let `type`: FleetType?
        /// Grants the Spot Fleet permission to terminate Spot Instances on your behalf when you cancel its Spot Fleet request using CancelSpotFleetRequests or when the Spot Fleet request expires, if you set terminateInstancesWithExpiration.
        public let iamFleetRole: String
        /// Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: TimeStamp?

        public init(spotPrice: String? = nil, onDemandAllocationStrategy: OnDemandAllocationStrategy? = nil, onDemandFulfilledCapacity: Double? = nil, allocationStrategy: AllocationStrategy? = nil, targetCapacity: Int32, launchTemplateConfigs: LaunchTemplateConfigList? = nil, clientToken: String? = nil, loadBalancersConfig: LoadBalancersConfig? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, replaceUnhealthyInstances: Bool? = nil, onDemandTargetCapacity: Int32? = nil, instancePoolsToUseCount: Int32? = nil, fulfilledCapacity: Double? = nil, launchSpecifications: LaunchSpecsList? = nil, terminateInstancesWithExpiration: Bool? = nil, validUntil: TimeStamp? = nil, type: FleetType? = nil, iamFleetRole: String, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, validFrom: TimeStamp? = nil) {
            self.spotPrice = spotPrice
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandFulfilledCapacity = onDemandFulfilledCapacity
            self.allocationStrategy = allocationStrategy
            self.targetCapacity = targetCapacity
            self.launchTemplateConfigs = launchTemplateConfigs
            self.clientToken = clientToken
            self.loadBalancersConfig = loadBalancersConfig
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.fulfilledCapacity = fulfilledCapacity
            self.launchSpecifications = launchSpecifications
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.validUntil = validUntil
            self.`type` = `type`
            self.iamFleetRole = iamFleetRole
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.validFrom = validFrom
        }

        private enum CodingKeys: String, CodingKey {
            case spotPrice = "spotPrice"
            case onDemandAllocationStrategy = "onDemandAllocationStrategy"
            case onDemandFulfilledCapacity = "onDemandFulfilledCapacity"
            case allocationStrategy = "allocationStrategy"
            case targetCapacity = "targetCapacity"
            case launchTemplateConfigs = "launchTemplateConfigs"
            case clientToken = "clientToken"
            case loadBalancersConfig = "loadBalancersConfig"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case replaceUnhealthyInstances = "replaceUnhealthyInstances"
            case onDemandTargetCapacity = "onDemandTargetCapacity"
            case instancePoolsToUseCount = "instancePoolsToUseCount"
            case fulfilledCapacity = "fulfilledCapacity"
            case launchSpecifications = "launchSpecifications"
            case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
            case validUntil = "validUntil"
            case `type` = "type"
            case iamFleetRole = "iamFleetRole"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case validFrom = "validFrom"
        }
    }

    public struct EnableVolumeIORequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the volume.
        public let volumeId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(volumeId: String, dryRun: Bool? = nil) {
            self.volumeId = volumeId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "volumeId"
            case dryRun = "dryRun"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddSubnetIds", required: false, type: .structure), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveSubnetIds", required: false, type: .structure)
        ]
        /// The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
        public let addSubnetIds: ValueStringList?
        /// The new VPC attachment options.
        public let options: ModifyTransitGatewayVpcAttachmentRequestOptions?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more subnets to remove.
        public let removeSubnetIds: ValueStringList?

        public init(addSubnetIds: ValueStringList? = nil, options: ModifyTransitGatewayVpcAttachmentRequestOptions? = nil, transitGatewayAttachmentId: String, dryRun: Bool? = nil, removeSubnetIds: ValueStringList? = nil) {
            self.addSubnetIds = addSubnetIds
            self.options = options
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.dryRun = dryRun
            self.removeSubnetIds = removeSubnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case addSubnetIds = "AddSubnetIds"
            case options = "Options"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case dryRun = "DryRun"
            case removeSubnetIds = "RemoveSubnetIds"
        }
    }

    public struct TransitGatewayRouteTable: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "DefaultAssociationRouteTable", location: .body(locationName: "defaultAssociationRouteTable"), required: false, type: .boolean), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultPropagationRouteTable", location: .body(locationName: "defaultPropagationRouteTable"), required: false, type: .boolean)
        ]
        /// Any tags assigned to the route table.
        public let tags: TagList?
        /// Indicates whether this is the default association route table for the transit gateway.
        public let defaultAssociationRouteTable: Bool?
        /// The creation time.
        public let creationTime: TimeStamp?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?
        /// The state of the transit gateway route table.
        public let state: TransitGatewayRouteTableState?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// Indicates whether this is the default propagation route table for the transit gateway.
        public let defaultPropagationRouteTable: Bool?

        public init(tags: TagList? = nil, defaultAssociationRouteTable: Bool? = nil, creationTime: TimeStamp? = nil, transitGatewayRouteTableId: String? = nil, state: TransitGatewayRouteTableState? = nil, transitGatewayId: String? = nil, defaultPropagationRouteTable: Bool? = nil) {
            self.tags = tags
            self.defaultAssociationRouteTable = defaultAssociationRouteTable
            self.creationTime = creationTime
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.state = state
            self.transitGatewayId = transitGatewayId
            self.defaultPropagationRouteTable = defaultPropagationRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case defaultAssociationRouteTable = "defaultAssociationRouteTable"
            case creationTime = "creationTime"
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
            case state = "state"
            case transitGatewayId = "transitGatewayId"
            case defaultPropagationRouteTable = "defaultPropagationRouteTable"
        }
    }

    public struct CreateReservedInstancesListingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .structure)
        ]
        /// Information about the Standard Reserved Instance listing.
        public let reservedInstancesListings: ReservedInstancesListingList?

        public init(reservedInstancesListings: ReservedInstancesListingList? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct HistoryRecordSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [HistoryRecordEntry]?

        public init(item: [HistoryRecordEntry]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum PlacementGroupState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct DeleteFleetErrorSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DeleteFleetErrorItem]?

        public init(item: [DeleteFleetErrorItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoveNetworkLoadBalancerArns", location: .body(locationName: "RemoveNetworkLoadBalancerArn"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptanceRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "AddNetworkLoadBalancerArns", location: .body(locationName: "AddNetworkLoadBalancerArn"), required: false, type: .structure)
        ]
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.
        public let removeNetworkLoadBalancerArns: ValueStringList?
        /// The ID of the service.
        public let serviceId: String
        /// Indicate whether requests to create an endpoint to your service must be accepted.
        public let acceptanceRequired: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.
        public let addNetworkLoadBalancerArns: ValueStringList?

        public init(removeNetworkLoadBalancerArns: ValueStringList? = nil, serviceId: String, acceptanceRequired: Bool? = nil, dryRun: Bool? = nil, addNetworkLoadBalancerArns: ValueStringList? = nil) {
            self.removeNetworkLoadBalancerArns = removeNetworkLoadBalancerArns
            self.serviceId = serviceId
            self.acceptanceRequired = acceptanceRequired
            self.dryRun = dryRun
            self.addNetworkLoadBalancerArns = addNetworkLoadBalancerArns
        }

        private enum CodingKeys: String, CodingKey {
            case removeNetworkLoadBalancerArns = "RemoveNetworkLoadBalancerArn"
            case serviceId = "ServiceId"
            case acceptanceRequired = "AcceptanceRequired"
            case dryRun = "DryRun"
            case addNetworkLoadBalancerArns = "AddNetworkLoadBalancerArn"
        }
    }

    public struct ModifyVolumeAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "AutoEnableIO", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the volume.
        public let volumeId: String
        /// Indicates whether the volume should be auto-enabled for I/O operations.
        public let autoEnableIO: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(volumeId: String, autoEnableIO: AttributeBooleanValue? = nil, dryRun: Bool? = nil) {
            self.volumeId = volumeId
            self.autoEnableIO = autoEnableIO
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
            case autoEnableIO = "AutoEnableIO"
            case dryRun = "dryRun"
        }
    }

    public struct SearchTransitGatewayRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string)
        ]
        /// One or more filters. The possible values are:    transit-gateway-route-destination-cidr-block - The CIDR range.    transit-gateway-route-state - The state of the route (active | blackhole).    transit-gateway-route-transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-route-type - The route type (static | propagated).    transit-gateway-route-vpn-connection-id - The ID of the VPN connection.  
        public let filters: FilterList
        /// The maximum number of routes to return.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(filters: FilterList, maxResults: Int32? = nil, dryRun: Bool? = nil, transitGatewayRouteTableId: String) {
            self.filters = filters
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct AssociateRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// The route table association ID. This ID is required for disassociating the route table.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public enum OfferingClassType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case convertible = "convertible"
        public var description: String { return self.rawValue }
    }

    public struct CapacityReservationSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", required: false, type: .structure)
        ]
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct DescribeVpcAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The VPC attribute.
        public let attribute: VpcAttributeName

        public init(dryRun: Bool? = nil, vpcId: String, attribute: VpcAttributeName) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "VpcId"
            case attribute = "Attribute"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "TagSpecifications", required: false, type: .structure), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// The tags to apply to the VPC attachment.
        public let tagSpecifications: TagSpecificationList?
        /// The VPC attachment options.
        public let options: CreateTransitGatewayVpcAttachmentRequestOptions?
        /// The ID of the transit gateway.
        public let transitGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.
        public let subnetIds: ValueStringList

        public init(vpcId: String, tagSpecifications: TagSpecificationList? = nil, options: CreateTransitGatewayVpcAttachmentRequestOptions? = nil, transitGatewayId: String, dryRun: Bool? = nil, subnetIds: ValueStringList) {
            self.vpcId = vpcId
            self.tagSpecifications = tagSpecifications
            self.options = options
            self.transitGatewayId = transitGatewayId
            self.dryRun = dryRun
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case tagSpecifications = "TagSpecifications"
            case options = "Options"
            case transitGatewayId = "TransitGatewayId"
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
        }
    }

    public struct ModifyCapacityReservationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CapacityReservationId", required: true, type: .string), 
            AWSShapeMember(label: "EndDateType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited.
        public let endDate: TimeStamp?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate value if EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if EndDateType is limited.  
        public let endDateType: EndDateType?
        /// The number of instances for which to reserve capacity.
        public let instanceCount: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(endDate: TimeStamp? = nil, capacityReservationId: String, endDateType: EndDateType? = nil, instanceCount: Int32? = nil, dryRun: Bool? = nil) {
            self.endDate = endDate
            self.capacityReservationId = capacityReservationId
            self.endDateType = endDateType
            self.instanceCount = instanceCount
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case endDate = "EndDate"
            case capacityReservationId = "CapacityReservationId"
            case endDateType = "EndDateType"
            case instanceCount = "InstanceCount"
            case dryRun = "DryRun"
        }
    }

    public struct EnableVpcClassicLinkResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public enum TransitGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case modifying = "modifying"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct LoadPermissionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Group", required: false, type: .enum), 
            AWSShapeMember(label: "UserId", required: false, type: .string)
        ]
        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
            case userId = "UserId"
        }
    }

    public struct ScheduledInstancesNetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddressConfigs", location: .body(locationName: "PrivateIpAddressConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "Ipv6Address"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "Group"), required: false, type: .structure), 
            AWSShapeMember(label: "DeviceIndex", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", required: false, type: .integer)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// Indicates whether to delete the interface when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses.
        public let privateIpAddressConfigs: PrivateIpAddressConfigSet?
        /// The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
        public let ipv6AddressCount: Int32?
        /// Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// One or more specific IPv6 addresses from the subnet range.
        public let ipv6Addresses: ScheduledInstancesIpv6AddressList?
        /// The IDs of one or more security groups.
        public let groups: ScheduledInstancesSecurityGroupIdSet?
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int32?
        /// The description.
        public let description: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The number of secondary private IPv4 addresses.
        public let secondaryPrivateIpAddressCount: Int32?

        public init(subnetId: String? = nil, deleteOnTermination: Bool? = nil, privateIpAddress: String? = nil, privateIpAddressConfigs: PrivateIpAddressConfigSet? = nil, ipv6AddressCount: Int32? = nil, associatePublicIpAddress: Bool? = nil, ipv6Addresses: ScheduledInstancesIpv6AddressList? = nil, groups: ScheduledInstancesSecurityGroupIdSet? = nil, deviceIndex: Int32? = nil, description: String? = nil, networkInterfaceId: String? = nil, secondaryPrivateIpAddressCount: Int32? = nil) {
            self.subnetId = subnetId
            self.deleteOnTermination = deleteOnTermination
            self.privateIpAddress = privateIpAddress
            self.privateIpAddressConfigs = privateIpAddressConfigs
            self.ipv6AddressCount = ipv6AddressCount
            self.associatePublicIpAddress = associatePublicIpAddress
            self.ipv6Addresses = ipv6Addresses
            self.groups = groups
            self.deviceIndex = deviceIndex
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case deleteOnTermination = "DeleteOnTermination"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddressConfigs = "PrivateIpAddressConfig"
            case ipv6AddressCount = "Ipv6AddressCount"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case ipv6Addresses = "Ipv6Address"
            case groups = "Group"
            case deviceIndex = "DeviceIndex"
            case description = "Description"
            case networkInterfaceId = "NetworkInterfaceId"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
        }
    }

    public struct InstanceStateChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "PreviousState", location: .body(locationName: "previousState"), required: false, type: .structure), 
            AWSShapeMember(label: "CurrentState", location: .body(locationName: "currentState"), required: false, type: .structure)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// The previous state of the instance.
        public let previousState: InstanceState?
        /// The current state of the instance.
        public let currentState: InstanceState?

        public init(instanceId: String? = nil, previousState: InstanceState? = nil, currentState: InstanceState? = nil) {
            self.instanceId = instanceId
            self.previousState = previousState
            self.currentState = currentState
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case previousState = "previousState"
            case currentState = "currentState"
        }
    }

    public struct Storage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3", required: false, type: .structure)
        ]
        /// An Amazon S3 storage location.
        public let s3: S3Storage?

        public init(s3: S3Storage? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct InstanceStatusEventList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStatusEvent]?

        public init(item: [InstanceStatusEvent]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more filters.    key - The tag key.    resource-id - The ID of the resource.    resource-type - The resource type (customer-gateway | dedicated-host | dhcp-options | elastic-ip | fleet | fpga-image | image | instance | internet-gateway | launch-template | natgateway | network-acl | network-interface | reserved-instances | route-table | security-group | snapshot | spot-instances-request | subnet | volume | vpc | vpc-peering-connection | vpn-connection | vpn-gateway).    tag:&lt;key&gt; - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".    value - The tag value.  
        public let filters: FilterList?
        /// The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(nextToken: String? = nil, filters: FilterList? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case filters = "Filter"
            case maxResults = "maxResults"
            case dryRun = "dryRun"
        }
    }

    public struct RecurringChargesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [RecurringCharge]?

        public init(item: [RecurringCharge]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVolumeAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String
        /// The attribute of the volume. This parameter is required.
        public let attribute: VolumeAttributeName

        public init(dryRun: Bool? = nil, volumeId: String, attribute: VolumeAttributeName) {
            self.dryRun = dryRun
            self.volumeId = volumeId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
            case attribute = "Attribute"
        }
    }

    public struct CidrBlock: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string)
        ]
        /// The IPv4 CIDR block.
        public let cidrBlock: String?

        public init(cidrBlock: String? = nil) {
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
        }
    }

    public struct ModifyFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetCapacitySpecification", required: true, type: .structure)
        ]
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The size of the EC2 Fleet.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest

        public init(fleetId: String, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, dryRun: Bool? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest) {
            self.fleetId = fleetId
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.dryRun = dryRun
            self.targetCapacitySpecification = targetCapacitySpecification
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case dryRun = "DryRun"
            case targetCapacitySpecification = "TargetCapacitySpecification"
        }
    }

    public struct ClientData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "UploadStart", required: false, type: .timestamp), 
            AWSShapeMember(label: "UploadEnd", required: false, type: .timestamp), 
            AWSShapeMember(label: "UploadSize", required: false, type: .double)
        ]
        /// A user-defined comment about the disk upload.
        public let comment: String?
        /// The time that the disk upload starts.
        public let uploadStart: TimeStamp?
        /// The time that the disk upload ends.
        public let uploadEnd: TimeStamp?
        /// The size of the uploaded disk image, in GiB.
        public let uploadSize: Double?

        public init(comment: String? = nil, uploadStart: TimeStamp? = nil, uploadEnd: TimeStamp? = nil, uploadSize: Double? = nil) {
            self.comment = comment
            self.uploadStart = uploadStart
            self.uploadEnd = uploadEnd
            self.uploadSize = uploadSize
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case uploadStart = "UploadStart"
            case uploadEnd = "UploadEnd"
            case uploadSize = "UploadSize"
        }
    }

    public enum VpcEndpointType: String, CustomStringConvertible, Codable {
        case interface = "Interface"
        case gateway = "Gateway"
        public var description: String { return self.rawValue }
    }

    public struct DescribeCapacityReservationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "CapacityReservations", location: .body(locationName: "capacityReservationSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Capacity Reservations.
        public let capacityReservations: CapacityReservationSet?

        public init(nextToken: String? = nil, capacityReservations: CapacityReservationSet? = nil) {
            self.nextToken = nextToken
            self.capacityReservations = capacityReservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case capacityReservations = "capacityReservationSet"
        }
    }

    public struct ReplaceRouteTableAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewAssociationId", location: .body(locationName: "newAssociationId"), required: false, type: .string)
        ]
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(newAssociationId: String? = nil) {
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case newAssociationId = "newAssociationId"
        }
    }

    public struct DeleteNatGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGatewayId", required: true, type: .string)
        ]
        /// The ID of the NAT gateway.
        public let natGatewayId: String

        public init(natGatewayId: String) {
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayId = "NatGatewayId"
        }
    }

    public enum SnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case completed = "completed"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public enum InstanceLifecycle: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case onDemand = "on-demand"
        public var description: String { return self.rawValue }
    }

    public struct InternetGatewayAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string)
        ]
        /// The current state of the attachment. For an internet gateway, the state is available when attached to a VPC; otherwise, this value is not returned.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case vpcId = "vpcId"
        }
    }

    public struct StaleIpPermission: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "UserIdGroupPairs", location: .body(locationName: "groups"), required: false, type: .structure), 
            AWSShapeMember(label: "IpRanges", location: .body(locationName: "ipRanges"), required: false, type: .structure), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "prefixListIds"), required: false, type: .structure), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string)
        ]
        /// The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
        public let toPort: Int32?
        /// The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
        public let fromPort: Int32?
        /// One or more security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
        public let userIdGroupPairs: UserIdGroupPairSet?
        /// One or more IP ranges. Not applicable for stale security group rules.
        public let ipRanges: IpRanges?
        /// One or more prefix list IDs for an AWS service. Not applicable for stale security group rules.
        public let prefixListIds: PrefixListIdSet?
        /// The IP protocol name (for tcp, udp, and icmp) or number (see Protocol Numbers).
        public let ipProtocol: String?

        public init(toPort: Int32? = nil, fromPort: Int32? = nil, userIdGroupPairs: UserIdGroupPairSet? = nil, ipRanges: IpRanges? = nil, prefixListIds: PrefixListIdSet? = nil, ipProtocol: String? = nil) {
            self.toPort = toPort
            self.fromPort = fromPort
            self.userIdGroupPairs = userIdGroupPairs
            self.ipRanges = ipRanges
            self.prefixListIds = prefixListIds
            self.ipProtocol = ipProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case toPort = "toPort"
            case fromPort = "fromPort"
            case userIdGroupPairs = "groups"
            case ipRanges = "ipRanges"
            case prefixListIds = "prefixListIds"
            case ipProtocol = "ipProtocol"
        }
    }

    public struct PropagatingVgwList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PropagatingVgw]?

        public init(item: [PropagatingVgw]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ProvisionedBandwidth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Provisioned", location: .body(locationName: "provisioned"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "Requested", location: .body(locationName: "requested"), required: false, type: .string), 
            AWSShapeMember(label: "ProvisionTime", location: .body(locationName: "provisionTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "RequestTime", location: .body(locationName: "requestTime"), required: false, type: .timestamp)
        ]
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisioned: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let status: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requested: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionTime: TimeStamp?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requestTime: TimeStamp?

        public init(provisioned: String? = nil, status: String? = nil, requested: String? = nil, provisionTime: TimeStamp? = nil, requestTime: TimeStamp? = nil) {
            self.provisioned = provisioned
            self.status = status
            self.requested = requested
            self.provisionTime = provisionTime
            self.requestTime = requestTime
        }

        private enum CodingKeys: String, CodingKey {
            case provisioned = "provisioned"
            case status = "status"
            case requested = "requested"
            case provisionTime = "provisionTime"
            case requestTime = "requestTime"
        }
    }

    public enum CancelBatchErrorCode: String, CustomStringConvertible, Codable {
        case fleetrequestiddoesnotexist = "fleetRequestIdDoesNotExist"
        case fleetrequestidmalformed = "fleetRequestIdMalformed"
        case fleetrequestnotincancellablestate = "fleetRequestNotInCancellableState"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public struct ModifyImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .string), 
            AWSShapeMember(label: "UserGroups", location: .body(locationName: "UserGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchPermission", required: false, type: .structure), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "ProductCode"), required: false, type: .structure), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .structure)
        ]
        /// One or more AWS account IDs. This parameter can be used only when the Attribute parameter is launchPermission.
        public let userIds: UserIdStringList?
        /// The ID of the AMI.
        public let imageId: String
        /// The name of the attribute to modify. The valid values are description, launchPermission, and productCodes.
        public let attribute: String?
        /// One or more user groups. This parameter can be used only when the Attribute parameter is launchPermission.
        public let userGroups: UserGroupStringList?
        /// A new launch permission for the AMI.
        public let launchPermission: LaunchPermissionModifications?
        /// The value of the attribute being modified. This parameter can be used only when the Attribute parameter is description or productCodes.
        public let value: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more DevPay product codes. After you add a product code to an AMI, it can't be removed.
        public let productCodes: ProductCodeStringList?
        /// The operation type. This parameter can be used only when the Attribute parameter is launchPermission.
        public let operationType: OperationType?
        /// A new description for the AMI.
        public let description: AttributeValue?

        public init(userIds: UserIdStringList? = nil, imageId: String, attribute: String? = nil, userGroups: UserGroupStringList? = nil, launchPermission: LaunchPermissionModifications? = nil, value: String? = nil, dryRun: Bool? = nil, productCodes: ProductCodeStringList? = nil, operationType: OperationType? = nil, description: AttributeValue? = nil) {
            self.userIds = userIds
            self.imageId = imageId
            self.attribute = attribute
            self.userGroups = userGroups
            self.launchPermission = launchPermission
            self.value = value
            self.dryRun = dryRun
            self.productCodes = productCodes
            self.operationType = operationType
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case userIds = "UserId"
            case imageId = "ImageId"
            case attribute = "Attribute"
            case userGroups = "UserGroup"
            case launchPermission = "LaunchPermission"
            case value = "Value"
            case dryRun = "dryRun"
            case productCodes = "ProductCode"
            case operationType = "OperationType"
            case description = "Description"
        }
    }

    public struct IpRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string)
        ]
        /// A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
        public let cidrIp: String?

        public init(description: String? = nil, cidrIp: String? = nil) {
            self.description = description
            self.cidrIp = cidrIp
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case cidrIp = "cidrIp"
        }
    }

    public struct TransitGatewayRouteTablePropagationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TransitGatewayRouteTablePropagation]?

        public init(item: [TransitGatewayRouteTablePropagation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UnsuccessfulInstanceCreditSpecificationItem]?

        public init(item: [UnsuccessfulInstanceCreditSpecificationItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeTransitGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGateways", location: .body(locationName: "transitGatewaySet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the transit gateways.
        public let transitGateways: TransitGatewayList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(transitGateways: TransitGatewayList? = nil, nextToken: String? = nil) {
            self.transitGateways = transitGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateways = "transitGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct AssociateVpcCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlockAssociation", location: .body(locationName: "cidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?

        public init(vpcId: String? = nil, cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil) {
            self.vpcId = vpcId
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case cidrBlockAssociation = "cidrBlockAssociation"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
        }
    }

    public struct StaleIpPermissionSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [StaleIpPermission]?

        public init(item: [StaleIpPermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVolumesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - The encryption status of the volume.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The status of the volume (creating | available | in-use | deleting | deleted | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.  
        public let filters: FilterList?
        /// The maximum number of volume results returned by DescribeVolumes in paginated output. When this parameter is used, DescribeVolumes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeVolumes request with the returned NextToken value. This value can be between 5 and 500; if MaxResults is given a value larger than 500, only 500 results are returned. If this parameter is not used, then DescribeVolumes returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int32?
        /// One or more volume IDs.
        public let volumeIds: VolumeIdStringList?
        /// The NextToken value returned from a previous paginated DescribeVolumes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, maxResults: Int32? = nil, volumeIds: VolumeIdStringList? = nil, nextToken: String? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.volumeIds = volumeIds
            self.nextToken = nextToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "maxResults"
            case volumeIds = "VolumeId"
            case nextToken = "nextToken"
            case dryRun = "dryRun"
        }
    }

    public struct RejectVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcPeeringConnectionId: String, dryRun: Bool? = nil) {
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case dryRun = "dryRun"
        }
    }

    public struct BlockDeviceMappingRequestList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMapping", required: false, type: .list)
        ]
        public let blockDeviceMapping: [BlockDeviceMapping]?

        public init(blockDeviceMapping: [BlockDeviceMapping]? = nil) {
            self.blockDeviceMapping = blockDeviceMapping
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMapping = "BlockDeviceMapping"
        }
    }

    public struct ImportInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: true, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImages", location: .body(locationName: "diskImage"), required: false, type: .list), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchSpecification", location: .body(locationName: "launchSpecification"), required: false, type: .structure)
        ]
        /// The instance operating system.
        public let platform: PlatformValues
        /// A description for the instance being imported.
        public let description: String?
        /// The disk image.
        public let diskImages: [DiskImage]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The launch specification.
        public let launchSpecification: ImportInstanceLaunchSpecification?

        public init(platform: PlatformValues, description: String? = nil, diskImages: [DiskImage]? = nil, dryRun: Bool? = nil, launchSpecification: ImportInstanceLaunchSpecification? = nil) {
            self.platform = platform
            self.description = description
            self.diskImages = diskImages
            self.dryRun = dryRun
            self.launchSpecification = launchSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case description = "description"
            case diskImages = "diskImage"
            case dryRun = "dryRun"
            case launchSpecification = "launchSpecification"
        }
    }

    public struct AttachInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the internet gateway.
        public let internetGatewayId: String

        public init(dryRun: Bool? = nil, vpcId: String, internetGatewayId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.internetGatewayId = internetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "vpcId"
            case internetGatewayId = "internetGatewayId"
        }
    }

    public struct DescribeVolumesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Volumes", location: .body(locationName: "volumeSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the volumes.
        public let volumes: VolumeList?
        /// The NextToken value to include in a future DescribeVolumes request. When the results of a DescribeVolumes request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(volumes: VolumeList? = nil, nextToken: String? = nil) {
            self.volumes = volumes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case volumes = "volumeSet"
            case nextToken = "nextToken"
        }
    }

    public struct ReplaceRouteTableAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new route table to associate with the subnet.
        public let routeTableId: String
        /// The association ID.
        public let associationId: String

        public init(dryRun: Bool? = nil, routeTableId: String, associationId: String) {
            self.dryRun = dryRun
            self.routeTableId = routeTableId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
            case associationId = "associationId"
        }
    }

    public struct DeletePlacementGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The name of the placement group.
        public let groupName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(groupName: String, dryRun: Bool? = nil) {
            self.groupName = groupName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case dryRun = "dryRun"
        }
    }

    public struct AssignIpv6AddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "AssignedIpv6Addresses", location: .body(locationName: "assignedIpv6Addresses"), required: false, type: .structure)
        ]
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv6 addresses assigned to the network interface.
        public let assignedIpv6Addresses: Ipv6AddressList?

        public init(networkInterfaceId: String? = nil, assignedIpv6Addresses: Ipv6AddressList? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.assignedIpv6Addresses = assignedIpv6Addresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case assignedIpv6Addresses = "assignedIpv6Addresses"
        }
    }

    public struct CidrAuthorizationContext: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: true, type: .string), 
            AWSShapeMember(label: "Signature", required: true, type: .string)
        ]
        /// The plain-text authorization message for the prefix and account.
        public let message: String
        /// The signed authorization message for the prefix and account.
        public let signature: String

        public init(message: String, signature: String) {
            self.message = message
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case signature = "Signature"
        }
    }

    public struct PricingDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double)
        ]
        /// The number of reservations available for the price.
        public let count: Int32?
        /// The price per instance.
        public let price: Double?

        public init(count: Int32? = nil, price: Double? = nil) {
            self.count = count
            self.price = price
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case price = "price"
        }
    }

    public struct SpotInstanceRequestIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequestId", required: false, type: .list)
        ]
        public let spotInstanceRequestId: [String]?

        public init(spotInstanceRequestId: [String]? = nil) {
            self.spotInstanceRequestId = spotInstanceRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequestId = "SpotInstanceRequestId"
        }
    }

    public struct DescribeVpcPeeringConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnections", location: .body(locationName: "vpcPeeringConnectionSet"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connections.
        public let vpcPeeringConnections: VpcPeeringConnectionList?

        public init(vpcPeeringConnections: VpcPeeringConnectionList? = nil) {
            self.vpcPeeringConnections = vpcPeeringConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnections = "vpcPeeringConnectionSet"
        }
    }

    public struct RequestSpotFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotFleetRequestConfig", location: .body(locationName: "spotFleetRequestConfig"), required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The configuration for the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData

        public init(dryRun: Bool? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData) {
            self.dryRun = dryRun
            self.spotFleetRequestConfig = spotFleetRequestConfig
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotFleetRequestConfig = "spotFleetRequestConfig"
        }
    }

    public struct FleetSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FleetData]?

        public init(item: [FleetData]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SpotPlacement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for Spot Instances.
        public let tenancy: Tenancy?
        /// The Availability Zone. [Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?

        public init(tenancy: Tenancy? = nil, availabilityZone: String? = nil, groupName: String? = nil) {
            self.tenancy = tenancy
            self.availabilityZone = availabilityZone
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case tenancy = "tenancy"
            case availabilityZone = "availabilityZone"
            case groupName = "groupName"
        }
    }

    public struct DescribeFleetsInstances: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "instanceIds"), required: false, type: .structure), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum)
        ]
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// The value is Windows for Windows instances; otherwise blank.
        public let platform: PlatformValues?
        /// The IDs of the instances.
        public let instanceIds: InstanceIdsSet?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, platform: PlatformValues? = nil, instanceIds: InstanceIdsSet? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.platform = platform
            self.instanceIds = instanceIds
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case platform = "platform"
            case instanceIds = "instanceIds"
            case lifecycle = "lifecycle"
        }
    }

    public struct DescribeSecurityGroupReferencesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupReferenceSet", location: .body(locationName: "securityGroupReferenceSet"), required: false, type: .structure)
        ]
        /// Information about the VPCs with the referencing security groups.
        public let securityGroupReferenceSet: SecurityGroupReferences?

        public init(securityGroupReferenceSet: SecurityGroupReferences? = nil) {
            self.securityGroupReferenceSet = securityGroupReferenceSet
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupReferenceSet = "securityGroupReferenceSet"
        }
    }

    public enum AutoAcceptSharedAttachmentsValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public struct CancelledSpotInstanceRequestList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CancelledSpotInstanceRequest]?

        public init(item: [CancelledSpotInstanceRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SpotFleetTagSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tag"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum)
        ]
        /// The tags.
        public let tags: TagList?
        /// The type of resource. Currently, the only resource type that is supported is instance.
        public let resourceType: ResourceType?

        public init(tags: TagList? = nil, resourceType: ResourceType? = nil) {
            self.tags = tags
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tag"
            case resourceType = "resourceType"
        }
    }

    public struct VolumeStatusDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum)
        ]
        /// The intended status of the volume status.
        public let status: String?
        /// The name of the volume status.
        public let name: VolumeStatusName?

        public init(status: String? = nil, name: VolumeStatusName? = nil) {
            self.status = status
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case name = "name"
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachments", location: .body(locationName: "transitGatewayVpcAttachments"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the VPC attachments.
        public let transitGatewayVpcAttachments: TransitGatewayVpcAttachmentList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(transitGatewayVpcAttachments: TransitGatewayVpcAttachmentList? = nil, nextToken: String? = nil) {
            self.transitGatewayVpcAttachments = transitGatewayVpcAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachments = "transitGatewayVpcAttachments"
            case nextToken = "nextToken"
        }
    }

    public struct DetachClassicLinkVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public enum NatGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case failed = "failed"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct VpnGatewayList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpnGateway]?

        public init(item: [VpnGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteFpgaImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the AFI.
        public let fpgaImageId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(fpgaImageId: String, dryRun: Bool? = nil) {
            self.fpgaImageId = fpgaImageId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageId = "FpgaImageId"
            case dryRun = "DryRun"
        }
    }

    public struct LaunchTemplate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersionNumber", location: .body(locationName: "defaultVersionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "LatestVersionNumber", location: .body(locationName: "latestVersionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedBy", location: .body(locationName: "createdBy"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string)
        ]
        /// The tags for the launch template.
        public let tags: TagList?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the default version of the launch template.
        public let defaultVersionNumber: Int64?
        /// The version number of the latest version of the launch template.
        public let latestVersionNumber: Int64?
        /// The time launch template was created.
        public let createTime: TimeStamp?
        /// The principal that created the launch template. 
        public let createdBy: String?
        /// The ID of the launch template.
        public let launchTemplateId: String?

        public init(tags: TagList? = nil, launchTemplateName: String? = nil, defaultVersionNumber: Int64? = nil, latestVersionNumber: Int64? = nil, createTime: TimeStamp? = nil, createdBy: String? = nil, launchTemplateId: String? = nil) {
            self.tags = tags
            self.launchTemplateName = launchTemplateName
            self.defaultVersionNumber = defaultVersionNumber
            self.latestVersionNumber = latestVersionNumber
            self.createTime = createTime
            self.createdBy = createdBy
            self.launchTemplateId = launchTemplateId
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case launchTemplateName = "launchTemplateName"
            case defaultVersionNumber = "defaultVersionNumber"
            case latestVersionNumber = "latestVersionNumber"
            case createTime = "createTime"
            case createdBy = "createdBy"
            case launchTemplateId = "launchTemplateId"
        }
    }

    public struct StartInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Reserved.
        public let additionalInfo: String?
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(additionalInfo: String? = nil, instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.additionalInfo = additionalInfo
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo = "additionalInfo"
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct BundleTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "BundleId", location: .body(locationName: "bundleId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "BundleTaskError", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "Storage", location: .body(locationName: "storage"), required: false, type: .structure), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp)
        ]
        /// The time of the most recent update for the task.
        public let updateTime: TimeStamp?
        /// The ID of the bundle task.
        public let bundleId: String?
        /// The ID of the instance associated with this bundle task.
        public let instanceId: String?
        /// If the task fails, a description of the error.
        public let bundleTaskError: BundleTaskError?
        /// The Amazon S3 storage locations.
        public let storage: Storage?
        /// The level of task completion, as a percent (for example, 20%).
        public let progress: String?
        /// The state of the task.
        public let state: BundleTaskState?
        /// The time this task started.
        public let startTime: TimeStamp?

        public init(updateTime: TimeStamp? = nil, bundleId: String? = nil, instanceId: String? = nil, bundleTaskError: BundleTaskError? = nil, storage: Storage? = nil, progress: String? = nil, state: BundleTaskState? = nil, startTime: TimeStamp? = nil) {
            self.updateTime = updateTime
            self.bundleId = bundleId
            self.instanceId = instanceId
            self.bundleTaskError = bundleTaskError
            self.storage = storage
            self.progress = progress
            self.state = state
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case updateTime = "updateTime"
            case bundleId = "bundleId"
            case instanceId = "instanceId"
            case bundleTaskError = "error"
            case storage = "storage"
            case progress = "progress"
            case state = "state"
            case startTime = "startTime"
        }
    }

    public struct RegisterImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BillingProducts", location: .body(locationName: "BillingProduct"), required: false, type: .structure), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .string), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageLocation", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string)
        ]
        /// The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.
        public let billingProducts: BillingProductList?
        /// The type of virtualization (hvm | paravirtual). Default: paravirtual 
        public let virtualizationType: String?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// One or more block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingRequestList?
        /// The full path to your AMI manifest in Amazon S3 storage.
        public let imageLocation: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String
        /// A description for your AMI.
        public let description: String?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
        public let architecture: ArchitectureValues?
        /// Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let enaSupport: Bool?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let sriovNetSupport: String?

        public init(billingProducts: BillingProductList? = nil, virtualizationType: String? = nil, kernelId: String? = nil, rootDeviceName: String? = nil, blockDeviceMappings: BlockDeviceMappingRequestList? = nil, imageLocation: String? = nil, dryRun: Bool? = nil, name: String, description: String? = nil, ramdiskId: String? = nil, architecture: ArchitectureValues? = nil, enaSupport: Bool? = nil, sriovNetSupport: String? = nil) {
            self.billingProducts = billingProducts
            self.virtualizationType = virtualizationType
            self.kernelId = kernelId
            self.rootDeviceName = rootDeviceName
            self.blockDeviceMappings = blockDeviceMappings
            self.imageLocation = imageLocation
            self.dryRun = dryRun
            self.name = name
            self.description = description
            self.ramdiskId = ramdiskId
            self.architecture = architecture
            self.enaSupport = enaSupport
            self.sriovNetSupport = sriovNetSupport
        }

        private enum CodingKeys: String, CodingKey {
            case billingProducts = "BillingProduct"
            case virtualizationType = "virtualizationType"
            case kernelId = "kernelId"
            case rootDeviceName = "rootDeviceName"
            case blockDeviceMappings = "BlockDeviceMapping"
            case imageLocation = "ImageLocation"
            case dryRun = "dryRun"
            case name = "name"
            case description = "description"
            case ramdiskId = "ramdiskId"
            case architecture = "architecture"
            case enaSupport = "enaSupport"
            case sriovNetSupport = "sriovNetSupport"
        }
    }

    public struct InstanceStatusList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStatus]?

        public init(item: [InstanceStatus]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeAddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Addresses", location: .body(locationName: "addressesSet"), required: false, type: .structure)
        ]
        /// Information about one or more Elastic IP addresses.
        public let addresses: AddressList?

        public init(addresses: AddressList? = nil) {
            self.addresses = addresses
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "addressesSet"
        }
    }

    public struct DiskImage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Volume", required: false, type: .structure), 
            AWSShapeMember(label: "Image", required: false, type: .structure)
        ]
        /// A description of the disk image.
        public let description: String?
        /// Information about the volume.
        public let volume: VolumeDetail?
        /// Information about the disk image.
        public let image: DiskImageDetail?

        public init(description: String? = nil, volume: VolumeDetail? = nil, image: DiskImageDetail? = nil) {
            self.description = description
            self.volume = volume
            self.image = image
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case volume = "Volume"
            case image = "Image"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public enum ExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable {
        case notermination = "noTermination"
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        public var description: String { return self.rawValue }
    }

    public struct RebootInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteCustomerGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the customer gateway.
        public let customerGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(customerGatewayId: String, dryRun: Bool? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct ImageDiskContainer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Format", required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", required: false, type: .structure), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string)
        ]
        /// The format of the disk image being imported. Valid values: VHD | VMDK | OVA 
        public let format: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucket?
        /// The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
        public let url: String?
        /// The description of the disk image.
        public let description: String?
        /// The ID of the EBS snapshot to be used for importing the snapshot.
        public let snapshotId: String?
        /// The block device mapping for the disk.
        public let deviceName: String?

        public init(format: String? = nil, userBucket: UserBucket? = nil, url: String? = nil, description: String? = nil, snapshotId: String? = nil, deviceName: String? = nil) {
            self.format = format
            self.userBucket = userBucket
            self.url = url
            self.description = description
            self.snapshotId = snapshotId
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case format = "Format"
            case userBucket = "UserBucket"
            case url = "Url"
            case description = "Description"
            case snapshotId = "SnapshotId"
            case deviceName = "DeviceName"
        }
    }

    public struct FilterList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .list)
        ]
        public let filter: [Filter]?

        public init(filter: [Filter]? = nil) {
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "VersionNumber", location: .body(locationName: "versionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string)
        ]
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The version number of the launch template.
        public let versionNumber: Int64?
        /// The name of the launch template.
        public let launchTemplateName: String?

        public init(launchTemplateId: String? = nil, versionNumber: Int64? = nil, launchTemplateName: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.versionNumber = versionNumber
            self.launchTemplateName = launchTemplateName
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case versionNumber = "versionNumber"
            case launchTemplateName = "launchTemplateName"
        }
    }

    public enum MoveStatus: String, CustomStringConvertible, Codable {
        case movingtovpc = "movingToVpc"
        case restoringtoclassic = "restoringToClassic"
        public var description: String { return self.rawValue }
    }

    public struct CreateKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyName", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// A unique name for the key pair. Constraints: Up to 255 ASCII characters
        public let keyName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(keyName: String, dryRun: Bool? = nil) {
            self.keyName = keyName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case keyName = "KeyName"
            case dryRun = "dryRun"
        }
    }

    public struct ScheduledInstancesSecurityGroupIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .list)
        ]
        public let securityGroupId: [String]?

        public init(securityGroupId: [String]? = nil) {
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
        }
    }

    public struct SnapshotList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Snapshot]?

        public init(item: [Snapshot]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct HostProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cores", location: .body(locationName: "cores"), required: false, type: .integer), 
            AWSShapeMember(label: "TotalVCpus", location: .body(locationName: "totalVCpus"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "Sockets", location: .body(locationName: "sockets"), required: false, type: .integer)
        ]
        /// The number of cores on the Dedicated Host.
        public let cores: Int32?
        /// The number of vCPUs on the Dedicated Host.
        public let totalVCpus: Int32?
        /// The instance type size that the Dedicated Host supports (for example, m3.medium).
        public let instanceType: String?
        /// The number of sockets on the Dedicated Host.
        public let sockets: Int32?

        public init(cores: Int32? = nil, totalVCpus: Int32? = nil, instanceType: String? = nil, sockets: Int32? = nil) {
            self.cores = cores
            self.totalVCpus = totalVCpus
            self.instanceType = instanceType
            self.sockets = sockets
        }

        private enum CodingKeys: String, CodingKey {
            case cores = "cores"
            case totalVCpus = "totalVCpus"
            case instanceType = "instanceType"
            case sockets = "sockets"
        }
    }

    public struct RouteTableList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [RouteTable]?

        public init(item: [RouteTable]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VolumeStatusInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", location: .body(locationName: "details"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The details of the volume status.
        public let details: VolumeStatusDetailsList?
        /// The status of the volume.
        public let status: VolumeStatusInfoStatus?

        public init(details: VolumeStatusDetailsList? = nil, status: VolumeStatusInfoStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public enum FleetEventType: String, CustomStringConvertible, Codable {
        case instanceChange = "instance-change"
        case fleetChange = "fleet-change"
        case serviceError = "service-error"
        public var description: String { return self.rawValue }
    }

    public struct TerminateInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminatingInstances", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// Information about one or more terminated instances.
        public let terminatingInstances: InstanceStateChangeList?

        public init(terminatingInstances: InstanceStateChangeList? = nil) {
            self.terminatingInstances = terminatingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case terminatingInstances = "instancesSet"
        }
    }

    public enum AvailabilityZoneState: String, CustomStringConvertible, Codable {
        case available = "available"
        case information = "information"
        case impaired = "impaired"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public struct ModifyCapacityReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Information about the Capacity Reservation.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CreateVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PeerOwnerId", location: .body(locationName: "peerOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "PeerRegion", required: false, type: .string), 
            AWSShapeMember(label: "PeerVpcId", location: .body(locationName: "peerVpcId"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The AWS account ID of the owner of the accepter VPC. Default: Your AWS account ID
        public let peerOwnerId: String?
        /// The ID of the requester VPC. You must specify this parameter in the request.
        public let vpcId: String?
        /// The region code for the accepter VPC, if the accepter VPC is located in a region other than the region in which you make the request. Default: The region in which you make the request.
        public let peerRegion: String?
        /// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
        public let peerVpcId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(peerOwnerId: String? = nil, vpcId: String? = nil, peerRegion: String? = nil, peerVpcId: String? = nil, dryRun: Bool? = nil) {
            self.peerOwnerId = peerOwnerId
            self.vpcId = vpcId
            self.peerRegion = peerRegion
            self.peerVpcId = peerVpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case peerOwnerId = "peerOwnerId"
            case vpcId = "vpcId"
            case peerRegion = "PeerRegion"
            case peerVpcId = "peerVpcId"
            case dryRun = "dryRun"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Support", required: false, type: .enum), 
            AWSShapeMember(label: "DnsSupport", required: false, type: .enum)
        ]
        /// Enable or disable IPv6 support. The default is enable.
        public let ipv6Support: Ipv6SupportValue?
        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?

        public init(ipv6Support: Ipv6SupportValue? = nil, dnsSupport: DnsSupportValue? = nil) {
            self.ipv6Support = ipv6Support
            self.dnsSupport = dnsSupport
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Support = "Ipv6Support"
            case dnsSupport = "DnsSupport"
        }
    }

    public struct DetachClassicLinkVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC to which the instance is linked.
        public let vpcId: String
        /// The ID of the instance to unlink from the VPC.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, instanceId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case instanceId = "instanceId"
            case dryRun = "dryRun"
        }
    }

    public struct DhcpConfigurationValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AttributeValue]?

        public init(item: [AttributeValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ResponseError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The error code.
        public let code: LaunchTemplateErrorCode?
        /// The error message, if applicable.
        public let message: String?

        public init(code: LaunchTemplateErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DeleteVpnConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPN connection.
        public let vpnConnectionId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpnConnectionId: String, dryRun: Bool? = nil) {
            self.vpnConnectionId = vpnConnectionId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionId = "VpnConnectionId"
            case dryRun = "dryRun"
        }
    }

    public struct TagList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Tag]?

        public init(item: [Tag]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VolumeStatusList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusItem]?

        public init(item: [VolumeStatusItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AddressList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Address]?

        public init(item: [Address]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PrefixListIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PrefixListId]?

        public init(item: [PrefixListId]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImportInstanceVolumeDetailItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: false, type: .structure), 
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "BytesConverted", location: .body(locationName: "bytesConverted"), required: false, type: .long), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The status of the import of this particular disk image.
        public let status: String?
        /// The image.
        public let image: DiskImageDescription?
        /// The volume.
        public let volume: DiskImageVolumeDescription?
        /// The Availability Zone where the resulting instance will reside.
        public let availabilityZone: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// The status information or errors related to the disk image.
        public let statusMessage: String?
        /// A description of the task.
        public let description: String?

        public init(status: String? = nil, image: DiskImageDescription? = nil, volume: DiskImageVolumeDescription? = nil, availabilityZone: String? = nil, bytesConverted: Int64? = nil, statusMessage: String? = nil, description: String? = nil) {
            self.status = status
            self.image = image
            self.volume = volume
            self.availabilityZone = availabilityZone
            self.bytesConverted = bytesConverted
            self.statusMessage = statusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case image = "image"
            case volume = "volume"
            case availabilityZone = "availabilityZone"
            case bytesConverted = "bytesConverted"
            case statusMessage = "statusMessage"
            case description = "description"
        }
    }

    public struct PrincipalIdFormat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]
        /// PrincipalIdFormatStatuses description
        public let statuses: IdFormatList?
        /// PrincipalIdFormatARN description
        public let arn: String?

        public init(statuses: IdFormatList? = nil, arn: String? = nil) {
            self.statuses = statuses
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
            case arn = "arn"
        }
    }

    public struct CancelReservedInstancesListingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: true, type: .string)
        ]
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String

        public init(reservedInstancesListingId: String) {
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct CapacityReservationIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReplaceTransitGatewayRouteResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Route", location: .body(locationName: "route"), required: false, type: .structure)
        ]
        /// Information about the modified route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route = "route"
        }
    }

    public struct DeregisterImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the AMI.
        public let imageId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(imageId: String, dryRun: Bool? = nil) {
            self.imageId = imageId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case dryRun = "dryRun"
        }
    }

    public struct CopySnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationRegion", location: .body(locationName: "destinationRegion"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "PresignedUrl", location: .body(locationName: "presignedUrl"), required: false, type: .string)
        ]
        /// An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.    ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. The action will eventually fail. 
        public let kmsKeyId: String?
        /// The ID of the EBS snapshot to copy.
        public let sourceSnapshotId: String
        /// The destination region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination region in a PresignedUrl parameter, where it is required. The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, ec2.us-east-1.amazonaws.com). With the AWS CLI, this is specified using the --region parameter or the default region in your AWS configuration file.
        public let destinationRegion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the region that contains the snapshot to be copied.
        public let sourceRegion: String
        /// A description for the EBS snapshot.
        public let description: String?
        /// Specifies whether the destination snapshot should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot use it to create an unencrypted copy of an encrypted snapshot. Your default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see Query Requests. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in Authenticating Requests by Using Query Parameters (AWS Signature Version 4) in the Amazon Simple Storage Service API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state.
        public let presignedUrl: String?

        public init(kmsKeyId: String? = nil, sourceSnapshotId: String, destinationRegion: String? = nil, dryRun: Bool? = nil, sourceRegion: String, description: String? = nil, encrypted: Bool? = nil, presignedUrl: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.sourceSnapshotId = sourceSnapshotId
            self.destinationRegion = destinationRegion
            self.dryRun = dryRun
            self.sourceRegion = sourceRegion
            self.description = description
            self.encrypted = encrypted
            self.presignedUrl = presignedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case sourceSnapshotId = "SourceSnapshotId"
            case destinationRegion = "destinationRegion"
            case dryRun = "dryRun"
            case sourceRegion = "SourceRegion"
            case description = "Description"
            case encrypted = "encrypted"
            case presignedUrl = "presignedUrl"
        }
    }

    public struct UserIdGroupPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "PeeringStatus", location: .body(locationName: "peeringStatus"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The ID of the VPC for the referenced security group, if applicable.
        public let vpcId: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The status of a VPC peering connection, if applicable.
        public let peeringStatus: String?
        /// The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.  For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
        public let groupName: String?
        /// The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
        public let userId: String?
        /// The ID of the VPC peering connection, if applicable.
        public let vpcPeeringConnectionId: String?
        /// A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?

        public init(vpcId: String? = nil, groupId: String? = nil, peeringStatus: String? = nil, groupName: String? = nil, userId: String? = nil, vpcPeeringConnectionId: String? = nil, description: String? = nil) {
            self.vpcId = vpcId
            self.groupId = groupId
            self.peeringStatus = peeringStatus
            self.groupName = groupName
            self.userId = userId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case groupId = "groupId"
            case peeringStatus = "peeringStatus"
            case groupName = "groupName"
            case userId = "userId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case description = "description"
        }
    }

    public struct AllowedPrincipalSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AllowedPrincipal]?

        public init(item: [AllowedPrincipal]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreatePlacementGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Strategy", location: .body(locationName: "strategy"), required: true, type: .enum), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The placement strategy.
        public let strategy: PlacementStrategy
        /// A name for the placement group. Must be unique within the scope of your account for the region. Constraints: Up to 255 ASCII characters
        public let groupName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(strategy: PlacementStrategy, groupName: String, dryRun: Bool? = nil) {
            self.strategy = strategy
            self.groupName = groupName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case strategy = "strategy"
            case groupName = "groupName"
            case dryRun = "dryRun"
        }
    }

    public struct ModifyLaunchTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersion", location: .body(locationName: "SetDefaultVersion"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// The version number of the launch template to set as the default version.
        public let defaultVersion: String?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, defaultVersion: String? = nil, clientToken: String? = nil, dryRun: Bool? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.defaultVersion = defaultVersion
            self.clientToken = clientToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case defaultVersion = "SetDefaultVersion"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
        }
    }

    public struct CreateFleetError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateAndOverrides", location: .body(locationName: "launchTemplateAndOverrides"), required: false, type: .structure), 
            AWSShapeMember(label: "ErrorCode", location: .body(locationName: "errorCode"), required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", location: .body(locationName: "errorMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Lifecycle", location: .body(locationName: "lifecycle"), required: false, type: .enum)
        ]
        /// The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see ee Error Codes.
        public let errorMessage: String?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, errorCode: String? = nil, errorMessage: String? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateAndOverrides = "launchTemplateAndOverrides"
            case errorCode = "errorCode"
            case errorMessage = "errorMessage"
            case lifecycle = "lifecycle"
        }
    }

    public struct ImportImageTaskList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImportImageTask]?

        public init(item: [ImportImageTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstanceIpv6AddressList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceIpv6Address]?

        public init(item: [InstanceIpv6Address]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RouteTableAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Main", location: .body(locationName: "main"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableAssociationId", location: .body(locationName: "routeTableAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: false, type: .string)
        ]
        /// Indicates whether this is the main route table.
        public let main: Bool?
        /// The ID of the association between a route table and a subnet.
        public let routeTableAssociationId: String?
        /// The ID of the subnet. A subnet ID is not returned for an implicit association.
        public let subnetId: String?
        /// The ID of the route table.
        public let routeTableId: String?

        public init(main: Bool? = nil, routeTableAssociationId: String? = nil, subnetId: String? = nil, routeTableId: String? = nil) {
            self.main = main
            self.routeTableAssociationId = routeTableAssociationId
            self.subnetId = subnetId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case main = "main"
            case routeTableAssociationId = "routeTableAssociationId"
            case subnetId = "subnetId"
            case routeTableId = "routeTableId"
        }
    }

    public struct BlockDeviceMappingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [BlockDeviceMapping]?

        public init(item: [BlockDeviceMapping]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeprovisionByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct CreateEgressOnlyInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the VPC for which to create the egress-only internet gateway.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientToken: String? = nil, vpcId: String, dryRun: Bool? = nil) {
            self.clientToken = clientToken
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case vpcId = "VpcId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeVpcsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcSet"), required: false, type: .structure)
        ]
        /// Information about one or more VPCs.
        public let vpcs: VpcList?

        public init(vpcs: VpcList? = nil) {
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcSet"
        }
    }

    public struct DeleteTransitGatewayRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayRouteTableId: String, dryRun: Bool? = nil) {
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
            case dryRun = "DryRun"
        }
    }

    public struct SpotOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "SingleInstanceType", location: .body(locationName: "singleInstanceType"), required: false, type: .boolean), 
            AWSShapeMember(label: "MinTargetCapacity", location: .body(locationName: "minTargetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "AllocationStrategy", location: .body(locationName: "allocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "InstancePoolsToUseCount", location: .body(locationName: "instancePoolsToUseCount"), required: false, type: .integer)
        ]
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.
        public let singleInstanceType: Bool?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int32?
        /// Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is lowest-price.
        public let allocationStrategy: SpotAllocationStrategy?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when AllocationStrategy is set to lowestPrice. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
        public let instancePoolsToUseCount: Int32?

        public init(instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, singleInstanceType: Bool? = nil, minTargetCapacity: Int32? = nil, allocationStrategy: SpotAllocationStrategy? = nil, instancePoolsToUseCount: Int32? = nil) {
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.singleInstanceType = singleInstanceType
            self.minTargetCapacity = minTargetCapacity
            self.allocationStrategy = allocationStrategy
            self.instancePoolsToUseCount = instancePoolsToUseCount
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case singleInstanceType = "singleInstanceType"
            case minTargetCapacity = "minTargetCapacity"
            case allocationStrategy = "allocationStrategy"
            case instancePoolsToUseCount = "instancePoolsToUseCount"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayIds", location: .body(locationName: "EgressOnlyInternetGatewayId"), required: false, type: .structure)
        ]
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000. If MaxResults is given a value larger than 1000, only 1000 results are returned.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more egress-only internet gateway IDs.
        public let egressOnlyInternetGatewayIds: EgressOnlyInternetGatewayIdList?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, dryRun: Bool? = nil, egressOnlyInternetGatewayIds: EgressOnlyInternetGatewayIdList? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayIds = egressOnlyInternetGatewayIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
            case egressOnlyInternetGatewayIds = "EgressOnlyInternetGatewayId"
        }
    }

    public struct ImportSnapshotTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotTaskDetail", location: .body(locationName: "snapshotTaskDetail"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string)
        ]
        /// Describes an import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?

        public init(snapshotTaskDetail: SnapshotTaskDetail? = nil, description: String? = nil, importTaskId: String? = nil) {
            self.snapshotTaskDetail = snapshotTaskDetail
            self.description = description
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotTaskDetail = "snapshotTaskDetail"
            case description = "description"
            case importTaskId = "importTaskId"
        }
    }

    public struct NetworkAcl: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Associations", location: .body(locationName: "associationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Entries", location: .body(locationName: "entrySet"), required: false, type: .structure), 
            AWSShapeMember(label: "IsDefault", location: .body(locationName: "default"), required: false, type: .boolean)
        ]
        /// The ID of the VPC for the network ACL.
        public let vpcId: String?
        /// Any tags assigned to the network ACL.
        public let tags: TagList?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the AWS account that owns the network ACL.
        public let ownerId: String?
        /// Any associations between the network ACL and one or more subnets
        public let associations: NetworkAclAssociationList?
        /// One or more entries (rules) in the network ACL.
        public let entries: NetworkAclEntryList?
        /// Indicates whether this is the default network ACL for the VPC.
        public let isDefault: Bool?

        public init(vpcId: String? = nil, tags: TagList? = nil, networkAclId: String? = nil, ownerId: String? = nil, associations: NetworkAclAssociationList? = nil, entries: NetworkAclEntryList? = nil, isDefault: Bool? = nil) {
            self.vpcId = vpcId
            self.tags = tags
            self.networkAclId = networkAclId
            self.ownerId = ownerId
            self.associations = associations
            self.entries = entries
            self.isDefault = isDefault
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case tags = "tagSet"
            case networkAclId = "networkAclId"
            case ownerId = "ownerId"
            case associations = "associationSet"
            case entries = "entrySet"
            case isDefault = "default"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct ModifyVpcTenancyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTenancy", required: true, type: .enum), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The instance tenancy attribute for the VPC. 
        public let instanceTenancy: VpcTenancy
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceTenancy: VpcTenancy, vpcId: String, dryRun: Bool? = nil) {
            self.instanceTenancy = instanceTenancy
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTenancy = "InstanceTenancy"
            case vpcId = "VpcId"
            case dryRun = "DryRun"
        }
    }

    public struct IdFormatList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IdFormat]?

        public init(item: [IdFormat]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct StopInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StoppingInstances", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// Information about one or more stopped instances.
        public let stoppingInstances: InstanceStateChangeList?

        public init(stoppingInstances: InstanceStateChangeList? = nil) {
            self.stoppingInstances = stoppingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case stoppingInstances = "instancesSet"
        }
    }

    public struct GroupIdentifierSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SecurityGroupIdentifier]?

        public init(item: [SecurityGroupIdentifier]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateSpotDatafeedSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: true, type: .string), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The Amazon S3 bucket in which to store the Spot Instance data feed.
        public let bucket: String
        /// A prefix for the data feed file names.
        public let prefix: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bucket: String, prefix: String? = nil, dryRun: Bool? = nil) {
            self.bucket = bucket
            self.prefix = prefix
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case prefix = "prefix"
            case dryRun = "dryRun"
        }
    }

    public struct KeyPairList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [KeyPairInfo]?

        public init(item: [KeyPairInfo]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]
        /// Information about the VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct DescribeAvailabilityZonesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZoneInfo"), required: false, type: .structure)
        ]
        /// Information about one or more Availability Zones.
        public let availabilityZones: AvailabilityZoneList?

        public init(availabilityZones: AvailabilityZoneList? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "availabilityZoneInfo"
        }
    }

    public struct MoveAddressToVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The allocation ID for the Elastic IP address.
        public let allocationId: String?
        /// The status of the move of the IP address.
        public let status: Status?

        public init(allocationId: String? = nil, status: Status? = nil) {
            self.allocationId = allocationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case status = "status"
        }
    }

    public struct LaunchTemplateCpuOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", required: false, type: .integer)
        ]
        /// The number of CPU cores for the instance.
        public let coreCount: Int32?
        /// The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int32?

        public init(coreCount: Int32? = nil, threadsPerCore: Int32? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct ScheduledInstancesNetworkInterfaceSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterface", required: false, type: .list)
        ]
        public let networkInterface: [ScheduledInstancesNetworkInterface]?

        public init(networkInterface: [ScheduledInstancesNetworkInterface]? = nil) {
            self.networkInterface = networkInterface
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterface = "NetworkInterface"
        }
    }

    public struct NetworkInterfaceAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "IpOwnerId", location: .body(locationName: "ipOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string)
        ]
        /// The allocation ID.
        public let allocationId: String?
        /// The address of the Elastic IP address bound to the network interface.
        public let publicIp: String?
        /// The ID of the Elastic IP address owner.
        public let ipOwnerId: String?
        /// The association ID.
        public let associationId: String?
        /// The public DNS name.
        public let publicDnsName: String?

        public init(allocationId: String? = nil, publicIp: String? = nil, ipOwnerId: String? = nil, associationId: String? = nil, publicDnsName: String? = nil) {
            self.allocationId = allocationId
            self.publicIp = publicIp
            self.ipOwnerId = ipOwnerId
            self.associationId = associationId
            self.publicDnsName = publicDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case publicIp = "publicIp"
            case ipOwnerId = "ipOwnerId"
            case associationId = "associationId"
            case publicDnsName = "publicDnsName"
        }
    }

    public struct ScheduledInstanceSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ScheduledInstance]?

        public init(item: [ScheduledInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PropagatingVgw: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string)
        ]
        /// The ID of the virtual private gateway.
        public let gatewayId: String?

        public init(gatewayId: String? = nil) {
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId = "gatewayId"
        }
    }

    public struct HostInstanceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [HostInstance]?

        public init(item: [HostInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSnapshotAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "CreateVolumePermissions", location: .body(locationName: "createVolumePermission"), required: false, type: .structure)
        ]
        /// A list of product codes.
        public let productCodes: ProductCodeList?
        /// The ID of the EBS snapshot.
        public let snapshotId: String?
        /// A list of permissions for creating volumes from the snapshot.
        public let createVolumePermissions: CreateVolumePermissionList?

        public init(productCodes: ProductCodeList? = nil, snapshotId: String? = nil, createVolumePermissions: CreateVolumePermissionList? = nil) {
            self.productCodes = productCodes
            self.snapshotId = snapshotId
            self.createVolumePermissions = createVolumePermissions
        }

        private enum CodingKeys: String, CodingKey {
            case productCodes = "productCodes"
            case snapshotId = "snapshotId"
            case createVolumePermissions = "createVolumePermission"
        }
    }

    public struct InstanceExportDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetEnvironment", location: .body(locationName: "targetEnvironment"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?
        /// The ID of the resource being exported.
        public let instanceId: String?

        public init(targetEnvironment: ExportEnvironment? = nil, instanceId: String? = nil) {
            self.targetEnvironment = targetEnvironment
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case targetEnvironment = "targetEnvironment"
            case instanceId = "instanceId"
        }
    }

    public struct DescribeRegionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Regions", location: .body(locationName: "regionInfo"), required: false, type: .structure)
        ]
        /// Information about one or more regions.
        public let regions: RegionList?

        public init(regions: RegionList? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regionInfo"
        }
    }

    public struct DeleteFpgaImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DescribeSecurityGroupReferencesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupId", required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more security group IDs in your account.
        public let groupId: GroupIds

        public init(dryRun: Bool? = nil, groupId: GroupIds) {
            self.dryRun = dryRun
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
        }
    }

    public struct CreditSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", required: true, type: .string)
        ]
        /// The credit option for CPU usage of a T2 or T3 instance. Valid values are standard and unlimited.
        public let cpuCredits: String

        public init(cpuCredits: String) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
        }
    }

    public struct ClassicLinkDnsSupport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "ClassicLinkDnsSupported", location: .body(locationName: "classicLinkDnsSupported"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Indicates whether ClassicLink DNS support is enabled for the VPC.
        public let classicLinkDnsSupported: Bool?

        public init(vpcId: String? = nil, classicLinkDnsSupported: Bool? = nil) {
            self.vpcId = vpcId
            self.classicLinkDnsSupported = classicLinkDnsSupported
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case classicLinkDnsSupported = "classicLinkDnsSupported"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6Addresses", required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "DeviceIndex", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", required: false, type: .integer)
        ]
        /// The ID of the subnet for the network interface.
        public let subnetId: String?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        public let privateIpAddresses: PrivateIpAddressSpecificationList?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int32?
        /// Associates a public IPv4 address with eth0 for a new network interface.
        public let associatePublicIpAddress: Bool?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: InstanceIpv6AddressListRequest?
        /// The IDs of one or more security groups.
        public let groups: SecurityGroupIdStringList?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int32?
        /// A description for the network interface.
        public let description: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The number of secondary private IPv4 addresses to assign to a network interface.
        public let secondaryPrivateIpAddressCount: Int32?

        public init(subnetId: String? = nil, deleteOnTermination: Bool? = nil, privateIpAddress: String? = nil, privateIpAddresses: PrivateIpAddressSpecificationList? = nil, ipv6AddressCount: Int32? = nil, associatePublicIpAddress: Bool? = nil, ipv6Addresses: InstanceIpv6AddressListRequest? = nil, groups: SecurityGroupIdStringList? = nil, deviceIndex: Int32? = nil, description: String? = nil, networkInterfaceId: String? = nil, secondaryPrivateIpAddressCount: Int32? = nil) {
            self.subnetId = subnetId
            self.deleteOnTermination = deleteOnTermination
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.ipv6AddressCount = ipv6AddressCount
            self.associatePublicIpAddress = associatePublicIpAddress
            self.ipv6Addresses = ipv6Addresses
            self.groups = groups
            self.deviceIndex = deviceIndex
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case deleteOnTermination = "DeleteOnTermination"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddresses = "PrivateIpAddresses"
            case ipv6AddressCount = "Ipv6AddressCount"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case ipv6Addresses = "Ipv6Addresses"
            case groups = "SecurityGroupId"
            case deviceIndex = "DeviceIndex"
            case description = "Description"
            case networkInterfaceId = "NetworkInterfaceId"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
        }
    }

    public struct UnsuccessfulItemList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UnsuccessfulItem]?

        public init(item: [UnsuccessfulItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum OnDemandAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestprice = "lowestPrice"
        case prioritized = "prioritized"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScheduledInstanceAvailabilityResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceAvailabilitySet", location: .body(locationName: "scheduledInstanceAvailabilitySet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the available Scheduled Instances.
        public let scheduledInstanceAvailabilitySet: ScheduledInstanceAvailabilitySet?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(scheduledInstanceAvailabilitySet: ScheduledInstanceAvailabilitySet? = nil, nextToken: String? = nil) {
            self.scheduledInstanceAvailabilitySet = scheduledInstanceAvailabilitySet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceAvailabilitySet = "scheduledInstanceAvailabilitySet"
            case nextToken = "nextToken"
        }
    }

    public struct ReservedInstancesOfferingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesOffering]?

        public init(item: [ReservedInstancesOffering]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReleaseHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .structure), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// The IDs of the Dedicated Hosts that were successfully released.
        public let successful: ResponseHostIdList?
        /// The IDs of the Dedicated Hosts that could not be released, including an error message.
        public let unsuccessful: UnsuccessfulItemList?

        public init(successful: ResponseHostIdList? = nil, unsuccessful: UnsuccessfulItemList? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct ServiceConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceId", location: .body(locationName: "serviceId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZoneSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceState", location: .body(locationName: "serviceState"), required: false, type: .enum), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkLoadBalancerArns", location: .body(locationName: "networkLoadBalancerArnSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "AcceptanceRequired", location: .body(locationName: "acceptanceRequired"), required: false, type: .boolean), 
            AWSShapeMember(label: "BaseEndpointDnsNames", location: .body(locationName: "baseEndpointDnsNameSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceType", location: .body(locationName: "serviceType"), required: false, type: .structure)
        ]
        /// The ID of the service.
        public let serviceId: String?
        /// In the Availability Zones in which the service is available.
        public let availabilityZones: ValueStringList?
        /// The service state.
        public let serviceState: ServiceState?
        /// The name of the service.
        public let serviceName: String?
        /// The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
        public let networkLoadBalancerArns: ValueStringList?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// Indicates whether requests from other AWS accounts to create an endpoint to the service must first be accepted.
        public let acceptanceRequired: Bool?
        /// The DNS names for the service.
        public let baseEndpointDnsNames: ValueStringList?
        /// The type of service.
        public let serviceType: ServiceTypeDetailSet?

        public init(serviceId: String? = nil, availabilityZones: ValueStringList? = nil, serviceState: ServiceState? = nil, serviceName: String? = nil, networkLoadBalancerArns: ValueStringList? = nil, privateDnsName: String? = nil, acceptanceRequired: Bool? = nil, baseEndpointDnsNames: ValueStringList? = nil, serviceType: ServiceTypeDetailSet? = nil) {
            self.serviceId = serviceId
            self.availabilityZones = availabilityZones
            self.serviceState = serviceState
            self.serviceName = serviceName
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.privateDnsName = privateDnsName
            self.acceptanceRequired = acceptanceRequired
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.serviceType = serviceType
        }

        private enum CodingKeys: String, CodingKey {
            case serviceId = "serviceId"
            case availabilityZones = "availabilityZoneSet"
            case serviceState = "serviceState"
            case serviceName = "serviceName"
            case networkLoadBalancerArns = "networkLoadBalancerArnSet"
            case privateDnsName = "privateDnsName"
            case acceptanceRequired = "acceptanceRequired"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case serviceType = "serviceType"
        }
    }

    public struct DescribeMovingAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "PublicIps", location: .body(locationName: "publicIp"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).  
        public let filters: FilterList?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
        public let maxResults: Int32?
        /// One or more Elastic IP addresses.
        public let publicIps: ValueStringList?
        /// The token for the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, maxResults: Int32? = nil, publicIps: ValueStringList? = nil, nextToken: String? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.publicIps = publicIps
            self.nextToken = nextToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "filter"
            case maxResults = "maxResults"
            case publicIps = "publicIp"
            case nextToken = "nextToken"
            case dryRun = "dryRun"
        }
    }

    public struct ReservedInstanceIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstanceId", required: false, type: .list)
        ]
        public let reservedInstanceId: [String]?

        public init(reservedInstanceId: [String]? = nil) {
            self.reservedInstanceId = reservedInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstanceId = "ReservedInstanceId"
        }
    }

    public struct UnassignIpv6AddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: true, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]
        /// The IPv6 addresses to unassign from the network interface.
        public let ipv6Addresses: Ipv6AddressList
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6Addresses: Ipv6AddressList, networkInterfaceId: String) {
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Addresses = "ipv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct InternetGatewayAttachmentList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InternetGatewayAttachment]?

        public init(item: [InternetGatewayAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelledSpotInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The state of the Spot Instance request.
        public let state: CancelSpotInstanceRequestState?

        public init(spotInstanceRequestId: String? = nil, state: CancelSpotInstanceRequestState? = nil) {
            self.spotInstanceRequestId = spotInstanceRequestId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequestId = "spotInstanceRequestId"
            case state = "state"
        }
    }

    public struct ModifyInstanceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ramdisk", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .structure), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "GroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string), 
            AWSShapeMember(label: "Kernel", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure)
        ]
        /// Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let ramdisk: AttributeValue?
        /// Changes the instance type to the specified value. For more information, see Instance Types. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
        public let instanceType: AttributeValue?
        /// Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: AttributeBooleanValue?
        /// If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.
        public let disableApiTermination: AttributeBooleanValue?
        /// Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Updating the Block Device Mapping when Launching an Instance in the Amazon Elastic Compute Cloud User Guide.
        public let blockDeviceMappings: InstanceBlockDeviceMappingSpecificationList?
        /// Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// Specifies whether source/destination checking is enabled. A value of true means that checking is enabled, and false means that checking is disabled. This value must be false for a NAT instance to perform NAT.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.
        public let groups: GroupIdStringList?
        /// A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
        public let value: String?
        /// Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let kernel: AttributeValue?
        /// Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
        public let userData: BlobAttributeValue?
        /// Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let enaSupport: AttributeBooleanValue?
        /// The name of the attribute.
        public let attribute: InstanceAttributeName?
        /// The ID of the instance.
        public let instanceId: String
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let sriovNetSupport: AttributeValue?

        public init(ramdisk: AttributeValue? = nil, instanceType: AttributeValue? = nil, ebsOptimized: AttributeBooleanValue? = nil, disableApiTermination: AttributeBooleanValue? = nil, blockDeviceMappings: InstanceBlockDeviceMappingSpecificationList? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, dryRun: Bool? = nil, groups: GroupIdStringList? = nil, value: String? = nil, kernel: AttributeValue? = nil, userData: BlobAttributeValue? = nil, enaSupport: AttributeBooleanValue? = nil, attribute: InstanceAttributeName? = nil, instanceId: String, sriovNetSupport: AttributeValue? = nil) {
            self.ramdisk = ramdisk
            self.instanceType = instanceType
            self.ebsOptimized = ebsOptimized
            self.disableApiTermination = disableApiTermination
            self.blockDeviceMappings = blockDeviceMappings
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.sourceDestCheck = sourceDestCheck
            self.dryRun = dryRun
            self.groups = groups
            self.value = value
            self.kernel = kernel
            self.userData = userData
            self.enaSupport = enaSupport
            self.attribute = attribute
            self.instanceId = instanceId
            self.sriovNetSupport = sriovNetSupport
        }

        private enum CodingKeys: String, CodingKey {
            case ramdisk = "ramdisk"
            case instanceType = "instanceType"
            case ebsOptimized = "ebsOptimized"
            case disableApiTermination = "disableApiTermination"
            case blockDeviceMappings = "blockDeviceMapping"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case sourceDestCheck = "SourceDestCheck"
            case dryRun = "dryRun"
            case groups = "GroupId"
            case value = "value"
            case kernel = "kernel"
            case userData = "userData"
            case enaSupport = "enaSupport"
            case attribute = "attribute"
            case instanceId = "instanceId"
            case sriovNetSupport = "sriovNetSupport"
        }
    }

    public enum InstanceType: String, CustomStringConvertible, Codable {
        case t1Micro = "t1.micro"
        case t2Nano = "t2.nano"
        case t2Micro = "t2.micro"
        case t2Small = "t2.small"
        case t2Medium = "t2.medium"
        case t2Large = "t2.large"
        case t2Xlarge = "t2.xlarge"
        case t22Xlarge = "t2.2xlarge"
        case t3Nano = "t3.nano"
        case t3Micro = "t3.micro"
        case t3Small = "t3.small"
        case t3Medium = "t3.medium"
        case t3Large = "t3.large"
        case t3Xlarge = "t3.xlarge"
        case t32Xlarge = "t3.2xlarge"
        case m1Small = "m1.small"
        case m1Medium = "m1.medium"
        case m1Large = "m1.large"
        case m1Xlarge = "m1.xlarge"
        case m3Medium = "m3.medium"
        case m3Large = "m3.large"
        case m3Xlarge = "m3.xlarge"
        case m32Xlarge = "m3.2xlarge"
        case m4Large = "m4.large"
        case m4Xlarge = "m4.xlarge"
        case m42Xlarge = "m4.2xlarge"
        case m44Xlarge = "m4.4xlarge"
        case m410Xlarge = "m4.10xlarge"
        case m416Xlarge = "m4.16xlarge"
        case m2Xlarge = "m2.xlarge"
        case m22Xlarge = "m2.2xlarge"
        case m24Xlarge = "m2.4xlarge"
        case cr18Xlarge = "cr1.8xlarge"
        case r3Large = "r3.large"
        case r3Xlarge = "r3.xlarge"
        case r32Xlarge = "r3.2xlarge"
        case r34Xlarge = "r3.4xlarge"
        case r38Xlarge = "r3.8xlarge"
        case r4Large = "r4.large"
        case r4Xlarge = "r4.xlarge"
        case r42Xlarge = "r4.2xlarge"
        case r44Xlarge = "r4.4xlarge"
        case r48Xlarge = "r4.8xlarge"
        case r416Xlarge = "r4.16xlarge"
        case r5Large = "r5.large"
        case r5Xlarge = "r5.xlarge"
        case r52Xlarge = "r5.2xlarge"
        case r54Xlarge = "r5.4xlarge"
        case r58Xlarge = "r5.8xlarge"
        case r512Xlarge = "r5.12xlarge"
        case r516Xlarge = "r5.16xlarge"
        case r524Xlarge = "r5.24xlarge"
        case r5Metal = "r5.metal"
        case r5aLarge = "r5a.large"
        case r5aXlarge = "r5a.xlarge"
        case r5a2Xlarge = "r5a.2xlarge"
        case r5a4Xlarge = "r5a.4xlarge"
        case r5a12Xlarge = "r5a.12xlarge"
        case r5a24Xlarge = "r5a.24xlarge"
        case r5dLarge = "r5d.large"
        case r5dXlarge = "r5d.xlarge"
        case r5d2Xlarge = "r5d.2xlarge"
        case r5d4Xlarge = "r5d.4xlarge"
        case r5d8Xlarge = "r5d.8xlarge"
        case r5d12Xlarge = "r5d.12xlarge"
        case r5d16Xlarge = "r5d.16xlarge"
        case r5d24Xlarge = "r5d.24xlarge"
        case r5dMetal = "r5d.metal"
        case x116Xlarge = "x1.16xlarge"
        case x132Xlarge = "x1.32xlarge"
        case x1eXlarge = "x1e.xlarge"
        case x1e2Xlarge = "x1e.2xlarge"
        case x1e4Xlarge = "x1e.4xlarge"
        case x1e8Xlarge = "x1e.8xlarge"
        case x1e16Xlarge = "x1e.16xlarge"
        case x1e32Xlarge = "x1e.32xlarge"
        case i2Xlarge = "i2.xlarge"
        case i22Xlarge = "i2.2xlarge"
        case i24Xlarge = "i2.4xlarge"
        case i28Xlarge = "i2.8xlarge"
        case i3Large = "i3.large"
        case i3Xlarge = "i3.xlarge"
        case i32Xlarge = "i3.2xlarge"
        case i34Xlarge = "i3.4xlarge"
        case i38Xlarge = "i3.8xlarge"
        case i316Xlarge = "i3.16xlarge"
        case i3Metal = "i3.metal"
        case hi14Xlarge = "hi1.4xlarge"
        case hs18Xlarge = "hs1.8xlarge"
        case c1Medium = "c1.medium"
        case c1Xlarge = "c1.xlarge"
        case c3Large = "c3.large"
        case c3Xlarge = "c3.xlarge"
        case c32Xlarge = "c3.2xlarge"
        case c34Xlarge = "c3.4xlarge"
        case c38Xlarge = "c3.8xlarge"
        case c4Large = "c4.large"
        case c4Xlarge = "c4.xlarge"
        case c42Xlarge = "c4.2xlarge"
        case c44Xlarge = "c4.4xlarge"
        case c48Xlarge = "c4.8xlarge"
        case c5Large = "c5.large"
        case c5Xlarge = "c5.xlarge"
        case c52Xlarge = "c5.2xlarge"
        case c54Xlarge = "c5.4xlarge"
        case c59Xlarge = "c5.9xlarge"
        case c518Xlarge = "c5.18xlarge"
        case c5dLarge = "c5d.large"
        case c5dXlarge = "c5d.xlarge"
        case c5d2Xlarge = "c5d.2xlarge"
        case c5d4Xlarge = "c5d.4xlarge"
        case c5d9Xlarge = "c5d.9xlarge"
        case c5d18Xlarge = "c5d.18xlarge"
        case c5nLarge = "c5n.large"
        case c5nXlarge = "c5n.xlarge"
        case c5n2Xlarge = "c5n.2xlarge"
        case c5n4Xlarge = "c5n.4xlarge"
        case c5n9Xlarge = "c5n.9xlarge"
        case c5n18Xlarge = "c5n.18xlarge"
        case cc14Xlarge = "cc1.4xlarge"
        case cc28Xlarge = "cc2.8xlarge"
        case g22Xlarge = "g2.2xlarge"
        case g28Xlarge = "g2.8xlarge"
        case g34Xlarge = "g3.4xlarge"
        case g38Xlarge = "g3.8xlarge"
        case g316Xlarge = "g3.16xlarge"
        case g3sXlarge = "g3s.xlarge"
        case cg14Xlarge = "cg1.4xlarge"
        case p2Xlarge = "p2.xlarge"
        case p28Xlarge = "p2.8xlarge"
        case p216Xlarge = "p2.16xlarge"
        case p32Xlarge = "p3.2xlarge"
        case p38Xlarge = "p3.8xlarge"
        case p316Xlarge = "p3.16xlarge"
        case d2Xlarge = "d2.xlarge"
        case d22Xlarge = "d2.2xlarge"
        case d24Xlarge = "d2.4xlarge"
        case d28Xlarge = "d2.8xlarge"
        case f12Xlarge = "f1.2xlarge"
        case f14Xlarge = "f1.4xlarge"
        case f116Xlarge = "f1.16xlarge"
        case m5Large = "m5.large"
        case m5Xlarge = "m5.xlarge"
        case m52Xlarge = "m5.2xlarge"
        case m54Xlarge = "m5.4xlarge"
        case m512Xlarge = "m5.12xlarge"
        case m524Xlarge = "m5.24xlarge"
        case m5aLarge = "m5a.large"
        case m5aXlarge = "m5a.xlarge"
        case m5a2Xlarge = "m5a.2xlarge"
        case m5a4Xlarge = "m5a.4xlarge"
        case m5a12Xlarge = "m5a.12xlarge"
        case m5a24Xlarge = "m5a.24xlarge"
        case m5dLarge = "m5d.large"
        case m5dXlarge = "m5d.xlarge"
        case m5d2Xlarge = "m5d.2xlarge"
        case m5d4Xlarge = "m5d.4xlarge"
        case m5d12Xlarge = "m5d.12xlarge"
        case m5d24Xlarge = "m5d.24xlarge"
        case h12Xlarge = "h1.2xlarge"
        case h14Xlarge = "h1.4xlarge"
        case h18Xlarge = "h1.8xlarge"
        case h116Xlarge = "h1.16xlarge"
        case z1dLarge = "z1d.large"
        case z1dXlarge = "z1d.xlarge"
        case z1d2Xlarge = "z1d.2xlarge"
        case z1d3Xlarge = "z1d.3xlarge"
        case z1d6Xlarge = "z1d.6xlarge"
        case z1d12Xlarge = "z1d.12xlarge"
        case u6Tb1Metal = "u-6tb1.metal"
        case u9Tb1Metal = "u-9tb1.metal"
        case u12Tb1Metal = "u-12tb1.metal"
        case a1Medium = "a1.medium"
        case a1Large = "a1.large"
        case a1Xlarge = "a1.xlarge"
        case a12Xlarge = "a1.2xlarge"
        case a14Xlarge = "a1.4xlarge"
        public var description: String { return self.rawValue }
    }

    public struct BundleInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Storage", required: true, type: .structure), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let storage: Storage
        /// The ID of the instance to bundle. Type: String Default: None Required: Yes
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(storage: Storage, instanceId: String, dryRun: Bool? = nil) {
            self.storage = storage
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case storage = "Storage"
            case instanceId = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct AssignIpv6AddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]
        /// One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: Ipv6AddressList?
        /// The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int32?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6Addresses: Ipv6AddressList? = nil, ipv6AddressCount: Int32? = nil, networkInterfaceId: String) {
            self.ipv6Addresses = ipv6Addresses
            self.ipv6AddressCount = ipv6AddressCount
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Addresses = "ipv6Addresses"
            case ipv6AddressCount = "ipv6AddressCount"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct ClassicLinkInstanceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ClassicLinkInstance]?

        public init(item: [ClassicLinkInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateVpcEndpointServiceConfigurationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceConfiguration", location: .body(locationName: "serviceConfiguration"), required: false, type: .structure)
        ]
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the service configuration.
        public let serviceConfiguration: ServiceConfiguration?

        public init(clientToken: String? = nil, serviceConfiguration: ServiceConfiguration? = nil) {
            self.clientToken = clientToken
            self.serviceConfiguration = serviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case serviceConfiguration = "serviceConfiguration"
        }
    }

    public struct ResetSnapshotAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the snapshot.
        public let snapshotId: String
        /// The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.
        public let attribute: SnapshotAttributeName

        public init(dryRun: Bool? = nil, snapshotId: String, attribute: SnapshotAttributeName) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case snapshotId = "SnapshotId"
            case attribute = "Attribute"
        }
    }

    public struct DescribeInternetGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGatewayIds", location: .body(locationName: "internetGatewayId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more internet gateway IDs. Default: Describes all your internet gateways.
        public let internetGatewayIds: ValueStringList?
        /// One or more filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the AWS account that owns the internet gateway.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(internetGatewayIds: ValueStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.internetGatewayIds = internetGatewayIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case internetGatewayIds = "internetGatewayId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct SnapshotDetailList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SnapshotDetail]?

        public init(item: [SnapshotDetail]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplatesMonitoringRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Specify true to enable detailed monitoring. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct DescribeMovingAddressesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MovingAddressStatuses", location: .body(locationName: "movingAddressStatusSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The status for each Elastic IP address.
        public let movingAddressStatuses: MovingAddressStatusSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(movingAddressStatuses: MovingAddressStatusSet? = nil, nextToken: String? = nil) {
            self.movingAddressStatuses = movingAddressStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case movingAddressStatuses = "movingAddressStatusSet"
            case nextToken = "nextToken"
        }
    }

    public struct ScheduledInstanceRecurrenceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", required: false, type: .string), 
            AWSShapeMember(label: "OccurrenceRelativeToEnd", required: false, type: .boolean), 
            AWSShapeMember(label: "OccurrenceUnit", required: false, type: .string), 
            AWSShapeMember(label: "Interval", required: false, type: .integer), 
            AWSShapeMember(label: "OccurrenceDays", location: .body(locationName: "OccurrenceDay"), required: false, type: .structure)
        ]
        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required for a monthly schedule. You can't specify DayOfWeek with a weekly schedule. You can't specify this value with a daily schedule.
        public let occurrenceUnit: String?
        /// The interval quantity. The interval unit depends on the value of Frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int32?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
        public let occurrenceDays: OccurrenceDayRequestSet?

        public init(frequency: String? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil, interval: Int32? = nil, occurrenceDays: OccurrenceDayRequestSet? = nil) {
            self.frequency = frequency
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
            self.interval = interval
            self.occurrenceDays = occurrenceDays
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
            case occurrenceRelativeToEnd = "OccurrenceRelativeToEnd"
            case occurrenceUnit = "OccurrenceUnit"
            case interval = "Interval"
            case occurrenceDays = "OccurrenceDay"
        }
    }

    public struct InstanceBlockDeviceMappingSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string)
        ]
        /// The virtual device name.
        public let virtualName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDeviceSpecification?
        /// suppress the specified device included in the block device mapping.
        public let noDevice: String?
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?

        public init(virtualName: String? = nil, ebs: EbsInstanceBlockDeviceSpecification? = nil, noDevice: String? = nil, deviceName: String? = nil) {
            self.virtualName = virtualName
            self.ebs = ebs
            self.noDevice = noDevice
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case virtualName = "virtualName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case deviceName = "deviceName"
        }
    }

    public struct InstanceNetworkInterfaceAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string)
        ]
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The index of the device on the instance for the network interface attachment.
        public let deviceIndex: Int32?
        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// The ID of the network interface attachment.
        public let attachmentId: String?

        public init(deleteOnTermination: Bool? = nil, status: AttachmentStatus? = nil, deviceIndex: Int32? = nil, attachTime: TimeStamp? = nil, attachmentId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.status = status
            self.deviceIndex = deviceIndex
            self.attachTime = attachTime
            self.attachmentId = attachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case status = "status"
            case deviceIndex = "deviceIndex"
            case attachTime = "attachTime"
            case attachmentId = "attachmentId"
        }
    }

    public struct DescribeVpnGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGatewayIds", location: .body(locationName: "VpnGatewayId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more virtual private gateway IDs. Default: Describes all your virtual private gateways.
        public let vpnGatewayIds: VpnGatewayIdStringList?
        /// One or more filters.    amazon-side-asn - The Autonomous System Number (ASN) for the Amazon side of the gateway.    attachment.state - The current state of the attachment between the gateway and the VPC (attaching | attached | detaching | detached).    attachment.vpc-id - The ID of an attached VPC.    availability-zone - The Availability Zone for the virtual private gateway (if applicable).    state - The state of the virtual private gateway (pending | available | deleting | deleted).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of virtual private gateway. Currently the only supported type is ipsec.1.    vpn-gateway-id - The ID of the virtual private gateway.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpnGatewayIds: VpnGatewayIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.vpnGatewayIds = vpnGatewayIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGatewayIds = "VpnGatewayId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct HostOfferingSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [HostOffering]?

        public init(item: [HostOffering]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PurchaseRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PurchaseToken", required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer)
        ]
        /// The purchase token.
        public let purchaseToken: String
        /// The number of instances.
        public let instanceCount: Int32

        public init(purchaseToken: String, instanceCount: Int32) {
            self.purchaseToken = purchaseToken
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case purchaseToken = "PurchaseToken"
            case instanceCount = "InstanceCount"
        }
    }

    public struct RunScheduledInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIdSet", location: .body(locationName: "instanceIdSet"), required: false, type: .structure)
        ]
        /// The IDs of the newly launched instances.
        public let instanceIdSet: InstanceIdSet?

        public init(instanceIdSet: InstanceIdSet? = nil) {
            self.instanceIdSet = instanceIdSet
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIdSet = "instanceIdSet"
        }
    }

    public struct InstanceCapacity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "AvailableCapacity", location: .body(locationName: "availableCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "TotalCapacity", location: .body(locationName: "totalCapacity"), required: false, type: .integer)
        ]
        /// The instance type size supported by the Dedicated Host.
        public let instanceType: String?
        /// The number of instances that can still be launched onto the Dedicated Host.
        public let availableCapacity: Int32?
        /// The total number of instances that can be launched onto the Dedicated Host.
        public let totalCapacity: Int32?

        public init(instanceType: String? = nil, availableCapacity: Int32? = nil, totalCapacity: Int32? = nil) {
            self.instanceType = instanceType
            self.availableCapacity = availableCapacity
            self.totalCapacity = totalCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case availableCapacity = "availableCapacity"
            case totalCapacity = "totalCapacity"
        }
    }

    public struct InstanceCountList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceCount]?

        public init(item: [InstanceCount]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case moveinprogress = "MoveInProgress"
        case invpc = "InVpc"
        case inclassic = "InClassic"
        public var description: String { return self.rawValue }
    }

    public struct CidrBlockSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CidrBlock]?

        public init(item: [CidrBlock]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum Tenancy: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public struct LoadBalancersConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClassicLoadBalancersConfig", location: .body(locationName: "classicLoadBalancersConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "TargetGroupsConfig", location: .body(locationName: "targetGroupsConfig"), required: false, type: .structure)
        ]
        /// The Classic Load Balancers.
        public let classicLoadBalancersConfig: ClassicLoadBalancersConfig?
        /// The target groups.
        public let targetGroupsConfig: TargetGroupsConfig?

        public init(classicLoadBalancersConfig: ClassicLoadBalancersConfig? = nil, targetGroupsConfig: TargetGroupsConfig? = nil) {
            self.classicLoadBalancersConfig = classicLoadBalancersConfig
            self.targetGroupsConfig = targetGroupsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancersConfig = "classicLoadBalancersConfig"
            case targetGroupsConfig = "targetGroupsConfig"
        }
    }

    public struct VolumeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Volume]?

        public init(item: [Volume]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateVersionSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateVersion]?

        public init(item: [LaunchTemplateVersion]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ElasticGpuSpecificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string)
        ]
        /// The elastic GPU type.
        public let `type`: String?

        public init(type: String? = nil) {
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
        }
    }

    public struct CreateNetworkInterfaceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterface", location: .body(locationName: "networkInterface"), required: false, type: .structure)
        ]
        /// Information about the network interface.
        public let networkInterface: NetworkInterface?

        public init(networkInterface: NetworkInterface? = nil) {
            self.networkInterface = networkInterface
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterface = "networkInterface"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseSuccessSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DeleteLaunchTemplateVersionsResponseSuccessItem]?

        public init(item: [DeleteLaunchTemplateVersionsResponseSuccessItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplatesMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: false, type: .boolean)
        ]
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct BlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string)
        ]
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsBlockDevice?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?

        public init(virtualName: String? = nil, ebs: EbsBlockDevice? = nil, noDevice: String? = nil, deviceName: String? = nil) {
            self.virtualName = virtualName
            self.ebs = ebs
            self.noDevice = noDevice
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case virtualName = "virtualName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case deviceName = "deviceName"
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the service configurations that were not deleted, if applicable.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct LaunchTemplateBlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string)
        ]
        /// The virtual device name (ephemeralN).
        public let virtualName: String?
        /// Information about the block device for an EBS volume.
        public let ebs: LaunchTemplateEbsBlockDevice?
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The device name.
        public let deviceName: String?

        public init(virtualName: String? = nil, ebs: LaunchTemplateEbsBlockDevice? = nil, noDevice: String? = nil, deviceName: String? = nil) {
            self.virtualName = virtualName
            self.ebs = ebs
            self.noDevice = noDevice
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case virtualName = "virtualName"
            case ebs = "ebs"
            case noDevice = "noDevice"
            case deviceName = "deviceName"
        }
    }

    public enum SpotInstanceInterruptionBehavior: String, CustomStringConvertible, Codable {
        case hibernate = "hibernate"
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public struct ElasticGpuSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticGpuSpecification", required: false, type: .list)
        ]
        public let elasticGpuSpecification: [ElasticGpuSpecification]?

        public init(elasticGpuSpecification: [ElasticGpuSpecification]? = nil) {
            self.elasticGpuSpecification = elasticGpuSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuSpecification = "ElasticGpuSpecification"
        }
    }

    public struct DescribeReservedInstancesOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "MinDuration", required: false, type: .long), 
            AWSShapeMember(label: "OfferingClass", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "ReservedInstancesOfferingIds", location: .body(locationName: "ReservedInstancesOfferingId"), required: false, type: .list), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .enum), 
            AWSShapeMember(label: "IncludeMarketplace", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxDuration", required: false, type: .long), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The instance type that the reservation will cover (for example, m1.small). For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
        public let minDuration: Int64?
        /// The offering class of the Reserved Instance. Can be standard or convertible.
        public let offeringClass: OfferingClassType?
        /// The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
        public let instanceTenancy: Tenancy?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type. 
        public let offeringType: OfferingTypeValues?
        /// One or more Reserved Instances offering IDs.
        public let reservedInstancesOfferingIds: [String]?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web |  Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC))     reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
        public let filters: FilterList?
        /// The maximum number of instances to filter when searching for offerings. Default: 20
        public let maxInstanceCount: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. The maximum is 100. Default: 100
        public let maxResults: Int32?
        /// The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
        public let productDescription: RIProductDescription?
        /// Include Reserved Instance Marketplace offerings in the response.
        public let includeMarketplace: Bool?
        /// The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
        public let maxDuration: Int64?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, minDuration: Int64? = nil, offeringClass: OfferingClassType? = nil, instanceTenancy: Tenancy? = nil, offeringType: OfferingTypeValues? = nil, reservedInstancesOfferingIds: [String]? = nil, filters: FilterList? = nil, maxInstanceCount: Int32? = nil, dryRun: Bool? = nil, maxResults: Int32? = nil, productDescription: RIProductDescription? = nil, includeMarketplace: Bool? = nil, maxDuration: Int64? = nil, nextToken: String? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.minDuration = minDuration
            self.offeringClass = offeringClass
            self.instanceTenancy = instanceTenancy
            self.offeringType = offeringType
            self.reservedInstancesOfferingIds = reservedInstancesOfferingIds
            self.filters = filters
            self.maxInstanceCount = maxInstanceCount
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.productDescription = productDescription
            self.includeMarketplace = includeMarketplace
            self.maxDuration = maxDuration
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case instanceType = "InstanceType"
            case minDuration = "MinDuration"
            case offeringClass = "OfferingClass"
            case instanceTenancy = "instanceTenancy"
            case offeringType = "offeringType"
            case reservedInstancesOfferingIds = "ReservedInstancesOfferingId"
            case filters = "Filter"
            case maxInstanceCount = "MaxInstanceCount"
            case dryRun = "dryRun"
            case maxResults = "maxResults"
            case productDescription = "ProductDescription"
            case includeMarketplace = "IncludeMarketplace"
            case maxDuration = "MaxDuration"
            case nextToken = "nextToken"
        }
    }

    public struct GetPasswordDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PasswordData", location: .body(locationName: "passwordData"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The time the data was last updated.
        public let timestamp: TimeStamp?
        /// The password of the instance. Returns an empty string if the password is not available.
        public let passwordData: String?
        /// The ID of the Windows instance.
        public let instanceId: String?

        public init(timestamp: TimeStamp? = nil, passwordData: String? = nil, instanceId: String? = nil) {
            self.timestamp = timestamp
            self.passwordData = passwordData
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "timestamp"
            case passwordData = "passwordData"
            case instanceId = "instanceId"
        }
    }

    public struct FleetLaunchTemplateConfigList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FleetLaunchTemplateConfig]?

        public init(item: [FleetLaunchTemplateConfig]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum NetworkInterfaceType: String, CustomStringConvertible, Codable {
        case interface = "interface"
        case natgateway = "natGateway"
        public var description: String { return self.rawValue }
    }

    public struct DescribeConversionTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTasks", location: .body(locationName: "conversionTasks"), required: false, type: .structure)
        ]
        /// Information about the conversion tasks.
        public let conversionTasks: DescribeConversionTaskList?

        public init(conversionTasks: DescribeConversionTaskList? = nil) {
            self.conversionTasks = conversionTasks
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTasks = "conversionTasks"
        }
    }

    public struct DescribeHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Hosts", location: .body(locationName: "hostSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the Dedicated Hosts.
        public let hosts: HostList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hosts: HostList? = nil, nextToken: String? = nil) {
            self.hosts = hosts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hosts = "hostSet"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteTransitGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the transit gateway.
        public let transitGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayId: String, dryRun: Bool? = nil) {
            self.transitGatewayId = transitGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayId = "TransitGatewayId"
            case dryRun = "DryRun"
        }
    }

    public struct PriceScheduleSpecificationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PriceScheduleSpecification]?

        public init(item: [PriceScheduleSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTablePropagations", location: .body(locationName: "transitGatewayRouteTablePropagations"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the route table propagations.
        public let transitGatewayRouteTablePropagations: TransitGatewayRouteTablePropagationList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(transitGatewayRouteTablePropagations: TransitGatewayRouteTablePropagationList? = nil, nextToken: String? = nil) {
            self.transitGatewayRouteTablePropagations = transitGatewayRouteTablePropagations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTablePropagations = "transitGatewayRouteTablePropagations"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "VersionNumber", location: .body(locationName: "versionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "ResponseError", location: .body(locationName: "responseError"), required: false, type: .structure)
        ]
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template.
        public let versionNumber: Int64?
        /// Information about the error.
        public let responseError: ResponseError?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, versionNumber: Int64? = nil, responseError: ResponseError? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versionNumber = versionNumber
            self.responseError = responseError
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "launchTemplateId"
            case launchTemplateName = "launchTemplateName"
            case versionNumber = "versionNumber"
            case responseError = "responseError"
        }
    }

    public enum VpcPeeringConnectionStateReasonCode: String, CustomStringConvertible, Codable {
        case initiatingRequest = "initiating-request"
        case pendingAcceptance = "pending-acceptance"
        case active = "active"
        case deleted = "deleted"
        case rejected = "rejected"
        case failed = "failed"
        case expired = "expired"
        case provisioning = "provisioning"
        case deleting = "deleting"
        public var description: String { return self.rawValue }
    }

    public struct ProductCode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodeId", location: .body(locationName: "productCode"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodeType", location: .body(locationName: "type"), required: false, type: .enum)
        ]
        /// The product code.
        public let productCodeId: String?
        /// The type of product code.
        public let productCodeType: ProductCodeValues?

        public init(productCodeId: String? = nil, productCodeType: ProductCodeValues? = nil) {
            self.productCodeId = productCodeId
            self.productCodeType = productCodeType
        }

        private enum CodingKeys: String, CodingKey {
            case productCodeId = "productCode"
            case productCodeType = "type"
        }
    }

    public struct SecurityGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SecurityGroup]?

        public init(item: [SecurityGroup]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AccountAttributeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AccountAttribute]?

        public init(item: [AccountAttribute]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum VolumeModificationState: String, CustomStringConvertible, Codable {
        case modifying = "modifying"
        case optimizing = "optimizing"
        case completed = "completed"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfacePermissionStateCode: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case granted = "granted"
        case revoking = "revoking"
        case revoked = "revoked"
        public var description: String { return self.rawValue }
    }

    public struct HistoryRecordEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventInformation", location: .body(locationName: "eventInformation"), required: false, type: .structure), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .enum), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp)
        ]
        /// Information about the event.
        public let eventInformation: EventInformation?
        /// The event type.
        public let eventType: FleetEventType?
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp?

        public init(eventInformation: EventInformation? = nil, eventType: FleetEventType? = nil, timestamp: TimeStamp? = nil) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation = "eventInformation"
            case eventType = "eventType"
            case timestamp = "timestamp"
        }
    }

    public struct ReleaseAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// [EC2-VPC] The allocation ID. Required for EC2-VPC.
        public let allocationId: String?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(allocationId: String? = nil, publicIp: String? = nil, dryRun: Bool? = nil) {
            self.allocationId = allocationId
            self.publicIp = publicIp
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case publicIp = "PublicIp"
            case dryRun = "dryRun"
        }
    }

    public struct DisassociateSubnetCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public enum SummaryStatus: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        case insufficientData = "insufficient-data"
        case notApplicable = "not-applicable"
        case initializing = "initializing"
        public var description: String { return self.rawValue }
    }

    public struct PublicIpStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIp", required: false, type: .list)
        ]
        public let publicIp: [String]?

        public init(publicIp: [String]? = nil) {
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "PublicIp"
        }
    }

    public struct SnapshotDiskContainer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Format", required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", required: false, type: .structure), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The format of the disk image being imported. Valid values: VHD | VMDK | OVA 
        public let format: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucket?
        /// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
        public let url: String?
        /// The description of the disk image being imported.
        public let description: String?

        public init(format: String? = nil, userBucket: UserBucket? = nil, url: String? = nil, description: String? = nil) {
            self.format = format
            self.userBucket = userBucket
            self.url = url
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case format = "Format"
            case userBucket = "UserBucket"
            case url = "Url"
            case description = "Description"
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnValue", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct GetReservedInstancesExchangeQuoteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "TargetConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstanceIds", location: .body(locationName: "ReservedInstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        public let targetConfigurations: TargetConfigurationRequestSet?
        /// The IDs of the Convertible Reserved Instances to exchange.
        public let reservedInstanceIds: ReservedInstanceIdSet
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(targetConfigurations: TargetConfigurationRequestSet? = nil, reservedInstanceIds: ReservedInstanceIdSet, dryRun: Bool? = nil) {
            self.targetConfigurations = targetConfigurations
            self.reservedInstanceIds = reservedInstanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case targetConfigurations = "TargetConfiguration"
            case reservedInstanceIds = "ReservedInstanceId"
            case dryRun = "DryRun"
        }
    }

    public struct AssociateSubnetCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string)
        ]
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
            case subnetId = "subnetId"
        }
    }

    public struct ReportInstanceStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .enum), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "ReasonCodes", location: .body(locationName: "reasonCode"), required: true, type: .structure), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The status of all instances listed.
        public let status: ReportStatusType
        /// One or more instances.
        public let instances: InstanceIdStringList
        /// One or more reason codes that describe the health state of your instance.    instance-stuck-in-state: My instance is stuck in a state.    unresponsive: My instance is unresponsive.    not-accepting-credentials: My instance is not accepting my credentials.    password-not-available: A password is not available for my instance.    performance-network: My instance is experiencing performance problems that I believe are network related.    performance-instance-store: My instance is experiencing performance problems that I believe are related to the instance stores.    performance-ebs-volume: My instance is experiencing performance problems that I believe are related to an EBS volume.    performance-other: My instance is experiencing performance problems.    other: [explain using the description parameter]  
        public let reasonCodes: ReasonCodesList
        /// The time at which the reported instance health state ended.
        public let endTime: TimeStamp?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The time at which the reported instance health state began.
        public let startTime: TimeStamp?
        /// Descriptive text about the health state of your instance.
        public let description: String?

        public init(status: ReportStatusType, instances: InstanceIdStringList, reasonCodes: ReasonCodesList, endTime: TimeStamp? = nil, dryRun: Bool? = nil, startTime: TimeStamp? = nil, description: String? = nil) {
            self.status = status
            self.instances = instances
            self.reasonCodes = reasonCodes
            self.endTime = endTime
            self.dryRun = dryRun
            self.startTime = startTime
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case instances = "instanceId"
            case reasonCodes = "reasonCode"
            case endTime = "endTime"
            case dryRun = "dryRun"
            case startTime = "startTime"
            case description = "description"
        }
    }

    public struct TargetGroupsConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", location: .body(locationName: "targetGroups"), required: true, type: .structure)
        ]
        /// One or more target groups.
        public let targetGroups: TargetGroups

        public init(targetGroups: TargetGroups) {
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "targetGroups"
        }
    }

    public struct GroupIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groupId", required: false, type: .list)
        ]
        public let groupId: [String]?

        public init(groupId: [String]? = nil) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
        }
    }

    public enum ServiceType: String, CustomStringConvertible, Codable {
        case interface = "Interface"
        case gateway = "Gateway"
        public var description: String { return self.rawValue }
    }

    public struct DeleteFleetSuccessItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreviousFleetState", location: .body(locationName: "previousFleetState"), required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "CurrentFleetState", location: .body(locationName: "currentFleetState"), required: false, type: .enum)
        ]
        /// The previous state of the EC2 Fleet.
        public let previousFleetState: FleetStateCode?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The current state of the EC2 Fleet.
        public let currentFleetState: FleetStateCode?

        public init(previousFleetState: FleetStateCode? = nil, fleetId: String? = nil, currentFleetState: FleetStateCode? = nil) {
            self.previousFleetState = previousFleetState
            self.fleetId = fleetId
            self.currentFleetState = currentFleetState
        }

        private enum CodingKeys: String, CodingKey {
            case previousFleetState = "previousFleetState"
            case fleetId = "fleetId"
            case currentFleetState = "currentFleetState"
        }
    }

    public struct DeleteVpcEndpointConnectionNotificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectionNotificationIds", location: .body(locationName: "ConnectionNotificationId"), required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more notification IDs.
        public let connectionNotificationIds: ValueStringList

        public init(dryRun: Bool? = nil, connectionNotificationIds: ValueStringList) {
            self.dryRun = dryRun
            self.connectionNotificationIds = connectionNotificationIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case connectionNotificationIds = "ConnectionNotificationId"
        }
    }

    public struct GetConsoleOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Latest", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// When enabled, retrieves the latest console output for the instance. Default: disabled (false)
        public let latest: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(latest: Bool? = nil, instanceId: String, dryRun: Bool? = nil) {
            self.latest = latest
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case latest = "Latest"
            case instanceId = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct FleetData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivityStatus", location: .body(locationName: "activityStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "FulfilledOnDemandCapacity", location: .body(locationName: "fulfilledOnDemandCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OnDemandOptions", location: .body(locationName: "onDemandOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "FleetState", location: .body(locationName: "fleetState"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchTemplateConfigs", location: .body(locationName: "launchTemplateConfigs"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "ReplaceUnhealthyInstances", location: .body(locationName: "replaceUnhealthyInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "TargetCapacitySpecification", location: .body(locationName: "targetCapacitySpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "fleetInstanceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "FulfilledCapacity", location: .body(locationName: "fulfilledCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "TerminateInstancesWithExpiration", location: .body(locationName: "terminateInstancesWithExpiration"), required: false, type: .boolean), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "Errors", location: .body(locationName: "errorSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SpotOptions", location: .body(locationName: "spotOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp)
        ]
        /// The progress of the EC2 Fleet. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the EC2 Fleet is decreased, the status is pending_termination while instances are terminating.
        public let activityStatus: FleetActivityStatus?
        /// The number of units fulfilled by this request compared to the set target On-Demand capacity.
        public let fulfilledOnDemandCapacity: Double?
        /// The creation date and time of the EC2 Fleet.
        public let createTime: TimeStamp?
        /// The allocation strategy of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptions?
        /// The state of the EC2 Fleet.
        public let fleetState: FleetStateCode?
        /// The launch template and overrides.
        public let launchTemplateConfigs: FleetLaunchTemplateConfigList?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// Indicates whether EC2 Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacitySpecification: TargetCapacitySpecification?
        /// Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
        public let instances: DescribeFleetsInstancesSet?
        /// The number of units fulfilled by this request compared to the set target capacity.
        public let fulfilledCapacity: Double?
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires. 
        public let terminateInstancesWithExpiration: Bool?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date. 
        public let validUntil: TimeStamp?
        /// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: maintain.
        public let `type`: FleetType?
        /// Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
        public let errors: DescribeFleetsErrorSet?
        /// The configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptions?
        /// Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The tags for an EC2 Fleet resource.
        public let tags: TagList?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately. 
        public let validFrom: TimeStamp?

        public init(activityStatus: FleetActivityStatus? = nil, fulfilledOnDemandCapacity: Double? = nil, createTime: TimeStamp? = nil, onDemandOptions: OnDemandOptions? = nil, fleetState: FleetStateCode? = nil, launchTemplateConfigs: FleetLaunchTemplateConfigList? = nil, clientToken: String? = nil, fleetId: String? = nil, replaceUnhealthyInstances: Bool? = nil, targetCapacitySpecification: TargetCapacitySpecification? = nil, instances: DescribeFleetsInstancesSet? = nil, fulfilledCapacity: Double? = nil, terminateInstancesWithExpiration: Bool? = nil, validUntil: TimeStamp? = nil, type: FleetType? = nil, errors: DescribeFleetsErrorSet? = nil, spotOptions: SpotOptions? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, tags: TagList? = nil, validFrom: TimeStamp? = nil) {
            self.activityStatus = activityStatus
            self.fulfilledOnDemandCapacity = fulfilledOnDemandCapacity
            self.createTime = createTime
            self.onDemandOptions = onDemandOptions
            self.fleetState = fleetState
            self.launchTemplateConfigs = launchTemplateConfigs
            self.clientToken = clientToken
            self.fleetId = fleetId
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.targetCapacitySpecification = targetCapacitySpecification
            self.instances = instances
            self.fulfilledCapacity = fulfilledCapacity
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.validUntil = validUntil
            self.`type` = `type`
            self.errors = errors
            self.spotOptions = spotOptions
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.tags = tags
            self.validFrom = validFrom
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus = "activityStatus"
            case fulfilledOnDemandCapacity = "fulfilledOnDemandCapacity"
            case createTime = "createTime"
            case onDemandOptions = "onDemandOptions"
            case fleetState = "fleetState"
            case launchTemplateConfigs = "launchTemplateConfigs"
            case clientToken = "clientToken"
            case fleetId = "fleetId"
            case replaceUnhealthyInstances = "replaceUnhealthyInstances"
            case targetCapacitySpecification = "targetCapacitySpecification"
            case instances = "fleetInstanceSet"
            case fulfilledCapacity = "fulfilledCapacity"
            case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
            case validUntil = "validUntil"
            case `type` = "type"
            case errors = "errorSet"
            case spotOptions = "spotOptions"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case tags = "tagSet"
            case validFrom = "validFrom"
        }
    }

    public struct LaunchTemplateVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionDescription", location: .body(locationName: "versionDescription"), required: false, type: .string), 
            AWSShapeMember(label: "VersionNumber", location: .body(locationName: "versionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "LaunchTemplateName", location: .body(locationName: "launchTemplateName"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "LaunchTemplateData", location: .body(locationName: "launchTemplateData"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateId", location: .body(locationName: "launchTemplateId"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedBy", location: .body(locationName: "createdBy"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultVersion", location: .body(locationName: "defaultVersion"), required: false, type: .boolean)
        ]
        /// The description for the version.
        public let versionDescription: String?
        /// The version number.
        public let versionNumber: Int64?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The time the version was created.
        public let createTime: TimeStamp?
        /// Information about the launch template.
        public let launchTemplateData: ResponseLaunchTemplateData?
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The principal that created the version.
        public let createdBy: String?
        /// Indicates whether the version is the default version.
        public let defaultVersion: Bool?

        public init(versionDescription: String? = nil, versionNumber: Int64? = nil, launchTemplateName: String? = nil, createTime: TimeStamp? = nil, launchTemplateData: ResponseLaunchTemplateData? = nil, launchTemplateId: String? = nil, createdBy: String? = nil, defaultVersion: Bool? = nil) {
            self.versionDescription = versionDescription
            self.versionNumber = versionNumber
            self.launchTemplateName = launchTemplateName
            self.createTime = createTime
            self.launchTemplateData = launchTemplateData
            self.launchTemplateId = launchTemplateId
            self.createdBy = createdBy
            self.defaultVersion = defaultVersion
        }

        private enum CodingKeys: String, CodingKey {
            case versionDescription = "versionDescription"
            case versionNumber = "versionNumber"
            case launchTemplateName = "launchTemplateName"
            case createTime = "createTime"
            case launchTemplateData = "launchTemplateData"
            case launchTemplateId = "launchTemplateId"
            case createdBy = "createdBy"
            case defaultVersion = "defaultVersion"
        }
    }

    public struct VpcPeeringConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "ExpirationTime", location: .body(locationName: "expirationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AccepterVpcInfo", location: .body(locationName: "accepterVpcInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "RequesterVpcInfo", location: .body(locationName: "requesterVpcInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The status of the VPC peering connection.
        public let status: VpcPeeringConnectionStateReason?
        /// The time that an unaccepted VPC peering connection will expire.
        public let expirationTime: TimeStamp?
        /// Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let accepterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let requesterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// Any tags assigned to the resource.
        public let tags: TagList?

        public init(vpcPeeringConnectionId: String? = nil, status: VpcPeeringConnectionStateReason? = nil, expirationTime: TimeStamp? = nil, accepterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, requesterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, tags: TagList? = nil) {
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.status = status
            self.expirationTime = expirationTime
            self.accepterVpcInfo = accepterVpcInfo
            self.requesterVpcInfo = requesterVpcInfo
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case status = "status"
            case expirationTime = "expirationTime"
            case accepterVpcInfo = "accepterVpcInfo"
            case requesterVpcInfo = "requesterVpcInfo"
            case tags = "tagSet"
        }
    }

    public struct DhcpOptionsIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", required: false, type: .list)
        ]
        public let dhcpOptionsId: [String]?

        public init(dhcpOptionsId: [String]? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
        }
    }

    public struct InstanceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Instance]?

        public init(item: [Instance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PublicIpv4PoolSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PublicIpv4Pool]?

        public init(item: [PublicIpv4Pool]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DhcpConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DhcpConfiguration]?

        public init(item: [DhcpConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeFleetsInstancesSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DescribeFleetsInstances]?

        public init(item: [DescribeFleetsInstances]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteFlowLogsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "FlowLogId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more flow log IDs.
        public let flowLogIds: ValueStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(flowLogIds: ValueStringList, dryRun: Bool? = nil) {
            self.flowLogIds = flowLogIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogIds = "FlowLogId"
            case dryRun = "DryRun"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservationPreference", required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationTarget", required: false, type: .structure)
        ]
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.  
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct AssociateIamInstanceProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct CreateVolumeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure)
        ]
        /// An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.    ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. The action will eventually fail. 
        public let kmsKeyId: String?
        /// The snapshot from which to create the volume.
        public let snapshotId: String?
        /// The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 50 IOPS/GiB. Range is 100 to 64,000IOPS for volumes in most regions. Maximum IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. This parameter is valid only for Provisioned IOPS SSD (io1) volumes.
        public let iops: Int32?
        /// The size of the volume, in GiBs. Constraints: 1-16,384 for gp2, 4-16,384 for io1, 500-16,384 for st1, 500-16,384 for sc1, and 1-1,024 for standard. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let size: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Availability Zone in which to create the volume. Use DescribeAvailabilityZones to list the Availability Zones that are currently available to you.
        public let availabilityZone: String
        /// The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes. Defaults: If no volume type is specified, the default is standard in us-east-1, eu-west-1, eu-central-1, us-west-2, us-west-1, sa-east-1, ap-northeast-1, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-south-1, us-gov-west-1, and cn-north-1. In all other regions, EBS defaults to gp2.
        public let volumeType: VolumeType?
        /// Specifies whether the volume should be encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or vice versa. If your AMI uses encrypted volumes, you can only launch it on supported instance types. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The tags to apply to the volume during creation.
        public let tagSpecifications: TagSpecificationList?

        public init(kmsKeyId: String? = nil, snapshotId: String? = nil, iops: Int32? = nil, size: Int32? = nil, dryRun: Bool? = nil, availabilityZone: String, volumeType: VolumeType? = nil, encrypted: Bool? = nil, tagSpecifications: TagSpecificationList? = nil) {
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.iops = iops
            self.size = size
            self.dryRun = dryRun
            self.availabilityZone = availabilityZone
            self.volumeType = volumeType
            self.encrypted = encrypted
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case snapshotId = "SnapshotId"
            case iops = "Iops"
            case size = "Size"
            case dryRun = "dryRun"
            case availabilityZone = "AvailabilityZone"
            case volumeType = "VolumeType"
            case encrypted = "encrypted"
            case tagSpecifications = "TagSpecification"
        }
    }

    public enum IamInstanceProfileAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public enum PlacementStrategy: String, CustomStringConvertible, Codable {
        case cluster = "cluster"
        case spread = "spread"
        public var description: String { return self.rawValue }
    }

    public struct DescribeElasticGpusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticGpuSet", location: .body(locationName: "elasticGpuSet"), required: false, type: .structure)
        ]
        /// The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.
        public let maxResults: Int32?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Elastic Graphics accelerators.
        public let elasticGpuSet: ElasticGpuSet?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, elasticGpuSet: ElasticGpuSet? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.elasticGpuSet = elasticGpuSet
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case elasticGpuSet = "elasticGpuSet"
        }
    }

    public struct AllocateHostsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostIdSet"), required: false, type: .structure)
        ]
        /// The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.
        public let hostIds: ResponseHostIdList?

        public init(hostIds: ResponseHostIdList? = nil) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostIdSet"
        }
    }

    public struct NetworkInterfacePrivateIpAddressList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkInterfacePrivateIpAddress]?

        public init(item: [NetworkInterfacePrivateIpAddress]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum VirtualizationType: String, CustomStringConvertible, Codable {
        case hvm = "hvm"
        case paravirtual = "paravirtual"
        public var description: String { return self.rawValue }
    }

    public struct StaleSecurityGroupSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [StaleSecurityGroup]?

        public init(item: [StaleSecurityGroup]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ScheduledInstancesIamInstanceProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The name.
        public let name: String?
        /// The Amazon Resource Name (ARN).
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct DescribeVpcEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?
        /// One or more filters.    service-name: The name of the service.    vpc-id: The ID of the VPC in which the endpoint resides.    vpc-endpoint-id: The ID of the endpoint.    vpc-endpoint-state: The state of the endpoint. (pending | available | deleting | deleted)  
        public let filters: FilterList?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// One or more endpoint IDs.
        public let vpcEndpointIds: ValueStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, vpcEndpointIds: ValueStringList? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.vpcEndpointIds = vpcEndpointIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case vpcEndpointIds = "VpcEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct AcceptVpcEndpointConnectionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the interface endpoints that were not accepted, if applicable.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct CreateRouteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string)
        ]
        /// The ID of an internet gateway or virtual private gateway attached to your VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
        public let destinationIpv6CidrBlock: String?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table for the route.
        public let routeTableId: String

        public init(gatewayId: String? = nil, instanceId: String? = nil, destinationIpv6CidrBlock: String? = nil, egressOnlyInternetGatewayId: String? = nil, destinationCidrBlock: String? = nil, natGatewayId: String? = nil, dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil, transitGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String) {
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.natGatewayId = natGatewayId
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.transitGatewayId = transitGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId = "gatewayId"
            case instanceId = "instanceId"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
            case natGatewayId = "natGatewayId"
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case transitGatewayId = "TransitGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case routeTableId = "routeTableId"
        }
    }

    public enum TransitGatewayAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public struct DeleteTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "resourceId"), required: true, type: .list), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string. If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the aws: prefix).
        public let tags: TagList?
        /// The IDs of one or more resources, separated by spaces.
        public let resources: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(tags: TagList? = nil, resources: [String], dryRun: Bool? = nil) {
            self.tags = tags
            self.resources = resources
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tag"
            case resources = "resourceId"
            case dryRun = "dryRun"
        }
    }

    public enum VolumeType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case io1 = "io1"
        case gp2 = "gp2"
        case sc1 = "sc1"
        case st1 = "st1"
        public var description: String { return self.rawValue }
    }

    public struct SnapshotDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", location: .body(locationName: "userBucket"), required: false, type: .structure), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageSize", location: .body(locationName: "diskImageSize"), required: false, type: .double), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status of the snapshot creation.
        public let status: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?
        /// The percentage of progress for the task.
        public let progress: String?
        /// The URL used to access the disk image.
        public let url: String?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// A detailed status message for the snapshot creation.
        public let statusMessage: String?
        /// The block device mapping for the snapshot.
        public let deviceName: String?
        /// A description for the snapshot.
        public let description: String?

        public init(snapshotId: String? = nil, status: String? = nil, userBucket: UserBucketDetails? = nil, progress: String? = nil, url: String? = nil, format: String? = nil, diskImageSize: Double? = nil, statusMessage: String? = nil, deviceName: String? = nil, description: String? = nil) {
            self.snapshotId = snapshotId
            self.status = status
            self.userBucket = userBucket
            self.progress = progress
            self.url = url
            self.format = format
            self.diskImageSize = diskImageSize
            self.statusMessage = statusMessage
            self.deviceName = deviceName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
            case status = "status"
            case userBucket = "userBucket"
            case progress = "progress"
            case url = "url"
            case format = "format"
            case diskImageSize = "diskImageSize"
            case statusMessage = "statusMessage"
            case deviceName = "deviceName"
            case description = "description"
        }
    }

    public struct DescribeScheduledInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceSet", location: .body(locationName: "scheduledInstanceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the Scheduled Instances.
        public let scheduledInstanceSet: ScheduledInstanceSet?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(scheduledInstanceSet: ScheduledInstanceSet? = nil, nextToken: String? = nil) {
            self.scheduledInstanceSet = scheduledInstanceSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceSet = "scheduledInstanceSet"
            case nextToken = "nextToken"
        }
    }

    public struct ClassicLoadBalancersConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClassicLoadBalancers", location: .body(locationName: "classicLoadBalancers"), required: true, type: .structure)
        ]
        /// One or more Classic Load Balancers.
        public let classicLoadBalancers: ClassicLoadBalancers

        public init(classicLoadBalancers: ClassicLoadBalancers) {
            self.classicLoadBalancers = classicLoadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancers = "classicLoadBalancers"
        }
    }

    public struct DescribeInstanceCreditSpecificationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int32?
        /// One or more filters.    instance-id - The ID of the instance.  
        public let filters: FilterList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs.
        public let instanceIds: InstanceIdStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, instanceIds: InstanceIdStringList? = nil, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case instanceIds = "InstanceId"
            case dryRun = "DryRun"
        }
    }

    public struct BundleTaskError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct PurchaseScheduledInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "PurchaseRequests", location: .body(locationName: "PurchaseRequest"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// One or more purchase requests.
        public let purchaseRequests: PurchaseRequestSet
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientToken: String? = nil, purchaseRequests: PurchaseRequestSet, dryRun: Bool? = nil) {
            self.clientToken = clientToken
            self.purchaseRequests = purchaseRequests
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case purchaseRequests = "PurchaseRequest"
            case dryRun = "DryRun"
        }
    }

    public struct GroupIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [GroupIdentifier]?

        public init(item: [GroupIdentifier]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSpotFleetInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, spotFleetRequestId: String, dryRun: Bool? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.spotFleetRequestId = spotFleetRequestId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case spotFleetRequestId = "spotFleetRequestId"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcPeeringConnectionId: String, dryRun: Bool? = nil) {
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case dryRun = "dryRun"
        }
    }

    public struct ModifyFpgaImageAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageAttribute", location: .body(locationName: "fpgaImageAttribute"), required: false, type: .structure)
        ]
        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute = "fpgaImageAttribute"
        }
    }

    public struct AcceptVpcPeeringConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC peering connection. You must specify this parameter in the request.
        public let vpcPeeringConnectionId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcPeeringConnectionId: String? = nil, dryRun: Bool? = nil) {
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case dryRun = "dryRun"
        }
    }

    public struct EgressOnlyInternetGatewayIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSpotPriceHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "ProductDescriptions", location: .body(locationName: "ProductDescription"), required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceTypes", location: .body(locationName: "InstanceType"), required: false, type: .list)
        ]
        /// One or more filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The time stamp of the Spot price history, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). You can use wildcards (* and ?). Greater than or less than comparison is not supported.  
        public let filters: FilterList?
        /// The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let endTime: TimeStamp?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// Filters the results by the specified basic product descriptions.
        public let productDescriptions: [String]?
        /// Filters the results by the specified Availability Zone.
        public let availabilityZone: String?
        /// The token for the next set of results.
        public let nextToken: String?
        /// Filters the results by the specified instance types.
        public let instanceTypes: [InstanceType]?

        public init(filters: FilterList? = nil, endTime: TimeStamp? = nil, dryRun: Bool? = nil, startTime: TimeStamp? = nil, maxResults: Int32? = nil, productDescriptions: [String]? = nil, availabilityZone: String? = nil, nextToken: String? = nil, instanceTypes: [InstanceType]? = nil) {
            self.filters = filters
            self.endTime = endTime
            self.dryRun = dryRun
            self.startTime = startTime
            self.maxResults = maxResults
            self.productDescriptions = productDescriptions
            self.availabilityZone = availabilityZone
            self.nextToken = nextToken
            self.instanceTypes = instanceTypes
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case endTime = "endTime"
            case dryRun = "dryRun"
            case startTime = "startTime"
            case maxResults = "maxResults"
            case productDescriptions = "ProductDescription"
            case availabilityZone = "availabilityZone"
            case nextToken = "nextToken"
            case instanceTypes = "InstanceType"
        }
    }

    public struct RestoreAddressToClassicResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]
        /// The move status for the IP address.
        public let status: Status?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(status: Status? = nil, publicIp: String? = nil) {
            self.status = status
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case publicIp = "publicIp"
        }
    }

    public struct CreateDefaultSubnetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", location: .body(locationName: "subnet"), required: false, type: .structure)
        ]
        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "subnet"
        }
    }

    public struct UserIdGroupPairSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UserIdGroupPair]?

        public init(item: [UserIdGroupPair]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum CapacityReservationInstancePlatform: String, CustomStringConvertible, Codable {
        case linuxUnix = "Linux/UNIX"
        case redHatEnterpriseLinux = "Red Hat Enterprise Linux"
        case suseLinux = "SUSE Linux"
        case windows = "Windows"
        case windowsWithSqlServer = "Windows with SQL Server"
        case windowsWithSqlServerEnterprise = "Windows with SQL Server Enterprise"
        case windowsWithSqlServerStandard = "Windows with SQL Server Standard"
        case windowsWithSqlServerWeb = "Windows with SQL Server Web"
        public var description: String { return self.rawValue }
    }

    public struct DeleteVpnGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpnGatewayId: String, dryRun: Bool? = nil) {
            self.vpnGatewayId = vpnGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGatewayId = "VpnGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct ScheduledInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "TermStartDate", location: .body(locationName: "termStartDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TotalScheduledInstanceHours", location: .body(locationName: "totalScheduledInstanceHours"), required: false, type: .integer), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "PreviousSlotEndTime", location: .body(locationName: "previousSlotEndTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Recurrence", location: .body(locationName: "recurrence"), required: false, type: .structure), 
            AWSShapeMember(label: "TermEndDate", location: .body(locationName: "termEndDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SlotDurationInHours", location: .body(locationName: "slotDurationInHours"), required: false, type: .integer), 
            AWSShapeMember(label: "ScheduledInstanceId", location: .body(locationName: "scheduledInstanceId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkPlatform", location: .body(locationName: "networkPlatform"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "NextSlotStartTime", location: .body(locationName: "nextSlotStartTime"), required: false, type: .timestamp)
        ]
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: String?
        /// The start date for the Scheduled Instance.
        public let termStartDate: TimeStamp?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int32?
        /// The date when the Scheduled Instance was purchased.
        public let createDate: TimeStamp?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The number of instances.
        public let instanceCount: Int32?
        /// The time that the previous schedule ended or will end.
        public let previousSlotEndTime: TimeStamp?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The end date for the Scheduled Instance.
        public let termEndDate: TimeStamp?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int32?
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The time for the next schedule to start.
        public let nextSlotStartTime: TimeStamp?

        public init(availabilityZone: String? = nil, instanceType: String? = nil, termStartDate: TimeStamp? = nil, totalScheduledInstanceHours: Int32? = nil, createDate: TimeStamp? = nil, hourlyPrice: String? = nil, instanceCount: Int32? = nil, previousSlotEndTime: TimeStamp? = nil, recurrence: ScheduledInstanceRecurrence? = nil, termEndDate: TimeStamp? = nil, slotDurationInHours: Int32? = nil, scheduledInstanceId: String? = nil, networkPlatform: String? = nil, platform: String? = nil, nextSlotStartTime: TimeStamp? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.termStartDate = termStartDate
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
            self.createDate = createDate
            self.hourlyPrice = hourlyPrice
            self.instanceCount = instanceCount
            self.previousSlotEndTime = previousSlotEndTime
            self.recurrence = recurrence
            self.termEndDate = termEndDate
            self.slotDurationInHours = slotDurationInHours
            self.scheduledInstanceId = scheduledInstanceId
            self.networkPlatform = networkPlatform
            self.platform = platform
            self.nextSlotStartTime = nextSlotStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case instanceType = "instanceType"
            case termStartDate = "termStartDate"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
            case createDate = "createDate"
            case hourlyPrice = "hourlyPrice"
            case instanceCount = "instanceCount"
            case previousSlotEndTime = "previousSlotEndTime"
            case recurrence = "recurrence"
            case termEndDate = "termEndDate"
            case slotDurationInHours = "slotDurationInHours"
            case scheduledInstanceId = "scheduledInstanceId"
            case networkPlatform = "networkPlatform"
            case platform = "platform"
            case nextSlotStartTime = "nextSlotStartTime"
        }
    }

    public struct ImageAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchPermissions", location: .body(locationName: "launchPermission"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure)
        ]
        /// The ID of the AMI.
        public let imageId: String?
        /// One or more block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?
        /// One or more launch permissions.
        public let launchPermissions: LaunchPermissionList?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// One or more product codes.
        public let productCodes: ProductCodeList?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// A description for the AMI.
        public let description: AttributeValue?

        public init(imageId: String? = nil, blockDeviceMappings: BlockDeviceMappingList? = nil, sriovNetSupport: AttributeValue? = nil, launchPermissions: LaunchPermissionList? = nil, kernelId: AttributeValue? = nil, productCodes: ProductCodeList? = nil, ramdiskId: AttributeValue? = nil, description: AttributeValue? = nil) {
            self.imageId = imageId
            self.blockDeviceMappings = blockDeviceMappings
            self.sriovNetSupport = sriovNetSupport
            self.launchPermissions = launchPermissions
            self.kernelId = kernelId
            self.productCodes = productCodes
            self.ramdiskId = ramdiskId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
            case blockDeviceMappings = "blockDeviceMapping"
            case sriovNetSupport = "sriovNetSupport"
            case launchPermissions = "launchPermission"
            case kernelId = "kernel"
            case productCodes = "productCodes"
            case ramdiskId = "ramdisk"
            case description = "description"
        }
    }

    public struct ImageDiskContainerList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImageDiskContainer]?

        public init(item: [ImageDiskContainer]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ImageTypeValues: String, CustomStringConvertible, Codable {
        case machine = "machine"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        public var description: String { return self.rawValue }
    }

    public enum VpcAttributeName: String, CustomStringConvertible, Codable {
        case enablednssupport = "enableDnsSupport"
        case enablednshostnames = "enableDnsHostnames"
        public var description: String { return self.rawValue }
    }

    public struct CreditSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CpuCredits", location: .body(locationName: "cpuCredits"), required: false, type: .string)
        ]
        /// The credit option for CPU usage of a T2 or T3 instance. Valid values are standard and unlimited.
        public let cpuCredits: String?

        public init(cpuCredits: String? = nil) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "cpuCredits"
        }
    }

    public struct TerminateInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct AttachClassicLinkVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CreateCustomerGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGateway", location: .body(locationName: "customerGateway"), required: false, type: .structure)
        ]
        /// Information about the customer gateway.
        public let customerGateway: CustomerGateway?

        public init(customerGateway: CustomerGateway? = nil) {
            self.customerGateway = customerGateway
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateway = "customerGateway"
        }
    }

    public struct DeleteVpcRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case dryRun = "dryRun"
        }
    }

    public struct EbsBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer)
        ]
        /// Identifier (key ID, key alias, ID ARN, or alias ARN) for a user-managed CMK under which the EBS volume is encrypted. This parameter is only supported on BlockDeviceMapping objects called by RunInstances, RequestSpotFleet, and RequestSpotInstances.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The volume type: gp2, io1, st1, sc1, or standard. Default: standard 
        public let volumeType: VolumeType?
        /// The size of the volume, in GiB. Constraints: 1-16384 for General Purpose SSD (gp2), 4-16384 for Provisioned IOPS SSD (io1), 500-16384 for Throughput Optimized HDD (st1), 500-16384 for Cold HDD (sc1), and 1-1024 for Magnetic (standard) volumes. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption.  If you are creating a volume from a snapshot, you cannot specify an encryption value. This is because only blank volumes can be encrypted on creation. If you are creating a snapshot from an existing EBS volume, you cannot specify an encryption value that differs from that of the EBS volume. We recommend that you omit the encryption value from the block device mappings when creating an image from an instance.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports. For io1, this represents the number of IOPS that are provisioned for the volume. For gp2, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraints: Range is 100-10,000 IOPS for gp2 volumes and 100 to 64,000IOPS for io1 volumes in most regions. Maximum io1IOPS of 64,000 is guaranteed only on Nitro-based instances. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int32?

        public init(kmsKeyId: String? = nil, snapshotId: String? = nil, deleteOnTermination: Bool? = nil, volumeType: VolumeType? = nil, volumeSize: Int32? = nil, encrypted: Bool? = nil, iops: Int32? = nil) {
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.volumeType = volumeType
            self.volumeSize = volumeSize
            self.encrypted = encrypted
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case snapshotId = "snapshotId"
            case deleteOnTermination = "deleteOnTermination"
            case volumeType = "volumeType"
            case volumeSize = "volumeSize"
            case encrypted = "encrypted"
            case iops = "iops"
        }
    }

    public struct ResponseHostIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateSubnetResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", location: .body(locationName: "subnet"), required: false, type: .structure)
        ]
        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "subnet"
        }
    }

    public struct NetworkAclEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "icmpTypeCode"), required: false, type: .structure), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: false, type: .enum), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string)
        ]
        /// ICMP protocol: The ICMP type and code.
        public let icmpTypeCode: IcmpTypeCode?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        public let portRange: PortRange?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction?
        /// The rule number for the entry. ACL entries are processed in ascending order by rule number.
        public let ruleNumber: Int32?
        /// The protocol number. A value of "-1" means all protocols.
        public let `protocol`: String?
        /// The IPv4 network range to allow or deny, in CIDR notation.
        public let cidrBlock: String?
        /// Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
        public let egress: Bool?
        /// The IPv6 network range to allow or deny, in CIDR notation.
        public let ipv6CidrBlock: String?

        public init(icmpTypeCode: IcmpTypeCode? = nil, portRange: PortRange? = nil, ruleAction: RuleAction? = nil, ruleNumber: Int32? = nil, protocol: String? = nil, cidrBlock: String? = nil, egress: Bool? = nil, ipv6CidrBlock: String? = nil) {
            self.icmpTypeCode = icmpTypeCode
            self.portRange = portRange
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.`protocol` = `protocol`
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case icmpTypeCode = "icmpTypeCode"
            case portRange = "portRange"
            case ruleAction = "ruleAction"
            case ruleNumber = "ruleNumber"
            case `protocol` = "protocol"
            case cidrBlock = "cidrBlock"
            case egress = "egress"
            case ipv6CidrBlock = "ipv6CidrBlock"
        }
    }

    public struct NetworkInterfaceAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceOwnerId", location: .body(locationName: "instanceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string)
        ]
        /// The timestamp indicating when the attachment initiated.
        public let attachTime: TimeStamp?
        /// The ID of the instance.
        public let instanceId: String?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The AWS account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The device index of the network interface attachment on the instance.
        public let deviceIndex: Int32?
        /// The ID of the network interface attachment.
        public let attachmentId: String?

        public init(attachTime: TimeStamp? = nil, instanceId: String? = nil, status: AttachmentStatus? = nil, instanceOwnerId: String? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int32? = nil, attachmentId: String? = nil) {
            self.attachTime = attachTime
            self.instanceId = instanceId
            self.status = status
            self.instanceOwnerId = instanceOwnerId
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.attachmentId = attachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime = "attachTime"
            case instanceId = "instanceId"
            case status = "status"
            case instanceOwnerId = "instanceOwnerId"
            case deleteOnTermination = "deleteOnTermination"
            case deviceIndex = "deviceIndex"
            case attachmentId = "attachmentId"
        }
    }

    public struct DeleteNetworkAclEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The rule number of the entry to delete.
        public let ruleNumber: Int32
        /// Indicates whether the rule is an egress rule.
        public let egress: Bool
        /// The ID of the network ACL.
        public let networkAclId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(ruleNumber: Int32, egress: Bool, networkAclId: String, dryRun: Bool? = nil) {
            self.ruleNumber = ruleNumber
            self.egress = egress
            self.networkAclId = networkAclId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case ruleNumber = "ruleNumber"
            case egress = "egress"
            case networkAclId = "networkAclId"
            case dryRun = "dryRun"
        }
    }

    public enum FleetType: String, CustomStringConvertible, Codable {
        case request = "request"
        case maintain = "maintain"
        case instant = "instant"
        public var description: String { return self.rawValue }
    }

    public struct CreateRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public struct DisassociateVpcCidrBlockResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlockAssociation", location: .body(locationName: "cidrBlockAssociation"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?

        public init(vpcId: String? = nil, cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil) {
            self.vpcId = vpcId
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case cidrBlockAssociation = "cidrBlockAssociation"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case customerGateway = "customer-gateway"
        case dedicatedHost = "dedicated-host"
        case dhcpOptions = "dhcp-options"
        case elasticIp = "elastic-ip"
        case fleet = "fleet"
        case fpgaImage = "fpga-image"
        case image = "image"
        case instance = "instance"
        case internetGateway = "internet-gateway"
        case launchTemplate = "launch-template"
        case natgateway = "natgateway"
        case networkAcl = "network-acl"
        case networkInterface = "network-interface"
        case reservedInstances = "reserved-instances"
        case routeTable = "route-table"
        case securityGroup = "security-group"
        case snapshot = "snapshot"
        case spotInstancesRequest = "spot-instances-request"
        case subnet = "subnet"
        case transitGateway = "transit-gateway"
        case transitGatewayAttachment = "transit-gateway-attachment"
        case transitGatewayRouteTable = "transit-gateway-route-table"
        case volume = "volume"
        case vpc = "vpc"
        case vpcPeeringConnection = "vpc-peering-connection"
        case vpnConnection = "vpn-connection"
        case vpnGateway = "vpn-gateway"
        public var description: String { return self.rawValue }
    }

    public struct TargetConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer)
        ]
        /// The Convertible Reserved Instance offering ID.
        public let offeringId: String
        /// The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int32?

        public init(offeringId: String, instanceCount: Int32? = nil) {
            self.offeringId = offeringId
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case offeringId = "OfferingId"
            case instanceCount = "InstanceCount"
        }
    }

    public enum VpcCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        case failing = "failing"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct ConnectionNotification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceId", location: .body(locationName: "serviceId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionNotificationArn", location: .body(locationName: "connectionNotificationArn"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionEvents", location: .body(locationName: "connectionEvents"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcEndpointId", location: .body(locationName: "vpcEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionNotificationState", location: .body(locationName: "connectionNotificationState"), required: false, type: .enum), 
            AWSShapeMember(label: "ConnectionNotificationId", location: .body(locationName: "connectionNotificationId"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionNotificationType", location: .body(locationName: "connectionNotificationType"), required: false, type: .enum)
        ]
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The ARN of the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// The events for the notification. Valid values are Accept, Connect, Delete, and Reject.
        public let connectionEvents: ValueStringList?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The state of the notification.
        public let connectionNotificationState: ConnectionNotificationState?
        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// The type of notification.
        public let connectionNotificationType: ConnectionNotificationType?

        public init(serviceId: String? = nil, connectionNotificationArn: String? = nil, connectionEvents: ValueStringList? = nil, vpcEndpointId: String? = nil, connectionNotificationState: ConnectionNotificationState? = nil, connectionNotificationId: String? = nil, connectionNotificationType: ConnectionNotificationType? = nil) {
            self.serviceId = serviceId
            self.connectionNotificationArn = connectionNotificationArn
            self.connectionEvents = connectionEvents
            self.vpcEndpointId = vpcEndpointId
            self.connectionNotificationState = connectionNotificationState
            self.connectionNotificationId = connectionNotificationId
            self.connectionNotificationType = connectionNotificationType
        }

        private enum CodingKeys: String, CodingKey {
            case serviceId = "serviceId"
            case connectionNotificationArn = "connectionNotificationArn"
            case connectionEvents = "connectionEvents"
            case vpcEndpointId = "vpcEndpointId"
            case connectionNotificationState = "connectionNotificationState"
            case connectionNotificationId = "connectionNotificationId"
            case connectionNotificationType = "connectionNotificationType"
        }
    }

    public struct VolumeAttachmentList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeAttachment]?

        public init(item: [VolumeAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstanceIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: false, type: .list)
        ]
        public let instanceId: [String]?

        public init(instanceId: [String]? = nil) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    public struct CreateInternetGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public enum DomainType: String, CustomStringConvertible, Codable {
        case vpc = "vpc"
        case standard = "standard"
        public var description: String { return self.rawValue }
    }

    public struct CreateVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpc", location: .body(locationName: "vpc"), required: false, type: .structure)
        ]
        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc = "vpc"
        }
    }

    public struct DescribeInternetGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGateways", location: .body(locationName: "internetGatewaySet"), required: false, type: .structure)
        ]
        /// Information about one or more internet gateways.
        public let internetGateways: InternetGatewayList?

        public init(internetGateways: InternetGatewayList? = nil) {
            self.internetGateways = internetGateways
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateways = "internetGatewaySet"
        }
    }

    public struct DescribeHostReservationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostReservationSet", location: .body(locationName: "hostReservationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Details about the reservation's configuration.
        public let hostReservationSet: HostReservationSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hostReservationSet: HostReservationSet? = nil, nextToken: String? = nil) {
            self.hostReservationSet = hostReservationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hostReservationSet = "hostReservationSet"
            case nextToken = "nextToken"
        }
    }

    public enum DefaultRouteTablePropagationValue: String, CustomStringConvertible, Codable {
        case enable = "enable"
        case disable = "disable"
        public var description: String { return self.rawValue }
    }

    public struct BlobAttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .blob)
        ]
        public let value: Data?

        public init(value: Data? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct ImportTaskIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportTaskId", required: false, type: .list)
        ]
        public let importTaskId: [String]?

        public init(importTaskId: [String]? = nil) {
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case importTaskId = "ImportTaskId"
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentPropagations", location: .body(locationName: "transitGatewayAttachmentPropagations"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the propagation route tables.
        public let transitGatewayAttachmentPropagations: TransitGatewayAttachmentPropagationList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(transitGatewayAttachmentPropagations: TransitGatewayAttachmentPropagationList? = nil, nextToken: String? = nil) {
            self.transitGatewayAttachmentPropagations = transitGatewayAttachmentPropagations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentPropagations = "transitGatewayAttachmentPropagations"
            case nextToken = "nextToken"
        }
    }

    public struct AssociateAddressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowReassociation", location: .body(locationName: "allowReassociation"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]
        /// [EC2-VPC] The allocation ID. This is required for EC2-VPC.
        public let allocationId: String?
        /// The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// [EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
        public let privateIpAddress: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
        public let allowReassociation: Bool?
        /// The Elastic IP address. This is required for EC2-Classic.
        public let publicIp: String?
        /// [EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.
        public let networkInterfaceId: String?

        public init(allocationId: String? = nil, instanceId: String? = nil, privateIpAddress: String? = nil, dryRun: Bool? = nil, allowReassociation: Bool? = nil, publicIp: String? = nil, networkInterfaceId: String? = nil) {
            self.allocationId = allocationId
            self.instanceId = instanceId
            self.privateIpAddress = privateIpAddress
            self.dryRun = dryRun
            self.allowReassociation = allowReassociation
            self.publicIp = publicIp
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case instanceId = "InstanceId"
            case privateIpAddress = "privateIpAddress"
            case dryRun = "dryRun"
            case allowReassociation = "allowReassociation"
            case publicIp = "PublicIp"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public enum ConversionTaskState: String, CustomStringConvertible, Codable {
        case active = "active"
        case cancelling = "cancelling"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public struct ModifyHostsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: true, type: .enum), 
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: true, type: .structure)
        ]
        /// Specify whether to enable or disable auto-placement.
        public let autoPlacement: AutoPlacement
        /// The IDs of the Dedicated Hosts to modify.
        public let hostIds: RequestHostIdList

        public init(autoPlacement: AutoPlacement, hostIds: RequestHostIdList) {
            self.autoPlacement = autoPlacement
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case autoPlacement = "autoPlacement"
            case hostIds = "hostId"
        }
    }

    public struct AssociateVpcCidrBlockRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "AmazonProvidedIpv6CidrBlock", location: .body(locationName: "amazonProvidedIpv6CidrBlock"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// An IPv4 CIDR block to associate with the VPC.
        public let cidrBlock: String?
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?

        public init(vpcId: String, cidrBlock: String? = nil, amazonProvidedIpv6CidrBlock: Bool? = nil) {
            self.vpcId = vpcId
            self.cidrBlock = cidrBlock
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case cidrBlock = "CidrBlock"
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
        }
    }

    public struct CancelSpotFleetRequestsErrorItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: true, type: .structure), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The error.
        public let error: CancelSpotFleetRequestsError
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String

        public init(error: CancelSpotFleetRequestsError, spotFleetRequestId: String) {
            self.error = error
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct Ipv6CidrBlockSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Ipv6CidrBlock]?

        public init(item: [Ipv6CidrBlock]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VpnConnection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "VpnGatewayId", location: .body(locationName: "vpnGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "VpnConnectionId", location: .body(locationName: "vpnConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "CustomerGatewayConfiguration", location: .body(locationName: "customerGatewayConfiguration"), required: false, type: .string), 
            AWSShapeMember(label: "Category", location: .body(locationName: "category"), required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayId", location: .body(locationName: "transitGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "CustomerGatewayId", location: .body(locationName: "customerGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routes"), required: false, type: .structure), 
            AWSShapeMember(label: "VgwTelemetry", location: .body(locationName: "vgwTelemetry"), required: false, type: .structure)
        ]
        /// Any tags assigned to the VPN connection.
        public let tags: TagList?
        /// The VPN connection options.
        public let options: VpnConnectionOptions?
        /// The type of VPN connection.
        public let `type`: GatewayType?
        /// The ID of the virtual private gateway at the AWS side of the VPN connection.
        public let vpnGatewayId: String?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?
        /// The current state of the VPN connection.
        public let state: VpnState?
        /// The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the CreateVpnConnection response; however, it's present in the DescribeVpnConnections response only if the VPN connection is in the pending or available state.
        public let customerGatewayConfiguration: String?
        /// The category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection. For more information, see AWS Managed VPN Categories in the Amazon Virtual Private Cloud User Guide.
        public let category: String?
        /// The ID of the transit gateway associated with the VPN connection.
        public let transitGatewayId: String?
        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// The static routes associated with the VPN connection.
        public let routes: VpnStaticRouteList?
        /// Information about the VPN tunnel.
        public let vgwTelemetry: VgwTelemetryList?

        public init(tags: TagList? = nil, options: VpnConnectionOptions? = nil, type: GatewayType? = nil, vpnGatewayId: String? = nil, vpnConnectionId: String? = nil, state: VpnState? = nil, customerGatewayConfiguration: String? = nil, category: String? = nil, transitGatewayId: String? = nil, customerGatewayId: String? = nil, routes: VpnStaticRouteList? = nil, vgwTelemetry: VgwTelemetryList? = nil) {
            self.tags = tags
            self.options = options
            self.`type` = `type`
            self.vpnGatewayId = vpnGatewayId
            self.vpnConnectionId = vpnConnectionId
            self.state = state
            self.customerGatewayConfiguration = customerGatewayConfiguration
            self.category = category
            self.transitGatewayId = transitGatewayId
            self.customerGatewayId = customerGatewayId
            self.routes = routes
            self.vgwTelemetry = vgwTelemetry
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case options = "options"
            case `type` = "type"
            case vpnGatewayId = "vpnGatewayId"
            case vpnConnectionId = "vpnConnectionId"
            case state = "state"
            case customerGatewayConfiguration = "customerGatewayConfiguration"
            case category = "category"
            case transitGatewayId = "transitGatewayId"
            case customerGatewayId = "customerGatewayId"
            case routes = "routes"
            case vgwTelemetry = "vgwTelemetry"
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CreateCapacityReservationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CapacityReservation", location: .body(locationName: "capacityReservation"), required: false, type: .structure)
        ]
        /// Information about the Capacity Reservation.
        public let capacityReservation: CapacityReservation?

        public init(capacityReservation: CapacityReservation? = nil) {
            self.capacityReservation = capacityReservation
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservation = "capacityReservation"
        }
    }

    public enum FpgaImageAttributeName: String, CustomStringConvertible, Codable {
        case description = "description"
        case name = "name"
        case loadpermission = "loadPermission"
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case instancechange = "instanceChange"
        case fleetrequestchange = "fleetRequestChange"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public enum InstanceAttributeName: String, CustomStringConvertible, Codable {
        case instancetype = "instanceType"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        case userdata = "userData"
        case disableapitermination = "disableApiTermination"
        case instanceinitiatedshutdownbehavior = "instanceInitiatedShutdownBehavior"
        case rootdevicename = "rootDeviceName"
        case blockdevicemapping = "blockDeviceMapping"
        case productcodes = "productCodes"
        case sourcedestcheck = "sourceDestCheck"
        case groupset = "groupSet"
        case ebsoptimized = "ebsOptimized"
        case sriovnetsupport = "sriovNetSupport"
        case enasupport = "enaSupport"
        public var description: String { return self.rawValue }
    }

    public struct ReservedInstancesListing: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCounts", location: .body(locationName: "instanceCounts"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UpdateDate", location: .body(locationName: "updateDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "PriceSchedules", location: .body(locationName: "priceSchedules"), required: false, type: .structure), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: false, type: .string)
        ]
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The status of the Reserved Instance listing.
        public let status: ListingStatus?
        /// The number of instances in this state.
        public let instanceCounts: InstanceCountList?
        /// Any tags assigned to the resource.
        public let tags: TagList?
        /// The last modified timestamp of the listing.
        public let updateDate: TimeStamp?
        /// The price of the Reserved Instance listing.
        public let priceSchedules: PriceScheduleList?
        /// The time the listing was created.
        public let createDate: TimeStamp?
        /// The reason for the current status of the Reserved Instance listing. The response can be blank.
        public let statusMessage: String?
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String?

        public init(reservedInstancesId: String? = nil, clientToken: String? = nil, status: ListingStatus? = nil, instanceCounts: InstanceCountList? = nil, tags: TagList? = nil, updateDate: TimeStamp? = nil, priceSchedules: PriceScheduleList? = nil, createDate: TimeStamp? = nil, statusMessage: String? = nil, reservedInstancesListingId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
            self.clientToken = clientToken
            self.status = status
            self.instanceCounts = instanceCounts
            self.tags = tags
            self.updateDate = updateDate
            self.priceSchedules = priceSchedules
            self.createDate = createDate
            self.statusMessage = statusMessage
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
            case clientToken = "clientToken"
            case status = "status"
            case instanceCounts = "instanceCounts"
            case tags = "tagSet"
            case updateDate = "updateDate"
            case priceSchedules = "priceSchedules"
            case createDate = "createDate"
            case statusMessage = "statusMessage"
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct LicenseList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LicenseConfiguration]?

        public init(item: [LicenseConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ResetFpgaImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String
        /// The attribute.
        public let attribute: ResetFpgaImageAttributeName?

        public init(dryRun: Bool? = nil, fpgaImageId: String, attribute: ResetFpgaImageAttributeName? = nil) {
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
            case attribute = "Attribute"
        }
    }

    public struct DescribeVpcsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcIds", location: .body(locationName: "VpcId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more VPC IDs. Default: Describes all your VPCs.
        public let vpcIds: VpcIdStringList?
        /// One or more filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    isDefault - Indicates whether the VPC is the default VPC.    owner-id - The ID of the AWS account that owns the VPC.    state - The state of the VPC (pending | available).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcIds: VpcIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.vpcIds = vpcIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcIds = "VpcId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct ElasticInferenceAccelerators: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ElasticInferenceAccelerator]?

        public init(item: [ElasticInferenceAccelerator]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyInstancePlacementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum)
        ]
        /// The ID of the instance that you are modifying.
        public let instanceId: String
        /// The ID of the Dedicated Host with which to associate the instance.
        public let hostId: String?
        /// The affinity setting for the instance.
        public let affinity: Affinity?
        /// The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of default. For cluster placement groups, the instance must have a tenancy of default or dedicated. To remove an instance from a placement group, specify an empty string ("").
        public let groupName: String?
        /// The tenancy for the instance.
        public let tenancy: HostTenancy?

        public init(instanceId: String, hostId: String? = nil, affinity: Affinity? = nil, groupName: String? = nil, tenancy: HostTenancy? = nil) {
            self.instanceId = instanceId
            self.hostId = hostId
            self.affinity = affinity
            self.groupName = groupName
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case hostId = "hostId"
            case affinity = "affinity"
            case groupName = "GroupName"
            case tenancy = "tenancy"
        }
    }

    public struct DisassociateTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure)
        ]
        /// Information about the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
        }
    }

    public struct SpotOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceInterruptionBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "SingleInstanceType", required: false, type: .boolean), 
            AWSShapeMember(label: "MinTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "AllocationStrategy", required: false, type: .enum), 
            AWSShapeMember(label: "InstancePoolsToUseCount", required: false, type: .integer)
        ]
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.
        public let singleInstanceType: Bool?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int32?
        /// Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is lowestPrice.
        public let allocationStrategy: SpotAllocationStrategy?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
        public let instancePoolsToUseCount: Int32?

        public init(instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, singleInstanceType: Bool? = nil, minTargetCapacity: Int32? = nil, allocationStrategy: SpotAllocationStrategy? = nil, instancePoolsToUseCount: Int32? = nil) {
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.singleInstanceType = singleInstanceType
            self.minTargetCapacity = minTargetCapacity
            self.allocationStrategy = allocationStrategy
            self.instancePoolsToUseCount = instancePoolsToUseCount
        }

        private enum CodingKeys: String, CodingKey {
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case singleInstanceType = "SingleInstanceType"
            case minTargetCapacity = "MinTargetCapacity"
            case allocationStrategy = "AllocationStrategy"
            case instancePoolsToUseCount = "InstancePoolsToUseCount"
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// One or more filters. The possible values are:    transit-gateway-route-table-id - The ID of the transit gateway route table.  
        public let filters: FilterList?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, transitGatewayAttachmentId: String, dryRun: Bool? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case dryRun = "DryRun"
        }
    }

    public struct UnmonitorInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceMonitorings", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// The monitoring information.
        public let instanceMonitorings: InstanceMonitoringList?

        public init(instanceMonitorings: InstanceMonitoringList? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public enum InstanceMatchCriteria: String, CustomStringConvertible, Codable {
        case open = "open"
        case targeted = "targeted"
        public var description: String { return self.rawValue }
    }

    public struct StartInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartingInstances", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// Information about one or more started instances.
        public let startingInstances: InstanceStateChangeList?

        public init(startingInstances: InstanceStateChangeList? = nil) {
            self.startingInstances = startingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case startingInstances = "instancesSet"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnCode", location: .body(locationName: "returnCode"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnCode: Bool?

        public init(returnCode: Bool? = nil) {
            self.returnCode = returnCode
        }

        private enum CodingKeys: String, CodingKey {
            case returnCode = "returnCode"
        }
    }

    public struct DescribeNatGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NatGatewayIds", location: .body(locationName: "NatGatewayId"), required: false, type: .structure)
        ]
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value specified is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.  
        public let filter: FilterList?
        /// One or more NAT gateway IDs.
        public let natGatewayIds: ValueStringList?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: FilterList? = nil, natGatewayIds: ValueStringList? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
            self.natGatewayIds = natGatewayIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case filter = "Filter"
            case natGatewayIds = "NatGatewayId"
        }
    }

    public struct ModifyNetworkInterfaceAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]
        /// Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
        public let groups: SecurityGroupIdStringList?
        /// Indicates whether source/destination checking is enabled. A value of true means checking is enabled, and false means checking is disabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.
        public let attachment: NetworkInterfaceAttachmentChanges?
        /// A description for the network interface.
        public let description: AttributeValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(groups: SecurityGroupIdStringList? = nil, sourceDestCheck: AttributeBooleanValue? = nil, attachment: NetworkInterfaceAttachmentChanges? = nil, description: AttributeValue? = nil, dryRun: Bool? = nil, networkInterfaceId: String) {
            self.groups = groups
            self.sourceDestCheck = sourceDestCheck
            self.attachment = attachment
            self.description = description
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "SecurityGroupId"
            case sourceDestCheck = "sourceDestCheck"
            case attachment = "attachment"
            case description = "description"
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public enum ReservationState: String, CustomStringConvertible, Codable {
        case paymentPending = "payment-pending"
        case paymentFailed = "payment-failed"
        case active = "active"
        case retired = "retired"
        public var description: String { return self.rawValue }
    }

    public struct VpnConnectionIdStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnectionId", required: false, type: .list)
        ]
        public let vpnConnectionId: [String]?

        public init(vpnConnectionId: [String]? = nil) {
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct CreateCustomerGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "IpAddress"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "BgpAsn", required: true, type: .integer)
        ]
        /// The type of VPN connection that this customer gateway supports (ipsec.1).
        public let `type`: GatewayType
        /// The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
        public let publicIp: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// For devices that support BGP, the customer gateway's BGP ASN. Default: 65000
        public let bgpAsn: Int32

        public init(type: GatewayType, publicIp: String, dryRun: Bool? = nil, bgpAsn: Int32) {
            self.`type` = `type`
            self.publicIp = publicIp
            self.dryRun = dryRun
            self.bgpAsn = bgpAsn
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case publicIp = "IpAddress"
            case dryRun = "dryRun"
            case bgpAsn = "BgpAsn"
        }
    }

    public struct ReservedInstancesModificationResultList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesModificationResult]?

        public init(item: [ReservedInstancesModificationResult]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RevokeSecurityGroupEgressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", location: .body(locationName: "sourceSecurityGroupOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", location: .body(locationName: "sourceSecurityGroupName"), required: false, type: .string)
        ]
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupOwnerId: String?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let toPort: Int32?
        /// The ID of the security group.
        public let groupId: String
        /// Not supported. Use a set of IP permissions to specify the port.
        public let fromPort: Int32?
        /// Not supported. Use a set of IP permissions to specify the protocol name or number.
        public let ipProtocol: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
        public let ipPermissions: IpPermissionList?
        /// Not supported. Use a set of IP permissions to specify the CIDR.
        public let cidrIp: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupName: String?

        public init(sourceSecurityGroupOwnerId: String? = nil, toPort: Int32? = nil, groupId: String, fromPort: Int32? = nil, ipProtocol: String? = nil, dryRun: Bool? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
            self.groupId = groupId
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.dryRun = dryRun
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case toPort = "toPort"
            case groupId = "groupId"
            case fromPort = "fromPort"
            case ipProtocol = "ipProtocol"
            case dryRun = "dryRun"
            case ipPermissions = "ipPermissions"
            case cidrIp = "cidrIp"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
        }
    }

    public struct DeleteTransitGatewayVpcAttachmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayAttachmentId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(transitGatewayAttachmentId: String, dryRun: Bool? = nil) {
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case dryRun = "DryRun"
        }
    }

    public struct WithdrawByoipCidrResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ByoipCidr", location: .body(locationName: "byoipCidr"), required: false, type: .structure)
        ]
        /// Information about the address pool.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr = "byoipCidr"
        }
    }

    public struct RejectVpcEndpointConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: true, type: .structure), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more VPC endpoints.
        public let vpcEndpointIds: ValueStringList
        /// The ID of the service.
        public let serviceId: String

        public init(dryRun: Bool? = nil, vpcEndpointIds: ValueStringList, serviceId: String) {
            self.dryRun = dryRun
            self.vpcEndpointIds = vpcEndpointIds
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpcEndpointIds = "VpcEndpointId"
            case serviceId = "ServiceId"
        }
    }

    public struct SuccessfulInstanceCreditSpecificationSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SuccessfulInstanceCreditSpecificationItem]?

        public init(item: [SuccessfulInstanceCreditSpecificationItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeReservedInstancesListingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]
        /// One or more Reserved Instance listing IDs.
        public let reservedInstancesListingId: String?
        /// One or more filters.    reserved-instances-id - The ID of the Reserved Instances.    reserved-instances-listing-id - The ID of the Reserved Instances listing.    status - The status of the Reserved Instance listing (pending | active | cancelled | closed).    status-message - The reason for the status.  
        public let filters: FilterList?
        /// One or more Reserved Instance IDs.
        public let reservedInstancesId: String?

        public init(reservedInstancesListingId: String? = nil, filters: FilterList? = nil, reservedInstancesId: String? = nil) {
            self.reservedInstancesListingId = reservedInstancesListingId
            self.filters = filters
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListingId = "reservedInstancesListingId"
            case filters = "Filter"
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct SpotInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Fault", location: .body(locationName: "fault"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchSpecification", location: .body(locationName: "launchSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "LaunchGroup", location: .body(locationName: "launchGroup"), required: false, type: .string), 
            AWSShapeMember(label: "ActualBlockHourlyPrice", location: .body(locationName: "actualBlockHourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceInterruptionBehavior", location: .body(locationName: "instanceInterruptionBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "LaunchedAvailabilityZone", location: .body(locationName: "launchedAvailabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AvailabilityZoneGroup", location: .body(locationName: "availabilityZoneGroup"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp)
        ]
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// Additional information for launching instances.
        public let launchSpecification: LaunchSpecification?
        /// Any tags assigned to the resource.
        public let tags: TagList?
        /// The maximum price per hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The date and time when the Spot Instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let createTime: TimeStamp?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
        public let launchGroup: String?
        /// If you specified a duration and your Spot Instance request was fulfilled, this is the fixed hourly price in effect for the Spot Instance while it runs.
        public let actualBlockHourlyPrice: String?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The duration for the Spot Instance, in minutes.
        public let blockDurationMinutes: Int32?
        /// The state of the Spot Instance request. Spot status information helps track your Spot Instance requests. For more information, see Spot Status in the Amazon EC2 User Guide for Linux Instances.
        public let state: SpotInstanceState?
        /// The Availability Zone in which the request is launched.
        public let launchedAvailabilityZone: String?
        /// The end date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). If this is a one-time request, it remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?
        /// The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
        public let availabilityZoneGroup: String?
        /// The Spot Instance request type.
        public let `type`: SpotInstanceType?
        /// The product description associated with the Spot Instance.
        public let productDescription: RIProductDescription?
        /// The instance ID, if an instance has been launched to fulfill the Spot Instance request.
        public let instanceId: String?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The status code and status message describing the Spot Instance request.
        public let status: SpotInstanceStatus?
        /// The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The request becomes active at this date and time.
        public let validFrom: TimeStamp?

        public init(fault: SpotInstanceStateFault? = nil, launchSpecification: LaunchSpecification? = nil, tags: TagList? = nil, spotPrice: String? = nil, createTime: TimeStamp? = nil, launchGroup: String? = nil, actualBlockHourlyPrice: String? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, blockDurationMinutes: Int32? = nil, state: SpotInstanceState? = nil, launchedAvailabilityZone: String? = nil, validUntil: TimeStamp? = nil, availabilityZoneGroup: String? = nil, type: SpotInstanceType? = nil, productDescription: RIProductDescription? = nil, instanceId: String? = nil, spotInstanceRequestId: String? = nil, status: SpotInstanceStatus? = nil, validFrom: TimeStamp? = nil) {
            self.fault = fault
            self.launchSpecification = launchSpecification
            self.tags = tags
            self.spotPrice = spotPrice
            self.createTime = createTime
            self.launchGroup = launchGroup
            self.actualBlockHourlyPrice = actualBlockHourlyPrice
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.blockDurationMinutes = blockDurationMinutes
            self.state = state
            self.launchedAvailabilityZone = launchedAvailabilityZone
            self.validUntil = validUntil
            self.availabilityZoneGroup = availabilityZoneGroup
            self.`type` = `type`
            self.productDescription = productDescription
            self.instanceId = instanceId
            self.spotInstanceRequestId = spotInstanceRequestId
            self.status = status
            self.validFrom = validFrom
        }

        private enum CodingKeys: String, CodingKey {
            case fault = "fault"
            case launchSpecification = "launchSpecification"
            case tags = "tagSet"
            case spotPrice = "spotPrice"
            case createTime = "createTime"
            case launchGroup = "launchGroup"
            case actualBlockHourlyPrice = "actualBlockHourlyPrice"
            case instanceInterruptionBehavior = "instanceInterruptionBehavior"
            case blockDurationMinutes = "blockDurationMinutes"
            case state = "state"
            case launchedAvailabilityZone = "launchedAvailabilityZone"
            case validUntil = "validUntil"
            case availabilityZoneGroup = "availabilityZoneGroup"
            case `type` = "type"
            case productDescription = "productDescription"
            case instanceId = "instanceId"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case status = "status"
            case validFrom = "validFrom"
        }
    }

    public struct InstancePrivateIpAddressList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstancePrivateIpAddress]?

        public init(item: [InstancePrivateIpAddress]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteTransitGatewayRouteTableResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTable", location: .body(locationName: "transitGatewayRouteTable"), required: false, type: .structure)
        ]
        /// Information about the deleted transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable = "transitGatewayRouteTable"
        }
    }

    public struct RunScheduledInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceId", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "LaunchSpecification", required: true, type: .structure)
        ]
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String
        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of instances. Default: 1
        public let instanceCount: Int32?
        /// The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.
        public let launchSpecification: ScheduledInstancesLaunchSpecification

        public init(scheduledInstanceId: String, clientToken: String? = nil, dryRun: Bool? = nil, instanceCount: Int32? = nil, launchSpecification: ScheduledInstancesLaunchSpecification) {
            self.scheduledInstanceId = scheduledInstanceId
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.launchSpecification = launchSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceId = "ScheduledInstanceId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceCount = "InstanceCount"
            case launchSpecification = "LaunchSpecification"
        }
    }

    public struct PurchaseReservedInstancesOfferingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]
        /// The IDs of the purchased Reserved Instances.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct ReplaceNetworkAclAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewAssociationId", location: .body(locationName: "newAssociationId"), required: false, type: .string)
        ]
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(newAssociationId: String? = nil) {
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case newAssociationId = "newAssociationId"
        }
    }

    public struct DescribeTransitGatewayAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TransitGatewayAttachmentIds", required: false, type: .list)
        ]
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int32?
        /// One or more filters. The possible values are:    association-id - The ID of the association.    association-route-table-id - The ID of the route table for the transit gateway.    associate-state - The state of the association (associating | associated | disassociating).    resource-id - The ID of the resource.    resource-type - The resource type (vpc | vpn).    state - The state of the attachment (pendingAcceptance | pending | available | modifying | deleting | deleted | failed | rejected).    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-owner - The ID of the AWS account that owns the transit gateway.  
        public let filters: FilterList?
        /// The token for the next page of results.
        public let nextToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the attachments.
        public let transitGatewayAttachmentIds: [String]?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, nextToken: String? = nil, dryRun: Bool? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.nextToken = nextToken
            self.dryRun = dryRun
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case nextToken = "NextToken"
            case dryRun = "DryRun"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct KeyNameStringList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyName", required: false, type: .list)
        ]
        public let keyName: [String]?

        public init(keyName: [String]? = nil) {
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyName = "KeyName"
        }
    }

    public struct LaunchTemplateLicenseSpecificationListRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateLicenseConfigurationRequest]?

        public init(item: [LaunchTemplateLicenseConfigurationRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateCpuOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreCount", location: .body(locationName: "coreCount"), required: false, type: .integer), 
            AWSShapeMember(label: "ThreadsPerCore", location: .body(locationName: "threadsPerCore"), required: false, type: .integer)
        ]
        /// The number of CPU cores for the instance.
        public let coreCount: Int32?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int32?

        public init(coreCount: Int32? = nil, threadsPerCore: Int32? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "coreCount"
            case threadsPerCore = "threadsPerCore"
        }
    }

    public struct AssignPrivateIpAddressesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowReassignment", location: .body(locationName: "allowReassignment"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddress"), required: false, type: .structure), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]
        /// Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
        public let allowReassignment: Bool?
        /// One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.
        public let privateIpAddresses: PrivateIpAddressStringList?
        /// The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
        public let secondaryPrivateIpAddressCount: Int32?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(allowReassignment: Bool? = nil, privateIpAddresses: PrivateIpAddressStringList? = nil, secondaryPrivateIpAddressCount: Int32? = nil, networkInterfaceId: String) {
            self.allowReassignment = allowReassignment
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case allowReassignment = "allowReassignment"
            case privateIpAddresses = "privateIpAddress"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct ModifyVpcEndpointServicePermissionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnValue", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct VpcPeeringConnectionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcPeeringConnection]?

        public init(item: [VpcPeeringConnection]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ConversionTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportVolume", location: .body(locationName: "importVolume"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ImportInstance", location: .body(locationName: "importInstance"), required: false, type: .structure), 
            AWSShapeMember(label: "ExpirationTime", location: .body(locationName: "expirationTime"), required: false, type: .string), 
            AWSShapeMember(label: "ConversionTaskId", location: .body(locationName: "conversionTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// If the task is for importing a volume, this contains information about the import volume task.
        public let importVolume: ImportVolumeTaskDetails?
        /// Any tags assigned to the task.
        public let tags: TagList?
        /// If the task is for importing an instance, this contains information about the import instance task.
        public let importInstance: ImportInstanceTaskDetails?
        /// The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
        public let expirationTime: String?
        /// The ID of the conversion task.
        public let conversionTaskId: String?
        /// The state of the conversion task.
        public let state: ConversionTaskState?
        /// The status message related to the conversion task.
        public let statusMessage: String?

        public init(importVolume: ImportVolumeTaskDetails? = nil, tags: TagList? = nil, importInstance: ImportInstanceTaskDetails? = nil, expirationTime: String? = nil, conversionTaskId: String? = nil, state: ConversionTaskState? = nil, statusMessage: String? = nil) {
            self.importVolume = importVolume
            self.tags = tags
            self.importInstance = importInstance
            self.expirationTime = expirationTime
            self.conversionTaskId = conversionTaskId
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case importVolume = "importVolume"
            case tags = "tagSet"
            case importInstance = "importInstance"
            case expirationTime = "expirationTime"
            case conversionTaskId = "conversionTaskId"
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct DescribeCustomerGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayIds", location: .body(locationName: "CustomerGatewayId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more customer gateway IDs. Default: Describes all your customer gateways.
        public let customerGatewayIds: CustomerGatewayIdStringList?
        /// One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway's Internet-routable external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(customerGatewayIds: CustomerGatewayIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.customerGatewayIds = customerGatewayIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayIds = "CustomerGatewayId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct PeeringConnectionOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", required: false, type: .boolean)
        ]
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
        /// If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?

        public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil, allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil) {
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
        }

        private enum CodingKeys: String, CodingKey {
            case allowEgressFromLocalVpcToRemoteClassicLink = "AllowEgressFromLocalVpcToRemoteClassicLink"
            case allowDnsResolutionFromRemoteVpc = "AllowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "AllowEgressFromLocalClassicLinkToRemoteVpc"
        }
    }

    public struct CreateFleetErrorsSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CreateFleetError]?

        public init(item: [CreateFleetError]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct IcmpTypeCode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .integer), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .integer)
        ]
        /// The ICMP type. A value of -1 means all types.
        public let `type`: Int32?
        /// The ICMP code. A value of -1 means all codes for the specified ICMP type.
        public let code: Int32?

        public init(type: Int32? = nil, code: Int32? = nil) {
            self.`type` = `type`
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case code = "code"
        }
    }

    public enum InstanceLifecycleType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case scheduled = "scheduled"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAccountAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountAttributes", location: .body(locationName: "accountAttributeSet"), required: false, type: .structure)
        ]
        /// Information about one or more account attributes.
        public let accountAttributes: AccountAttributeList?

        public init(accountAttributes: AccountAttributeList? = nil) {
            self.accountAttributes = accountAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case accountAttributes = "accountAttributeSet"
        }
    }

    public struct CreateFleetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "OnDemandOptions", required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTemplateConfigs", required: true, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ReplaceUnhealthyInstances", required: false, type: .boolean), 
            AWSShapeMember(label: "TargetCapacitySpecification", required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "TerminateInstancesWithExpiration", required: false, type: .boolean), 
            AWSShapeMember(label: "ValidUntil", required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "SpotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", required: false, type: .timestamp)
        ]
        /// The key-value pair for tagging the EC2 Fleet request on creation. The value for ResourceType must be fleet, otherwise the fleet request fails. To tag instances at launch, specify the tags in the launch template. For information about tagging after launch, see Tagging Your Resources. 
        public let tagSpecifications: TagSpecificationList?
        /// The allocation strategy of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptionsRequest?
        /// The configuration for the EC2 Fleet.
        public let launchTemplateConfigs: FleetLaunchTemplateConfigListRequest
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Indicates whether EC2 Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The TotalTargetCapacity, OnDemandTargetCapacity, SpotTargetCapacity, and DefaultCapacityType structure.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
        public let validUntil: TimeStamp?
        /// The type of the request. By default, the EC2 Fleet places an asynchronous request for your desired capacity, and maintains it by replenishing interrupted Spot Instances (maintain). A value of instant places a synchronous one-time request, and returns errors for any instances that could not be launched. A value of request places an asynchronous one-time request without maintaining capacity or submitting requests in alternative capacity pools if capacity is unavailable. For more information, see EC2 Fleet Request Types in the Amazon Elastic Compute Cloud User Guide.
        public let `type`: FleetType?
        /// Describes the configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptionsRequest?
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: TimeStamp?

        public init(tagSpecifications: TagSpecificationList? = nil, onDemandOptions: OnDemandOptionsRequest? = nil, launchTemplateConfigs: FleetLaunchTemplateConfigListRequest, clientToken: String? = nil, replaceUnhealthyInstances: Bool? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest, dryRun: Bool? = nil, terminateInstancesWithExpiration: Bool? = nil, validUntil: TimeStamp? = nil, type: FleetType? = nil, spotOptions: SpotOptionsRequest? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, validFrom: TimeStamp? = nil) {
            self.tagSpecifications = tagSpecifications
            self.onDemandOptions = onDemandOptions
            self.launchTemplateConfigs = launchTemplateConfigs
            self.clientToken = clientToken
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.targetCapacitySpecification = targetCapacitySpecification
            self.dryRun = dryRun
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.validUntil = validUntil
            self.`type` = `type`
            self.spotOptions = spotOptions
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.validFrom = validFrom
        }

        private enum CodingKeys: String, CodingKey {
            case tagSpecifications = "TagSpecification"
            case onDemandOptions = "OnDemandOptions"
            case launchTemplateConfigs = "LaunchTemplateConfigs"
            case clientToken = "ClientToken"
            case replaceUnhealthyInstances = "ReplaceUnhealthyInstances"
            case targetCapacitySpecification = "TargetCapacitySpecification"
            case dryRun = "DryRun"
            case terminateInstancesWithExpiration = "TerminateInstancesWithExpiration"
            case validUntil = "ValidUntil"
            case `type` = "Type"
            case spotOptions = "SpotOptions"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case validFrom = "ValidFrom"
        }
    }

    public struct InstanceState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .integer), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum)
        ]
        /// The low byte represents the state. The high byte is used for internal purposes and should be ignored.    0 : pending     16 : running     32 : shutting-down     48 : terminated     64 : stopping     80 : stopped   
        public let code: Int32?
        /// The current state of the instance.
        public let name: InstanceStateName?

        public init(code: Int32? = nil, name: InstanceStateName? = nil) {
            self.code = code
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case name = "name"
        }
    }

    public struct PurchaseReservedInstancesOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LimitPrice", location: .body(locationName: "limitPrice"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedInstancesOfferingId", required: true, type: .string)
        ]
        /// Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
        public let limitPrice: ReservedInstanceLimitPrice?
        /// The number of Reserved Instances to purchase.
        public let instanceCount: Int32
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Reserved Instance offering to purchase.
        public let reservedInstancesOfferingId: String

        public init(limitPrice: ReservedInstanceLimitPrice? = nil, instanceCount: Int32, dryRun: Bool? = nil, reservedInstancesOfferingId: String) {
            self.limitPrice = limitPrice
            self.instanceCount = instanceCount
            self.dryRun = dryRun
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case limitPrice = "limitPrice"
            case instanceCount = "InstanceCount"
            case dryRun = "dryRun"
            case reservedInstancesOfferingId = "ReservedInstancesOfferingId"
        }
    }

    public enum EndDateType: String, CustomStringConvertible, Codable {
        case unlimited = "unlimited"
        case limited = "limited"
        public var description: String { return self.rawValue }
    }

    public struct RejectTransitGatewayVpcAttachmentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayVpcAttachment", location: .body(locationName: "transitGatewayVpcAttachment"), required: false, type: .structure)
        ]
        /// Information about the attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment = "transitGatewayVpcAttachment"
        }
    }

    public struct ModifyIdentityIdFormatRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UseLongIds", location: .body(locationName: "useLongIds"), required: true, type: .boolean), 
            AWSShapeMember(label: "PrincipalArn", location: .body(locationName: "principalArn"), required: true, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: true, type: .string)
        ]
        /// Indicates whether the resource should use longer IDs (17-character IDs)
        public let useLongIds: Bool
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account.
        public let principalArn: String
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String

        public init(useLongIds: Bool, principalArn: String, resource: String) {
            self.useLongIds = useLongIds
            self.principalArn = principalArn
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case useLongIds = "useLongIds"
            case principalArn = "principalArn"
            case resource = "resource"
        }
    }

    public enum Scope: String, CustomStringConvertible, Codable {
        case availabilityZone = "Availability Zone"
        case region = "Region"
        public var description: String { return self.rawValue }
    }

    public struct DescribeFleetHistoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "FleetId", location: .body(locationName: "fleetId"), required: false, type: .string), 
            AWSShapeMember(label: "HistoryRecords", location: .body(locationName: "historyRecordSet"), required: false, type: .structure), 
            AWSShapeMember(label: "LastEvaluatedTime", location: .body(locationName: "lastEvaluatedTime"), required: false, type: .timestamp)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp?
        /// The ID of the EC Fleet.
        public let fleetId: String?
        /// Information about the events in the history of the EC2 Fleet.
        public let historyRecords: HistoryRecordSet?
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
        public let lastEvaluatedTime: TimeStamp?

        public init(nextToken: String? = nil, startTime: TimeStamp? = nil, fleetId: String? = nil, historyRecords: HistoryRecordSet? = nil, lastEvaluatedTime: TimeStamp? = nil) {
            self.nextToken = nextToken
            self.startTime = startTime
            self.fleetId = fleetId
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case startTime = "startTime"
            case fleetId = "fleetId"
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime = "lastEvaluatedTime"
        }
    }

    public struct NewDhcpConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NewDhcpConfiguration]?

        public init(item: [NewDhcpConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct StateReason: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The reason code for the state change.
        public let code: String?
        /// The message for the state change.    Server.InsufficientInstanceCapacity: There was insufficient capacity available to satisfy the launch request.    Server.InternalError: An internal error caused the instance to terminate during launch.    Server.ScheduledStop: The instance was stopped due to a scheduled retirement.    Server.SpotInstanceShutdown: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Server.SpotInstanceTermination: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Client.InstanceInitiatedShutdown: The instance was shut down using the shutdown -h command from the instance.    Client.InstanceTerminated: The instance was terminated or rebooted during AMI creation.    Client.InternalError: A client error caused the instance to terminate during launch.    Client.InvalidSnapshot.NotFound: The specified snapshot was not found.    Client.UserInitiatedHibernate: Hibernation was initiated on the instance.    Client.UserInitiatedShutdown: The instance was shut down using the Amazon EC2 API.    Client.VolumeLimitExceeded: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.  
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public enum ByoipCidrState: String, CustomStringConvertible, Codable {
        case advertised = "advertised"
        case deprovisioned = "deprovisioned"
        case failedDeprovision = "failed-deprovision"
        case failedProvision = "failed-provision"
        case pendingDeprovision = "pending-deprovision"
        case pendingProvision = "pending-provision"
        case provisioned = "provisioned"
        public var description: String { return self.rawValue }
    }

    public struct EbsInstanceBlockDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp)
        ]
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The ID of the EBS volume.
        public let volumeId: String?
        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?

        public init(deleteOnTermination: Bool? = nil, status: AttachmentStatus? = nil, volumeId: String? = nil, attachTime: TimeStamp? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.status = status
            self.volumeId = volumeId
            self.attachTime = attachTime
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case status = "status"
            case volumeId = "volumeId"
            case attachTime = "attachTime"
        }
    }

    public struct DescribeHostReservationOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MinDuration", required: false, type: .integer), 
            AWSShapeMember(label: "MaxDuration", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "OfferingId", required: false, type: .string)
        ]
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int32?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
        public let minDuration: Int32?
        /// This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
        public let maxDuration: Int32?
        /// One or more filters.    instance-family - The instance family of the offering (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).  
        public let filter: FilterList?
        /// The ID of the reservation offering.
        public let offeringId: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, minDuration: Int32? = nil, maxDuration: Int32? = nil, filter: FilterList? = nil, offeringId: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.minDuration = minDuration
            self.maxDuration = maxDuration
            self.filter = filter
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case minDuration = "MinDuration"
            case maxDuration = "MaxDuration"
            case filter = "Filter"
            case offeringId = "OfferingId"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Associations", location: .body(locationName: "associations"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the associations.
        public let associations: TransitGatewayRouteTableAssociationList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(associations: TransitGatewayRouteTableAssociationList? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associations"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeHostReservationOfferingsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingSet", location: .body(locationName: "offeringSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the offerings.
        public let offeringSet: HostOfferingSet?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(offeringSet: HostOfferingSet? = nil, nextToken: String? = nil) {
            self.offeringSet = offeringSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case offeringSet = "offeringSet"
            case nextToken = "nextToken"
        }
    }

    public struct LaunchTemplateOverridesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchTemplateOverrides]?

        public init(item: [LaunchTemplateOverrides]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DnsEntrySet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DnsEntry]?

        public init(item: [DnsEntry]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchTemplateBlockDeviceMappingRequestList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMapping", required: false, type: .list)
        ]
        public let blockDeviceMapping: [LaunchTemplateBlockDeviceMappingRequest]?

        public init(blockDeviceMapping: [LaunchTemplateBlockDeviceMappingRequest]? = nil) {
            self.blockDeviceMapping = blockDeviceMapping
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMapping = "BlockDeviceMapping"
        }
    }

    public enum RIProductDescription: String, CustomStringConvertible, Codable {
        case linuxUnix = "Linux/UNIX"
        case linuxUnixAmazonVpc = "Linux/UNIX (Amazon VPC)"
        case windows = "Windows"
        case windowsAmazonVpc = "Windows (Amazon VPC)"
        public var description: String { return self.rawValue }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "IpPermissions", required: true, type: .structure)
        ]
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP permissions for the security group rule.
        public let ipPermissions: IpPermissionList

        public init(groupId: String? = nil, groupName: String? = nil, dryRun: Bool? = nil, ipPermissions: IpPermissionList) {
            self.groupId = groupId
            self.groupName = groupName
            self.dryRun = dryRun
            self.ipPermissions = ipPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupName = "GroupName"
            case dryRun = "DryRun"
            case ipPermissions = "IpPermissions"
        }
    }

    public struct CreateFpgaImageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InputStorageLocation", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LogsStorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string)
        ]
        /// A name for the AFI.
        public let name: String?
        /// The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
        public let inputStorageLocation: StorageLocation
        /// A description for the AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The location in Amazon S3 for the output logs.
        public let logsStorageLocation: StorageLocation?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?

        public init(name: String? = nil, inputStorageLocation: StorageLocation, description: String? = nil, dryRun: Bool? = nil, logsStorageLocation: StorageLocation? = nil, clientToken: String? = nil) {
            self.name = name
            self.inputStorageLocation = inputStorageLocation
            self.description = description
            self.dryRun = dryRun
            self.logsStorageLocation = logsStorageLocation
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case inputStorageLocation = "InputStorageLocation"
            case description = "Description"
            case dryRun = "DryRun"
            case logsStorageLocation = "LogsStorageLocation"
            case clientToken = "ClientToken"
        }
    }

    public struct InstanceStatusSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", location: .body(locationName: "details"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The system instance health or application instance health.
        public let details: InstanceStatusDetailsList?
        /// The status.
        public let status: SummaryStatus?

        public init(details: InstanceStatusDetailsList? = nil, status: SummaryStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct CreateEgressOnlyInternetGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGateway", location: .body(locationName: "egressOnlyInternetGateway"), required: false, type: .structure)
        ]
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the egress-only internet gateway.
        public let egressOnlyInternetGateway: EgressOnlyInternetGateway?

        public init(clientToken: String? = nil, egressOnlyInternetGateway: EgressOnlyInternetGateway? = nil) {
            self.clientToken = clientToken
            self.egressOnlyInternetGateway = egressOnlyInternetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case egressOnlyInternetGateway = "egressOnlyInternetGateway"
        }
    }

    public struct LaunchTemplateTagSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum)
        ]
        /// The tags for the resource.
        public let tags: TagList?
        /// The type of resource.
        public let resourceType: ResourceType?

        public init(tags: TagList? = nil, resourceType: ResourceType? = nil) {
            self.tags = tags
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case resourceType = "resourceType"
        }
    }

    public struct BundleTaskList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [BundleTask]?

        public init(item: [BundleTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CopyFpgaImageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string)
        ]
        /// The ID of the new AFI.
        public let fpgaImageId: String?

        public init(fpgaImageId: String? = nil) {
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageId = "fpgaImageId"
        }
    }

    public struct AssociateDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", required: true, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
        public let dhcpOptionsId: String
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsId: String, vpcId: String, dryRun: Bool? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case vpcId = "VpcId"
            case dryRun = "dryRun"
        }
    }

    public struct SlotDateTimeRangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LatestTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EarliestTime", required: true, type: .timestamp)
        ]
        /// The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
        public let latestTime: TimeStamp
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: TimeStamp

        public init(latestTime: TimeStamp, earliestTime: TimeStamp) {
            self.latestTime = latestTime
            self.earliestTime = earliestTime
        }

        private enum CodingKeys: String, CodingKey {
            case latestTime = "LatestTime"
            case earliestTime = "EarliestTime"
        }
    }

    public struct FleetLaunchTemplateOverridesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .double), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "WeightedCapacity", required: false, type: .double), 
            AWSShapeMember(label: "MaxPrice", required: false, type: .string)
        ]
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The priority for the launch template override. If AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
        public let priority: Double?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let maxPrice: String?

        public init(subnetId: String? = nil, priority: Double? = nil, placement: Placement? = nil, availabilityZone: String? = nil, instanceType: InstanceType? = nil, weightedCapacity: Double? = nil, maxPrice: String? = nil) {
            self.subnetId = subnetId
            self.priority = priority
            self.placement = placement
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
            self.maxPrice = maxPrice
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case priority = "Priority"
            case placement = "Placement"
            case availabilityZone = "AvailabilityZone"
            case instanceType = "InstanceType"
            case weightedCapacity = "WeightedCapacity"
            case maxPrice = "MaxPrice"
        }
    }

    public struct VpcClassicLinkIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .list)
        ]
        public let vpcId: [String]?

        public init(vpcId: [String]? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct ImportKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicKeyMaterial", location: .body(locationName: "publicKeyMaterial"), required: true, type: .blob), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: true, type: .string)
        ]
        /// The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
        public let publicKeyMaterial: Data
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A unique name for the key pair.
        public let keyName: String

        public init(publicKeyMaterial: Data, dryRun: Bool? = nil, keyName: String) {
            self.publicKeyMaterial = publicKeyMaterial
            self.dryRun = dryRun
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case publicKeyMaterial = "publicKeyMaterial"
            case dryRun = "dryRun"
            case keyName = "keyName"
        }
    }

    public struct NetworkInterfacePrivateIpAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string)
        ]
        /// The private IPv4 address.
        public let privateIpAddress: String?
        /// Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
        public let primary: Bool?
        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// The private DNS name.
        public let privateDnsName: String?

        public init(privateIpAddress: String? = nil, primary: Bool? = nil, association: NetworkInterfaceAssociation? = nil, privateDnsName: String? = nil) {
            self.privateIpAddress = privateIpAddress
            self.primary = primary
            self.association = association
            self.privateDnsName = privateDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
            case primary = "primary"
            case association = "association"
            case privateDnsName = "privateDnsName"
        }
    }

    public struct CapacityReservation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalInstanceCount", location: .body(locationName: "totalInstanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailableInstanceCount", location: .body(locationName: "availableInstanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "InstancePlatform", location: .body(locationName: "instancePlatform"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "EndDate", location: .body(locationName: "endDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EphemeralStorage", location: .body(locationName: "ephemeralStorage"), required: false, type: .boolean), 
            AWSShapeMember(label: "EndDateType", location: .body(locationName: "endDateType"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceMatchCriteria", location: .body(locationName: "instanceMatchCriteria"), required: false, type: .enum), 
            AWSShapeMember(label: "CapacityReservationId", location: .body(locationName: "capacityReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// The number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int32?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public let instanceType: String?
        /// The Availability Zone in which the capacity is reserved.
        public let availabilityZone: String?
        /// The date and time at which the Capacity Reservation was created.
        public let createDate: TimeStamp?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public let availableInstanceCount: Int32?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other AWS accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.  
        public let tenancy: CapacityReservationTenancy?
        /// The type of operating system for which the Capacity Reservation reserves capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    cancelled - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    expired - The Capacity Reservation was manually cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.  
        public let state: CapacityReservationState?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.
        public let endDate: TimeStamp?
        /// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
        public let ephemeralStorage: Bool?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.  
        public let endDateType: EndDateType?
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.   
        public let instanceMatchCriteria: InstanceMatchCriteria?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// Any tags assigned to the Capacity Reservation.
        public let tags: TagList?

        public init(totalInstanceCount: Int32? = nil, instanceType: String? = nil, availabilityZone: String? = nil, createDate: TimeStamp? = nil, ebsOptimized: Bool? = nil, availableInstanceCount: Int32? = nil, tenancy: CapacityReservationTenancy? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, state: CapacityReservationState? = nil, endDate: TimeStamp? = nil, ephemeralStorage: Bool? = nil, endDateType: EndDateType? = nil, instanceMatchCriteria: InstanceMatchCriteria? = nil, capacityReservationId: String? = nil, tags: TagList? = nil) {
            self.totalInstanceCount = totalInstanceCount
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.createDate = createDate
            self.ebsOptimized = ebsOptimized
            self.availableInstanceCount = availableInstanceCount
            self.tenancy = tenancy
            self.instancePlatform = instancePlatform
            self.state = state
            self.endDate = endDate
            self.ephemeralStorage = ephemeralStorage
            self.endDateType = endDateType
            self.instanceMatchCriteria = instanceMatchCriteria
            self.capacityReservationId = capacityReservationId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case totalInstanceCount = "totalInstanceCount"
            case instanceType = "instanceType"
            case availabilityZone = "availabilityZone"
            case createDate = "createDate"
            case ebsOptimized = "ebsOptimized"
            case availableInstanceCount = "availableInstanceCount"
            case tenancy = "tenancy"
            case instancePlatform = "instancePlatform"
            case state = "state"
            case endDate = "endDate"
            case ephemeralStorage = "ephemeralStorage"
            case endDateType = "endDateType"
            case instanceMatchCriteria = "instanceMatchCriteria"
            case capacityReservationId = "capacityReservationId"
            case tags = "tagSet"
        }
    }

    public struct AssociateRouteTableRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of the subnet.
        public let subnetId: String

        public init(dryRun: Bool? = nil, routeTableId: String, subnetId: String) {
            self.dryRun = dryRun
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
            case subnetId = "subnetId"
        }
    }

    public struct ResponseHostIdSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeExportTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskIds", location: .body(locationName: "exportTaskId"), required: false, type: .structure)
        ]
        /// One or more export task IDs.
        public let exportTaskIds: ExportTaskIdStringList?

        public init(exportTaskIds: ExportTaskIdStringList? = nil) {
            self.exportTaskIds = exportTaskIds
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskIds = "exportTaskId"
        }
    }

    public struct OnDemandOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinTargetCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "SingleInstanceType", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocationStrategy", required: false, type: .enum)
        ]
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int32?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
        public let singleInstanceType: Bool?
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
        public let allocationStrategy: FleetOnDemandAllocationStrategy?

        public init(minTargetCapacity: Int32? = nil, singleInstanceType: Bool? = nil, allocationStrategy: FleetOnDemandAllocationStrategy? = nil) {
            self.minTargetCapacity = minTargetCapacity
            self.singleInstanceType = singleInstanceType
            self.allocationStrategy = allocationStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case minTargetCapacity = "MinTargetCapacity"
            case singleInstanceType = "SingleInstanceType"
            case allocationStrategy = "AllocationStrategy"
        }
    }

    public struct FlowLog: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogDestinationType", location: .body(locationName: "logDestinationType"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "FlowLogId", location: .body(locationName: "flowLogId"), required: false, type: .string), 
            AWSShapeMember(label: "DeliverLogsStatus", location: .body(locationName: "deliverLogsStatus"), required: false, type: .string), 
            AWSShapeMember(label: "DeliverLogsErrorMessage", location: .body(locationName: "deliverLogsErrorMessage"), required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "LogGroupName", location: .body(locationName: "logGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "LogDestination", location: .body(locationName: "logDestination"), required: false, type: .string), 
            AWSShapeMember(label: "TrafficType", location: .body(locationName: "trafficType"), required: false, type: .enum), 
            AWSShapeMember(label: "FlowLogStatus", location: .body(locationName: "flowLogStatus"), required: false, type: .string), 
            AWSShapeMember(label: "DeliverLogsPermissionArn", location: .body(locationName: "deliverLogsPermissionArn"), required: false, type: .string)
        ]
        /// Specifies the type of destination to which the flow log data is published. Flow log data can be published to CloudWatch Logs or Amazon S3.
        public let logDestinationType: LogDestinationType?
        /// The ID of the resource on which the flow log was created.
        public let resourceId: String?
        /// The flow log ID.
        public let flowLogId: String?
        /// The status of the logs delivery (SUCCESS | FAILED).
        public let deliverLogsStatus: String?
        /// Information about the error that occurred. Rate limited indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. Access error indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. Unknown error indicates an internal error.
        public let deliverLogsErrorMessage: String?
        /// The date and time the flow log was created.
        public let creationTime: TimeStamp?
        /// The name of the flow log group.
        public let logGroupName: String?
        /// Specifies the destination to which the flow log data is published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs, this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN of the Amazon S3 bucket to which the data is published.
        public let logDestination: String?
        /// The type of traffic captured for the flow log.
        public let trafficType: TrafficType?
        /// The status of the flow log (ACTIVE).
        public let flowLogStatus: String?
        /// The ARN of the IAM role that posts logs to CloudWatch Logs.
        public let deliverLogsPermissionArn: String?

        public init(logDestinationType: LogDestinationType? = nil, resourceId: String? = nil, flowLogId: String? = nil, deliverLogsStatus: String? = nil, deliverLogsErrorMessage: String? = nil, creationTime: TimeStamp? = nil, logGroupName: String? = nil, logDestination: String? = nil, trafficType: TrafficType? = nil, flowLogStatus: String? = nil, deliverLogsPermissionArn: String? = nil) {
            self.logDestinationType = logDestinationType
            self.resourceId = resourceId
            self.flowLogId = flowLogId
            self.deliverLogsStatus = deliverLogsStatus
            self.deliverLogsErrorMessage = deliverLogsErrorMessage
            self.creationTime = creationTime
            self.logGroupName = logGroupName
            self.logDestination = logDestination
            self.trafficType = trafficType
            self.flowLogStatus = flowLogStatus
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
        }

        private enum CodingKeys: String, CodingKey {
            case logDestinationType = "logDestinationType"
            case resourceId = "resourceId"
            case flowLogId = "flowLogId"
            case deliverLogsStatus = "deliverLogsStatus"
            case deliverLogsErrorMessage = "deliverLogsErrorMessage"
            case creationTime = "creationTime"
            case logGroupName = "logGroupName"
            case logDestination = "logDestination"
            case trafficType = "trafficType"
            case flowLogStatus = "flowLogStatus"
            case deliverLogsPermissionArn = "deliverLogsPermissionArn"
        }
    }

    public struct DescribeFpgaImageAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FpgaImageId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String
        /// The AFI attribute.
        public let attribute: FpgaImageAttributeName

        public init(dryRun: Bool? = nil, fpgaImageId: String, attribute: FpgaImageAttributeName) {
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
            case attribute = "Attribute"
        }
    }

    public struct ElasticGpuHealth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The health status.
        public let status: ElasticGpuStatus?

        public init(status: ElasticGpuStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct DescribeImportImageTasksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportImageTasks", location: .body(locationName: "importImageTaskSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.
        public let importImageTasks: ImportImageTaskList?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importImageTasks: ImportImageTaskList? = nil, nextToken: String? = nil) {
            self.importImageTasks = importImageTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importImageTasks = "importImageTaskSet"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeDhcpOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsIds", location: .body(locationName: "DhcpOptionsId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The IDs of one or more DHCP options sets. Default: Describes all your DHCP options sets.
        public let dhcpOptionsIds: DhcpOptionsIdStringList?
        /// One or more filters.    dhcp-options-id - The ID of a DHCP options set.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    owner-id - The ID of the AWS account that owns the DHCP options set.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsIds: DhcpOptionsIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.dhcpOptionsIds = dhcpOptionsIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsIds = "DhcpOptionsId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct TransitGatewayAttachmentPropagation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TransitGatewayRouteTableId", location: .body(locationName: "transitGatewayRouteTableId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String?
        /// The state of the propagation route table.
        public let state: TransitGatewayPropagationState?

        public init(transitGatewayRouteTableId: String? = nil, state: TransitGatewayPropagationState? = nil) {
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTableId = "transitGatewayRouteTableId"
            case state = "state"
        }
    }

    public enum NetworkInterfaceAttribute: String, CustomStringConvertible, Codable {
        case description = "description"
        case groupset = "groupSet"
        case sourcedestcheck = "sourceDestCheck"
        case attachment = "attachment"
        public var description: String { return self.rawValue }
    }

    public struct SearchTransitGatewayRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalRoutesAvailable", location: .body(locationName: "additionalRoutesAvailable"), required: false, type: .boolean), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routeSet"), required: false, type: .structure)
        ]
        /// Indicates whether there are additional routes available.
        public let additionalRoutesAvailable: Bool?
        /// Information about the routes.
        public let routes: TransitGatewayRouteList?

        public init(additionalRoutesAvailable: Bool? = nil, routes: TransitGatewayRouteList? = nil) {
            self.additionalRoutesAvailable = additionalRoutesAvailable
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case additionalRoutesAvailable = "additionalRoutesAvailable"
            case routes = "routeSet"
        }
    }

    public struct DeleteVpcEndpointsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the VPC endpoints that were not successfully deleted.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct SnapshotTaskDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", location: .body(locationName: "userBucket"), required: false, type: .structure), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageSize", location: .body(locationName: "diskImageSize"), required: false, type: .double), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted snapshot.
        public let kmsKeyId: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status for the import snapshot task.
        public let status: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?
        /// The percentage of completion for the import snapshot task.
        public let progress: String?
        /// The URL of the disk image from which the snapshot is created.
        public let url: String?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// A detailed status message for the import snapshot task.
        public let statusMessage: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The description of the snapshot.
        public let description: String?

        public init(kmsKeyId: String? = nil, snapshotId: String? = nil, status: String? = nil, userBucket: UserBucketDetails? = nil, progress: String? = nil, url: String? = nil, format: String? = nil, diskImageSize: Double? = nil, statusMessage: String? = nil, encrypted: Bool? = nil, description: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.status = status
            self.userBucket = userBucket
            self.progress = progress
            self.url = url
            self.format = format
            self.diskImageSize = diskImageSize
            self.statusMessage = statusMessage
            self.encrypted = encrypted
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case snapshotId = "snapshotId"
            case status = "status"
            case userBucket = "userBucket"
            case progress = "progress"
            case url = "url"
            case format = "format"
            case diskImageSize = "diskImageSize"
            case statusMessage = "statusMessage"
            case encrypted = "encrypted"
            case description = "description"
        }
    }

    public struct DescribeBundleTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleIds", location: .body(locationName: "BundleId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more bundle task IDs. Default: Describes all your bundle tasks.
        public let bundleIds: BundleIdStringList?
        /// One or more filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bundleIds: BundleIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.bundleIds = bundleIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bundleIds = "BundleId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct CreateDefaultSubnetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The Availability Zone in which to create the default subnet.
        public let availabilityZone: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(availabilityZone: String, dryRun: Bool? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun = "DryRun"
        }
    }

    public struct ClassicLoadBalancer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string)
        ]
        /// The name of the load balancer.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct InstanceIdsSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SpotFleetLaunchSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "tagSpecificationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "WeightedCapacity", location: .body(locationName: "weightedCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string)
        ]
        /// The instance type.
        public let instanceType: InstanceType?
        /// The tags to apply during creation.
        public let tagSpecifications: SpotFleetTagSpecificationList?
        /// The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms (instances or a performance characteristic such as vCPUs, memory, or I/O). If the target capacity divided by this value is not a whole number, we round the number of instances to the next whole number. If this value is not specified, the default is 1.
        public let weightedCapacity: Double?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// Deprecated.
        public let addressingType: String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: GroupIdentifierList?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The ID of the subnet in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-a61dafcf, subnet-65ea5f08".
        public let subnetId: String?
        /// The Base64-encoded user data to make available to the instances.
        public let userData: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: SpotFleetMonitoring?
        /// The placement information.
        public let placement: SpotPlacement?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If this value is not specified, the default is the Spot price specified for the fleet. To determine the Spot price per unit hour, divide the Spot price by the value of WeightedCapacity.
        public let spotPrice: String?

        public init(instanceType: InstanceType? = nil, tagSpecifications: SpotFleetTagSpecificationList? = nil, weightedCapacity: Double? = nil, ebsOptimized: Bool? = nil, addressingType: String? = nil, securityGroups: GroupIdentifierList? = nil, kernelId: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, blockDeviceMappings: BlockDeviceMappingList? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, ramdiskId: String? = nil, subnetId: String? = nil, userData: String? = nil, keyName: String? = nil, monitoring: SpotFleetMonitoring? = nil, placement: SpotPlacement? = nil, spotPrice: String? = nil) {
            self.instanceType = instanceType
            self.tagSpecifications = tagSpecifications
            self.weightedCapacity = weightedCapacity
            self.ebsOptimized = ebsOptimized
            self.addressingType = addressingType
            self.securityGroups = securityGroups
            self.kernelId = kernelId
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.blockDeviceMappings = blockDeviceMappings
            self.networkInterfaces = networkInterfaces
            self.ramdiskId = ramdiskId
            self.subnetId = subnetId
            self.userData = userData
            self.keyName = keyName
            self.monitoring = monitoring
            self.placement = placement
            self.spotPrice = spotPrice
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case tagSpecifications = "tagSpecificationSet"
            case weightedCapacity = "weightedCapacity"
            case ebsOptimized = "ebsOptimized"
            case addressingType = "addressingType"
            case securityGroups = "groupSet"
            case kernelId = "kernelId"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case blockDeviceMappings = "blockDeviceMapping"
            case networkInterfaces = "networkInterfaceSet"
            case ramdiskId = "ramdiskId"
            case subnetId = "subnetId"
            case userData = "userData"
            case keyName = "keyName"
            case monitoring = "monitoring"
            case placement = "placement"
            case spotPrice = "spotPrice"
        }
    }

    public enum ConnectionNotificationType: String, CustomStringConvertible, Codable {
        case topic = "Topic"
        public var description: String { return self.rawValue }
    }

    public struct AccountAttributeValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AccountAttributeValue]?

        public init(item: [AccountAttributeValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum RouteState: String, CustomStringConvertible, Codable {
        case active = "active"
        case blackhole = "blackhole"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAttachmentState: String, CustomStringConvertible, Codable {
        case pendingacceptance = "pendingAcceptance"
        case rollingback = "rollingBack"
        case pending = "pending"
        case available = "available"
        case modifying = "modifying"
        case deleting = "deleting"
        case deleted = "deleted"
        case failed = "failed"
        case rejected = "rejected"
        case rejecting = "rejecting"
        case failing = "failing"
        public var description: String { return self.rawValue }
    }

    public struct HistoryRecords: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [HistoryRecord]?

        public init(item: [HistoryRecord]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NatGatewayAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIp", location: .body(locationName: "privateIp"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]
        /// The allocation ID of the Elastic IP address that's associated with the NAT gateway.
        public let allocationId: String?
        /// The Elastic IP address associated with the NAT gateway.
        public let publicIp: String?
        /// The private IP address associated with the Elastic IP address.
        public let privateIp: String?
        /// The ID of the network interface associated with the NAT gateway.
        public let networkInterfaceId: String?

        public init(allocationId: String? = nil, publicIp: String? = nil, privateIp: String? = nil, networkInterfaceId: String? = nil) {
            self.allocationId = allocationId
            self.publicIp = publicIp
            self.privateIp = privateIp
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case publicIp = "publicIp"
            case privateIp = "privateIp"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

}