// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudWatchLogs {

    public struct FilterLogEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "searchedLogStreams", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "events", required: false, type: .list)
        ]
        /// Indicates which log streams have been searched and whether each has been searched completely.
        public let searchedLogStreams: [SearchedLogStream]?
        /// The token to use when requesting the next set of items. The token expires after 24 hours.
        public let nextToken: String?
        /// The matched events.
        public let events: [FilteredLogEvent]?

        public init(searchedLogStreams: [SearchedLogStream]? = nil, nextToken: String? = nil, events: [FilteredLogEvent]? = nil) {
            self.searchedLogStreams = searchedLogStreams
            self.nextToken = nextToken
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case searchedLogStreams = "searchedLogStreams"
            case nextToken = "nextToken"
            case events = "events"
        }
    }

    public struct DeleteRetentionPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The name of the log group.
        public let logGroupName: String

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
        }
    }

    public struct DescribeSubscriptionFiltersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "subscriptionFilters", required: false, type: .list)
        ]
        public let nextToken: String?
        /// The subscription filters.
        public let subscriptionFilters: [SubscriptionFilter]?

        public init(nextToken: String? = nil, subscriptionFilters: [SubscriptionFilter]? = nil) {
            self.nextToken = nextToken
            self.subscriptionFilters = subscriptionFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case subscriptionFilters = "subscriptionFilters"
        }
    }

    public struct ExportTaskExecutionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .long), 
            AWSShapeMember(label: "completionTime", required: false, type: .long)
        ]
        /// The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let creationTime: Int64?
        /// The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let completionTime: Int64?

        public init(creationTime: Int64? = nil, completionTime: Int64? = nil) {
            self.creationTime = creationTime
            self.completionTime = completionTime
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case completionTime = "completionTime"
        }
    }

    public struct GetLogEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextBackwardToken", required: false, type: .string), 
            AWSShapeMember(label: "nextForwardToken", required: false, type: .string), 
            AWSShapeMember(label: "events", required: false, type: .list)
        ]
        /// The token for the next set of items in the backward direction. The token expires after 24 hours.
        public let nextBackwardToken: String?
        /// The token for the next set of items in the forward direction. The token expires after 24 hours.
        public let nextForwardToken: String?
        /// The events.
        public let events: [OutputLogEvent]?

        public init(nextBackwardToken: String? = nil, nextForwardToken: String? = nil, events: [OutputLogEvent]? = nil) {
            self.nextBackwardToken = nextBackwardToken
            self.nextForwardToken = nextForwardToken
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case nextBackwardToken = "nextBackwardToken"
            case nextForwardToken = "nextForwardToken"
            case events = "events"
        }
    }

    public struct DescribeMetricFiltersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "filterNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "metricNamespace", required: false, type: .string), 
            AWSShapeMember(label: "logGroupName", required: false, type: .string), 
            AWSShapeMember(label: "metricName", required: false, type: .string)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The prefix to match.
        public let filterNamePrefix: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// The namespace of the CloudWatch metric.
        public let metricNamespace: String?
        /// The name of the log group.
        public let logGroupName: String?
        public let metricName: String?

        public init(nextToken: String? = nil, filterNamePrefix: String? = nil, limit: Int32? = nil, metricNamespace: String? = nil, logGroupName: String? = nil, metricName: String? = nil) {
            self.nextToken = nextToken
            self.filterNamePrefix = filterNamePrefix
            self.limit = limit
            self.metricNamespace = metricNamespace
            self.logGroupName = logGroupName
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case filterNamePrefix = "filterNamePrefix"
            case limit = "limit"
            case metricNamespace = "metricNamespace"
            case logGroupName = "logGroupName"
            case metricName = "metricName"
        }
    }

    public struct DeleteSubscriptionFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: true, type: .string), 
            AWSShapeMember(label: "filterName", required: true, type: .string)
        ]
        /// The name of the log group.
        public let logGroupName: String
        /// The name of the subscription filter.
        public let filterName: String

        public init(logGroupName: String, filterName: String) {
            self.logGroupName = logGroupName
            self.filterName = filterName
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
            case filterName = "filterName"
        }
    }

    public struct DescribeResourcePoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourcePolicies", required: false, type: .list)
        ]
        public let nextToken: String?
        /// The resource policies that exist in this account.
        public let resourcePolicies: [ResourcePolicy]?

        public init(nextToken: String? = nil, resourcePolicies: [ResourcePolicy]? = nil) {
            self.nextToken = nextToken
            self.resourcePolicies = resourcePolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourcePolicies = "resourcePolicies"
        }
    }

    public struct CreateLogGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "kmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see Amazon Resource Names - AWS Key Management Service (AWS KMS).
        public let kmsKeyId: String?
        /// The key-value pairs to use for the tags.
        public let tags: [String: String]?
        /// The name of the log group.
        public let logGroupName: String

        public init(kmsKeyId: String? = nil, tags: [String: String]? = nil, logGroupName: String) {
            self.kmsKeyId = kmsKeyId
            self.tags = tags
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case tags = "tags"
            case logGroupName = "logGroupName"
        }
    }

    public struct PutDestinationPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationName", required: true, type: .string), 
            AWSShapeMember(label: "accessPolicy", required: true, type: .string)
        ]
        /// A name for an existing destination.
        public let destinationName: String
        /// An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination.
        public let accessPolicy: String

        public init(destinationName: String, accessPolicy: String) {
            self.destinationName = destinationName
            self.accessPolicy = accessPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case destinationName = "destinationName"
            case accessPolicy = "accessPolicy"
        }
    }

    public struct PutResourcePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourcePolicy", required: false, type: .structure)
        ]
        /// The new policy.
        public let resourcePolicy: ResourcePolicy?

        public init(resourcePolicy: ResourcePolicy? = nil) {
            self.resourcePolicy = resourcePolicy
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePolicy = "resourcePolicy"
        }
    }

    public struct DescribeLogGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "limit", required: false, type: .integer)
        ]
        /// The prefix to match.
        public let logGroupNamePrefix: String?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?

        public init(logGroupNamePrefix: String? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.logGroupNamePrefix = logGroupNamePrefix
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupNamePrefix = "logGroupNamePrefix"
            case nextToken = "nextToken"
            case limit = "limit"
        }
    }

    public struct PutLogEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sequenceToken", required: false, type: .string), 
            AWSShapeMember(label: "logStreamName", required: true, type: .string), 
            AWSShapeMember(label: "logEvents", required: true, type: .list), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The sequence token obtained from the response of the previous PutLogEvents call. An upload in a newly created log stream does not require a sequence token. You can also get the sequence token using DescribeLogStreams. If you call PutLogEvents twice within a narrow time period using the same value for sequenceToken, both calls may be successful, or one may be rejected.
        public let sequenceToken: String?
        /// The name of the log stream.
        public let logStreamName: String
        /// The log events.
        public let logEvents: [InputLogEvent]
        /// The name of the log group.
        public let logGroupName: String

        public init(sequenceToken: String? = nil, logStreamName: String, logEvents: [InputLogEvent], logGroupName: String) {
            self.sequenceToken = sequenceToken
            self.logStreamName = logStreamName
            self.logEvents = logEvents
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case sequenceToken = "sequenceToken"
            case logStreamName = "logStreamName"
            case logEvents = "logEvents"
            case logGroupName = "logGroupName"
        }
    }

    public struct CreateLogStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logStreamName", required: true, type: .string), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The name of the log stream.
        public let logStreamName: String
        /// The name of the log group.
        public let logGroupName: String

        public init(logStreamName: String, logGroupName: String) {
            self.logStreamName = logStreamName
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamName = "logStreamName"
            case logGroupName = "logGroupName"
        }
    }

    public struct ExportTaskStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "code", required: false, type: .enum)
        ]
        /// The status message related to the status code.
        public let message: String?
        /// The status code of the export task.
        public let code: ExportTaskStatusCode?

        public init(message: String? = nil, code: ExportTaskStatusCode? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case code = "code"
        }
    }

    public struct DeleteLogStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logStreamName", required: true, type: .string), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The name of the log stream.
        public let logStreamName: String
        /// The name of the log group.
        public let logGroupName: String

        public init(logStreamName: String, logGroupName: String) {
            self.logStreamName = logStreamName
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamName = "logStreamName"
            case logGroupName = "logGroupName"
        }
    }

    public struct DescribeExportTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exportTasks", required: false, type: .list)
        ]
        public let nextToken: String?
        /// The export tasks.
        public let exportTasks: [ExportTask]?

        public init(nextToken: String? = nil, exportTasks: [ExportTask]? = nil) {
            self.nextToken = nextToken
            self.exportTasks = exportTasks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case exportTasks = "exportTasks"
        }
    }

    public struct UntagLogGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The tag keys. The corresponding tags are removed from the log group.
        public let tags: [String]
        /// The name of the log group.
        public let logGroupName: String

        public init(tags: [String], logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case logGroupName = "logGroupName"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .long), 
            AWSShapeMember(label: "accessPolicy", required: false, type: .string), 
            AWSShapeMember(label: "destinationName", required: false, type: .string), 
            AWSShapeMember(label: "targetArn", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let creationTime: Int64?
        /// An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
        public let accessPolicy: String?
        /// The name of the destination.
        public let destinationName: String?
        /// The Amazon Resource Name (ARN) of the physical target to where the log events are delivered (for example, a Kinesis stream).
        public let targetArn: String?
        /// The ARN of this destination.
        public let arn: String?
        /// A role for impersonation, used when delivering log events to the target.
        public let roleArn: String?

        public init(creationTime: Int64? = nil, accessPolicy: String? = nil, destinationName: String? = nil, targetArn: String? = nil, arn: String? = nil, roleArn: String? = nil) {
            self.creationTime = creationTime
            self.accessPolicy = accessPolicy
            self.destinationName = destinationName
            self.targetArn = targetArn
            self.arn = arn
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case accessPolicy = "accessPolicy"
            case destinationName = "destinationName"
            case targetArn = "targetArn"
            case arn = "arn"
            case roleArn = "roleArn"
        }
    }

    public struct DeleteDestinationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationName", required: true, type: .string)
        ]
        /// The name of the destination.
        public let destinationName: String

        public init(destinationName: String) {
            self.destinationName = destinationName
        }

        private enum CodingKeys: String, CodingKey {
            case destinationName = "destinationName"
        }
    }

    public struct DescribeResourcePoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "limit", required: false, type: .integer)
        ]
        public let nextToken: String?
        /// The maximum number of resource policies to be displayed with one call of this API.
        public let limit: Int32?

        public init(nextToken: String? = nil, limit: Int32? = nil) {
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case limit = "limit"
        }
    }

    public struct MetricTransformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultValue", required: false, type: .double), 
            AWSShapeMember(label: "metricValue", required: true, type: .string), 
            AWSShapeMember(label: "metricNamespace", required: true, type: .string), 
            AWSShapeMember(label: "metricName", required: true, type: .string)
        ]
        /// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        public let defaultValue: Double?
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        public let metricValue: String
        /// The namespace of the CloudWatch metric.
        public let metricNamespace: String
        /// The name of the CloudWatch metric.
        public let metricName: String

        public init(defaultValue: Double? = nil, metricValue: String, metricNamespace: String, metricName: String) {
            self.defaultValue = defaultValue
            self.metricValue = metricValue
            self.metricNamespace = metricNamespace
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case defaultValue = "defaultValue"
            case metricValue = "metricValue"
            case metricNamespace = "metricNamespace"
            case metricName = "metricName"
        }
    }

    public struct TagLogGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .map), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The key-value pairs to use for the tags.
        public let tags: [String: String]
        /// The name of the log group.
        public let logGroupName: String

        public init(tags: [String: String], logGroupName: String) {
            self.tags = tags
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case logGroupName = "logGroupName"
        }
    }

    public struct CreateExportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskName", required: false, type: .string), 
            AWSShapeMember(label: "to", required: true, type: .long), 
            AWSShapeMember(label: "destinationPrefix", required: false, type: .string), 
            AWSShapeMember(label: "destination", required: true, type: .string), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string), 
            AWSShapeMember(label: "from", required: true, type: .long), 
            AWSShapeMember(label: "logStreamNamePrefix", required: false, type: .string)
        ]
        /// The name of the export task.
        public let taskName: String?
        /// The end time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp later than this time are not exported.
        public let to: Int64
        /// The prefix used as the start of the key for every object exported. If you don't specify a value, the default is exportedlogs.
        public let destinationPrefix: String?
        /// The name of S3 bucket for the exported log data. The bucket must be in the same AWS region.
        public let destination: String
        /// The name of the log group.
        public let logGroupName: String
        /// The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp earlier than this time are not exported.
        public let from: Int64
        /// Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.
        public let logStreamNamePrefix: String?

        public init(taskName: String? = nil, to: Int64, destinationPrefix: String? = nil, destination: String, logGroupName: String, from: Int64, logStreamNamePrefix: String? = nil) {
            self.taskName = taskName
            self.to = to
            self.destinationPrefix = destinationPrefix
            self.destination = destination
            self.logGroupName = logGroupName
            self.from = from
            self.logStreamNamePrefix = logStreamNamePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case taskName = "taskName"
            case to = "to"
            case destinationPrefix = "destinationPrefix"
            case destination = "destination"
            case logGroupName = "logGroupName"
            case from = "from"
            case logStreamNamePrefix = "logStreamNamePrefix"
        }
    }

    public enum Distribution: String, CustomStringConvertible, Codable {
        case random = "Random"
        case bylogstream = "ByLogStream"
        public var description: String { return self.rawValue }
    }

    public struct InputLogEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "message", required: true, type: .string), 
            AWSShapeMember(label: "timestamp", required: true, type: .long)
        ]
        /// The raw event message.
        public let message: String
        /// The time the event occurred, expressed as the number of milliseconds fter Jan 1, 1970 00:00:00 UTC.
        public let timestamp: Int64

        public init(message: String, timestamp: Int64) {
            self.message = message
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case timestamp = "timestamp"
        }
    }

    public struct SearchedLogStream: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logStreamName", required: false, type: .string), 
            AWSShapeMember(label: "searchedCompletely", required: false, type: .boolean)
        ]
        /// The name of the log stream.
        public let logStreamName: String?
        /// Indicates whether all the events in this log stream were searched.
        public let searchedCompletely: Bool?

        public init(logStreamName: String? = nil, searchedCompletely: Bool? = nil) {
            self.logStreamName = logStreamName
            self.searchedCompletely = searchedCompletely
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamName = "logStreamName"
            case searchedCompletely = "searchedCompletely"
        }
    }

    public struct DeleteResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", required: false, type: .string)
        ]
        /// The name of the policy to be revoked. This parameter is required.
        public let policyName: String?

        public init(policyName: String? = nil) {
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
        }
    }

    public struct LogStream: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastIngestionTime", required: false, type: .long), 
            AWSShapeMember(label: "logStreamName", required: false, type: .string), 
            AWSShapeMember(label: "firstEventTimestamp", required: false, type: .long), 
            AWSShapeMember(label: "uploadSequenceToken", required: false, type: .string), 
            AWSShapeMember(label: "lastEventTimestamp", required: false, type: .long), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "storedBytes", required: false, type: .long), 
            AWSShapeMember(label: "creationTime", required: false, type: .long)
        ]
        /// The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let lastIngestionTime: Int64?
        /// The name of the log stream.
        public let logStreamName: String?
        /// The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let firstEventTimestamp: Int64?
        /// The sequence token.
        public let uploadSequenceToken: String?
        ///  the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTime updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.
        public let lastEventTimestamp: Int64?
        /// The Amazon Resource Name (ARN) of the log stream.
        public let arn: String?
        /// The number of bytes stored.
        public let storedBytes: Int64?
        /// The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let creationTime: Int64?

        public init(lastIngestionTime: Int64? = nil, logStreamName: String? = nil, firstEventTimestamp: Int64? = nil, uploadSequenceToken: String? = nil, lastEventTimestamp: Int64? = nil, arn: String? = nil, storedBytes: Int64? = nil, creationTime: Int64? = nil) {
            self.lastIngestionTime = lastIngestionTime
            self.logStreamName = logStreamName
            self.firstEventTimestamp = firstEventTimestamp
            self.uploadSequenceToken = uploadSequenceToken
            self.lastEventTimestamp = lastEventTimestamp
            self.arn = arn
            self.storedBytes = storedBytes
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case lastIngestionTime = "lastIngestionTime"
            case logStreamName = "logStreamName"
            case firstEventTimestamp = "firstEventTimestamp"
            case uploadSequenceToken = "uploadSequenceToken"
            case lastEventTimestamp = "lastEventTimestamp"
            case arn = "arn"
            case storedBytes = "storedBytes"
            case creationTime = "creationTime"
        }
    }

    public struct TestMetricFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "matches", required: false, type: .list)
        ]
        /// The matched events.
        public let matches: [MetricFilterMatchRecord]?

        public init(matches: [MetricFilterMatchRecord]? = nil) {
            self.matches = matches
        }

        private enum CodingKeys: String, CodingKey {
            case matches = "matches"
        }
    }

    public enum OrderBy: String, CustomStringConvertible, Codable {
        case logstreamname = "LogStreamName"
        case lasteventtime = "LastEventTime"
        public var description: String { return self.rawValue }
    }

    public struct PutLogEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rejectedLogEventsInfo", required: false, type: .structure), 
            AWSShapeMember(label: "nextSequenceToken", required: false, type: .string)
        ]
        /// The rejected events.
        public let rejectedLogEventsInfo: RejectedLogEventsInfo?
        /// The next sequence token.
        public let nextSequenceToken: String?

        public init(rejectedLogEventsInfo: RejectedLogEventsInfo? = nil, nextSequenceToken: String? = nil) {
            self.rejectedLogEventsInfo = rejectedLogEventsInfo
            self.nextSequenceToken = nextSequenceToken
        }

        private enum CodingKeys: String, CodingKey {
            case rejectedLogEventsInfo = "rejectedLogEventsInfo"
            case nextSequenceToken = "nextSequenceToken"
        }
    }

    public struct SubscriptionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationArn", required: false, type: .string), 
            AWSShapeMember(label: "distribution", required: false, type: .enum), 
            AWSShapeMember(label: "logGroupName", required: false, type: .string), 
            AWSShapeMember(label: "filterPattern", required: false, type: .string), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "creationTime", required: false, type: .long), 
            AWSShapeMember(label: "filterName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the destination.
        public let destinationArn: String?
        public let distribution: Distribution?
        /// The name of the log group.
        public let logGroupName: String?
        public let filterPattern: String?
        public let roleArn: String?
        /// The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let creationTime: Int64?
        /// The name of the subscription filter.
        public let filterName: String?

        public init(destinationArn: String? = nil, distribution: Distribution? = nil, logGroupName: String? = nil, filterPattern: String? = nil, roleArn: String? = nil, creationTime: Int64? = nil, filterName: String? = nil) {
            self.destinationArn = destinationArn
            self.distribution = distribution
            self.logGroupName = logGroupName
            self.filterPattern = filterPattern
            self.roleArn = roleArn
            self.creationTime = creationTime
            self.filterName = filterName
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "destinationArn"
            case distribution = "distribution"
            case logGroupName = "logGroupName"
            case filterPattern = "filterPattern"
            case roleArn = "roleArn"
            case creationTime = "creationTime"
            case filterName = "filterName"
        }
    }

    public struct DescribeSubscriptionFiltersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "filterNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The prefix to match. If you don't specify a value, no prefix filter is applied.
        public let filterNamePrefix: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// The name of the log group.
        public let logGroupName: String

        public init(nextToken: String? = nil, filterNamePrefix: String? = nil, limit: Int32? = nil, logGroupName: String) {
            self.nextToken = nextToken
            self.filterNamePrefix = filterNamePrefix
            self.limit = limit
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case filterNamePrefix = "filterNamePrefix"
            case limit = "limit"
            case logGroupName = "logGroupName"
        }
    }

    public struct DisassociateKmsKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The name of the log group.
        public let logGroupName: String

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
        }
    }

    public struct DescribeLogGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "logGroups", required: false, type: .list)
        ]
        public let nextToken: String?
        /// The log groups.
        public let logGroups: [LogGroup]?

        public init(nextToken: String? = nil, logGroups: [LogGroup]? = nil) {
            self.nextToken = nextToken
            self.logGroups = logGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case logGroups = "logGroups"
        }
    }

    public struct RejectedLogEventsInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tooNewLogEventStartIndex", required: false, type: .integer), 
            AWSShapeMember(label: "expiredLogEventEndIndex", required: false, type: .integer), 
            AWSShapeMember(label: "tooOldLogEventEndIndex", required: false, type: .integer)
        ]
        /// The log events that are too new.
        public let tooNewLogEventStartIndex: Int32?
        /// The expired log events.
        public let expiredLogEventEndIndex: Int32?
        /// The log events that are too old.
        public let tooOldLogEventEndIndex: Int32?

        public init(tooNewLogEventStartIndex: Int32? = nil, expiredLogEventEndIndex: Int32? = nil, tooOldLogEventEndIndex: Int32? = nil) {
            self.tooNewLogEventStartIndex = tooNewLogEventStartIndex
            self.expiredLogEventEndIndex = expiredLogEventEndIndex
            self.tooOldLogEventEndIndex = tooOldLogEventEndIndex
        }

        private enum CodingKeys: String, CodingKey {
            case tooNewLogEventStartIndex = "tooNewLogEventStartIndex"
            case expiredLogEventEndIndex = "expiredLogEventEndIndex"
            case tooOldLogEventEndIndex = "tooOldLogEventEndIndex"
        }
    }

    public struct DeleteLogGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The name of the log group.
        public let logGroupName: String

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
        }
    }

    public struct ListTagsLogGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The name of the log group.
        public let logGroupName: String

        public init(logGroupName: String) {
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
        }
    }

    public struct ExportTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskName", required: false, type: .string), 
            AWSShapeMember(label: "executionInfo", required: false, type: .structure), 
            AWSShapeMember(label: "destinationPrefix", required: false, type: .string), 
            AWSShapeMember(label: "taskId", required: false, type: .string), 
            AWSShapeMember(label: "to", required: false, type: .long), 
            AWSShapeMember(label: "destination", required: false, type: .string), 
            AWSShapeMember(label: "logGroupName", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .structure), 
            AWSShapeMember(label: "from", required: false, type: .long)
        ]
        /// The name of the export task.
        public let taskName: String?
        /// Execution info about the export task.
        public let executionInfo: ExportTaskExecutionInfo?
        /// The prefix that was used as the start of Amazon S3 key for every object exported.
        public let destinationPrefix: String?
        /// The ID of the export task.
        public let taskId: String?
        /// The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp later than this time are not exported.
        public let to: Int64?
        /// The name of Amazon S3 bucket to which the log data was exported.
        public let destination: String?
        /// The name of the log group from which logs data was exported.
        public let logGroupName: String?
        /// The status of the export task.
        public let status: ExportTaskStatus?
        /// The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp before this time are not exported.
        public let from: Int64?

        public init(taskName: String? = nil, executionInfo: ExportTaskExecutionInfo? = nil, destinationPrefix: String? = nil, taskId: String? = nil, to: Int64? = nil, destination: String? = nil, logGroupName: String? = nil, status: ExportTaskStatus? = nil, from: Int64? = nil) {
            self.taskName = taskName
            self.executionInfo = executionInfo
            self.destinationPrefix = destinationPrefix
            self.taskId = taskId
            self.to = to
            self.destination = destination
            self.logGroupName = logGroupName
            self.status = status
            self.from = from
        }

        private enum CodingKeys: String, CodingKey {
            case taskName = "taskName"
            case executionInfo = "executionInfo"
            case destinationPrefix = "destinationPrefix"
            case taskId = "taskId"
            case to = "to"
            case destination = "destination"
            case logGroupName = "logGroupName"
            case status = "status"
            case from = "from"
        }
    }

    public struct PutMetricFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metricTransformations", required: true, type: .list), 
            AWSShapeMember(label: "filterPattern", required: true, type: .string), 
            AWSShapeMember(label: "filterName", required: true, type: .string), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// A collection of information that defines how metric data gets emitted.
        public let metricTransformations: [MetricTransformation]
        /// A filter pattern for extracting metric data out of ingested log events.
        public let filterPattern: String
        /// A name for the metric filter.
        public let filterName: String
        /// The name of the log group.
        public let logGroupName: String

        public init(metricTransformations: [MetricTransformation], filterPattern: String, filterName: String, logGroupName: String) {
            self.metricTransformations = metricTransformations
            self.filterPattern = filterPattern
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case metricTransformations = "metricTransformations"
            case filterPattern = "filterPattern"
            case filterName = "filterName"
            case logGroupName = "logGroupName"
        }
    }

    public struct OutputLogEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ingestionTime", required: false, type: .long), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "timestamp", required: false, type: .long)
        ]
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let ingestionTime: Int64?
        /// The data contained in the log event.
        public let message: String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let timestamp: Int64?

        public init(ingestionTime: Int64? = nil, message: String? = nil, timestamp: Int64? = nil) {
            self.ingestionTime = ingestionTime
            self.message = message
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case ingestionTime = "ingestionTime"
            case message = "message"
            case timestamp = "timestamp"
        }
    }

    public struct MetricFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationTime", required: false, type: .long), 
            AWSShapeMember(label: "metricTransformations", required: false, type: .list), 
            AWSShapeMember(label: "filterPattern", required: false, type: .string), 
            AWSShapeMember(label: "filterName", required: false, type: .string), 
            AWSShapeMember(label: "logGroupName", required: false, type: .string)
        ]
        /// The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let creationTime: Int64?
        /// The metric transformations.
        public let metricTransformations: [MetricTransformation]?
        public let filterPattern: String?
        /// The name of the metric filter.
        public let filterName: String?
        /// The name of the log group.
        public let logGroupName: String?

        public init(creationTime: Int64? = nil, metricTransformations: [MetricTransformation]? = nil, filterPattern: String? = nil, filterName: String? = nil, logGroupName: String? = nil) {
            self.creationTime = creationTime
            self.metricTransformations = metricTransformations
            self.filterPattern = filterPattern
            self.filterName = filterName
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "creationTime"
            case metricTransformations = "metricTransformations"
            case filterPattern = "filterPattern"
            case filterName = "filterName"
            case logGroupName = "logGroupName"
        }
    }

    public struct DescribeLogStreamsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "logStreamNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "orderBy", required: false, type: .enum), 
            AWSShapeMember(label: "descending", required: false, type: .boolean), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The prefix to match. iIf orderBy is LastEventTime,you cannot specify this parameter.
        public let logStreamNamePrefix: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time. The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter. lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimeStamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but may take longer in some rare situations.
        public let orderBy: OrderBy?
        /// If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.
        public let descending: Bool?
        /// The name of the log group.
        public let logGroupName: String

        public init(nextToken: String? = nil, logStreamNamePrefix: String? = nil, limit: Int32? = nil, orderBy: OrderBy? = nil, descending: Bool? = nil, logGroupName: String) {
            self.nextToken = nextToken
            self.logStreamNamePrefix = logStreamNamePrefix
            self.limit = limit
            self.orderBy = orderBy
            self.descending = descending
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case logStreamNamePrefix = "logStreamNamePrefix"
            case limit = "limit"
            case orderBy = "orderBy"
            case descending = "descending"
            case logGroupName = "logGroupName"
        }
    }

    public struct CreateExportTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The ID of the export task.
        public let taskId: String?

        public init(taskId: String? = nil) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct LogGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: false, type: .string), 
            AWSShapeMember(label: "kmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "metricFilterCount", required: false, type: .integer), 
            AWSShapeMember(label: "creationTime", required: false, type: .long), 
            AWSShapeMember(label: "retentionInDays", required: false, type: .integer), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "storedBytes", required: false, type: .long)
        ]
        /// The name of the log group.
        public let logGroupName: String?
        /// The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
        public let kmsKeyId: String?
        /// The number of metric filters.
        public let metricFilterCount: Int32?
        /// The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let creationTime: Int64?
        public let retentionInDays: Int32?
        /// The Amazon Resource Name (ARN) of the log group.
        public let arn: String?
        /// The number of bytes stored.
        public let storedBytes: Int64?

        public init(logGroupName: String? = nil, kmsKeyId: String? = nil, metricFilterCount: Int32? = nil, creationTime: Int64? = nil, retentionInDays: Int32? = nil, arn: String? = nil, storedBytes: Int64? = nil) {
            self.logGroupName = logGroupName
            self.kmsKeyId = kmsKeyId
            self.metricFilterCount = metricFilterCount
            self.creationTime = creationTime
            self.retentionInDays = retentionInDays
            self.arn = arn
            self.storedBytes = storedBytes
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
            case kmsKeyId = "kmsKeyId"
            case metricFilterCount = "metricFilterCount"
            case creationTime = "creationTime"
            case retentionInDays = "retentionInDays"
            case arn = "arn"
            case storedBytes = "storedBytes"
        }
    }

    public struct DeleteMetricFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: true, type: .string), 
            AWSShapeMember(label: "filterName", required: true, type: .string)
        ]
        /// The name of the log group.
        public let logGroupName: String
        /// The name of the metric filter.
        public let filterName: String

        public init(logGroupName: String, filterName: String) {
            self.logGroupName = logGroupName
            self.filterName = filterName
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
            case filterName = "filterName"
        }
    }

    public struct DescribeExportTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "statusCode", required: false, type: .enum), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
        public let statusCode: ExportTaskStatusCode?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?
        /// The ID of the export task. Specifying a task ID filters the results to zero or one export tasks.
        public let taskId: String?

        public init(nextToken: String? = nil, statusCode: ExportTaskStatusCode? = nil, limit: Int32? = nil, taskId: String? = nil) {
            self.nextToken = nextToken
            self.statusCode = statusCode
            self.limit = limit
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case statusCode = "statusCode"
            case limit = "limit"
            case taskId = "taskId"
        }
    }

    public struct PutResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "policyName", required: false, type: .string)
        ]
        /// Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace "logArn" with the ARN of your CloudWatch Logs resource, such as a log group or log stream.  { "Version": "2012-10-17" "Statement": [ { "Sid": "Route53LogsToCloudWatchLogs", "Effect": "Allow", "Principal": { "Service": [ "route53.amazonaws.com" ] }, "Action":"logs:PutLogEvents", "Resource": logArn } ] } 
        public let policyDocument: String?
        /// Name of the new policy. This parameter is required.
        public let policyName: String?

        public init(policyDocument: String? = nil, policyName: String? = nil) {
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyDocument = "policyDocument"
            case policyName = "policyName"
        }
    }

    public struct TestMetricFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filterPattern", required: true, type: .string), 
            AWSShapeMember(label: "logEventMessages", required: true, type: .list)
        ]
        public let filterPattern: String
        /// The log event messages to test.
        public let logEventMessages: [String]

        public init(filterPattern: String, logEventMessages: [String]) {
            self.filterPattern = filterPattern
            self.logEventMessages = logEventMessages
        }

        private enum CodingKeys: String, CodingKey {
            case filterPattern = "filterPattern"
            case logEventMessages = "logEventMessages"
        }
    }

    public struct DescribeMetricFiltersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metricFilters", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The metric filters.
        public let metricFilters: [MetricFilter]?
        public let nextToken: String?

        public init(metricFilters: [MetricFilter]? = nil, nextToken: String? = nil) {
            self.metricFilters = metricFilters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case metricFilters = "metricFilters"
            case nextToken = "nextToken"
        }
    }

    public struct PutRetentionPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logGroupName", required: true, type: .string), 
            AWSShapeMember(label: "retentionInDays", required: true, type: .integer)
        ]
        /// The name of the log group.
        public let logGroupName: String
        public let retentionInDays: Int32

        public init(logGroupName: String, retentionInDays: Int32) {
            self.logGroupName = logGroupName
            self.retentionInDays = retentionInDays
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "logGroupName"
            case retentionInDays = "retentionInDays"
        }
    }

    public struct FilterLogEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logStreamNames", required: false, type: .list), 
            AWSShapeMember(label: "interleaved", required: false, type: .boolean), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "filterPattern", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .long), 
            AWSShapeMember(label: "endTime", required: false, type: .long)
        ]
        /// Optional list of log stream names.
        public let logStreamNames: [String]?
        /// If the value is true, the operation makes a best effort to provide responses that contain events from multiple log streams within the log group, interleaved in a single response. If the value is false, all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. The default is false.
        public let interleaved: Bool?
        /// The maximum number of events to return. The default is 10,000 events.
        public let limit: Int32?
        /// The name of the log group.
        public let logGroupName: String
        /// The token for the next set of events to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The filter pattern to use. If not provided, all the events are matched.
        public let filterPattern: String?
        /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp before this time are not returned.
        public let startTime: Int64?
        /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp later than this time are not returned.
        public let endTime: Int64?

        public init(logStreamNames: [String]? = nil, interleaved: Bool? = nil, limit: Int32? = nil, logGroupName: String, nextToken: String? = nil, filterPattern: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil) {
            self.logStreamNames = logStreamNames
            self.interleaved = interleaved
            self.limit = limit
            self.logGroupName = logGroupName
            self.nextToken = nextToken
            self.filterPattern = filterPattern
            self.startTime = startTime
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamNames = "logStreamNames"
            case interleaved = "interleaved"
            case limit = "limit"
            case logGroupName = "logGroupName"
            case nextToken = "nextToken"
            case filterPattern = "filterPattern"
            case startTime = "startTime"
            case endTime = "endTime"
        }
    }

    public struct PutSubscriptionFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinationArn", required: true, type: .string), 
            AWSShapeMember(label: "distribution", required: false, type: .enum), 
            AWSShapeMember(label: "filterPattern", required: true, type: .string), 
            AWSShapeMember(label: "filterName", required: true, type: .string), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:   An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.   A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery.   An Amazon Kinesis Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.   An AWS Lambda function belonging to the same account as the subscription filter, for same-account delivery.  
        public let destinationArn: String
        /// The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. 
        public let distribution: Distribution?
        /// A filter pattern for subscribing to a filtered stream of log events.
        public let filterPattern: String
        /// A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in filterName. Otherwise, the call fails because you cannot associate a second filter with a log group. To find the name of the filter currently associated with a log group, use DescribeSubscriptionFilters.
        public let filterName: String
        /// The name of the log group.
        public let logGroupName: String
        /// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
        public let roleArn: String?

        public init(destinationArn: String, distribution: Distribution? = nil, filterPattern: String, filterName: String, logGroupName: String, roleArn: String? = nil) {
            self.destinationArn = destinationArn
            self.distribution = distribution
            self.filterPattern = filterPattern
            self.filterName = filterName
            self.logGroupName = logGroupName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "destinationArn"
            case distribution = "distribution"
            case filterPattern = "filterPattern"
            case filterName = "filterName"
            case logGroupName = "logGroupName"
            case roleArn = "roleArn"
        }
    }

    public enum ExportTaskStatusCode: String, CustomStringConvertible, Codable {
        case cancelled = "CANCELLED"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case pending = "PENDING"
        case pendingCancel = "PENDING_CANCEL"
        case running = "RUNNING"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsLogGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]
        /// The tags for the log group.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct PutDestinationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetArn", required: true, type: .string), 
            AWSShapeMember(label: "destinationName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The ARN of an Amazon Kinesis stream to which to deliver matching log events.
        public let targetArn: String
        /// A name for the destination.
        public let destinationName: String
        /// The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis PutRecord operation on the destination stream.
        public let roleArn: String

        public init(targetArn: String, destinationName: String, roleArn: String) {
            self.targetArn = targetArn
            self.destinationName = destinationName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetArn = "targetArn"
            case destinationName = "destinationName"
            case roleArn = "roleArn"
        }
    }

    public struct MetricFilterMatchRecord: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventMessage", required: false, type: .string), 
            AWSShapeMember(label: "eventNumber", required: false, type: .long), 
            AWSShapeMember(label: "extractedValues", required: false, type: .map)
        ]
        /// The raw event data.
        public let eventMessage: String?
        /// The event number.
        public let eventNumber: Int64?
        /// The values extracted from the event data by the filter.
        public let extractedValues: [String: String]?

        public init(eventMessage: String? = nil, eventNumber: Int64? = nil, extractedValues: [String: String]? = nil) {
            self.eventMessage = eventMessage
            self.eventNumber = eventNumber
            self.extractedValues = extractedValues
        }

        private enum CodingKeys: String, CodingKey {
            case eventMessage = "eventMessage"
            case eventNumber = "eventNumber"
            case extractedValues = "extractedValues"
        }
    }

    public struct ResourcePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .long)
        ]
        /// The details of the policy.
        public let policyDocument: String?
        /// The name of the resource policy.
        public let policyName: String?
        /// Time stamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let lastUpdatedTime: Int64?

        public init(policyDocument: String? = nil, policyName: String? = nil, lastUpdatedTime: Int64? = nil) {
            self.policyDocument = policyDocument
            self.policyName = policyName
            self.lastUpdatedTime = lastUpdatedTime
        }

        private enum CodingKeys: String, CodingKey {
            case policyDocument = "policyDocument"
            case policyName = "policyName"
            case lastUpdatedTime = "lastUpdatedTime"
        }
    }

    public struct GetLogEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startFromHead", required: false, type: .boolean), 
            AWSShapeMember(label: "logStreamName", required: true, type: .string), 
            AWSShapeMember(label: "limit", required: false, type: .integer), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .long), 
            AWSShapeMember(label: "endTime", required: false, type: .long)
        ]
        /// If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false.
        public let startFromHead: Bool?
        /// The name of the log stream.
        public let logStreamName: String
        /// The maximum number of log events returned. If you don't specify a value, the maximum is as many log events as can fit in a response size of 1 MB, up to 10,000 log events.
        public let limit: Int32?
        /// The name of the log group.
        public let logGroupName: String
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp earlier than this time are not included.
        public let startTime: Int64?
        /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a time stamp later than this time are not included.
        public let endTime: Int64?

        public init(startFromHead: Bool? = nil, logStreamName: String, limit: Int32? = nil, logGroupName: String, nextToken: String? = nil, startTime: Int64? = nil, endTime: Int64? = nil) {
            self.startFromHead = startFromHead
            self.logStreamName = logStreamName
            self.limit = limit
            self.logGroupName = logGroupName
            self.nextToken = nextToken
            self.startTime = startTime
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case startFromHead = "startFromHead"
            case logStreamName = "logStreamName"
            case limit = "limit"
            case logGroupName = "logGroupName"
            case nextToken = "nextToken"
            case startTime = "startTime"
            case endTime = "endTime"
        }
    }

    public struct PutDestinationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destination", required: false, type: .structure)
        ]
        /// The destination.
        public let destination: Destination?

        public init(destination: Destination? = nil) {
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
        }
    }

    public struct AssociateKmsKeyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "kmsKeyId", required: true, type: .string), 
            AWSShapeMember(label: "logGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the CMK to use when encrypting log data. For more information, see Amazon Resource Names - AWS Key Management Service (AWS KMS).
        public let kmsKeyId: String
        /// The name of the log group.
        public let logGroupName: String

        public init(kmsKeyId: String, logGroupName: String) {
            self.kmsKeyId = kmsKeyId
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case logGroupName = "logGroupName"
        }
    }

    public struct DescribeDestinationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destinations", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The destinations.
        public let destinations: [Destination]?
        public let nextToken: String?

        public init(destinations: [Destination]? = nil, nextToken: String? = nil) {
            self.destinations = destinations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "destinations"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeDestinationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "limit", required: false, type: .integer)
        ]
        /// The prefix to match. If you don't specify a value, no prefix filter is applied.
        public let destinationNamePrefix: String?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
        public let limit: Int32?

        public init(destinationNamePrefix: String? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.destinationNamePrefix = destinationNamePrefix
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case destinationNamePrefix = "DestinationNamePrefix"
            case nextToken = "nextToken"
            case limit = "limit"
        }
    }

    public struct DescribeLogStreamsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logStreams", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The log streams.
        public let logStreams: [LogStream]?
        public let nextToken: String?

        public init(logStreams: [LogStream]? = nil, nextToken: String? = nil) {
            self.logStreams = logStreams
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case logStreams = "logStreams"
            case nextToken = "nextToken"
        }
    }

    public struct CancelExportTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: true, type: .string)
        ]
        /// The ID of the export task.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct FilteredLogEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventId", required: false, type: .string), 
            AWSShapeMember(label: "ingestionTime", required: false, type: .long), 
            AWSShapeMember(label: "timestamp", required: false, type: .long), 
            AWSShapeMember(label: "logStreamName", required: false, type: .string), 
            AWSShapeMember(label: "message", required: false, type: .string)
        ]
        /// The ID of the event.
        public let eventId: String?
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let ingestionTime: Int64?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public let timestamp: Int64?
        /// The name of the log stream this event belongs to.
        public let logStreamName: String?
        /// The data contained in the log event.
        public let message: String?

        public init(eventId: String? = nil, ingestionTime: Int64? = nil, timestamp: Int64? = nil, logStreamName: String? = nil, message: String? = nil) {
            self.eventId = eventId
            self.ingestionTime = ingestionTime
            self.timestamp = timestamp
            self.logStreamName = logStreamName
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case eventId = "eventId"
            case ingestionTime = "ingestionTime"
            case timestamp = "timestamp"
            case logStreamName = "logStreamName"
            case message = "message"
        }
    }

}