// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IotJobsData {

    public struct UpdateJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "includeJobDocument", required: false, type: .boolean), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "includeJobExecutionState", required: false, type: .boolean), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
        public let expectedVersion: Int64?
        /// The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
        public let status: JobExecutionStatus
        /// Optional. When set to true, the response contains the job document. The default is false.
        public let includeJobDocument: Bool?
        /// The name of the thing associated with the device.
        public let thingName: String
        ///  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
        public let statusDetails: [String: String]?
        /// Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
        public let includeJobExecutionState: Bool?
        /// Optional. A number that identifies a particular job execution on a particular device.
        public let executionNumber: Int64?
        /// The unique identifier assigned to this job when it was created.
        public let jobId: String

        public init(expectedVersion: Int64? = nil, status: JobExecutionStatus, includeJobDocument: Bool? = nil, thingName: String, statusDetails: [String: String]? = nil, includeJobExecutionState: Bool? = nil, executionNumber: Int64? = nil, jobId: String) {
            self.expectedVersion = expectedVersion
            self.status = status
            self.includeJobDocument = includeJobDocument
            self.thingName = thingName
            self.statusDetails = statusDetails
            self.includeJobExecutionState = includeJobExecutionState
            self.executionNumber = executionNumber
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case status = "status"
            case includeJobDocument = "includeJobDocument"
            case thingName = "thingName"
            case statusDetails = "statusDetails"
            case includeJobExecutionState = "includeJobExecutionState"
            case executionNumber = "executionNumber"
            case jobId = "jobId"
        }
    }

    public struct UpdateJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionState", required: false, type: .structure), 
            AWSShapeMember(label: "jobDocument", required: false, type: .string)
        ]
        /// A JobExecutionState object.
        public let executionState: JobExecutionState?
        /// The contents of the Job Documents.
        public let jobDocument: String?

        public init(executionState: JobExecutionState? = nil, jobDocument: String? = nil) {
            self.executionState = executionState
            self.jobDocument = jobDocument
        }

        private enum CodingKeys: String, CodingKey {
            case executionState = "executionState"
            case jobDocument = "jobDocument"
        }
    }

    public struct GetPendingJobExecutionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queuedJobs", required: false, type: .list), 
            AWSShapeMember(label: "inProgressJobs", required: false, type: .list)
        ]
        /// A list of JobExecutionSummary objects with status QUEUED.
        public let queuedJobs: [JobExecutionSummary]?
        /// A list of JobExecutionSummary objects with status IN_PROGRESS.
        public let inProgressJobs: [JobExecutionSummary]?

        public init(queuedJobs: [JobExecutionSummary]? = nil, inProgressJobs: [JobExecutionSummary]? = nil) {
            self.queuedJobs = queuedJobs
            self.inProgressJobs = inProgressJobs
        }

        private enum CodingKeys: String, CodingKey {
            case queuedJobs = "queuedJobs"
            case inProgressJobs = "inProgressJobs"
        }
    }

    public enum JobExecutionStatus: String, CustomStringConvertible, Codable {
        case queued = "QUEUED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case rejected = "REJECTED"
        case removed = "REMOVED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct JobExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "jobDocument", required: false, type: .string), 
            AWSShapeMember(label: "startedAt", required: false, type: .long), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .long), 
            AWSShapeMember(label: "queuedAt", required: false, type: .long), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "jobId", required: false, type: .string)
        ]
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public let status: JobExecutionStatus?
        /// The name of the thing that is executing the job.
        public let thingName: String?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: [String: String]?
        /// The content of the job document.
        public let jobDocument: String?
        /// The time, in milliseconds since the epoch, when the job execution was started.
        public let startedAt: Int64?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was last updated. 
        public let lastUpdatedAt: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public let queuedAt: Int64?
        /// A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.
        public let executionNumber: Int64?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?

        public init(status: JobExecutionStatus? = nil, thingName: String? = nil, statusDetails: [String: String]? = nil, jobDocument: String? = nil, startedAt: Int64? = nil, versionNumber: Int64? = nil, lastUpdatedAt: Int64? = nil, queuedAt: Int64? = nil, executionNumber: Int64? = nil, jobId: String? = nil) {
            self.status = status
            self.thingName = thingName
            self.statusDetails = statusDetails
            self.jobDocument = jobDocument
            self.startedAt = startedAt
            self.versionNumber = versionNumber
            self.lastUpdatedAt = lastUpdatedAt
            self.queuedAt = queuedAt
            self.executionNumber = executionNumber
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case thingName = "thingName"
            case statusDetails = "statusDetails"
            case jobDocument = "jobDocument"
            case startedAt = "startedAt"
            case versionNumber = "versionNumber"
            case lastUpdatedAt = "lastUpdatedAt"
            case queuedAt = "queuedAt"
            case executionNumber = "executionNumber"
            case jobId = "jobId"
        }
    }

    public struct StartNextPendingJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
        public let statusDetails: [String: String]?
        /// The name of the thing associated with the device.
        public let thingName: String

        public init(statusDetails: [String: String]? = nil, thingName: String) {
            self.statusDetails = statusDetails
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case statusDetails = "statusDetails"
            case thingName = "thingName"
        }
    }

    public struct JobExecutionState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map)
        ]
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".
        public let status: JobExecutionStatus?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: [String: String]?

        public init(versionNumber: Int64? = nil, status: JobExecutionStatus? = nil, statusDetails: [String: String]? = nil) {
            self.versionNumber = versionNumber
            self.status = status
            self.statusDetails = statusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case versionNumber = "versionNumber"
            case status = "status"
            case statusDetails = "statusDetails"
        }
    }

    public struct GetPendingJobExecutionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing that is executing the job.
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
        }
    }

    public struct DescribeJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "includeJobDocument", location: .querystring(locationName: "includeJobDocument"), required: false, type: .boolean), 
            AWSShapeMember(label: "executionNumber", location: .querystring(locationName: "executionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The thing name associated with the device the job execution is running on.
        public let thingName: String
        /// Optional. When set to true, the response contains the job document. The default is false.
        public let includeJobDocument: Bool?
        /// Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.
        public let executionNumber: Int64?
        /// The unique identifier assigned to this job when it was created.
        public let jobId: String

        public init(thingName: String, includeJobDocument: Bool? = nil, executionNumber: Int64? = nil, jobId: String) {
            self.thingName = thingName
            self.includeJobDocument = includeJobDocument
            self.executionNumber = executionNumber
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case includeJobDocument = "includeJobDocument"
            case executionNumber = "executionNumber"
            case jobId = "jobId"
        }
    }

    public struct StartNextPendingJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// A JobExecution object.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public struct DescribeJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// Contains data about a job execution.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public struct JobExecutionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .long), 
            AWSShapeMember(label: "startedAt", required: false, type: .long), 
            AWSShapeMember(label: "queuedAt", required: false, type: .long), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "jobId", required: false, type: .string)
        ]
        /// The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.
        public let versionNumber: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public let lastUpdatedAt: Int64?
        /// The time, in milliseconds since the epoch, when the job execution started.
        public let startedAt: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was enqueued.
        public let queuedAt: Int64?
        /// A number that identifies a particular job execution on a particular device.
        public let executionNumber: Int64?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?

        public init(versionNumber: Int64? = nil, lastUpdatedAt: Int64? = nil, startedAt: Int64? = nil, queuedAt: Int64? = nil, executionNumber: Int64? = nil, jobId: String? = nil) {
            self.versionNumber = versionNumber
            self.lastUpdatedAt = lastUpdatedAt
            self.startedAt = startedAt
            self.queuedAt = queuedAt
            self.executionNumber = executionNumber
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case versionNumber = "versionNumber"
            case lastUpdatedAt = "lastUpdatedAt"
            case startedAt = "startedAt"
            case queuedAt = "queuedAt"
            case executionNumber = "executionNumber"
            case jobId = "jobId"
        }
    }

}