// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

/**
An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
*/
public struct Mediastore {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "MediaStore_20170901",
            service: "mediastore",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-09-01",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [MediastoreError.self]
        )
    }

    ///  Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.
    public func createContainer(_ input: CreateContainerInput) throws -> CreateContainerOutput {
        return try client.send(operation: "CreateContainer", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the AWS Identity and Access Management User Guide. For this release of the REST API, you can create only one policy for a container. If you enter PutContainerPolicy twice, the second command modifies the existing policy. 
    public func putContainerPolicy(_ input: PutContainerPolicyInput) throws -> PutContainerPolicyOutput {
        return try client.send(operation: "PutContainerPolicy", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the specified container. Before you make a DeleteContainer request, delete any objects in the container or in any folders in the container. You can delete only empty containers. 
    public func deleteContainer(_ input: DeleteContainerInput) throws -> DeleteContainerOutput {
        return try client.send(operation: "DeleteContainer", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the properties of the requested container. This returns a single Container object based on ContainerName. To return all Container objects that are associated with a specified AWS account, use ListContainers.
    public func describeContainer(_ input: DescribeContainerInput) throws -> DescribeContainerOutput {
        return try client.send(operation: "DescribeContainer", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the AWS Identity and Access Management User Guide.
    public func getContainerPolicy(_ input: GetContainerPolicyInput) throws -> GetContainerPolicyOutput {
        return try client.send(operation: "GetContainerPolicy", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes the access policy that is associated with the specified container.
    public func deleteContainerPolicy(_ input: DeleteContainerPolicyInput) throws -> DeleteContainerPolicyOutput {
        return try client.send(operation: "DeleteContainerPolicy", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists the properties of all containers in AWS Elemental MediaStore.  You can query to receive all the containers in one response. Or you can include the MaxResults parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the NextToken parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive.  See also DescribeContainer, which gets the properties of one container. 
    public func listContainers(_ input: ListContainersInput) throws -> ListContainersOutput {
        return try client.send(operation: "ListContainers", path: "/", httpMethod: "POST", input: input)
    }


}