// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension TranscribeService {

    public struct ListTranscriptionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "JobNameContains", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// When specified, returns only transcription jobs with the specified status.
        public let status: TranscriptionJobStatus?
        /// When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.
        public let jobNameContains: String?
        /// The maximum number of jobs to return in the response. If there are fewer results in the list, this response contains only the actual results.
        public let maxResults: Int32?
        /// If the result of the previous request to ListTranscriptionJobs was truncated, include the NextToken to fetch the next set of jobs.
        public let nextToken: String?

        public init(status: TranscriptionJobStatus? = nil, jobNameContains: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.status = status
            self.jobNameContains = jobNameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case jobNameContains = "JobNameContains"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct StartTranscriptionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "MediaSampleRateHertz", required: false, type: .integer), 
            AWSShapeMember(label: "Media", required: true, type: .structure), 
            AWSShapeMember(label: "TranscriptionJobName", required: true, type: .string), 
            AWSShapeMember(label: "Settings", required: false, type: .structure), 
            AWSShapeMember(label: "OutputBucketName", required: false, type: .string), 
            AWSShapeMember(label: "MediaFormat", required: true, type: .enum)
        ]
        /// The language code for the language used in the input media file.
        public let languageCode: LanguageCode
        /// The sample rate, in Hertz, of the audio track in the input media file. 
        public let mediaSampleRateHertz: Int32?
        /// An object that describes the input media for a transcription job.
        public let media: Media
        /// The name of the job. Note that you can't use the strings "." or ".." by themselves as the job name. The name must also be unique within an AWS account.
        public let transcriptionJobName: String
        /// A Settings object that provides optional settings for a transcription job.
        public let settings: Settings?
        /// The location where the transcription is stored. If you set the OutputBucketName, Amazon Transcribe puts the transcription in the specified S3 bucket. When you call the GetTranscriptionJob operation, the operation returns this location in the TranscriptFileUri field. The S3 bucket must have permissions that allow Amazon Transcribe to put files in the bucket. For more information, see Permissions Required for IAM User Roles. If you don't set the OutputBucketName, Amazon Transcribe generates a pre-signed URL, a shareable URL that provides secure access to your transcription, and returns it in the TranscriptFileUri field. Use this URL to download the transcription.
        public let outputBucketName: String?
        /// The format of the input media file.
        public let mediaFormat: MediaFormat

        public init(languageCode: LanguageCode, mediaSampleRateHertz: Int32? = nil, media: Media, transcriptionJobName: String, settings: Settings? = nil, outputBucketName: String? = nil, mediaFormat: MediaFormat) {
            self.languageCode = languageCode
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.media = media
            self.transcriptionJobName = transcriptionJobName
            self.settings = settings
            self.outputBucketName = outputBucketName
            self.mediaFormat = mediaFormat
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case media = "Media"
            case transcriptionJobName = "TranscriptionJobName"
            case settings = "Settings"
            case outputBucketName = "OutputBucketName"
            case mediaFormat = "MediaFormat"
        }
    }

    public struct Transcript: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TranscriptFileUri", required: false, type: .string)
        ]
        /// The location where the transcription is stored. Use this URI to access the transcription. If you specified an S3 bucket in the OutputBucketName field when you created the job, this is the URI of that bucket. If you chose to store the transcription in Amazon Transcribe, this is a shareable URL that provides secure access to that location.
        public let transcriptFileUri: String?

        public init(transcriptFileUri: String? = nil) {
            self.transcriptFileUri = transcriptFileUri
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptFileUri = "TranscriptFileUri"
        }
    }

    public enum VocabularyState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case ready = "READY"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ListVocabulariesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateEquals", required: false, type: .enum), 
            AWSShapeMember(label: "NameContains", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// When specified, only returns vocabularies with the VocabularyState field equal to the specified state.
        public let stateEquals: VocabularyState?
        /// When specified, the vocabularies returned in the list are limited to vocabularies whose name contains the specified string. The search is case-insensitive, ListVocabularies will return both "vocabularyname" and "VocabularyName" in the response list.
        public let nameContains: String?
        /// The maximum number of vocabularies to return in the response. If there are fewer results in the list, this response contains only the actual results.
        public let maxResults: Int32?
        /// If the result of the previous request to ListVocabularies was truncated, include the NextToken to fetch the next set of jobs.
        public let nextToken: String?

        public init(stateEquals: VocabularyState? = nil, nameContains: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.stateEquals = stateEquals
            self.nameContains = nameContains
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case stateEquals = "StateEquals"
            case nameContains = "NameContains"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct CreateVocabularyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyState", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyName", required: false, type: .string)
        ]
        /// The date and time that the vocabulary was created.
        public let lastModifiedTime: TimeStamp?
        /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
        public let failureReason: String?
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The processing state of the vocabulary. When the VocabularyState field contains READY the vocabulary is ready to be used in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?
        /// The name of the vocabulary.
        public let vocabularyName: String?

        public init(lastModifiedTime: TimeStamp? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, vocabularyState: VocabularyState? = nil, vocabularyName: String? = nil) {
            self.lastModifiedTime = lastModifiedTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.vocabularyState = vocabularyState
            self.vocabularyName = vocabularyName
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case vocabularyState = "VocabularyState"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct UpdateVocabularyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyState", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyName", required: false, type: .string)
        ]
        /// The date and time that the vocabulary was updated.
        public let lastModifiedTime: TimeStamp?
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The processing state of the vocabulary. When the VocabularyState field contains READY the vocabulary is ready to be used in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?
        /// The name of the vocabulary that was updated.
        public let vocabularyName: String?

        public init(lastModifiedTime: TimeStamp? = nil, languageCode: LanguageCode? = nil, vocabularyState: VocabularyState? = nil, vocabularyName: String? = nil) {
            self.lastModifiedTime = lastModifiedTime
            self.languageCode = languageCode
            self.vocabularyState = vocabularyState
            self.vocabularyName = vocabularyName
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case languageCode = "LanguageCode"
            case vocabularyState = "VocabularyState"
            case vocabularyName = "VocabularyName"
        }
    }

    public struct DeleteVocabularyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VocabularyName", required: true, type: .string)
        ]
        /// The name of the vocabulary to delete. 
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        private enum CodingKeys: String, CodingKey {
            case vocabularyName = "VocabularyName"
        }
    }

    public enum MediaFormat: String, CustomStringConvertible, Codable {
        case mp3 = "mp3"
        case mp4 = "mp4"
        case wav = "wav"
        case flac = "flac"
        public var description: String { return self.rawValue }
    }

    public struct ListTranscriptionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TranscriptionJobSummaries", required: false, type: .list)
        ]
        /// The requested status of the jobs returned.
        public let status: TranscriptionJobStatus?
        /// The ListTranscriptionJobs operation returns a page of jobs at a time. The maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in the next request to the ListTranscriptionJobs operation to return in the next page of jobs.
        public let nextToken: String?
        /// A list of objects containing summary information for a transcription job.
        public let transcriptionJobSummaries: [TranscriptionJobSummary]?

        public init(status: TranscriptionJobStatus? = nil, nextToken: String? = nil, transcriptionJobSummaries: [TranscriptionJobSummary]? = nil) {
            self.status = status
            self.nextToken = nextToken
            self.transcriptionJobSummaries = transcriptionJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case nextToken = "NextToken"
            case transcriptionJobSummaries = "TranscriptionJobSummaries"
        }
    }

    public struct UpdateVocabularyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VocabularyName", required: true, type: .string), 
            AWSShapeMember(label: "Phrases", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// The name of the vocabulary to update. The name is case-sensitive.
        public let vocabularyName: String
        /// An array of strings containing the vocabulary entries.
        public let phrases: [String]
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode

        public init(vocabularyName: String, phrases: [String], languageCode: LanguageCode) {
            self.vocabularyName = vocabularyName
            self.phrases = phrases
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case vocabularyName = "VocabularyName"
            case phrases = "Phrases"
            case languageCode = "LanguageCode"
        }
    }

    public struct GetVocabularyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyState", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyName", required: false, type: .string), 
            AWSShapeMember(label: "DownloadUri", required: false, type: .string)
        ]
        /// The date and time that the vocabulary was last modified.
        public let lastModifiedTime: TimeStamp?
        /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
        public let failureReason: String?
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The processing state of the vocabulary.
        public let vocabularyState: VocabularyState?
        /// The name of the vocabulary to return.
        public let vocabularyName: String?
        /// The S3 location where the vocabulary is stored. Use this URI to get the contents of the vocabulary. The URI is available for a limited time.
        public let downloadUri: String?

        public init(lastModifiedTime: TimeStamp? = nil, failureReason: String? = nil, languageCode: LanguageCode? = nil, vocabularyState: VocabularyState? = nil, vocabularyName: String? = nil, downloadUri: String? = nil) {
            self.lastModifiedTime = lastModifiedTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.vocabularyState = vocabularyState
            self.vocabularyName = vocabularyName
            self.downloadUri = downloadUri
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case failureReason = "FailureReason"
            case languageCode = "LanguageCode"
            case vocabularyState = "VocabularyState"
            case vocabularyName = "VocabularyName"
            case downloadUri = "DownloadUri"
        }
    }

    public struct GetVocabularyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VocabularyName", required: true, type: .string)
        ]
        /// The name of the vocabulary to return information about. The name is case-sensitive.
        public let vocabularyName: String

        public init(vocabularyName: String) {
            self.vocabularyName = vocabularyName
        }

        private enum CodingKeys: String, CodingKey {
            case vocabularyName = "VocabularyName"
        }
    }

    public enum TranscriptionJobStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case failed = "FAILED"
        case completed = "COMPLETED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteTranscriptionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TranscriptionJobName", required: true, type: .string)
        ]
        /// The name of the transcription job to be deleted.
        public let transcriptionJobName: String

        public init(transcriptionJobName: String) {
            self.transcriptionJobName = transcriptionJobName
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJobName = "TranscriptionJobName"
        }
    }

    public enum OutputLocationType: String, CustomStringConvertible, Codable {
        case customerBucket = "CUSTOMER_BUCKET"
        case serviceBucket = "SERVICE_BUCKET"
        public var description: String { return self.rawValue }
    }

    public struct CreateVocabularyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VocabularyName", required: true, type: .string), 
            AWSShapeMember(label: "Phrases", required: true, type: .list), 
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum)
        ]
        /// The name of the vocabulary. The name must be unique within an AWS account. The name is case-sensitive.
        public let vocabularyName: String
        /// An array of strings that contains the vocabulary entries. 
        public let phrases: [String]
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode

        public init(vocabularyName: String, phrases: [String], languageCode: LanguageCode) {
            self.vocabularyName = vocabularyName
            self.phrases = phrases
            self.languageCode = languageCode
        }

        private enum CodingKeys: String, CodingKey {
            case vocabularyName = "VocabularyName"
            case phrases = "Phrases"
            case languageCode = "LanguageCode"
        }
    }

    public struct TranscriptionJobSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "CompletionTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TranscriptionJobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputLocationType", required: false, type: .enum), 
            AWSShapeMember(label: "TranscriptionJobName", required: false, type: .string), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string)
        ]
        /// The language code for the input speech.
        public let languageCode: LanguageCode?
        /// A timestamp that shows when the job was completed.
        public let completionTime: TimeStamp?
        /// The status of the transcription job. When the status is COMPLETED, use the GetTranscriptionJob operation to get the results of the transcription.
        public let transcriptionJobStatus: TranscriptionJobStatus?
        /// A timestamp that shows when the job was created.
        public let creationTime: TimeStamp?
        /// Indicates the location of the output of the transcription job. If the value is CUSTOMER_BUCKET then the location is the S3 bucket specified in the outputBucketName field when the transcription job was started with the StartTranscriptionJob operation. If the value is SERVICE_BUCKET then the output is stored by Amazon Transcribe and can be retrieved using the URI in the GetTranscriptionJob response's TranscriptFileUri field.
        public let outputLocationType: OutputLocationType?
        /// The name of the transcription job.
        public let transcriptionJobName: String?
        /// If the TranscriptionJobStatus field is FAILED, a description of the error.
        public let failureReason: String?

        public init(languageCode: LanguageCode? = nil, completionTime: TimeStamp? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil, creationTime: TimeStamp? = nil, outputLocationType: OutputLocationType? = nil, transcriptionJobName: String? = nil, failureReason: String? = nil) {
            self.languageCode = languageCode
            self.completionTime = completionTime
            self.transcriptionJobStatus = transcriptionJobStatus
            self.creationTime = creationTime
            self.outputLocationType = outputLocationType
            self.transcriptionJobName = transcriptionJobName
            self.failureReason = failureReason
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case completionTime = "CompletionTime"
            case transcriptionJobStatus = "TranscriptionJobStatus"
            case creationTime = "CreationTime"
            case outputLocationType = "OutputLocationType"
            case transcriptionJobName = "TranscriptionJobName"
            case failureReason = "FailureReason"
        }
    }

    public struct StartTranscriptionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TranscriptionJob", required: false, type: .structure)
        ]
        /// An object containing details of the asynchronous transcription job.
        public let transcriptionJob: TranscriptionJob?

        public init(transcriptionJob: TranscriptionJob? = nil) {
            self.transcriptionJob = transcriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJob = "TranscriptionJob"
        }
    }

    public struct Media: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MediaFileUri", required: false, type: .string)
        ]
        /// The S3 location of the input media file. The URI must be in the same region as the API endpoint that you are calling. The general form is:   https://&lt;aws-region&gt;.amazonaws.com/&lt;bucket-name&gt;/&lt;keyprefix&gt;/&lt;objectkey&gt;   For example:  https://s3-us-east-1.amazonaws.com/examplebucket/example.mp4   https://s3-us-east-1.amazonaws.com/examplebucket/mediadocs/example.mp4  For more information about S3 object names, see Object Keys in the Amazon S3 Developer Guide.
        public let mediaFileUri: String?

        public init(mediaFileUri: String? = nil) {
            self.mediaFileUri = mediaFileUri
        }

        private enum CodingKeys: String, CodingKey {
            case mediaFileUri = "MediaFileUri"
        }
    }

    public struct ListVocabulariesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vocabularies", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// A list of objects that describe the vocabularies that match the search criteria in the request.
        public let vocabularies: [VocabularyInfo]?
        /// The ListVocabularies operation returns a page of vocabularies at a time. The maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in the next request to the ListVocabularies operation to return in the next page of jobs.
        public let nextToken: String?
        /// The requested vocabulary state.
        public let status: TranscriptionJobStatus?

        public init(vocabularies: [VocabularyInfo]? = nil, nextToken: String? = nil, status: TranscriptionJobStatus? = nil) {
            self.vocabularies = vocabularies
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case vocabularies = "Vocabularies"
            case nextToken = "NextToken"
            case status = "Status"
        }
    }

    public struct GetTranscriptionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TranscriptionJobName", required: true, type: .string)
        ]
        /// The name of the job.
        public let transcriptionJobName: String

        public init(transcriptionJobName: String) {
            self.transcriptionJobName = transcriptionJobName
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJobName = "TranscriptionJobName"
        }
    }

    public struct Settings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShowSpeakerLabels", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxSpeakerLabels", required: false, type: .integer), 
            AWSShapeMember(label: "VocabularyName", required: false, type: .string), 
            AWSShapeMember(label: "ChannelIdentification", required: false, type: .boolean)
        ]
        /// Determines whether the transcription job uses speaker recognition to identify different speakers in the input audio. Speaker recognition labels individual speakers in the audio file. If you set the ShowSpeakerLabels field to true, you must also set the maximum number of speaker labels MaxSpeakerLabels field. You can't set both ShowSpeakerLabels and ChannelIdentification in the same request. If you set both, your request returns a BadRequestException.
        public let showSpeakerLabels: Bool?
        /// The maximum number of speakers to identify in the input audio. If there are more speakers in the audio than this number, multiple speakers will be identified as a single speaker. If you specify the MaxSpeakerLabels field, you must set the ShowSpeakerLabels field to true.
        public let maxSpeakerLabels: Int32?
        /// The name of a vocabulary to use when processing the transcription job.
        public let vocabularyName: String?
        /// Instructs Amazon Transcribe to process each audio channel separately and then merge the transcription output of each channel into a single transcription.  Amazon Transcribe also produces a transcription of each item detected on an audio channel, including the start time and end time of the item and alternative transcriptions of the item including the confidence that Amazon Transcribe has in the transcription. You can't set both ShowSpeakerLabels and ChannelIdentification in the same request. If you set both, your request returns a BadRequestException.
        public let channelIdentification: Bool?

        public init(showSpeakerLabels: Bool? = nil, maxSpeakerLabels: Int32? = nil, vocabularyName: String? = nil, channelIdentification: Bool? = nil) {
            self.showSpeakerLabels = showSpeakerLabels
            self.maxSpeakerLabels = maxSpeakerLabels
            self.vocabularyName = vocabularyName
            self.channelIdentification = channelIdentification
        }

        private enum CodingKeys: String, CodingKey {
            case showSpeakerLabels = "ShowSpeakerLabels"
            case maxSpeakerLabels = "MaxSpeakerLabels"
            case vocabularyName = "VocabularyName"
            case channelIdentification = "ChannelIdentification"
        }
    }

    public struct TranscriptionJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "CompletionTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Transcript", required: false, type: .structure), 
            AWSShapeMember(label: "TranscriptionJobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Media", required: false, type: .structure), 
            AWSShapeMember(label: "TranscriptionJobName", required: false, type: .string), 
            AWSShapeMember(label: "MediaSampleRateHertz", required: false, type: .integer), 
            AWSShapeMember(label: "Settings", required: false, type: .structure), 
            AWSShapeMember(label: "MediaFormat", required: false, type: .enum), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string)
        ]
        /// The language code for the input speech.
        public let languageCode: LanguageCode?
        /// A timestamp that shows when the job was completed.
        public let completionTime: TimeStamp?
        /// An object that describes the output of the transcription job.
        public let transcript: Transcript?
        /// The status of the transcription job.
        public let transcriptionJobStatus: TranscriptionJobStatus?
        /// A timestamp that shows when the job was created.
        public let creationTime: TimeStamp?
        /// An object that describes the input media for the transcription job.
        public let media: Media?
        /// The name of the transcription job.
        public let transcriptionJobName: String?
        /// The sample rate, in Hertz, of the audio track in the input media file. 
        public let mediaSampleRateHertz: Int32?
        /// Optional settings for the transcription job. Use these settings to turn on speaker recognition, to set the maximum number of speakers that should be identified and to specify a custom vocabulary to use when processing the transcription job.
        public let settings: Settings?
        /// The format of the input media file.
        public let mediaFormat: MediaFormat?
        /// If the TranscriptionJobStatus field is FAILED, this field contains information about why the job failed.
        public let failureReason: String?

        public init(languageCode: LanguageCode? = nil, completionTime: TimeStamp? = nil, transcript: Transcript? = nil, transcriptionJobStatus: TranscriptionJobStatus? = nil, creationTime: TimeStamp? = nil, media: Media? = nil, transcriptionJobName: String? = nil, mediaSampleRateHertz: Int32? = nil, settings: Settings? = nil, mediaFormat: MediaFormat? = nil, failureReason: String? = nil) {
            self.languageCode = languageCode
            self.completionTime = completionTime
            self.transcript = transcript
            self.transcriptionJobStatus = transcriptionJobStatus
            self.creationTime = creationTime
            self.media = media
            self.transcriptionJobName = transcriptionJobName
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.settings = settings
            self.mediaFormat = mediaFormat
            self.failureReason = failureReason
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case completionTime = "CompletionTime"
            case transcript = "Transcript"
            case transcriptionJobStatus = "TranscriptionJobStatus"
            case creationTime = "CreationTime"
            case media = "Media"
            case transcriptionJobName = "TranscriptionJobName"
            case mediaSampleRateHertz = "MediaSampleRateHertz"
            case settings = "Settings"
            case mediaFormat = "MediaFormat"
            case failureReason = "FailureReason"
        }
    }

    public struct VocabularyInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LanguageCode", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyState", required: false, type: .enum), 
            AWSShapeMember(label: "VocabularyName", required: false, type: .string)
        ]
        /// The date and time that the vocabulary was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The language code of the vocabulary entries.
        public let languageCode: LanguageCode?
        /// The processing state of the vocabulary. If the state is READY you can use the vocabulary in a StartTranscriptionJob request.
        public let vocabularyState: VocabularyState?
        /// The name of the vocabulary.
        public let vocabularyName: String?

        public init(lastModifiedTime: TimeStamp? = nil, languageCode: LanguageCode? = nil, vocabularyState: VocabularyState? = nil, vocabularyName: String? = nil) {
            self.lastModifiedTime = lastModifiedTime
            self.languageCode = languageCode
            self.vocabularyState = vocabularyState
            self.vocabularyName = vocabularyName
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case languageCode = "LanguageCode"
            case vocabularyState = "VocabularyState"
            case vocabularyName = "VocabularyName"
        }
    }

    public enum LanguageCode: String, CustomStringConvertible, Codable {
        case enUs = "en-US"
        case esUs = "es-US"
        case enAu = "en-AU"
        case frCa = "fr-CA"
        case enGb = "en-GB"
        case deDe = "de-DE"
        case ptBr = "pt-BR"
        case frFr = "fr-FR"
        public var description: String { return self.rawValue }
    }

    public struct GetTranscriptionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TranscriptionJob", required: false, type: .structure)
        ]
        /// An object that contains the results of the transcription job.
        public let transcriptionJob: TranscriptionJob?

        public init(transcriptionJob: TranscriptionJob? = nil) {
            self.transcriptionJob = transcriptionJob
        }

        private enum CodingKeys: String, CodingKey {
            case transcriptionJob = "TranscriptionJob"
        }
    }

}