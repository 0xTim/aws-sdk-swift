// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Apigateway {

    public struct DeleteApiKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["api_Key": "apiKey"]
        }
        /// The identifier of the ApiKey resource to be deleted.
        public var apiKey: String = ""

        public init() {}

        public init(apiKey: String) {
            self.apiKey = apiKey
        }

    }

    public struct PutRestApiRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = "body"
        public var queryParams: [String: String] {
            return ["failonwarnings": "failOnWarnings", "mode": "mode"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The identifier of the RestApi to be updated. 
        public var restApiId: String = ""
        /// The mode query parameter to specify the update mode. Valid values are "merge" and "overwrite". By default, the update mode is "merge".
        public var mode: String? = nil
        /// A query parameter to indicate whether to rollback the API update (true) or not (false) when a warning is encountered. The default value is false.
        public var failOnWarnings: Bool? = nil
        /// The PUT request body containing external API definitions. Currently, only Swagger definition JSON files are supported.
        public var body: Data = Data()
        /// Custom headers supplied as part of the request. 
        public var parameters: [String: String]? = nil

        public init() {}

        public init(restApiId: String, mode: String? = nil, failOnWarnings: Bool? = nil, body: Data, parameters: [String: String]? = nil) {
            self.restApiId = restApiId
            self.mode = mode
            self.failOnWarnings = failOnWarnings
            self.body = body
            self.parameters = parameters
        }

    }

    public struct DeleteDomainNameRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["domain_name": "domainName"]
        }
        /// The name of the DomainName resource to be deleted.
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

    public struct GetDocumentationVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["doc_version": "documentationVersion", "restapi_id": "restApiId"]
        }
        /// [Required] The version identifier of the to-be-retrieved documentation snapshot.
        public var documentationVersion: String = ""
        /// [Required] The identifier of the API of the to-be-retrieved documentation snapshot.
        public var restApiId: String = ""

        public init() {}

        public init(documentationVersion: String, restApiId: String) {
            self.documentationVersion = documentationVersion
            self.restApiId = restApiId
        }

    }

    public struct GetUsagePlanKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["keyId": "keyId", "usageplanId": "usagePlanId"]
        }
        /// The key Id of the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public var keyId: String = ""
        /// The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public var usagePlanId: String = ""

        public init() {}

        public init(keyId: String, usagePlanId: String) {
            self.keyId = keyId
            self.usagePlanId = usagePlanId
        }

    }

    public struct UpdateDocumentationVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["doc_version": "documentationVersion", "restapi_id": "restApiId"]
        }
        /// [Required] The version identifier of the to-be-updated documentation version.
        public var documentationVersion: String = ""
        /// [Required] The identifier of an API of the to-be-updated documentation version.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(documentationVersion: String, restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.documentationVersion = documentationVersion
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

    }

    public struct CreateModelRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The description of the model.
        public var description: String? = nil
        /// The content-type for the model.
        public var contentType: String = ""
        /// The RestApi identifier under which the Model will be created.
        public var restApiId: String = ""
        /// The name of the model.
        public var name: String = ""
        /// The schema for the model. For application/json models, this should be JSON-schema draft v4 model.
        public var schema: String? = nil

        public init() {}

        public init(description: String? = nil, contentType: String, restApiId: String, name: String, schema: String? = nil) {
            self.description = description
            self.contentType = contentType
            self.restApiId = restApiId
            self.name = name
            self.schema = schema
        }

    }

    public struct UpdateMethodResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "status_code": "statusCode", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the MethodResponse resource.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil
        /// The status code for the MethodResponse resource.
        public var statusCode: String = ""
        /// The Resource identifier for the MethodResponse resource.
        public var resourceId: String = ""
        /// The HTTP verb of the Method resource.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, patchOperations: [PatchOperation]? = nil, statusCode: String, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

    public struct UpdateDeploymentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["deployment_id": "deploymentId", "restapi_id": "restApiId"]
        }
        /// The replacement identifier for the Deployment resource to change information about.
        public var deploymentId: String = ""
        /// The replacement identifier of the RestApi resource for the Deployment resource to change information about.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(deploymentId: String, restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.deploymentId = deploymentId
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

    }

    public struct DeleteMethodRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["resource_id": "resourceId", "restapi_id": "restApiId", "http_method": "httpMethod"]
        }
        /// The RestApi identifier for the Method resource.
        public var restApiId: String = ""
        /// The HTTP verb of the Method resource.
        public var httpMethod: String = ""
        /// The Resource identifier for the Method resource.
        public var resourceId: String = ""

        public init() {}

        public init(restApiId: String, httpMethod: String, resourceId: String) {
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.resourceId = resourceId
        }

    }

    public struct GetStageRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "stage_name": "stageName"]
        }
        /// The identifier of the RestApi resource for the Stage resource to get information about.
        public var restApiId: String = ""
        /// The name of the Stage resource to get information about.
        public var stageName: String = ""

        public init() {}

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

    }

    public struct GetApiKeysRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["includeValues": "includeValues", "position": "position", "limit": "limit", "name": "nameQuery", "customerId": "customerId"]
        }
        /// A boolean flag to specify whether (true) or not (false) the result contains key values.
        public var includeValues: Bool? = nil
        /// The position of the current ApiKeys resource to get information about.
        public var position: String? = nil
        /// The maximum number of ApiKeys to get information about.
        public var limit: Int32? = nil
        /// The name of queried API keys.
        public var nameQuery: String? = nil
        /// The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.
        public var customerId: String? = nil

        public init() {}

        public init(includeValues: Bool? = nil, position: String? = nil, limit: Int32? = nil, nameQuery: String? = nil, customerId: String? = nil) {
            self.includeValues = includeValues
            self.position = position
            self.limit = limit
            self.nameQuery = nameQuery
            self.customerId = customerId
        }

    }

    public struct BasePathMappings: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current page of any BasePathMapping resources in the collection of base path mapping resources.
        public var items: [BasePathMapping]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [BasePathMapping]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct GetUsageRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["keyId": "keyId", "position": "position", "limit": "limit", "startDate": "startDate", "endDate": "endDate"]
        }
        public var pathParams: [String: String] {
            return ["usageplanId": "usagePlanId"]
        }
        /// The Id of the API key associated with the resultant usage data.
        public var keyId: String? = nil
        /// Position
        public var position: String? = nil
        /// The maximum number of results to be returned.
        public var limit: Int32? = nil
        /// The starting date (e.g., 2016-01-01) of the usage data.
        public var startDate: String = ""
        /// The Id of the usage plan associated with the usage data.
        public var usagePlanId: String = ""
        /// The ending date (e.g., 2016-12-31) of the usage data.
        public var endDate: String = ""

        public init() {}

        public init(keyId: String? = nil, position: String? = nil, limit: Int32? = nil, startDate: String, usagePlanId: String, endDate: String) {
            self.keyId = keyId
            self.position = position
            self.limit = limit
            self.startDate = startDate
            self.usagePlanId = usagePlanId
            self.endDate = endDate
        }

    }

    public struct SdkTypes: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The set of SdkType items that comprise this view of the SdkTypes collection.
        public var items: [SdkType]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [SdkType]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct GetIntegrationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["resource_id": "resourceId", "restapi_id": "restApiId", "http_method": "httpMethod"]
        }
        /// Specifies a get integration request's API identifier.
        public var restApiId: String = ""
        /// Specifies a get integration request's HTTP method.
        public var httpMethod: String = ""
        /// Specifies a get integration request's resource identifier
        public var resourceId: String = ""

        public init() {}

        public init(restApiId: String, httpMethod: String, resourceId: String) {
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.resourceId = resourceId
        }

    }

    public struct RestApis: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An array of links to the current page of RestApi resources.
        public var items: [RestApi]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [RestApi]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct GetDocumentationPartRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["part_id": "documentationPartId", "restapi_id": "restApiId"]
        }
        /// [Required] The identifier of the to-be-retrieved documentation part.
        public var documentationPartId: String = ""
        /// [Required] The identifier of an API of the to-be-retrieved documentation part.
        public var restApiId: String = ""

        public init() {}

        public init(documentationPartId: String, restApiId: String) {
            self.documentationPartId = documentationPartId
            self.restApiId = restApiId
        }

    }

    public struct GetDocumentationVersionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The position of the returned DocumentationVersion in the DocumentationVersions collection.
        public var position: String? = nil
        /// [Required] The identifier of an API of the to-be-retrieved documentation versions.
        public var restApiId: String = ""
        /// The page size of the returned documentation versions.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, restApiId: String, limit: Int32? = nil) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

    }

    public struct UpdateBasePathMappingRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["domain_name": "domainName", "base_path": "basePath"]
        }
        /// The base path of the BasePathMapping resource to change.
        public var basePath: String = ""
        /// The domain name of the BasePathMapping resource to change.
        public var domainName: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(basePath: String, domainName: String, patchOperations: [PatchOperation]? = nil) {
            self.basePath = basePath
            self.domainName = domainName
            self.patchOperations = patchOperations
        }

    }

    public struct DeleteClientCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["clientcertificate_id": "clientCertificateId"]
        }
        /// The identifier of the ClientCertificate resource to be deleted.
        public var clientCertificateId: String = ""

        public init() {}

        public init(clientCertificateId: String) {
            self.clientCertificateId = clientCertificateId
        }

    }

    public struct DeleteModelRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "model_name": "modelName"]
        }
        /// The RestApi under which the model will be deleted.
        public var restApiId: String = ""
        /// The name of the model to delete.
        public var modelName: String = ""

        public init() {}

        public init(restApiId: String, modelName: String) {
            self.restApiId = restApiId
            self.modelName = modelName
        }

    }

    public struct Resource: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The parent resource's identifier.
        public var parentId: String? = nil
        /// The last path segment for this resource.
        public var pathPart: String? = nil
        /// The full path for this resource.
        public var path: String? = nil
        /// The resource's identifier.
        public var id: String? = nil
        /// Gets an API resource's method of a given HTTP verb.  The resource methods are a map of methods indexed by methods' HTTP verbs enabled on the resource. This method map is included in the 200 OK response of the GET /restapis/{restapi_id}/resources/{resource_id} or GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods request. Example: Get the GET method of an API resource Request GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160608T031827Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160608/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response { "_links": { "curies": [ { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html", "name": "method", "templated": true }, { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true } ], "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET", "name": "GET", "title": "GET" }, "integration:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "method:integration": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "method:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "methodresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}", "templated": true } }, "apiKeyRequired": false, "authorizationType": "NONE", "httpMethod": "GET", "_embedded": { "method:integration": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "3kzxbg5sa2", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestParameters": { "integration.request.header.Content-Type": "'application/x-amz-json-1.1'" }, "requestTemplates": { "application/json": "{\n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-east-1:kinesis:action/ListStreams", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "'application/xml'" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" } } }, "method:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" } } } If the OPTIONS is enabled on the resource, you can follow the example here to get that method. Just replace the GET of the last path segment in the request URL with OPTIONS.   
        public var resourceMethods: [String: Method]? = nil

        public init() {}

        public init(parentId: String? = nil, pathPart: String? = nil, path: String? = nil, id: String? = nil, resourceMethods: [String: Method]? = nil) {
            self.parentId = parentId
            self.pathPart = pathPart
            self.path = path
            self.id = id
            self.resourceMethods = resourceMethods
        }

    }

    public struct DeleteDocumentationVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["doc_version": "documentationVersion", "restapi_id": "restApiId"]
        }
        /// [Required] The version identifier of a to-be-deleted documentation snapshot.
        public var documentationVersion: String = ""
        /// [Required] The identifier of an API of a to-be-deleted documentation snapshot.
        public var restApiId: String = ""

        public init() {}

        public init(documentationVersion: String, restApiId: String) {
            self.documentationVersion = documentationVersion
            self.restApiId = restApiId
        }

    }

    public struct GetAuthorizersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// If not all Authorizer resources in the response were present, the position will specify where to start the next page of results.
        public var position: String? = nil
        /// The RestApi identifier for the Authorizers resource.
        public var restApiId: String = ""
        /// Limit the number of Authorizer resources in the response.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, restApiId: String, limit: Int32? = nil) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

    }

    public struct CreateDomainNameRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user-friendly name of the certificate.
        public var certificateName: String? = nil
        /// [Deprecated] Your certificate's private key.
        public var certificatePrivateKey: String? = nil
        /// (Required) The name of the DomainName resource.
        public var domainName: String = ""
        /// [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.
        public var certificateChain: String? = nil
        /// [Deprecated] The body of the server certificate provided by your certificate authority.
        public var certificateBody: String? = nil
        /// The reference to an AWS-managed certificate. AWS Certificate Manager is the only supported source.
        public var certificateArn: String? = nil

        public init() {}

        public init(certificateName: String? = nil, certificatePrivateKey: String? = nil, domainName: String, certificateChain: String? = nil, certificateBody: String? = nil, certificateArn: String? = nil) {
            self.certificateName = certificateName
            self.certificatePrivateKey = certificatePrivateKey
            self.domainName = domainName
            self.certificateChain = certificateChain
            self.certificateBody = certificateBody
            self.certificateArn = certificateArn
        }

    }

    public struct ApiKeyIds: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of all the ApiKey identifiers.
        public var ids: [String]? = nil
        /// A list of warning messages.
        public var warnings: [String]? = nil

        public init() {}

        public init(ids: [String]? = nil, warnings: [String]? = nil) {
            self.ids = ids
            self.warnings = warnings
        }

    }

    public struct Stage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The version of the associated API documentation.
        public var documentationVersion: String? = nil
        /// The status of the cache cluster for the stage, if enabled.
        public var cacheClusterStatus: String? = nil
        /// The size of the cache cluster for the stage, if enabled.
        public var cacheClusterSize: String? = nil
        /// A map that defines the stage variables for a Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public var variables: [String: String]? = nil
        /// The timestamp when the stage was created.
        public var createdDate: Date? = nil
        /// The stage's description.
        public var description: String? = nil
        /// The identifier of the Deployment that the stage points to.
        public var deploymentId: String? = nil
        /// The identifier of a client certificate for an API stage.
        public var clientCertificateId: String? = nil
        /// A map that defines the method settings for a Stage resource. Keys (designated as /{method_setting_key below) are method paths defined as {resource_path}/{http_method} for an individual method override, or /\*/\* for overriding all methods in the stage. 
        public var methodSettings: [String: MethodSetting]? = nil
        /// The timestamp when the stage last updated.
        public var lastUpdatedDate: Date? = nil
        /// The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to Amazon API Gateway.
        public var stageName: String? = nil
        /// Specifies whether a cache cluster is enabled for the stage.
        public var cacheClusterEnabled: Bool? = nil

        public init() {}

        public init(documentationVersion: String? = nil, cacheClusterStatus: String? = nil, cacheClusterSize: String? = nil, variables: [String: String]? = nil, createdDate: Date? = nil, description: String? = nil, deploymentId: String? = nil, clientCertificateId: String? = nil, methodSettings: [String: MethodSetting]? = nil, lastUpdatedDate: Date? = nil, stageName: String? = nil, cacheClusterEnabled: Bool? = nil) {
            self.documentationVersion = documentationVersion
            self.cacheClusterStatus = cacheClusterStatus
            self.cacheClusterSize = cacheClusterSize
            self.variables = variables
            self.createdDate = createdDate
            self.description = description
            self.deploymentId = deploymentId
            self.clientCertificateId = clientCertificateId
            self.methodSettings = methodSettings
            self.lastUpdatedDate = lastUpdatedDate
            self.stageName = stageName
            self.cacheClusterEnabled = cacheClusterEnabled
        }

    }

    public struct GetMethodRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["resource_id": "resourceId", "restapi_id": "restApiId", "http_method": "httpMethod"]
        }
        /// The RestApi identifier for the Method resource.
        public var restApiId: String = ""
        /// Specifies the method request's HTTP method type.
        public var httpMethod: String = ""
        /// The Resource identifier for the Method resource.
        public var resourceId: String = ""

        public init() {}

        public init(restApiId: String, httpMethod: String, resourceId: String) {
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.resourceId = resourceId
        }

    }

    public struct UsagePlans: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Gets the current item when enumerating the collection of UsagePlan.
        public var items: [UsagePlan]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [UsagePlan]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct DeleteStageRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "stage_name": "stageName"]
        }
        /// The identifier of the RestApi resource for the Stage resource to delete.
        public var restApiId: String = ""
        /// The name of the Stage resource to delete.
        public var stageName: String = ""

        public init() {}

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

    }

    public struct DeleteDeploymentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["deployment_id": "deploymentId", "restapi_id": "restApiId"]
        }
        /// The identifier of the Deployment resource to delete.
        public var deploymentId: String = ""
        /// The identifier of the RestApi resource for the Deployment resource to delete.
        public var restApiId: String = ""

        public init() {}

        public init(deploymentId: String, restApiId: String) {
            self.deploymentId = deploymentId
            self.restApiId = restApiId
        }

    }

    public struct TestInvokeAuthorizerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "authorizer_id": "authorizerId"]
        }
        /// Specifies a test invoke authorizer request's Authorizer ID.
        public var authorizerId: String = ""
        /// [Required] A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.
        public var headers: [String: String]? = nil
        /// [Optional] The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        public var pathWithQueryString: String? = nil
        /// [Optional] The simulated request body of an incoming invocation request.
        public var body: String? = nil
        /// A key-value map of stage variables to simulate an invocation on a deployed Stage.
        public var stageVariables: [String: String]? = nil
        /// Specifies a test invoke authorizer request's RestApi identifier.
        public var restApiId: String = ""
        /// [Optional] A key-value map of additional context variables.
        public var additionalContext: [String: String]? = nil

        public init() {}

        public init(authorizerId: String, headers: [String: String]? = nil, pathWithQueryString: String? = nil, body: String? = nil, stageVariables: [String: String]? = nil, restApiId: String, additionalContext: [String: String]? = nil) {
            self.authorizerId = authorizerId
            self.headers = headers
            self.pathWithQueryString = pathWithQueryString
            self.body = body
            self.stageVariables = stageVariables
            self.restApiId = restApiId
            self.additionalContext = additionalContext
        }

    }

    public struct PutMethodRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["resource_id": "resourceId", "restapi_id": "restApiId", "http_method": "httpMethod"]
        }
        /// Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM.
        public var authorizerId: String? = nil
        /// Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.
        public var requestModels: [String: String]? = nil
        /// A key-value map defining required or optional method request parameters that can be accepted by Amazon API Gateway. A key defines a method request parameter name matching the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (true) or optional (false). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.
        public var requestParameters: [String: Bool]? = nil
        /// Specifies the method request's HTTP method type.
        public var httpMethod: String = ""
        /// The RestApi identifier for the new Method resource.
        public var restApiId: String = ""
        /// Specifies whether the method required a valid ApiKey.
        public var apiKeyRequired: Bool? = nil
        /// Specifies the type of authorization used for the method.
        public var authorizationType: String = ""
        /// The Resource identifier for the new Method resource.
        public var resourceId: String = ""
        /// A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in PetStore example.
        public var operationName: String? = nil

        public init() {}

        public init(authorizerId: String? = nil, requestModels: [String: String]? = nil, requestParameters: [String: Bool]? = nil, httpMethod: String, restApiId: String, apiKeyRequired: Bool? = nil, authorizationType: String, resourceId: String, operationName: String? = nil) {
            self.authorizerId = authorizerId
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.apiKeyRequired = apiKeyRequired
            self.authorizationType = authorizationType
            self.resourceId = resourceId
            self.operationName = operationName
        }

    }

    public struct GetBasePathMappingsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        public var pathParams: [String: String] {
            return ["domain_name": "domainName"]
        }
        /// The position of the current BasePathMapping resource in the collection to get information about.
        public var position: String? = nil
        /// The domain name of a BasePathMapping resource.
        public var domainName: String = ""
        /// The maximum number of BasePathMapping resources in the collection to get information about. The default limit is 25. It should be an integer between 1 - 500.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, domainName: String, limit: Int32? = nil) {
            self.position = position
            self.domainName = domainName
            self.limit = limit
        }

    }

    public struct PatchOperation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  Not supported.
        public var from: String? = nil
        /// The new target value of the update operation. 
        public var value: String? = nil
        /// The op operation's target, as identified by a JSON Pointer value that references a location within the targeted resource. For example, if the target resource has an updateable property of {"name":"value"}, the path for this property is /name. If the name property value is a JSON object (e.g., {"name": {"child/name": "child-value"}}), the path for the child/name property will be /name/child~1name. Any slash ("/") character appearing in path names must be escaped with "~1", as shown in the example above. Each op operation can have only one path associated with it.
        public var path: String? = nil
        /// An update operation to be performed with this PATCH request. The valid value can be "add", "remove", or "replace". Not all valid operations are supported for a given resource. Support of the operations depends on specific operational contexts. Attempts to apply an unsupported operation on a resource will return an error message.
        public var op: String? = nil

        public init() {}

        public init(from: String? = nil, value: String? = nil, path: String? = nil, op: String? = nil) {
            self.from = from
            self.value = value
            self.path = path
            self.op = op
        }

    }

    public struct TestInvokeMethodRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["resource_id": "resourceId", "restapi_id": "restApiId", "http_method": "httpMethod"]
        }
        /// A key-value map of headers to simulate an incoming invocation request.
        public var headers: [String: String]? = nil
        /// The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
        public var pathWithQueryString: String? = nil
        /// The simulated request body of an incoming invocation request.
        public var body: String? = nil
        /// Specifies a test invoke method request's HTTP method.
        public var httpMethod: String = ""
        /// A key-value map of stage variables to simulate an invocation on a deployed Stage.
        public var stageVariables: [String: String]? = nil
        /// A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
        public var clientCertificateId: String? = nil
        /// Specifies a test invoke method request's API identifier.
        public var restApiId: String = ""
        /// Specifies a test invoke method request's resource ID.
        public var resourceId: String = ""

        public init() {}

        public init(headers: [String: String]? = nil, pathWithQueryString: String? = nil, body: String? = nil, httpMethod: String, stageVariables: [String: String]? = nil, clientCertificateId: String? = nil, restApiId: String, resourceId: String) {
            self.headers = headers
            self.pathWithQueryString = pathWithQueryString
            self.body = body
            self.httpMethod = httpMethod
            self.stageVariables = stageVariables
            self.clientCertificateId = clientCertificateId
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

    }

    public struct CreateDocumentationVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// [Required] The version identifier of the new snapshot.
        public var documentationVersion: String = ""
        /// [Required] Specifies the API identifier of the to-be-created documentation version.
        public var restApiId: String = ""
        /// The stage name to be associated with the new documentation snapshot.
        public var stageName: String? = nil
        /// A description about the new documentation snapshot.
        public var description: String? = nil

        public init() {}

        public init(documentationVersion: String, restApiId: String, stageName: String? = nil, description: String? = nil) {
            self.documentationVersion = documentationVersion
            self.restApiId = restApiId
            self.stageName = stageName
            self.description = description
        }

    }

    public struct GetDeploymentsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The position of the current Deployment resource in the collection to get information about.
        public var position: String? = nil
        /// The identifier of the RestApi resource for the collection of Deployment resources to get information about.
        public var restApiId: String = ""
        /// The maximum number of Deployment resources in the collection to get information about. The default limit is 25. It should be an integer between 1 - 500.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, restApiId: String, limit: Int32? = nil) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

    }

    public struct DeleteUsagePlanKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["keyId": "keyId", "usageplanId": "usagePlanId"]
        }
        /// The Id of the UsagePlanKey resource to be deleted.
        public var keyId: String = ""
        /// The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.
        public var usagePlanId: String = ""

        public init() {}

        public init(keyId: String, usagePlanId: String) {
            self.keyId = keyId
            self.usagePlanId = usagePlanId
        }

    }

    public struct TestInvokeMethodResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon API Gateway execution log for the test invoke request.
        public var log: String? = nil
        /// The HTTP status code.
        public var status: Int32? = nil
        /// The headers of the HTTP response.
        public var headers: [String: String]? = nil
        /// The execution latency of the test invoke request.
        public var latency: Int64? = nil
        /// The body of the HTTP response.
        public var body: String? = nil

        public init() {}

        public init(log: String? = nil, status: Int32? = nil, headers: [String: String]? = nil, latency: Int64? = nil, body: String? = nil) {
            self.log = log
            self.status = status
            self.headers = headers
            self.latency = latency
            self.body = body
        }

    }

    public struct DeleteResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the Resource resource.
        public var restApiId: String = ""
        /// The identifier of the Resource resource.
        public var resourceId: String = ""

        public init() {}

        public init(restApiId: String, resourceId: String) {
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

    }

    public struct GetSdkTypesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        /// The position of the last fetched element in the SdkTypes collection.
        public var position: String? = nil
        /// The maximum number of SdkType instances to be returned. 
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

    }

    public struct Models: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Gets the current Model resource in the collection.
        public var items: [Model]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [Model]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct Resources: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Gets the current Resource resource in the collection.
        public var items: [Resource]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [Resource]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct ExportResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = "body"
        public var headerParams: [String: String] {
            return ["Content-Type": "contentType", "Content-Disposition": "contentDisposition"]
        }
        /// The content-type header value in the HTTP response. This will correspond to a valid 'accept' type in the request.
        public var contentType: String? = nil
        /// The content-disposition header value in the HTTP response.
        public var contentDisposition: String? = nil
        /// The binary blob response to GetExport, which contains the export.
        public var body: Data? = nil

        public init() {}

        public init(contentType: String? = nil, contentDisposition: String? = nil, body: Data? = nil) {
            self.contentType = contentType
            self.contentDisposition = contentDisposition
            self.body = body
        }

    }

    public struct GetModelRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["flatten": "flatten"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "model_name": "modelName"]
        }
        /// The RestApi identifier under which the Model exists.
        public var restApiId: String = ""
        /// A query parameter of a Boolean value to resolve (true) all external model references and returns a flattened model schema or not (false) The default is false.
        public var flatten: Bool? = nil
        /// The name of the model as an identifier.
        public var modelName: String = ""

        public init() {}

        public init(restApiId: String, flatten: Bool? = nil, modelName: String) {
            self.restApiId = restApiId
            self.flatten = flatten
            self.modelName = modelName
        }

    }

    public struct UpdateAuthorizerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "authorizer_id": "authorizerId"]
        }
        /// The identifier of the Authorizer resource.
        public var authorizerId: String = ""
        /// The RestApi identifier for the Authorizer resource.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(authorizerId: String, restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.authorizerId = authorizerId
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

    }

    public struct StageKey: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of Stage resources that are associated with the ApiKey resource.
        public var restApiId: String? = nil
        /// The stage name in the RestApi that the stage key references.
        public var stageName: String? = nil

        public init() {}

        public init(restApiId: String? = nil, stageName: String? = nil) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

    }

    public struct ApiKeys: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current page of any ApiKey resources in the collection of ApiKey resources.
        public var items: [ApiKey]? = nil
        public var position: String? = nil
        /// A list of warning messages logged during the import of API keys when the failOnWarnings option is set to true.
        public var warnings: [String]? = nil

        public init() {}

        public init(items: [ApiKey]? = nil, position: String? = nil, warnings: [String]? = nil) {
            self.items = items
            self.position = position
            self.warnings = warnings
        }

    }

    public struct CreateStageRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The version of the associated API documentation.
        public var documentationVersion: String? = nil
        /// A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public var variables: [String: String]? = nil
        /// The stage's cache cluster size.
        public var cacheClusterSize: String? = nil
        /// The identifier of the Deployment resource for the Stage resource.
        public var deploymentId: String = ""
        /// The identifier of the RestApi resource for the Stage resource to create.
        public var restApiId: String = ""
        /// The name for the Stage resource.
        public var stageName: String = ""
        /// The description of the Stage resource.
        public var description: String? = nil
        /// Whether cache clustering is enabled for the stage.
        public var cacheClusterEnabled: Bool? = nil

        public init() {}

        public init(documentationVersion: String? = nil, variables: [String: String]? = nil, cacheClusterSize: String? = nil, deploymentId: String, restApiId: String, stageName: String, description: String? = nil, cacheClusterEnabled: Bool? = nil) {
            self.documentationVersion = documentationVersion
            self.variables = variables
            self.cacheClusterSize = cacheClusterSize
            self.deploymentId = deploymentId
            self.restApiId = restApiId
            self.stageName = stageName
            self.description = description
            self.cacheClusterEnabled = cacheClusterEnabled
        }

    }

    public struct GetSdkTypeRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["sdktype_id": "id"]
        }
        /// The identifier of the queried SdkType instance.
        public var id: String = ""

        public init() {}

        public init(id: String) {
            self.id = id
        }

    }

    public struct ImportApiKeysRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = "body"
        public var queryParams: [String: String] {
            return ["failonwarnings": "failOnWarnings", "format": "format"]
        }
        /// The payload of the POST request to import API keys. For the payload format, see API Key File Format.
        public var body: Data = Data()
        /// A query parameter to specify the input format to imported API keys. Currently, only the csv format is supported.
        public var format: String = ""
        /// A query parameter to indicate whether to rollback ApiKey importation (true) or not (false) when error is encountered.
        public var failOnWarnings: Bool? = nil

        public init() {}

        public init(body: Data, format: String, failOnWarnings: Bool? = nil) {
            self.body = body
            self.format = format
            self.failOnWarnings = failOnWarnings
        }

    }

    public struct MethodSetting: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is /{method_setting_key}/logging/dataTrace, and the value is a Boolean.
        public var dataTraceEnabled: Bool? = nil
        /// Specifies whether Amazon CloudWatch metrics are enabled for this method. The PATCH path for this setting is /{method_setting_key}/metrics/enabled, and the value is a Boolean.
        public var metricsEnabled: Bool? = nil
        /// Specifies whether the cached responses are encrypted. The PATCH path for this setting is /{method_setting_key}/caching/dataEncrypted, and the value is a Boolean.
        public var cacheDataEncrypted: Bool? = nil
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. The PATCH path for this setting is /{method_setting_key}/caching/enabled, and the value is a Boolean.
        public var cachingEnabled: Bool? = nil
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached. The PATCH path for this setting is /{method_setting_key}/caching/ttlInSeconds, and the value is an integer.
        public var cacheTtlInSeconds: Int32? = nil
        /// Specifies the throttling burst limit. The PATCH path for this setting is /{method_setting_key}/throttling/burstLimit, and the value is an integer.
        public var throttlingBurstLimit: Int32? = nil
        /// Specifies the throttling rate limit. The PATCH path for this setting is /{method_setting_key}/throttling/rateLimit, and the value is a double.
        public var throttlingRateLimit: Double? = nil
        /// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The PATCH path for this setting is /{method_setting_key}/logging/loglevel, and the available levels are OFF, ERROR, and INFO.
        public var loggingLevel: String? = nil
        /// Specifies how to handle unauthorized requests for cache invalidation. The PATCH path for this setting is /{method_setting_key}/caching/unauthorizedCacheControlHeaderStrategy, and the available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
        public var unauthorizedCacheControlHeaderStrategy: String? = nil
        /// Specifies whether authorization is required for a cache invalidation request. The PATCH path for this setting is /{method_setting_key}/caching/requireAuthorizationForCacheControl, and the value is a Boolean.
        public var requireAuthorizationForCacheControl: Bool? = nil

        public init() {}

        public init(dataTraceEnabled: Bool? = nil, metricsEnabled: Bool? = nil, cacheDataEncrypted: Bool? = nil, cachingEnabled: Bool? = nil, cacheTtlInSeconds: Int32? = nil, throttlingBurstLimit: Int32? = nil, throttlingRateLimit: Double? = nil, loggingLevel: String? = nil, unauthorizedCacheControlHeaderStrategy: String? = nil, requireAuthorizationForCacheControl: Bool? = nil) {
            self.dataTraceEnabled = dataTraceEnabled
            self.metricsEnabled = metricsEnabled
            self.cacheDataEncrypted = cacheDataEncrypted
            self.cachingEnabled = cachingEnabled
            self.cacheTtlInSeconds = cacheTtlInSeconds
            self.throttlingBurstLimit = throttlingBurstLimit
            self.throttlingRateLimit = throttlingRateLimit
            self.loggingLevel = loggingLevel
            self.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy
            self.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl
        }

    }

    public struct ApiKey: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the API Key.
        public var name: String? = nil
        /// The value of the API Key.
        public var value: String? = nil
        /// The identifier of the API Key.
        public var id: String? = nil
        /// The timestamp when the API Key was created.
        public var createdDate: Date? = nil
        /// The description of the API Key.
        public var description: String? = nil
        /// A list of Stage resources that are associated with the ApiKey resource.
        public var stageKeys: [String]? = nil
        /// Specifies whether the API Key can be used by callers.
        public var enabled: Bool? = nil
        /// The timestamp when the API Key was last updated.
        public var lastUpdatedDate: Date? = nil
        /// An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        public var customerId: String? = nil

        public init() {}

        public init(name: String? = nil, value: String? = nil, id: String? = nil, createdDate: Date? = nil, description: String? = nil, stageKeys: [String]? = nil, enabled: Bool? = nil, lastUpdatedDate: Date? = nil, customerId: String? = nil) {
            self.name = name
            self.value = value
            self.id = id
            self.createdDate = createdDate
            self.description = description
            self.stageKeys = stageKeys
            self.enabled = enabled
            self.lastUpdatedDate = lastUpdatedDate
            self.customerId = customerId
        }

    }

    public struct UpdateIntegrationResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "status_code": "statusCode", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// Specifies an update integration response request's API identifier.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil
        /// Specifies an update integration response request's status code.
        public var statusCode: String = ""
        /// Specifies an update integration response request's resource identifier.
        public var resourceId: String = ""
        /// Specifies an update integration response request's HTTP method.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, patchOperations: [PatchOperation]? = nil, statusCode: String, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

    public struct GetDomainNamesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        /// The position of the current domain names to get information about.
        public var position: String? = nil
        /// The maximum number of DomainName resources in the collection to get information about. The default limit is 25. It should be an integer between 1 - 500.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

    }

    public struct DocumentationPartLocation: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the targeted API entity. It is a valid and required field for the API entity types of AUTHORIZER, MODEL, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY and RESPONSE_HEADER. It is an invalid field for any other entity type.
        public var name: String? = nil
        /// The HTTP verb of a method. It is a valid field for the API entity types of METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is * for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other location attributes, the child entity's method attribute must match that of the parent entity exactly.
        public var method: String? = nil
        /// The URL path of the target. It is a valid field for the API entity types of RESOURCE, METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is / for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other location attributes, the child entity's path attribute must match that of the parent entity as a prefix.
        public var path: String? = nil
        /// The HTTP status code of a response. It is a valid field for the API entity types of RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. The default value is * for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other location attributes, the child entity's statusCode attribute must match that of the parent entity exactly.
        public var statusCode: String? = nil
        /// The type of API entity to which the documentation content applies. It is a valid and required field for API entity types of API, AUTHORIZER, MODEL, RESOURCE, METHOD, PATH_PARAMETER, QUERY_PARAMETER, REQUEST_HEADER, REQUEST_BODY, RESPONSE, RESPONSE_HEADER, and RESPONSE_BODY. Content inheritance does not apply to any entity of the API, AUTHROZER, METHOD, MODEL, REQUEST_BODY, or RESOURCE type.
        public var type: String = ""

        public init() {}

        public init(name: String? = nil, method: String? = nil, path: String? = nil, statusCode: String? = nil, type: String) {
            self.name = name
            self.method = method
            self.path = path
            self.statusCode = statusCode
            self.type = type
        }

    }

    public struct MethodSnapshot: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies whether the method requires a valid ApiKey.
        public var apiKeyRequired: Bool? = nil
        /// Specifies the type of authorization used for the method.
        public var authorizationType: String? = nil

        public init() {}

        public init(apiKeyRequired: Bool? = nil, authorizationType: String? = nil) {
            self.apiKeyRequired = apiKeyRequired
            self.authorizationType = authorizationType
        }

    }

    public struct UpdateRestApiRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The ID of the RestApi you want to update.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

    }

    public struct DomainName: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the certificate.
        public var certificateName: String? = nil
        /// The name of the DomainName resource.
        public var domainName: String? = nil
        /// The reference to an AWS-managed certificate. AWS Certificate Manager is the only supported source.
        public var certificateArn: String? = nil
        /// The timestamp when the certificate was uploaded.
        public var certificateUploadDate: Date? = nil
        /// The domain name of the Amazon CloudFront distribution. For more information, see the Amazon CloudFront documentation.
        public var distributionDomainName: String? = nil

        public init() {}

        public init(certificateName: String? = nil, domainName: String? = nil, certificateArn: String? = nil, certificateUploadDate: Date? = nil, distributionDomainName: String? = nil) {
            self.certificateName = certificateName
            self.domainName = domainName
            self.certificateArn = certificateArn
            self.certificateUploadDate = certificateUploadDate
            self.distributionDomainName = distributionDomainName
        }

    }

    public struct GetExportRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var headerParams: [String: String] {
            return ["Accept": "accepts"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "stage_name": "stageName", "export_type": "exportType"]
        }
        /// The identifier of the RestApi to be exported.
        public var restApiId: String = ""
        /// The name of the Stage that will be exported.
        public var stageName: String = ""
        /// The type of export. Currently only 'swagger' is supported.
        public var exportType: String = ""
        /// The content-type of the export, for example application/json. Currently application/json and application/yaml are supported for exportType of swagger. This should be specified in the Accept header for direct API requests.
        public var accepts: String? = nil
        /// A key-value map of query string parameters that specify properties of the export, depending on the requested exportType. For exportType swagger, any combination of the following parameters are supported: integrations will export the API with x-amazon-apigateway-integration extensions. authorizers will export the API with x-amazon-apigateway-authorizer extensions. postman will export the API with Postman extensions, allowing for import to the Postman tool
        public var parameters: [String: String]? = nil

        public init() {}

        public init(restApiId: String, stageName: String, exportType: String, accepts: String? = nil, parameters: [String: String]? = nil) {
            self.restApiId = restApiId
            self.stageName = stageName
            self.exportType = exportType
            self.accepts = accepts
            self.parameters = parameters
        }

    }

    public struct SdkConfigurationProperty: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of an SdkType configuration property.
        public var description: String? = nil
        /// The default value of an SdkType configuration property.
        public var defaultValue: String? = nil
        /// The name of a an SdkType configuration property.
        public var name: String? = nil
        /// A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (true) or not (false).
        public var required: Bool? = nil
        /// The user-friendly name of an SdkType configuration property.
        public var friendlyName: String? = nil

        public init() {}

        public init(description: String? = nil, defaultValue: String? = nil, name: String? = nil, required: Bool? = nil, friendlyName: String? = nil) {
            self.description = description
            self.defaultValue = defaultValue
            self.name = name
            self.required = required
            self.friendlyName = friendlyName
        }

    }

    public struct GetModelsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The position of the next set of results in the Models resource to get information about.
        public var position: String? = nil
        /// The RestApi identifier.
        public var restApiId: String = ""
        /// The maximum number of models in the collection to get information about. The default limit is 25. It should be an integer between 1 - 500.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, restApiId: String, limit: Int32? = nil) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

    }

    public struct PutIntegrationResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["resource_id": "resourceId", "status_code": "statusCode", "restapi_id": "restApiId", "http_method": "httpMethod"]
        }
        /// Specifies the status code that is used to map the integration response to an existing MethodResponse.
        public var statusCode: String = ""
        /// Specifies a put integration response request's HTTP method.
        public var httpMethod: String = ""
        /// Specifies a put integration response request's API identifier.
        public var restApiId: String = ""
        /// Specifies a put integration response's templates.
        public var responseTemplates: [String: String]? = nil
        /// A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name must be a valid and unique response header name and JSON-expression a valid JSON expression without the $ prefix.
        public var responseParameters: [String: String]? = nil
        /// Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
        public var contentHandling: String? = nil
        /// Specifies a put integration response request's resource identifier.
        public var resourceId: String = ""
        /// Specifies the selection pattern of a put integration response.
        public var selectionPattern: String? = nil

        public init() {}

        public init(statusCode: String, httpMethod: String, restApiId: String, responseTemplates: [String: String]? = nil, responseParameters: [String: String]? = nil, contentHandling: String? = nil, resourceId: String, selectionPattern: String? = nil) {
            self.statusCode = statusCode
            self.httpMethod = httpMethod
            self.restApiId = restApiId
            self.responseTemplates = responseTemplates
            self.responseParameters = responseParameters
            self.contentHandling = contentHandling
            self.resourceId = resourceId
            self.selectionPattern = selectionPattern
        }

    }

    public struct GetResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the resource.
        public var restApiId: String = ""
        /// The identifier for the Resource resource.
        public var resourceId: String = ""

        public init() {}

        public init(restApiId: String, resourceId: String) {
            self.restApiId = restApiId
            self.resourceId = resourceId
        }

    }

    public struct Deployments: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current page of any Deployment resources in the collection of deployment resources.
        public var items: [Deployment]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [Deployment]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct FlushStageCacheRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "stage_name": "stageName"]
        }
        /// The API identifier of the stage to flush its cache.
        public var restApiId: String = ""
        /// The name of the stage to flush its cache.
        public var stageName: String = ""

        public init() {}

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

    }

    public struct BasePathMapping: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The base path name that callers of the API must provide as part of the URL after the domain name.
        public var basePath: String? = nil
        /// The name of the API.
        public var restApiId: String? = nil
        /// The name of the API's stage.
        public var stage: String? = nil

        public init() {}

        public init(basePath: String? = nil, restApiId: String? = nil, stage: String? = nil) {
            self.basePath = basePath
            self.restApiId = restApiId
            self.stage = stage
        }

    }

    public struct GetClientCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["clientcertificate_id": "clientCertificateId"]
        }
        /// The identifier of the ClientCertificate resource to be described.
        public var clientCertificateId: String = ""

        public init() {}

        public init(clientCertificateId: String) {
            self.clientCertificateId = clientCertificateId
        }

    }

    public struct UpdateModelRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "model_name": "modelName"]
        }
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil
        /// The RestApi identifier under which the model exists.
        public var restApiId: String = ""
        /// The name of the model to update.
        public var modelName: String = ""

        public init() {}

        public init(patchOperations: [PatchOperation]? = nil, restApiId: String, modelName: String) {
            self.patchOperations = patchOperations
            self.restApiId = restApiId
            self.modelName = modelName
        }

    }

    public struct DocumentationPart: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The DocumentationPart identifier, generated by Amazon API Gateway when the DocumentationPart is created.
        public var id: String? = nil
        /// The location of the API entity to which the documentation applies. Valid fields depend on the targeted API entity type. All the valid location fields are not required. If not explicitly specified, a valid location field is treated as a wildcard and associated documentation content may be inherited by matching entities, unless overridden.
        public var location: DocumentationPartLocation? = nil
        /// A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., "{ \"description\": \"The API does ...\" }". Only Swagger-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a Swagger extension of x-amazon-apigateway-documentation.
        public var properties: String? = nil

        public init() {}

        public init(id: String? = nil, location: DocumentationPartLocation? = nil, properties: String? = nil) {
            self.id = id
            self.location = location
            self.properties = properties
        }

    }

    public struct ClientCertificates: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current page of any ClientCertificate resources in the collection of ClientCertificate resources.
        public var items: [ClientCertificate]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [ClientCertificate]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct DeleteBasePathMappingRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["domain_name": "domainName", "base_path": "basePath"]
        }
        /// The base path name of the BasePathMapping resource to delete.
        public var basePath: String = ""
        /// The domain name of the BasePathMapping resource to delete.
        public var domainName: String = ""

        public init() {}

        public init(basePath: String, domainName: String) {
            self.basePath = basePath
            self.domainName = domainName
        }

    }

    public struct UpdateUsageRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["keyId": "keyId", "usageplanId": "usagePlanId"]
        }
        /// The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.
        public var keyId: String = ""
        /// The Id of the usage plan associated with the usage data.
        public var usagePlanId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(keyId: String, usagePlanId: String, patchOperations: [PatchOperation]? = nil) {
            self.keyId = keyId
            self.usagePlanId = usagePlanId
            self.patchOperations = patchOperations
        }

    }

    public struct CreateUsagePlanRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The associated API stages of the usage plan.
        public var apiStages: [ApiStage]? = nil
        /// The name of the usage plan.
        public var name: String = ""
        /// The description of the usage plan.
        public var description: String? = nil
        /// The quota of the usage plan.
        public var quota: QuotaSettings? = nil
        /// The throttling limits of the usage plan.
        public var throttle: ThrottleSettings? = nil

        public init() {}

        public init(apiStages: [ApiStage]? = nil, name: String, description: String? = nil, quota: QuotaSettings? = nil, throttle: ThrottleSettings? = nil) {
            self.apiStages = apiStages
            self.name = name
            self.description = description
            self.quota = quota
            self.throttle = throttle
        }

    }

    public struct SdkType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of an SdkType.
        public var description: String? = nil
        /// A list of configuration properties of an SdkType.
        public var configurationProperties: [SdkConfigurationProperty]? = nil
        /// The identifier of an SdkType instance.
        public var id: String? = nil
        /// The user-friendly name of an SdkType instance.
        public var friendlyName: String? = nil

        public init() {}

        public init(description: String? = nil, configurationProperties: [SdkConfigurationProperty]? = nil, id: String? = nil, friendlyName: String? = nil) {
            self.description = description
            self.configurationProperties = configurationProperties
            self.id = id
            self.friendlyName = friendlyName
        }

    }

    public struct Integration: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the integration's responses.   Example: Get integration responses of a method Request  GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160607T191449Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160607/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}  Response The successful response returns 200 OK status and a payload as follows: { "_links": { "curies": { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "'application/xml'" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E#foreach($stream in $input.path('$.StreamNames'))%3Cstream%3E%3Cname%3E$stream%3C/name%3E%3C/stream%3E#end%3C/kinesisStreams%3E\")\n" }, "statusCode": "200" }    Creating an API 
        public var integrationResponses: [String: IntegrationResponse]? = nil
        /// Specifies the integration's cache namespace.
        public var cacheNamespace: String? = nil
        /// Specifies the integration's Uniform Resource Identifier (URI). For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification. For AWS integrations, the URI should be of the form arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}. Region, subdomain and service are used to determine the right endpoint. For AWS services that use the Action= query string parameter, service_api should be a valid action for the desired service. For RESTful AWS service APIs, path is used to indicate that the remaining substring in the URI should be treated as the path to the resource, including the initial /.
        public var uri: String? = nil
        /// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name must be a valid and unique method request parameter name.
        public var requestParameters: [String: String]? = nil
        /// Specifies the integration's HTTP method type.
        public var httpMethod: String? = nil
        /// Specifies the integration's cache key parameters.
        public var cacheKeyParameters: [String]? = nil
        /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        public var requestTemplates: [String: String]? = nil
        /// Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a request payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a request payload from a binary blob to a Base64-encoded string.  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
        public var contentHandling: String? = nil
        /// Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::\*:user/\*. To use resource-based permissions on supported AWS services, specify null.
        public var credentials: String? = nil
        /// Specifies the integration's type. The valid value is HTTP for integrating with an HTTP back end, AWS for any AWS service endpoints, MOCK for testing without actually invoking the back end, HTTP_PROXY for integrating with the HTTP proxy integration, or AWS_PROXY for integrating with the Lambda proxy integration type.
        public var type: String? = nil
        ///   Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in requestTemplates. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.    WHEN_NO_MATCH passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request.   WHEN_NO_TEMPLATES passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response.   NEVER rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.   
        public var passthroughBehavior: String? = nil

        public init() {}

        public init(integrationResponses: [String: IntegrationResponse]? = nil, cacheNamespace: String? = nil, uri: String? = nil, requestParameters: [String: String]? = nil, httpMethod: String? = nil, cacheKeyParameters: [String]? = nil, requestTemplates: [String: String]? = nil, contentHandling: String? = nil, credentials: String? = nil, type: String? = nil, passthroughBehavior: String? = nil) {
            self.integrationResponses = integrationResponses
            self.cacheNamespace = cacheNamespace
            self.uri = uri
            self.requestParameters = requestParameters
            self.httpMethod = httpMethod
            self.cacheKeyParameters = cacheKeyParameters
            self.requestTemplates = requestTemplates
            self.contentHandling = contentHandling
            self.credentials = credentials
            self.type = type
            self.passthroughBehavior = passthroughBehavior
        }

    }

    public struct Usage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The usage data, as daily logs of used and remaining quotas, over the specified time interval indexed over the API keys in a usage plan. For example, {..., "values" : { "{api_key}" : [ [0, 100], [10, 90], [100, 10]]}, where {api_key} stands for an API key value and the daily log entry is of the format [used quota, remaining quota].
        public var items: [String: [[Int64]]]? = nil
        public var position: String? = nil
        /// The starting date of the usage data.
        public var startDate: String? = nil
        /// The plan Id associated with this usage data.
        public var usagePlanId: String? = nil
        /// The ending date of the usage data.
        public var endDate: String? = nil

        public init() {}

        public init(items: [String: [[Int64]]]? = nil, position: String? = nil, startDate: String? = nil, usagePlanId: String? = nil, endDate: String? = nil) {
            self.items = items
            self.position = position
            self.startDate = startDate
            self.usagePlanId = usagePlanId
            self.endDate = endDate
        }

    }

    public struct Deployment: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description for the deployment resource.
        public var description: String? = nil
        /// A summary of the RestApi at the date and time that the deployment resource was created.
        public var apiSummary: [String: [String: MethodSnapshot]]? = nil
        /// The identifier for the deployment resource.
        public var id: String? = nil
        /// The date and time that the deployment resource was created.
        public var createdDate: Date? = nil

        public init() {}

        public init(description: String? = nil, apiSummary: [String: [String: MethodSnapshot]]? = nil, id: String? = nil, createdDate: Date? = nil) {
            self.description = description
            self.apiSummary = apiSummary
            self.id = id
            self.createdDate = createdDate
        }

    }

    public struct ImportDocumentationPartsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = "body"
        public var queryParams: [String: String] {
            return ["failonwarnings": "failOnWarnings", "mode": "mode"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// [Required] The identifier of an API of the to-be-imported documentation parts.
        public var restApiId: String = ""
        /// A query parameter to indicate whether to overwrite (OVERWRITE) any existing DocumentationParts definition or to merge (MERGE) the new definition into the existing one. The default value is MERGE.
        public var mode: String? = nil
        /// A query parameter to specify whether to rollback the documentation importation (true) or not (false) when a warning is encountered. The default value is false.
        public var failOnWarnings: Bool? = nil
        /// [Required] Raw byte array representing the to-be-imported documentation parts. To import from a Swagger file, this is a JSON object.
        public var body: Data = Data()

        public init() {}

        public init(restApiId: String, mode: String? = nil, failOnWarnings: Bool? = nil, body: Data) {
            self.restApiId = restApiId
            self.mode = mode
            self.failOnWarnings = failOnWarnings
            self.body = body
        }

    }

    public struct ClientCertificate: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier of the client certificate.
        public var clientCertificateId: String? = nil
        /// The description of the client certificate.
        public var description: String? = nil
        /// The timestamp when the client certificate will expire.
        public var expirationDate: Date? = nil
        /// The PEM-encoded public key of the client certificate, which can be used to configure certificate authentication in the integration endpoint .
        public var pemEncodedCertificate: String? = nil
        /// The timestamp when the client certificate was created.
        public var createdDate: Date? = nil

        public init() {}

        public init(clientCertificateId: String? = nil, description: String? = nil, expirationDate: Date? = nil, pemEncodedCertificate: String? = nil, createdDate: Date? = nil) {
            self.clientCertificateId = clientCertificateId
            self.description = description
            self.expirationDate = expirationDate
            self.pemEncodedCertificate = pemEncodedCertificate
            self.createdDate = createdDate
        }

    }

    public struct Authorizers: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Gets the current list of Authorizer resources in the collection.
        public var items: [Authorizer]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [Authorizer]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct DocumentationVersion: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the API documentation snapshot.
        public var description: String? = nil
        /// The version identifier of the API documentation snapshot.
        public var version: String? = nil
        /// The date when the API documentation snapshot is created.
        public var createdDate: Date? = nil

        public init() {}

        public init(description: String? = nil, version: String? = nil, createdDate: Date? = nil) {
            self.description = description
            self.version = version
            self.createdDate = createdDate
        }

    }

    public struct CreateBasePathMappingRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["domain_name": "domainName"]
        }
        /// The name of the API that you want to apply this mapping to.
        public var restApiId: String = ""
        /// The domain name of the BasePathMapping resource to create.
        public var domainName: String = ""
        /// The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Leave this blank if you do not want callers to specify a base path name after the domain name.
        public var basePath: String? = nil
        /// The name of the API's stage that you want to use for this mapping. Leave this blank if you do not want callers to explicitly specify the stage name after any base path name.
        public var stage: String? = nil

        public init() {}

        public init(restApiId: String, domainName: String, basePath: String? = nil, stage: String? = nil) {
            self.restApiId = restApiId
            self.domainName = domainName
            self.basePath = basePath
            self.stage = stage
        }

    }

    public struct UpdateApiKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["api_Key": "apiKey"]
        }
        /// The identifier of the ApiKey resource to be updated.
        public var apiKey: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(apiKey: String, patchOperations: [PatchOperation]? = nil) {
            self.apiKey = apiKey
            self.patchOperations = patchOperations
        }

    }

    public struct GetRestApiRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The identifier of the RestApi resource.
        public var restApiId: String = ""

        public init() {}

        public init(restApiId: String) {
            self.restApiId = restApiId
        }

    }

    public struct Template: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Apache Velocity Template Language (VTL) template content used for the template resource.
        public var value: String? = nil

        public init() {}

        public init(value: String? = nil) {
            self.value = value
        }

    }

    public struct GetApiKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["includeValue": "includeValue"]
        }
        public var pathParams: [String: String] {
            return ["api_Key": "apiKey"]
        }
        /// A boolean flag to specify whether (true) or not (false) the result contains the key value.
        public var includeValue: Bool? = nil
        /// The identifier of the ApiKey resource.
        public var apiKey: String = ""

        public init() {}

        public init(includeValue: Bool? = nil, apiKey: String) {
            self.includeValue = includeValue
            self.apiKey = apiKey
        }

    }

    public struct CreateDocumentationPartRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// [Required] The identifier of an API of the to-be-created documentation part.
        public var restApiId: String = ""
        /// [Required] The location of the targeted API entity of the to-be-created documentation part.
        public var location: DocumentationPartLocation = DocumentationPartLocation()
        /// [Required] The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only Swagger-compliant key-value pairs can be exported and, hence, published.
        public var properties: String = ""

        public init() {}

        public init(restApiId: String, location: DocumentationPartLocation, properties: String) {
            self.restApiId = restApiId
            self.location = location
            self.properties = properties
        }

    }

    public struct ThrottleSettings: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
        public var burstLimit: Int32? = nil
        /// The API request steady-state rate limit.
        public var rateLimit: Double? = nil

        public init() {}

        public init(burstLimit: Int32? = nil, rateLimit: Double? = nil) {
            self.burstLimit = burstLimit
            self.rateLimit = rateLimit
        }

    }

    public struct DeleteIntegrationResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "status_code": "statusCode", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// Specifies a delete integration response request's API identifier.
        public var restApiId: String = ""
        /// Specifies a delete integration response request's status code.
        public var statusCode: String = ""
        /// Specifies a delete integration response request's resource identifier.
        public var resourceId: String = ""
        /// Specifies a delete integration response request's HTTP method.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, statusCode: String, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

    public struct SdkResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = "body"
        public var headerParams: [String: String] {
            return ["Content-Type": "contentType", "Content-Disposition": "contentDisposition"]
        }
        /// The content-type header value in the HTTP response.
        public var contentType: String? = nil
        /// The content-disposition header value in the HTTP response.
        public var contentDisposition: String? = nil
        /// The binary blob response to GetSdk, which contains the generated SDK.
        public var body: Data? = nil

        public init() {}

        public init(contentType: String? = nil, contentDisposition: String? = nil, body: Data? = nil) {
            self.contentType = contentType
            self.contentDisposition = contentDisposition
            self.body = body
        }

    }

    public struct UpdateResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the Resource resource.
        public var restApiId: String = ""
        /// The identifier of the Resource resource.
        public var resourceId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(restApiId: String, resourceId: String, patchOperations: [PatchOperation]? = nil) {
            self.restApiId = restApiId
            self.resourceId = resourceId
            self.patchOperations = patchOperations
        }

    }

    public struct UpdateIntegrationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// Represents an update integration request's API identifier.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil
        /// Represents an update integration request's resource identifier.
        public var resourceId: String = ""
        /// Represents an update integration request's HTTP method.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, patchOperations: [PatchOperation]? = nil, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

    public struct UsagePlanKeys: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Gets the current item of the usage plan keys collection.
        public var items: [UsagePlanKey]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [UsagePlanKey]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct ApiStage: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// API Id of the associated API stage in a usage plan.
        public var apiId: String? = nil
        /// API stage name of the associated API stage in a usage plan.
        public var stage: String? = nil

        public init() {}

        public init(apiId: String? = nil, stage: String? = nil) {
            self.apiId = apiId
            self.stage = stage
        }

    }

    public struct CreateResourceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "parent_id": "parentId"]
        }
        /// The identifier of the RestApi for the resource. 
        public var restApiId: String = ""
        /// The last path segment for this resource.
        public var pathPart: String = ""
        /// The parent resource's identifier.
        public var parentId: String = ""

        public init() {}

        public init(restApiId: String, pathPart: String, parentId: String) {
            self.restApiId = restApiId
            self.pathPart = pathPart
            self.parentId = parentId
        }

    }

    public struct GetMethodResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "status_code": "statusCode", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the MethodResponse resource.
        public var restApiId: String = ""
        /// The status code for the MethodResponse resource.
        public var statusCode: String = ""
        /// The Resource identifier for the MethodResponse resource.
        public var resourceId: String = ""
        /// The HTTP verb of the Method resource.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, statusCode: String, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

    public struct GetDocumentationPartsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "name": "nameQuery", "limit": "limit", "path": "path", "type": "type"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The position of the to-be-retrieved documentation part in the DocumentationParts collection.
        public var position: String? = nil
        /// [Required] The identifier of the API of the to-be-retrieved documentation parts.
        public var restApiId: String = ""
        /// The size of the paged results.
        public var limit: Int32? = nil
        /// The path of API entities of the to-be-retrieved documentation parts.
        public var path: String? = nil
        /// The name of API entities of the to-be-retrieved documentation parts.
        public var nameQuery: String? = nil
        /// The type of API entities of the to-be-retrieved documentation parts. 
        public var type: String? = nil

        public init() {}

        public init(position: String? = nil, restApiId: String, limit: Int32? = nil, path: String? = nil, nameQuery: String? = nil, type: String? = nil) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
            self.path = path
            self.nameQuery = nameQuery
            self.type = type
        }

    }

    public struct GetDeploymentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["deployment_id": "deploymentId", "restapi_id": "restApiId"]
        }
        /// The identifier of the Deployment resource to get information about.
        public var deploymentId: String = ""
        /// The identifier of the RestApi resource for the Deployment resource to get information about.
        public var restApiId: String = ""

        public init() {}

        public init(deploymentId: String, restApiId: String) {
            self.deploymentId = deploymentId
            self.restApiId = restApiId
        }

    }

    public struct UpdateAccountRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(patchOperations: [PatchOperation]? = nil) {
            self.patchOperations = patchOperations
        }

    }

    public struct GenerateClientCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the ClientCertificate.
        public var description: String? = nil

        public init() {}

        public init(description: String? = nil) {
            self.description = description
        }

    }

    public struct DomainNames: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current page of any DomainName resources in the collection of DomainName resources.
        public var items: [DomainName]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [DomainName]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct PutMethodResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "status_code": "statusCode", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the Method resource.
        public var restApiId: String = ""
        /// The method response's status code.
        public var statusCode: String = ""
        /// Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.
        public var responseModels: [String: String]? = nil
        /// The Resource identifier for the Method resource.
        public var resourceId: String = ""
        /// The HTTP verb of the Method resource.
        public var httpMethod: String = ""
        /// A key-value map specifying required or optional response parameters that Amazon API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in integration.response.header.{name}, a static value enclosed within a pair of single quotes (e.g., 'application/json'), or a JSON expression from the back-end response payload in the form of integration.response.body.{JSON-expression}, where JSON-expression is a valid JSON expression without the $ prefix.)
        public var responseParameters: [String: Bool]? = nil

        public init() {}

        public init(restApiId: String, statusCode: String, responseModels: [String: String]? = nil, resourceId: String, httpMethod: String, responseParameters: [String: Bool]? = nil) {
            self.restApiId = restApiId
            self.statusCode = statusCode
            self.responseModels = responseModels
            self.resourceId = resourceId
            self.httpMethod = httpMethod
            self.responseParameters = responseParameters
        }

    }

    public struct UsagePlan: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The associated API stages of a usage plan.
        public var apiStages: [ApiStage]? = nil
        /// The maximum number of permitted requests per a given unit time interval.
        public var quota: QuotaSettings? = nil
        /// The name of a usage plan.
        public var name: String? = nil
        /// The identifier of a UsagePlan resource.
        public var id: String? = nil
        /// The request throttle limits of a usage plan.
        public var throttle: ThrottleSettings? = nil
        /// The description of a usage plan.
        public var description: String? = nil
        /// The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
        public var productCode: String? = nil

        public init() {}

        public init(apiStages: [ApiStage]? = nil, quota: QuotaSettings? = nil, name: String? = nil, id: String? = nil, throttle: ThrottleSettings? = nil, description: String? = nil, productCode: String? = nil) {
            self.apiStages = apiStages
            self.quota = quota
            self.name = name
            self.id = id
            self.throttle = throttle
            self.description = description
            self.productCode = productCode
        }

    }

    public struct GetResourcesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The position of the next set of results in the current Resources resource to get information about.
        public var position: String? = nil
        /// The RestApi identifier for the Resource.
        public var restApiId: String = ""
        /// The maximum number of Resource resources in the collection to get information about. The default limit is 25. It should be an integer between 1 - 500.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, restApiId: String, limit: Int32? = nil) {
            self.position = position
            self.restApiId = restApiId
            self.limit = limit
        }

    }

    public struct RestApi: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        public var binaryMediaTypes: [String]? = nil
        /// The API's name.
        public var name: String? = nil
        /// The API's identifier. This identifier is unique across all of your APIs in Amazon API Gateway.
        public var id: String? = nil
        /// The timestamp when the API was created.
        public var createdDate: Date? = nil
        /// The API's description.
        public var description: String? = nil
        /// A version identifier for the API.
        public var version: String? = nil
        /// The warning messages reported when failonwarnings is turned on during API import.
        public var warnings: [String]? = nil

        public init() {}

        public init(binaryMediaTypes: [String]? = nil, name: String? = nil, id: String? = nil, createdDate: Date? = nil, description: String? = nil, version: String? = nil, warnings: [String]? = nil) {
            self.binaryMediaTypes = binaryMediaTypes
            self.name = name
            self.id = id
            self.createdDate = createdDate
            self.description = description
            self.version = version
            self.warnings = warnings
        }

    }

    public struct IntegrationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
        public var responseTemplates: [String: String]? = nil
        /// Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
        public var contentHandling: String? = nil
        /// Specifies the status code that is used to map the integration response to an existing MethodResponse.
        public var statusCode: String? = nil
        /// A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.
        public var responseParameters: [String: String]? = nil
        /// Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the .+ regex to match error response. However, make sure that the error response does not contain any newline (\n) character in such cases. If the back end is an AWS Lambda function, the AWS Lambda function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.
        public var selectionPattern: String? = nil

        public init() {}

        public init(responseTemplates: [String: String]? = nil, contentHandling: String? = nil, statusCode: String? = nil, responseParameters: [String: String]? = nil, selectionPattern: String? = nil) {
            self.responseTemplates = responseTemplates
            self.contentHandling = contentHandling
            self.statusCode = statusCode
            self.responseParameters = responseParameters
            self.selectionPattern = selectionPattern
        }

    }

    public struct Account: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of features supported for the account. When usage plans are enabled, the features list will include an entry of "UsagePlans".
        public var features: [String]? = nil
        /// The version of the API keys used for the account.
        public var apiKeyVersion: String? = nil
        /// Specifies the API request limits configured for the current Account.
        public var throttleSettings: ThrottleSettings? = nil
        /// The ARN of an Amazon CloudWatch role for the current Account. 
        public var cloudwatchRoleArn: String? = nil

        public init() {}

        public init(features: [String]? = nil, apiKeyVersion: String? = nil, throttleSettings: ThrottleSettings? = nil, cloudwatchRoleArn: String? = nil) {
            self.features = features
            self.apiKeyVersion = apiKeyVersion
            self.throttleSettings = throttleSettings
            self.cloudwatchRoleArn = cloudwatchRoleArn
        }

    }

    public struct CreateAuthorizerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// [Required] The name of the authorizer.
        public var name: String = ""
        /// A validation expression for the incoming identity.
        public var identityValidationExpression: String? = nil
        /// The TTL of cached authorizer results.
        public var authorizerResultTtlInSeconds: Int32? = nil
        /// [Required] Specifies the authorizer's Uniform Resource Identifier (URI).
        public var authorizerUri: String? = nil
        /// Specifies the credentials required for the authorizer, if any.
        public var authorizerCredentials: String? = nil
        /// The RestApi identifier under which the Authorizer will be created.
        public var restApiId: String = ""
        /// [Required] The source of the identity in an incoming request.
        public var identitySource: String = ""
        /// Optional customer-defined field, used in Swagger imports/exports. Has no functional impact.
        public var authType: String? = nil
        /// A list of the Cognito Your User Pool authorizer's provider ARNs.
        public var providerARNs: [String]? = nil
        /// [Required] The type of the authorizer.
        public var type: String = ""

        public init() {}

        public init(name: String, identityValidationExpression: String? = nil, authorizerResultTtlInSeconds: Int32? = nil, authorizerUri: String? = nil, authorizerCredentials: String? = nil, restApiId: String, identitySource: String, authType: String? = nil, providerARNs: [String]? = nil, type: String) {
            self.name = name
            self.identityValidationExpression = identityValidationExpression
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerUri = authorizerUri
            self.authorizerCredentials = authorizerCredentials
            self.restApiId = restApiId
            self.identitySource = identitySource
            self.authType = authType
            self.providerARNs = providerARNs
            self.type = type
        }

    }

    public struct GetStagesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["deploymentId": "deploymentId"]
        }
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The stages' deployment identifiers.
        public var deploymentId: String? = nil
        /// The stages' API identifiers.
        public var restApiId: String = ""

        public init() {}

        public init(deploymentId: String? = nil, restApiId: String) {
            self.deploymentId = deploymentId
            self.restApiId = restApiId
        }

    }

    public struct ImportRestApiRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = "body"
        public var queryParams: [String: String] {
            return ["failonwarnings": "failOnWarnings"]
        }
        /// A query parameter to indicate whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.
        public var failOnWarnings: Bool? = nil
        /// The POST request body containing external API definitions. Currently, only Swagger definition JSON files are supported.
        public var body: Data = Data()
        /// Custom header parameters as part of the request.
        public var parameters: [String: String]? = nil

        public init() {}

        public init(failOnWarnings: Bool? = nil, body: Data, parameters: [String: String]? = nil) {
            self.failOnWarnings = failOnWarnings
            self.body = body
            self.parameters = parameters
        }

    }

    public struct GetRestApisRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        /// The position of the current RestApis resource in the collection to get information about.
        public var position: String? = nil
        /// The maximum number of RestApi resources in the collection to get information about. The default limit is 25. It should be an integer between 1 - 500.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

    }

    public struct GetSdkRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["sdk_type": "sdkType", "restapi_id": "restApiId", "stage_name": "stageName"]
        }
        /// The language for the generated SDK. Currently javascript, android, and objectivec (for iOS) are supported.
        public var sdkType: String = ""
        /// The identifier of the RestApi that the SDK will use.
        public var restApiId: String = ""
        /// The name of the Stage that the SDK will use.
        public var stageName: String = ""
        /// A key-value map of query string parameters that specify properties of the SDK, depending on the requested sdkType. For sdkType of objectivec, a parameter named classPrefix is required. For sdkType of android, parameters named groupId, artifactId, artifactVersion, and invokerPackage are required.
        public var parameters: [String: String]? = nil

        public init() {}

        public init(sdkType: String, restApiId: String, stageName: String, parameters: [String: String]? = nil) {
            self.sdkType = sdkType
            self.restApiId = restApiId
            self.stageName = stageName
            self.parameters = parameters
        }

    }

    public struct TestInvokeAuthorizerResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var authorization: [String: [String]]? = nil
        /// The principal identity returned by the Authorizer
        public var principalId: String? = nil
        /// The Amazon API Gateway execution log for the test authorizer request.
        public var log: String? = nil
        /// The execution latency of the test authorizer request.
        public var latency: Int64? = nil
        /// The JSON policy document returned by the Authorizer
        public var policy: String? = nil
        /// The HTTP status code that the client would have received. Value is 0 if the authorizer succeeded.
        public var clientStatus: Int32? = nil
        /// The open identity claims, with any supported custom attributes, returned from the Cognito Your User Pool configured for the API.
        public var claims: [String: String]? = nil

        public init() {}

        public init(authorization: [String: [String]]? = nil, principalId: String? = nil, log: String? = nil, latency: Int64? = nil, policy: String? = nil, clientStatus: Int32? = nil, claims: [String: String]? = nil) {
            self.authorization = authorization
            self.principalId = principalId
            self.log = log
            self.latency = latency
            self.policy = policy
            self.clientStatus = clientStatus
            self.claims = claims
        }

    }

    public struct UpdateMethodRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the Method resource.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil
        /// The Resource identifier for the Method resource.
        public var resourceId: String = ""
        /// The HTTP verb of the Method resource.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, patchOperations: [PatchOperation]? = nil, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.patchOperations = patchOperations
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

    public struct Authorizer: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// [Required] The name of the authorizer.
        public var name: String? = nil
        /// The identifier for the authorizer resource.
        public var id: String? = nil
        /// A validation expression for the incoming identity. For TOKEN authorizers, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
        public var identityValidationExpression: String? = nil
        /// The TTL in seconds of cached authorizer results. If greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
        public var authorizerResultTtlInSeconds: Int32? = nil
        /// [Required] Specifies the authorizer's Uniform Resource Identifier (URI). For TOKEN authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations. In general, the URI has this form arn:aws:apigateway:{region}:lambda:path/{service_api}, where {region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
        public var authorizerUri: String? = nil
        /// Specifies the credentials required for the authorizer, if any. Two options are available. To specify an IAM role for Amazon API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
        public var authorizerCredentials: String? = nil
        /// [Required] The source of the identity in an incoming request. For a TOKEN authorizer, this value is a mapping expression with the same syntax as integration parameter mappings. The only valid source for tokens is 'header', so the expression should match 'method.request.header.[headerName]'. The value of the header '[headerName]' will be interpreted as the incoming token. For COGNITO_USER_POOLS authorizers, this property is used.
        public var identitySource: String? = nil
        /// Optional customer-defined field, used in Swagger imports/exports. Has no functional impact.
        public var authType: String? = nil
        /// A list of the provider ARNs of the authorizer. For an TOKEN authorizer, this is not defined. For authorizers of the COGNITO_USER_POOLS type, each element corresponds to a user pool ARN of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}. 
        public var providerARNs: [String]? = nil
        /// [Required] The type of the authorizer. Currently, the valid type is TOKEN for a Lambda function or COGNITO_USER_POOLS for an Amazon Cognito user pool.
        public var type: String? = nil

        public init() {}

        public init(name: String? = nil, id: String? = nil, identityValidationExpression: String? = nil, authorizerResultTtlInSeconds: Int32? = nil, authorizerUri: String? = nil, authorizerCredentials: String? = nil, identitySource: String? = nil, authType: String? = nil, providerARNs: [String]? = nil, type: String? = nil) {
            self.name = name
            self.id = id
            self.identityValidationExpression = identityValidationExpression
            self.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds
            self.authorizerUri = authorizerUri
            self.authorizerCredentials = authorizerCredentials
            self.identitySource = identitySource
            self.authType = authType
            self.providerARNs = providerARNs
            self.type = type
        }

    }

    public struct GetUsagePlansRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["keyId": "keyId", "position": "position", "limit": "limit"]
        }
        /// The identifier of the API key associated with the usage plans.
        public var keyId: String? = nil
        /// The zero-based array index specifying the position of the to-be-retrieved UsagePlan resource.
        public var position: String? = nil
        /// The number of UsagePlan resources to be returned as the result.
        public var limit: Int32? = nil

        public init() {}

        public init(keyId: String? = nil, position: String? = nil, limit: Int32? = nil) {
            self.keyId = keyId
            self.position = position
            self.limit = limit
        }

    }

    public struct UpdateStageRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "stage_name": "stageName"]
        }
        /// The identifier of the RestApi resource for the Stage resource to change information about.
        public var restApiId: String = ""
        /// The name of the Stage resource to change information about.
        public var stageName: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(restApiId: String, stageName: String, patchOperations: [PatchOperation]? = nil) {
            self.restApiId = restApiId
            self.stageName = stageName
            self.patchOperations = patchOperations
        }

    }

    public struct GetClientCertificatesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "limit": "limit"]
        }
        /// The position of the current ClientCertificate resource in the collection to get information about.
        public var position: String? = nil
        /// The maximum number of ClientCertificate resources in the collection to get information about. The default limit is 25. It should be an integer between 1 - 500.
        public var limit: Int32? = nil

        public init() {}

        public init(position: String? = nil, limit: Int32? = nil) {
            self.position = position
            self.limit = limit
        }

    }

    public struct GetUsagePlanRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["usageplanId": "usagePlanId"]
        }
        /// The identifier of the UsagePlan resource to be retrieved.
        public var usagePlanId: String = ""

        public init() {}

        public init(usagePlanId: String) {
            self.usagePlanId = usagePlanId
        }

    }

    public struct DocumentationParts: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current page of DocumentationPart resources in the DocumentationParts collection.
        public var items: [DocumentationPart]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [DocumentationPart]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct GetAccountRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DeleteDocumentationPartRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["part_id": "documentationPartId", "restapi_id": "restApiId"]
        }
        /// [Required] The identifier of the to-be-deleted documentation part.
        public var documentationPartId: String = ""
        /// [Required] Specifies the identifier of an API of the to-be-deleted documentation part.
        public var restApiId: String = ""

        public init() {}

        public init(documentationPartId: String, restApiId: String) {
            self.documentationPartId = documentationPartId
            self.restApiId = restApiId
        }

    }

    public struct CreateRestApiRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the RestApi.
        public var description: String? = nil
        /// The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        public var binaryMediaTypes: [String]? = nil
        /// The ID of the RestApi that you want to clone from.
        public var cloneFrom: String? = nil
        /// The name of the RestApi.
        public var name: String = ""
        /// A version identifier for the API.
        public var version: String? = nil

        public init() {}

        public init(description: String? = nil, binaryMediaTypes: [String]? = nil, cloneFrom: String? = nil, name: String, version: String? = nil) {
            self.description = description
            self.binaryMediaTypes = binaryMediaTypes
            self.cloneFrom = cloneFrom
            self.name = name
            self.version = version
        }

    }

    public struct CreateDeploymentRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// Enables a cache cluster for the Stage resource specified in the input.
        public var cacheClusterEnabled: Bool? = nil
        /// Specifies the cache cluster size for the Stage resource specified in the input, if a cache cluster is enabled.
        public var cacheClusterSize: String? = nil
        /// A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.
        public var variables: [String: String]? = nil
        /// The description for the Deployment resource to create.
        public var description: String? = nil
        /// The RestApi resource identifier for the Deployment resource to create.
        public var restApiId: String = ""
        /// The name of the Stage resource for the Deployment resource to create.
        public var stageName: String? = nil
        /// The description of the Stage resource for the Deployment resource to create.
        public var stageDescription: String? = nil

        public init() {}

        public init(cacheClusterEnabled: Bool? = nil, cacheClusterSize: String? = nil, variables: [String: String]? = nil, description: String? = nil, restApiId: String, stageName: String? = nil, stageDescription: String? = nil) {
            self.cacheClusterEnabled = cacheClusterEnabled
            self.cacheClusterSize = cacheClusterSize
            self.variables = variables
            self.description = description
            self.restApiId = restApiId
            self.stageName = stageName
            self.stageDescription = stageDescription
        }

    }

    public struct GetBasePathMappingRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["domain_name": "domainName", "base_path": "basePath"]
        }
        /// The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Leave this blank if you do not want callers to specify any base path name after the domain name.
        public var basePath: String = ""
        /// The domain name of the BasePathMapping resource to be described.
        public var domainName: String = ""

        public init() {}

        public init(basePath: String, domainName: String) {
            self.basePath = basePath
            self.domainName = domainName
        }

    }

    public struct UsagePlanKey: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of a usage plan key.
        public var name: String? = nil
        /// The value of a usage plan key.
        public var value: String? = nil
        /// The Id of a usage plan key.
        public var id: String? = nil
        /// The type of a usage plan key. Currently, the valid key type is API_KEY.
        public var type: String? = nil

        public init() {}

        public init(name: String? = nil, value: String? = nil, id: String? = nil, type: String? = nil) {
            self.name = name
            self.value = value
            self.id = id
            self.type = type
        }

    }

    public struct DocumentationVersions: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current page of DocumentationVersion items from the DocumentationVersions collection of an API.
        public var items: [DocumentationVersion]? = nil
        public var position: String? = nil

        public init() {}

        public init(items: [DocumentationVersion]? = nil, position: String? = nil) {
            self.items = items
            self.position = position
        }

    }

    public struct UpdateDomainNameRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["domain_name": "domainName"]
        }
        /// The name of the DomainName resource to be changed.
        public var domainName: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(domainName: String, patchOperations: [PatchOperation]? = nil) {
            self.domainName = domainName
            self.patchOperations = patchOperations
        }

    }

    public struct DeleteIntegrationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["resource_id": "resourceId", "restapi_id": "restApiId", "http_method": "httpMethod"]
        }
        /// Specifies a delete integration request's API identifier.
        public var restApiId: String = ""
        /// Specifies a delete integration request's HTTP method.
        public var httpMethod: String = ""
        /// Specifies a delete integration request's resource identifier.
        public var resourceId: String = ""

        public init() {}

        public init(restApiId: String, httpMethod: String, resourceId: String) {
            self.restApiId = restApiId
            self.httpMethod = httpMethod
            self.resourceId = resourceId
        }

    }

    public struct CreateUsagePlanKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["usageplanId": "usagePlanId"]
        }
        /// The identifier of a UsagePlanKey resource for a plan customer.
        public var keyId: String = ""
        /// The type of a UsagePlanKey resource for a plan customer.
        public var keyType: String = ""
        /// The Id of the UsagePlan resource representing the usage plan containing the to-be-created UsagePlanKey resource representing a plan customer.
        public var usagePlanId: String = ""

        public init() {}

        public init(keyId: String, keyType: String, usagePlanId: String) {
            self.keyId = keyId
            self.keyType = keyType
            self.usagePlanId = usagePlanId
        }

    }

    public struct GetDomainNameRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["domain_name": "domainName"]
        }
        /// The name of the DomainName resource.
        public var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

    public struct GetAuthorizerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "authorizer_id": "authorizerId"]
        }
        /// The identifier of the Authorizer resource.
        public var authorizerId: String = ""
        /// The RestApi identifier for the Authorizer resource.
        public var restApiId: String = ""

        public init() {}

        public init(authorizerId: String, restApiId: String) {
            self.authorizerId = authorizerId
            self.restApiId = restApiId
        }

    }

    public struct GetUsagePlanKeysRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var queryParams: [String: String] {
            return ["position": "position", "name": "nameQuery", "limit": "limit"]
        }
        public var pathParams: [String: String] {
            return ["usageplanId": "usagePlanId"]
        }
        /// A query parameter specifying the zero-based index specifying the position of a usage plan key.
        public var position: String? = nil
        /// A query parameter specifying the maximum number usage plan keys returned by the GET request.
        public var limit: Int32? = nil
        /// A query parameter specifying the name of the to-be-returned usage plan keys.
        public var nameQuery: String? = nil
        /// The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
        public var usagePlanId: String = ""

        public init() {}

        public init(position: String? = nil, limit: Int32? = nil, nameQuery: String? = nil, usagePlanId: String) {
            self.position = position
            self.limit = limit
            self.nameQuery = nameQuery
            self.usagePlanId = usagePlanId
        }

    }

    public struct DocumentationPartIds: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of the returned documentation part identifiers.
        public var ids: [String]? = nil
        /// A list of warning messages reported during import of documentation parts.
        public var warnings: [String]? = nil

        public init() {}

        public init(ids: [String]? = nil, warnings: [String]? = nil) {
            self.ids = ids
            self.warnings = warnings
        }

    }

    public struct PutIntegrationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// Specifies a put integration input's cache namespace.
        public var cacheNamespace: String? = nil
        /// Specifies a put integration input's Uniform Resource Identifier (URI). When the integration type is HTTP or AWS, this field is required. For integration with Lambda as an AWS service proxy, this value is of the 'arn:aws:apigateway:&lt;region&gt;:lambda:path/2015-03-31/functions/&lt;functionArn&gt;/invocations' format.
        public var uri: String? = nil
        /// Specifies a put integration input's cache key parameters.
        public var cacheKeyParameters: [String]? = nil
        /// Specifies a put integration request's API identifier.
        public var restApiId: String = ""
        /// Specifies a put integration input's type.
        public var type: String = ""
        /// Specifies a put integration request's resource ID.
        public var resourceId: String = ""
        /// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name must be a valid and unique method request parameter name.
        public var requestParameters: [String: String]? = nil
        /// Specifies a put integration request's HTTP method.
        public var httpMethod: String = ""
        /// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
        public var requestTemplates: [String: String]? = nil
        /// Specifies how to handle request payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:  CONVERT_TO_BINARY: Converts a request payload from a Base64-encoded string to the corresponding binary blob. CONVERT_TO_TEXT: Converts a request payload from a binary blob to a Base64-encoded string.  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
        public var contentHandling: String? = nil
        /// Specifies whether credentials are required for a put integration.
        public var credentials: String? = nil
        /// Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required.
        public var integrationHttpMethod: String? = nil
        /// Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.   WHEN_NO_MATCH passes the request body for unmapped content types through to the integration back end without transformation. NEVER rejects unmapped content types with an HTTP 415 'Unsupported Media Type' response. WHEN_NO_TEMPLATES allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response. 
        public var passthroughBehavior: String? = nil

        public init() {}

        public init(cacheNamespace: String? = nil, uri: String? = nil, cacheKeyParameters: [String]? = nil, restApiId: String, type: String, resourceId: String, requestParameters: [String: String]? = nil, httpMethod: String, requestTemplates: [String: String]? = nil, contentHandling: String? = nil, credentials: String? = nil, integrationHttpMethod: String? = nil, passthroughBehavior: String? = nil) {
            self.cacheNamespace = cacheNamespace
            self.uri = uri
            self.cacheKeyParameters = cacheKeyParameters
            self.restApiId = restApiId
            self.type = type
            self.resourceId = resourceId
            self.requestParameters = requestParameters
            self.httpMethod = httpMethod
            self.requestTemplates = requestTemplates
            self.contentHandling = contentHandling
            self.credentials = credentials
            self.integrationHttpMethod = integrationHttpMethod
            self.passthroughBehavior = passthroughBehavior
        }

    }

    public struct UpdateClientCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["clientcertificate_id": "clientCertificateId"]
        }
        /// The identifier of the ClientCertificate resource to be updated.
        public var clientCertificateId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(clientCertificateId: String, patchOperations: [PatchOperation]? = nil) {
            self.clientCertificateId = clientCertificateId
            self.patchOperations = patchOperations
        }

    }

    public struct DeleteRestApiRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId"]
        }
        /// The ID of the RestApi you want to delete.
        public var restApiId: String = ""

        public init() {}

        public init(restApiId: String) {
            self.restApiId = restApiId
        }

    }

    public struct MethodResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A key-value map specifying required or optional response parameters that Amazon API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern method.response.header.{name}, where name is a valid and unique header name. Amazon API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in integration.response.header.{name}, a static value enclosed within a pair of single quotes (e.g., 'application/json'), or a JSON expression from the back-end response payload in the form of integration.response.body.{JSON-expression}, where JSON-expression is a valid JSON expression without the $ prefix.)
        public var responseParameters: [String: Bool]? = nil
        /// Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.
        public var responseModels: [String: String]? = nil
        /// The method response's status code.
        public var statusCode: String? = nil

        public init() {}

        public init(responseParameters: [String: Bool]? = nil, responseModels: [String: String]? = nil, statusCode: String? = nil) {
            self.responseParameters = responseParameters
            self.responseModels = responseModels
            self.statusCode = statusCode
        }

    }

    public struct GetModelTemplateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "model_name": "modelName"]
        }
        /// The ID of the RestApi under which the model exists.
        public var restApiId: String = ""
        /// The name of the model for which to generate a template.
        public var modelName: String = ""

        public init() {}

        public init(restApiId: String, modelName: String) {
            self.restApiId = restApiId
            self.modelName = modelName
        }

    }

    public struct Model: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The description of the model.
        public var description: String? = nil
        /// The content-type for the model.
        public var contentType: String? = nil
        /// The name of the model.
        public var name: String? = nil
        /// The schema for the model. For application/json models, this should be JSON-schema draft v4 model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.
        public var schema: String? = nil
        /// The identifier for the model resource.
        public var id: String? = nil

        public init() {}

        public init(description: String? = nil, contentType: String? = nil, name: String? = nil, schema: String? = nil, id: String? = nil) {
            self.description = description
            self.contentType = contentType
            self.name = name
            self.schema = schema
            self.id = id
        }

    }

    public struct FlushStageAuthorizersCacheRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "stage_name": "stageName"]
        }
        /// The API identifier of the stage to flush.
        public var restApiId: String = ""
        /// The name of the stage to flush.
        public var stageName: String = ""

        public init() {}

        public init(restApiId: String, stageName: String) {
            self.restApiId = restApiId
            self.stageName = stageName
        }

    }

    public struct QuotaSettings: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
        public var period: String? = nil
        /// The number of requests subtracted from the given limit in the initial time period.
        public var offset: Int32? = nil
        /// The maximum number of requests that can be made in a given time period.
        public var limit: Int32? = nil

        public init() {}

        public init(period: String? = nil, offset: Int32? = nil, limit: Int32? = nil) {
            self.period = period
            self.offset = offset
            self.limit = limit
        }

    }

    public struct UpdateUsagePlanRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["usageplanId": "usagePlanId"]
        }
        /// The Id of the to-be-updated usage plan.
        public var usagePlanId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(usagePlanId: String, patchOperations: [PatchOperation]? = nil) {
            self.usagePlanId = usagePlanId
            self.patchOperations = patchOperations
        }

    }

    public struct Stages: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An individual Stage resource.
        public var item: [Stage]? = nil

        public init() {}

        public init(item: [Stage]? = nil) {
            self.item = item
        }

    }

    public struct Method: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier of an Authorizer to use on this method. The authorizationType must be CUSTOM.
        public var authorizerId: String? = nil
        /// Gets a method response associated with a given HTTP status code.   The collection of method responses are encapsulated in a key-value map, where the key is a response's HTTP status code and the value is a MethodResponse resource that specifies the response returned to the caller from the back end through the integration response. Example: Get a 200 OK response of a GET method Request  GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T215008Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response The successful response returns a 200 OK status code and a payload similar to the following: { "_links": { "curies": { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true }, "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.operator": false, "method.response.header.operand_2": false, "method.response.header.operand_1": false }, "statusCode": "200" }    AWS CLI 
        public var methodResponses: [String: MethodResponse]? = nil
        /// A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
        public var requestModels: [String: String]? = nil
        /// A key-value map defining required or optional method request parameters that can be accepted by Amazon API Gateway. A key is a method request parameter name matching the pattern of method.request.{location}.{name}, where location is querystring, path, or header and name is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (true) or optional (false). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or templates.
        public var requestParameters: [String: Bool]? = nil
        /// Gets the method's integration responsible for passing the client-submitted request to the back end and performing necessary transformations to make the request compliant with the back end.   Example:  Request  GET /restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com Content-Length: 117 X-Amz-Date: 20160613T213210Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160613/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} Response The successful response returns a 200 OK status code and a payload similar to the following: { "_links": { "curies": [ { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true } ], "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integration:responses": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "0cjtch", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestTemplates": { "application/json": "{\n \"a\": \"$input.params('operand1')\",\n \"b\": \"$input.params('operand2')\", \n \"op\": \"$input.params('operator')\" \n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-west-2:lambda:path//2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:Calc/invocations", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/uojnr9hd57/resources/0cjtch/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.operator": "integration.response.body.op", "method.response.header.operand_2": "integration.response.body.b", "method.response.header.operand_1": "integration.response.body.a" }, "responseTemplates": { "application/json": "#set($res = $input.path('$'))\n{\n \"result\": \"$res.a, $res.b, $res.op => $res.c\",\n \"a\" : \"$res.a\",\n \"b\" : \"$res.b\",\n \"op\" : \"$res.op\",\n \"c\" : \"$res.c\"\n}" }, "selectionPattern": "", "statusCode": "200" } } }    AWS CLI 
        public var methodIntegration: Integration? = nil
        /// The method's HTTP verb.
        public var httpMethod: String? = nil
        /// A boolean flag specifying whether a valid ApiKey is required to invoke this method.
        public var apiKeyRequired: Bool? = nil
        /// The method's authorization type.
        public var authorizationType: String? = nil
        /// A human-friendly operation identifier for the method. For example, you can assign the operationName of ListPets for the GET /pets method in PetStore example.
        public var operationName: String? = nil

        public init() {}

        public init(authorizerId: String? = nil, methodResponses: [String: MethodResponse]? = nil, requestModels: [String: String]? = nil, requestParameters: [String: Bool]? = nil, methodIntegration: Integration? = nil, httpMethod: String? = nil, apiKeyRequired: Bool? = nil, authorizationType: String? = nil, operationName: String? = nil) {
            self.authorizerId = authorizerId
            self.methodResponses = methodResponses
            self.requestModels = requestModels
            self.requestParameters = requestParameters
            self.methodIntegration = methodIntegration
            self.httpMethod = httpMethod
            self.apiKeyRequired = apiKeyRequired
            self.authorizationType = authorizationType
            self.operationName = operationName
        }

    }

    public struct DeleteMethodResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "status_code": "statusCode", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// The RestApi identifier for the MethodResponse resource.
        public var restApiId: String = ""
        /// The status code identifier for the MethodResponse resource.
        public var statusCode: String = ""
        /// The Resource identifier for the MethodResponse resource.
        public var resourceId: String = ""
        /// The HTTP verb of the Method resource.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, statusCode: String, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

    public struct DeleteUsagePlanRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["usageplanId": "usagePlanId"]
        }
        /// The Id of the to-be-deleted usage plan.
        public var usagePlanId: String = ""

        public init() {}

        public init(usagePlanId: String) {
            self.usagePlanId = usagePlanId
        }

    }

    public struct UpdateDocumentationPartRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["part_id": "documentationPartId", "restapi_id": "restApiId"]
        }
        /// [Required] The identifier of the to-be-updated documentation part.
        public var documentationPartId: String = ""
        /// [Required] The identifier of an API of the to-be-updated documentation part.
        public var restApiId: String = ""
        /// A list of update operations to be applied to the specified resource and in the order specified in this list.
        public var patchOperations: [PatchOperation]? = nil

        public init() {}

        public init(documentationPartId: String, restApiId: String, patchOperations: [PatchOperation]? = nil) {
            self.documentationPartId = documentationPartId
            self.restApiId = restApiId
            self.patchOperations = patchOperations
        }

    }

    public struct CreateApiKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the ApiKey.
        public var name: String? = nil
        /// Specifies whether (true) or not (false) the key identifier is distinct from the created API key value.
        public var generateDistinctId: Bool? = nil
        /// Specifies a value of the API key.
        public var value: String? = nil
        /// The description of the ApiKey.
        public var description: String? = nil
        /// DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
        public var stageKeys: [StageKey]? = nil
        /// Specifies whether the ApiKey can be used by callers.
        public var enabled: Bool? = nil
        /// An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
        public var customerId: String? = nil

        public init() {}

        public init(name: String? = nil, generateDistinctId: Bool? = nil, value: String? = nil, description: String? = nil, stageKeys: [StageKey]? = nil, enabled: Bool? = nil, customerId: String? = nil) {
            self.name = name
            self.generateDistinctId = generateDistinctId
            self.value = value
            self.description = description
            self.stageKeys = stageKeys
            self.enabled = enabled
            self.customerId = customerId
        }

    }

    public struct DeleteAuthorizerRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["restapi_id": "restApiId", "authorizer_id": "authorizerId"]
        }
        /// The identifier of the Authorizer resource.
        public var authorizerId: String = ""
        /// The RestApi identifier for the Authorizer resource.
        public var restApiId: String = ""

        public init() {}

        public init(authorizerId: String, restApiId: String) {
            self.authorizerId = authorizerId
            self.restApiId = restApiId
        }

    }

    public struct GetIntegrationResponseRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var pathParams: [String: String] {
            return ["http_method": "httpMethod", "status_code": "statusCode", "restapi_id": "restApiId", "resource_id": "resourceId"]
        }
        /// Specifies a get integration response request's API identifier.
        public var restApiId: String = ""
        /// Specifies a get integration response request's status code.
        public var statusCode: String = ""
        /// Specifies a get integration response request's resource identifier.
        public var resourceId: String = ""
        /// Specifies a get integration response request's HTTP method.
        public var httpMethod: String = ""

        public init() {}

        public init(restApiId: String, statusCode: String, resourceId: String, httpMethod: String) {
            self.restApiId = restApiId
            self.statusCode = statusCode
            self.resourceId = resourceId
            self.httpMethod = httpMethod
        }

    }

}