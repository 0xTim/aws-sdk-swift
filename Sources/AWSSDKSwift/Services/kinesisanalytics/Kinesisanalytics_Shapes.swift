// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Kinesisanalytics {

    public struct ListApplicationsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HasMoreApplications", required: true, type: .boolean), 
            AWSShapeMember(label: "ApplicationSummaries", required: true, type: .list)
        ]
        /// Returns true if there are more applications to retrieve.
        public let hasMoreApplications: Bool
        /// List of ApplicationSummary objects. 
        public let applicationSummaries: [ApplicationSummary]

        public init(hasMoreApplications: Bool, applicationSummaries: [ApplicationSummary]) {
            self.hasMoreApplications = hasMoreApplications
            self.applicationSummaries = applicationSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case hasMoreApplications = "HasMoreApplications"
            case applicationSummaries = "ApplicationSummaries"
        }
    }

    public struct AddApplicationReferenceDataSourceResponse: AWSShape {

    }

    public struct CloudWatchLoggingOption: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string)
        ]
        /// ARN of the CloudWatch log to receive application messages.
        public let logStreamARN: String
        /// IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the PutLogEvents policy action enabled.
        public let roleARN: String

        public init(logStreamARN: String, roleARN: String) {
            self.logStreamARN = logStreamARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamARN = "LogStreamARN"
            case roleARN = "RoleARN"
        }
    }

    public struct InputParallelismUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountUpdate", required: false, type: .integer)
        ]
        /// Number of in-application streams to create for the specified streaming source.
        public let countUpdate: Int32?

        public init(countUpdate: Int32? = nil) {
            self.countUpdate = countUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case countUpdate = "CountUpdate"
        }
    }

    public struct UpdateApplicationResponse: AWSShape {

    }

    public struct KinesisStreamsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string)
        ]
        /// ARN of the destination Amazon Kinesis stream to write to.
        public let resourceARN: String
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARN: String

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct InputUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NamePrefixUpdate", required: false, type: .string), 
            AWSShapeMember(label: "InputParallelismUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputId", required: true, type: .string), 
            AWSShapeMember(label: "KinesisStreamsInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseInputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchemaUpdate", required: false, type: .structure)
        ]
        /// Name prefix for in-application streams that Amazon Kinesis Analytics creates for the specific streaming source.
        public let namePrefixUpdate: String?
        /// Describes the parallelism updates (the number in-application streams Amazon Kinesis Analytics creates for the specific streaming source).
        public let inputParallelismUpdate: InputParallelismUpdate?
        /// Input ID of the application input to be updated.
        public let inputId: String
        /// If a Amazon Kinesis stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.
        public let kinesisStreamsInputUpdate: KinesisStreamsInputUpdate?
        /// If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.
        public let kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate?
        /// Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.
        public let inputSchemaUpdate: InputSchemaUpdate?

        public init(namePrefixUpdate: String? = nil, inputParallelismUpdate: InputParallelismUpdate? = nil, inputId: String, kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil, kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil, inputSchemaUpdate: InputSchemaUpdate? = nil) {
            self.namePrefixUpdate = namePrefixUpdate
            self.inputParallelismUpdate = inputParallelismUpdate
            self.inputId = inputId
            self.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate
            self.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate
            self.inputSchemaUpdate = inputSchemaUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case namePrefixUpdate = "NamePrefixUpdate"
            case inputParallelismUpdate = "InputParallelismUpdate"
            case inputId = "InputId"
            case kinesisStreamsInputUpdate = "KinesisStreamsInputUpdate"
            case kinesisFirehoseInputUpdate = "KinesisFirehoseInputUpdate"
            case inputSchemaUpdate = "InputSchemaUpdate"
        }
    }

    public struct KinesisFirehoseInputDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        public let resourceARN: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics assumes to access the stream.
        public let roleARN: String?

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct KinesisStreamsOutputUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARNUpdate: String?
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream where you want to write the output.
        public let resourceARNUpdate: String?

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case roleARNUpdate = "RoleARNUpdate"
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct AddApplicationReferenceDataSourceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ReferenceDataSource", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Version of the application for which you are adding the reference data source. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// The reference data source can be an object in your Amazon S3 bucket. Amazon Kinesis Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. You must also provide an IAM role with the necessary permissions that Amazon Kinesis Analytics can assume to read the object from your S3 bucket on your behalf.
        public let referenceDataSource: ReferenceDataSource
        /// Name of an existing application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, referenceDataSource: ReferenceDataSource, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceDataSource = referenceDataSource
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case referenceDataSource = "ReferenceDataSource"
            case applicationName = "ApplicationName"
        }
    }

    public struct KinesisFirehoseInputUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
        public let roleARNUpdate: String?
        /// ARN of the input Amazon Kinesis Firehose delivery stream to read.
        public let resourceARNUpdate: String?

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case roleARNUpdate = "RoleARNUpdate"
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct AddApplicationOutputResponse: AWSShape {

    }

    public struct CreateApplicationResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSummary", required: true, type: .structure)
        ]
        /// In response to your CreateApplication request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.
        public let applicationSummary: ApplicationSummary

        public init(applicationSummary: ApplicationSummary) {
            self.applicationSummary = applicationSummary
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSummary = "ApplicationSummary"
        }
    }

    public enum ApplicationStatus: String, CustomStringConvertible, Codable {
        case deleting = "DELETING"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case ready = "READY"
        case running = "RUNNING"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public struct StartApplicationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputConfigurations", required: true, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Identifies the specific input, by ID, that the application starts consuming. Amazon Kinesis Analytics starts reading the streaming source associated with the input. You can also specify where in the streaming source you want Amazon Kinesis Analytics to start reading.
        public let inputConfigurations: [InputConfiguration]
        /// Name of the application.
        public let applicationName: String

        public init(inputConfigurations: [InputConfiguration], applicationName: String) {
            self.inputConfigurations = inputConfigurations
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case inputConfigurations = "InputConfigurations"
            case applicationName = "ApplicationName"
        }
    }

    public struct StopApplicationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Name of the running application to stop.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
        }
    }

    public struct S3ReferenceDataSource: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceRoleARN", required: true, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// ARN of the IAM role that the service can assume to read data on your behalf. This role must have permission for the s3:GetObject action on the object and trust policy that allows Amazon Kinesis Analytics service principal to assume this role.
        public let referenceRoleARN: String
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String
        /// Object key name containing reference data.
        public let fileKey: String

        public init(referenceRoleARN: String, bucketARN: String, fileKey: String) {
            self.referenceRoleARN = referenceRoleARN
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case referenceRoleARN = "ReferenceRoleARN"
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct KinesisFirehoseOutputUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
        public let roleARNUpdate: String?
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream to write to.
        public let resourceARNUpdate: String?

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case roleARNUpdate = "RoleARNUpdate"
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct InputStartingPositionConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputStartingPosition", required: false, type: .enum)
        ]
        /// The starting position on the stream.    NOW - Start reading just after the most recent record in the stream, start at the request timestamp that the customer issued.    TRIM_HORIZON - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Firehose delivery stream.    LAST_STOPPED_POINT - Resume reading from where the application last stopped reading.  
        public let inputStartingPosition: InputStartingPosition?

        public init(inputStartingPosition: InputStartingPosition? = nil) {
            self.inputStartingPosition = inputStartingPosition
        }

        private enum CodingKeys: String, CodingKey {
            case inputStartingPosition = "InputStartingPosition"
        }
    }

    public struct S3ReferenceDataSourceUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ReferenceRoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "FileKeyUpdate", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARNUpdate: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application.
        public let referenceRoleARNUpdate: String?
        /// Object key name.
        public let fileKeyUpdate: String?

        public init(bucketARNUpdate: String? = nil, referenceRoleARNUpdate: String? = nil, fileKeyUpdate: String? = nil) {
            self.bucketARNUpdate = bucketARNUpdate
            self.referenceRoleARNUpdate = referenceRoleARNUpdate
            self.fileKeyUpdate = fileKeyUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARNUpdate = "BucketARNUpdate"
            case referenceRoleARNUpdate = "ReferenceRoleARNUpdate"
            case fileKeyUpdate = "FileKeyUpdate"
        }
    }

    public struct AddApplicationInputResponse: AWSShape {

    }

    public struct RecordFormat: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatType", required: true, type: .enum), 
            AWSShapeMember(label: "MappingParameters", required: false, type: .structure)
        ]
        /// The type of record format.
        public let recordFormatType: RecordFormatType
        public let mappingParameters: MappingParameters?

        public init(recordFormatType: RecordFormatType, mappingParameters: MappingParameters? = nil) {
            self.recordFormatType = recordFormatType
            self.mappingParameters = mappingParameters
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatType = "RecordFormatType"
            case mappingParameters = "MappingParameters"
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Inputs", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Outputs", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationCode", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string)
        ]
        /// Use this parameter to configure the application input. You can configure your application to receive input from a single streaming source. In this configuration, you map this streaming source to an in-application stream that is created. Your application code can then query the in-application stream like a table (you can think of it as a constantly updating table). For the streaming source, you provide its Amazon Resource Name (ARN) and format of data on the stream (for example, JSON, CSV, etc). You also must provide an IAM role that Amazon Kinesis Analytics can assume to read this stream on your behalf. To create the in-application stream, you need to specify a schema to transform your data into a schematized version used in SQL. In the schema, you provide the necessary mapping of the data elements in the streaming source to record columns in the in-app stream.
        public let inputs: [Input]?
        /// Name of your Amazon Kinesis Analytics application (for example, sample-app).
        public let applicationName: String
        /// You can configure application output to write data from any of the in-application streams to up to five destinations. These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose delivery streams, or both. In the configuration, you specify the in-application stream name, the destination stream Amazon Resource Name (ARN), and the format to use when writing data. You must also provide an IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. In the output configuration, you also provide the output stream Amazon Resource Name (ARN) and the format of data in the stream (for example, JSON, CSV). You also must provide an IAM role that Amazon Kinesis Analytics can assume to write to this stream on your behalf.
        public let outputs: [Output]?
        /// One or more SQL statements that read input data, transform it, and generate output. For example, you can write a SQL statement that reads data from one in-application stream, generates a running average of the number of advertisement clicks by vendor, and insert resulting rows in another in-application stream using pumps. For more inforamtion about the typical pattern, see Application Code.  You can provide such series of SQL statements, where output of one statement can be used as the input for the next statement. You store intermediate results by creating in-application streams and pumps. Note that the application code must create the streams with names specified in the Outputs. For example, if your Outputs defines output streams named ExampleOutputStream1 and ExampleOutputStream2, then your application code must create these streams. 
        public let applicationCode: String?
        /// Use this parameter to configure a CloudWatch log stream to monitor application configuration errors. For more information, see Monitoring Configuration Errors.
        public let cloudWatchLoggingOptions: [CloudWatchLoggingOption]?
        /// Summary description of the application.
        public let applicationDescription: String?

        public init(inputs: [Input]? = nil, applicationName: String, outputs: [Output]? = nil, applicationCode: String? = nil, cloudWatchLoggingOptions: [CloudWatchLoggingOption]? = nil, applicationDescription: String? = nil) {
            self.inputs = inputs
            self.applicationName = applicationName
            self.outputs = outputs
            self.applicationCode = applicationCode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.applicationDescription = applicationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case inputs = "Inputs"
            case applicationName = "ApplicationName"
            case outputs = "Outputs"
            case applicationCode = "ApplicationCode"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case applicationDescription = "ApplicationDescription"
        }
    }

    public struct DestinationSchema: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormatType", required: false, type: .enum)
        ]
        /// Specifies the format of the records on the output stream.
        public let recordFormatType: RecordFormatType?

        public init(recordFormatType: RecordFormatType? = nil) {
            self.recordFormatType = recordFormatType
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormatType = "RecordFormatType"
        }
    }

    public struct DeleteApplicationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        ///  You can use the DescribeApplication operation to get this value. 
        public let createTimestamp: TimeStamp
        /// Name of the Amazon Kinesis Analytics application to delete.
        public let applicationName: String

        public init(createTimestamp: TimeStamp, applicationName: String) {
            self.createTimestamp = createTimestamp
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case createTimestamp = "CreateTimestamp"
            case applicationName = "ApplicationName"
        }
    }

    public struct DiscoverInputSchemaRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: true, type: .structure)
        ]
        /// Amazon Resource Name (ARN) of the streaming source.
        public let resourceARN: String
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf.
        public let roleARN: String
        /// Point at which you want Amazon Kinesis Analytics to start reading records from the specified streaming source discovery purposes.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration

        public init(resourceARN: String, roleARN: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
        }
    }

    public struct StopApplicationResponse: AWSShape {

    }

    public struct DeleteApplicationOutputRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "OutputId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Amazon Kinesis Analytics application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// The ID of the configuration to delete. Each output configuration that is added to the application, either when the application is created or later using the AddApplicationOutput operation, has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the DescribeApplication operation to get the specific OutputId. 
        public let outputId: String
        /// Amazon Kinesis Analytics application name.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, outputId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.outputId = outputId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case outputId = "OutputId"
            case applicationName = "ApplicationName"
        }
    }

    public struct InputDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisFirehoseInputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamsInputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure), 
            AWSShapeMember(label: "NamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "InAppStreamNames", required: false, type: .list), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchema", required: false, type: .structure), 
            AWSShapeMember(label: "InputId", required: false, type: .string)
        ]
        /// If an Amazon Kinesis Firehose delivery stream is configured as a streaming source, provides the Firehose delivery stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public let kinesisFirehoseInputDescription: KinesisFirehoseInputDescription?
        /// If an Amazon Kinesis stream is configured as streaming source, provides Amazon Kinesis stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public let kinesisStreamsInputDescription: KinesisStreamsInputDescription?
        /// Describes the configured parallelism (number of in-application streams mapped to the streaming source).
        public let inputParallelism: InputParallelism?
        /// In-application name prefix.
        public let namePrefix: String?
        /// Returns the in-application stream names that are mapped to the stream source.
        public let inAppStreamNames: [String]?
        /// Point at which the application is configured to read from the input stream.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration?
        public let inputSchema: SourceSchema?
        /// Input ID associated with the application input. This is the ID that Amazon Kinesis Analytics assigns to each input configuration you add to your application. 
        public let inputId: String?

        public init(kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil, kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil, inputParallelism: InputParallelism? = nil, namePrefix: String? = nil, inAppStreamNames: [String]? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, inputSchema: SourceSchema? = nil, inputId: String? = nil) {
            self.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription
            self.kinesisStreamsInputDescription = kinesisStreamsInputDescription
            self.inputParallelism = inputParallelism
            self.namePrefix = namePrefix
            self.inAppStreamNames = inAppStreamNames
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.inputSchema = inputSchema
            self.inputId = inputId
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisFirehoseInputDescription = "KinesisFirehoseInputDescription"
            case kinesisStreamsInputDescription = "KinesisStreamsInputDescription"
            case inputParallelism = "InputParallelism"
            case namePrefix = "NamePrefix"
            case inAppStreamNames = "InAppStreamNames"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
            case inputSchema = "InputSchema"
            case inputId = "InputId"
        }
    }

    public struct ApplicationSummary: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum)
        ]
        /// ARN of the application.
        public let applicationARN: String
        /// Name of the application.
        public let applicationName: String
        /// Status of the application.
        public let applicationStatus: ApplicationStatus

        public init(applicationARN: String, applicationName: String, applicationStatus: ApplicationStatus) {
            self.applicationARN = applicationARN
            self.applicationName = applicationName
            self.applicationStatus = applicationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case applicationARN = "ApplicationARN"
            case applicationName = "ApplicationName"
            case applicationStatus = "ApplicationStatus"
        }
    }

    public struct JSONMappingParameters: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowPath", required: true, type: .string)
        ]
        /// Path to the top-level parent that contains the records. For example, consider the following JSON record: In the RecordRowPath, "$" refers to the root and path "$.vehicle.Model" refers to the specific "Model" key in the JSON.
        public let recordRowPath: String

        public init(recordRowPath: String) {
            self.recordRowPath = recordRowPath
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowPath = "RecordRowPath"
        }
    }

    public struct CSVMappingParameters: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordRowDelimiter", required: true, type: .string), 
            AWSShapeMember(label: "RecordColumnDelimiter", required: true, type: .string)
        ]
        /// Row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
        public let recordRowDelimiter: String
        /// Column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
        public let recordColumnDelimiter: String

        public init(recordRowDelimiter: String, recordColumnDelimiter: String) {
            self.recordRowDelimiter = recordRowDelimiter
            self.recordColumnDelimiter = recordColumnDelimiter
        }

        private enum CodingKeys: String, CodingKey {
            case recordRowDelimiter = "RecordRowDelimiter"
            case recordColumnDelimiter = "RecordColumnDelimiter"
        }
    }

    public struct AddApplicationOutputRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "Output", required: true, type: .structure)
        ]
        /// Version of the application to which you want add the output configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public let currentApplicationVersionId: Int64
        /// Name of the application to which you want to add the output configuration.
        public let applicationName: String
        /// An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, an Amazon Kinesis stream or an Amazon Kinesis Firehose delivery stream), and record the formation to use when writing to the destination.
        public let output: Output

        public init(currentApplicationVersionId: Int64, applicationName: String, output: Output) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case output = "Output"
        }
    }

    public struct KinesisStreamsInputDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        public let resourceARN: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public let roleARN: String?

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct Input: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisFirehoseInput", required: false, type: .structure), 
            AWSShapeMember(label: "InputSchema", required: true, type: .structure), 
            AWSShapeMember(label: "NamePrefix", required: true, type: .string), 
            AWSShapeMember(label: "KinesisStreamsInput", required: false, type: .structure), 
            AWSShapeMember(label: "InputParallelism", required: false, type: .structure)
        ]
        /// If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the Firehose delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public let kinesisFirehoseInput: KinesisFirehoseInput?
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. Also used to describe the format of the reference data source.
        public let inputSchema: SourceSchema
        /// Name prefix to use when creating in-application stream. Suppose you specify a prefix "MyInApplicationStream". Amazon Kinesis Analytics will then create one or more (as per the InputParallelism count you specified) in-application streams with names "MyInApplicationStream_001", "MyInApplicationStream_002" and so on. 
        public let namePrefix: String
        /// If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public let kinesisStreamsInput: KinesisStreamsInput?
        /// Describes the number of in-application streams to create.  Data from your source will be routed to these in-application input streams.  (see Configuring Application Input.
        public let inputParallelism: InputParallelism?

        public init(kinesisFirehoseInput: KinesisFirehoseInput? = nil, inputSchema: SourceSchema, namePrefix: String, kinesisStreamsInput: KinesisStreamsInput? = nil, inputParallelism: InputParallelism? = nil) {
            self.kinesisFirehoseInput = kinesisFirehoseInput
            self.inputSchema = inputSchema
            self.namePrefix = namePrefix
            self.kinesisStreamsInput = kinesisStreamsInput
            self.inputParallelism = inputParallelism
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisFirehoseInput = "KinesisFirehoseInput"
            case inputSchema = "InputSchema"
            case namePrefix = "NamePrefix"
            case kinesisStreamsInput = "KinesisStreamsInput"
            case inputParallelism = "InputParallelism"
        }
    }

    public struct KinesisFirehoseOutputDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        public let resourceARN: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public let roleARN: String?

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct DeleteApplicationOutputResponse: AWSShape {

    }

    public struct SourceSchema: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordFormat", required: true, type: .structure), 
            AWSShapeMember(label: "RecordEncoding", required: false, type: .string), 
            AWSShapeMember(label: "RecordColumns", required: true, type: .list)
        ]
        /// Specifies the format of the records on the streaming source.
        public let recordFormat: RecordFormat
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public let recordEncoding: String?
        /// A list of RecordColumn objects.
        public let recordColumns: [RecordColumn]

        public init(recordFormat: RecordFormat, recordEncoding: String? = nil, recordColumns: [RecordColumn]) {
            self.recordFormat = recordFormat
            self.recordEncoding = recordEncoding
            self.recordColumns = recordColumns
        }

        private enum CodingKeys: String, CodingKey {
            case recordFormat = "RecordFormat"
            case recordEncoding = "RecordEncoding"
            case recordColumns = "RecordColumns"
        }
    }

    public struct KinesisFirehoseInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string)
        ]
        /// ARN of the input Firehose delivery stream.
        public let resourceARN: String
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to make sure the role has necessary permissions to access the stream.
        public let roleARN: String

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct InputConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "InputStartingPositionConfiguration", required: true, type: .structure)
        ]
        /// Input source ID. You can get this ID by calling the DescribeApplication operation.
        public let id: String
        /// Point at which you want the application to start processing records from the streaming source.
        public let inputStartingPositionConfiguration: InputStartingPositionConfiguration

        public init(id: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.id = id
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case inputStartingPositionConfiguration = "InputStartingPositionConfiguration"
        }
    }

    public struct OutputDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamsOutputDescription", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationSchema", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OutputId", required: false, type: .string), 
            AWSShapeMember(label: "KinesisFirehoseOutputDescription", required: false, type: .structure)
        ]
        /// Describes Amazon Kinesis stream configured as the destination where output is written.
        public let kinesisStreamsOutputDescription: KinesisStreamsOutputDescription?
        /// Data format used for writing data to the destination.
        public let destinationSchema: DestinationSchema?
        /// Name of the in-application stream configured as output.
        public let name: String?
        /// A unique identifier for the output configuration.
        public let outputId: String?
        /// Describes the Amazon Kinesis Firehose delivery stream configured as the destination where output is written.
        public let kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription?

        public init(kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil, destinationSchema: DestinationSchema? = nil, name: String? = nil, outputId: String? = nil, kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil) {
            self.kinesisStreamsOutputDescription = kinesisStreamsOutputDescription
            self.destinationSchema = destinationSchema
            self.name = name
            self.outputId = outputId
            self.kinesisFirehoseOutputDescription = kinesisFirehoseOutputDescription
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamsOutputDescription = "KinesisStreamsOutputDescription"
            case destinationSchema = "DestinationSchema"
            case name = "Name"
            case outputId = "OutputId"
            case kinesisFirehoseOutputDescription = "KinesisFirehoseOutputDescription"
        }
    }

    public struct KinesisFirehoseOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string)
        ]
        /// ARN of the destination Amazon Kinesis Firehose delivery stream to write to.
        public let resourceARN: String
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARN: String

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct CloudWatchLoggingOptionDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamARN", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string)
        ]
        /// ARN of the CloudWatch log to receive application messages.
        public let logStreamARN: String
        /// ID of the CloudWatch logging option description.
        public let cloudWatchLoggingOptionId: String?
        /// IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the PutLogEvents policy action enabled.
        public let roleARN: String

        public init(logStreamARN: String, cloudWatchLoggingOptionId: String? = nil, roleARN: String) {
            self.logStreamARN = logStreamARN
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamARN = "LogStreamARN"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
            case roleARN = "RoleARN"
        }
    }

    public struct DescribeApplicationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Name of the application.
        public let applicationName: String

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
        }
    }

    public struct KinesisStreamsInputUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ResourceARNUpdate", required: false, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARNUpdate: String?
        /// Amazon Resource Name (ARN) of the input Amazon Kinesis stream to read.
        public let resourceARNUpdate: String?

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case roleARNUpdate = "RoleARNUpdate"
            case resourceARNUpdate = "ResourceARNUpdate"
        }
    }

    public struct DiscoverInputSchemaResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputSchema", required: false, type: .structure), 
            AWSShapeMember(label: "ParsedInputRecords", required: false, type: .list), 
            AWSShapeMember(label: "RawInputRecords", required: false, type: .list)
        ]
        /// Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.
        public let inputSchema: SourceSchema?
        /// An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).
        public let parsedInputRecords: [[String]]?
        /// Raw stream data that was sampled to infer the schema.
        public let rawInputRecords: [String]?

        public init(inputSchema: SourceSchema? = nil, parsedInputRecords: [[String]]? = nil, rawInputRecords: [String]? = nil) {
            self.inputSchema = inputSchema
            self.parsedInputRecords = parsedInputRecords
            self.rawInputRecords = rawInputRecords
        }

        private enum CodingKeys: String, CodingKey {
            case inputSchema = "InputSchema"
            case parsedInputRecords = "ParsedInputRecords"
            case rawInputRecords = "RawInputRecords"
        }
    }

    public struct ApplicationDetail: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDescription", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "LastUpdateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "InputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ApplicationCode", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "OutputDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationARN", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOptionDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "ReferenceDataSourceDescriptions", required: false, type: .list)
        ]
        /// Description of the application.
        public let applicationDescription: String?
        /// Status of the application.
        public let applicationStatus: ApplicationStatus
        /// Timestamp when the application was last updated.
        public let lastUpdateTimestamp: TimeStamp?
        /// Describes the application input configuration. For more information, see Configuring Application Input. 
        public let inputDescriptions: [InputDescription]?
        /// Timestamp when the application version was created.
        public let createTimestamp: TimeStamp?
        /// Returns the application code that you provided to perform data analysis on any of the in-application streams in your application.
        public let applicationCode: String?
        /// Name of the application.
        public let applicationName: String
        /// Describes the application output configuration. For more information, see Configuring Application Output. 
        public let outputDescriptions: [OutputDescription]?
        /// ARN of the application.
        public let applicationARN: String
        /// Provides the current application version.
        public let applicationVersionId: Int64
        /// Describes the CloudWatch log streams configured to receive application messages. For more information about using CloudWatch log streams with Amazon Kinesis Analytics applications, see Monitoring Configuration Errors. 
        public let cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]?
        /// Describes reference data sources configured for the application. For more information, see Configuring Application Input. 
        public let referenceDataSourceDescriptions: [ReferenceDataSourceDescription]?

        public init(applicationDescription: String? = nil, applicationStatus: ApplicationStatus, lastUpdateTimestamp: TimeStamp? = nil, inputDescriptions: [InputDescription]? = nil, createTimestamp: TimeStamp? = nil, applicationCode: String? = nil, applicationName: String, outputDescriptions: [OutputDescription]? = nil, applicationARN: String, applicationVersionId: Int64, cloudWatchLoggingOptionDescriptions: [CloudWatchLoggingOptionDescription]? = nil, referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil) {
            self.applicationDescription = applicationDescription
            self.applicationStatus = applicationStatus
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.inputDescriptions = inputDescriptions
            self.createTimestamp = createTimestamp
            self.applicationCode = applicationCode
            self.applicationName = applicationName
            self.outputDescriptions = outputDescriptions
            self.applicationARN = applicationARN
            self.applicationVersionId = applicationVersionId
            self.cloudWatchLoggingOptionDescriptions = cloudWatchLoggingOptionDescriptions
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDescription = "ApplicationDescription"
            case applicationStatus = "ApplicationStatus"
            case lastUpdateTimestamp = "LastUpdateTimestamp"
            case inputDescriptions = "InputDescriptions"
            case createTimestamp = "CreateTimestamp"
            case applicationCode = "ApplicationCode"
            case applicationName = "ApplicationName"
            case outputDescriptions = "OutputDescriptions"
            case applicationARN = "ApplicationARN"
            case applicationVersionId = "ApplicationVersionId"
            case cloudWatchLoggingOptionDescriptions = "CloudWatchLoggingOptionDescriptions"
            case referenceDataSourceDescriptions = "ReferenceDataSourceDescriptions"
        }
    }

    public struct InputSchemaUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordColumnUpdates", required: false, type: .list), 
            AWSShapeMember(label: "RecordEncodingUpdate", required: false, type: .string), 
            AWSShapeMember(label: "RecordFormatUpdate", required: false, type: .structure)
        ]
        /// A list of RecordColumn objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream. 
        public let recordColumnUpdates: [RecordColumn]?
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public let recordEncodingUpdate: String?
        /// Specifies the format of the records on the streaming source.
        public let recordFormatUpdate: RecordFormat?

        public init(recordColumnUpdates: [RecordColumn]? = nil, recordEncodingUpdate: String? = nil, recordFormatUpdate: RecordFormat? = nil) {
            self.recordColumnUpdates = recordColumnUpdates
            self.recordEncodingUpdate = recordEncodingUpdate
            self.recordFormatUpdate = recordFormatUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case recordColumnUpdates = "RecordColumnUpdates"
            case recordEncodingUpdate = "RecordEncodingUpdate"
            case recordFormatUpdate = "RecordFormatUpdate"
        }
    }

    public enum InputStartingPosition: String, CustomStringConvertible, Codable {
        case now = "NOW"
        case trimHorizon = "TRIM_HORIZON"
        case lastStoppedPoint = "LAST_STOPPED_POINT"
        public var description: String { return self.rawValue }
    }

    public struct KinesisStreamsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string)
        ]
        /// ARN of the input Amazon Kinesis stream to read.
        public let resourceARN: String
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public let roleARN: String

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct InputParallelism: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: false, type: .integer)
        ]
        /// Number of in-application streams to create. For more information, see Limits. 
        public let count: Int32?

        public init(count: Int32? = nil) {
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
        }
    }

    public struct DeleteApplicationResponse: AWSShape {

    }

    public struct ReferenceDataSourceDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ReferenceDataSourceDescription", required: true, type: .structure), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "TableName", required: true, type: .string), 
            AWSShapeMember(label: "ReferenceSchema", required: false, type: .structure)
        ]
        /// Provides the S3 bucket name, the object key name that contains the reference data. It also provides the Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application reference table.
        public let s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription
        /// ID of the reference data source. This is the ID that Amazon Kinesis Analytics assigns when you add the reference data source to your application using the AddApplicationReferenceDataSource operation.
        public let referenceId: String
        /// The in-application table name created by the specific reference data source configuration.
        public let tableName: String
        public let referenceSchema: SourceSchema?

        public init(s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription, referenceId: String, tableName: String, referenceSchema: SourceSchema? = nil) {
            self.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription
            self.referenceId = referenceId
            self.tableName = tableName
            self.referenceSchema = referenceSchema
        }

        private enum CodingKeys: String, CodingKey {
            case s3ReferenceDataSourceDescription = "S3ReferenceDataSourceDescription"
            case referenceId = "ReferenceId"
            case tableName = "TableName"
            case referenceSchema = "ReferenceSchema"
        }
    }

    public struct CloudWatchLoggingOptionUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "LogStreamARNUpdate", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string)
        ]
        /// IAM ARN of the role to use to send application messages. Note: To write application messages to CloudWatch, the IAM role used must have the PutLogEvents policy action enabled.
        public let roleARNUpdate: String?
        /// ARN of the CloudWatch log to receive application messages.
        public let logStreamARNUpdate: String?
        /// ID of the CloudWatch logging option to update
        public let cloudWatchLoggingOptionId: String

        public init(roleARNUpdate: String? = nil, logStreamARNUpdate: String? = nil, cloudWatchLoggingOptionId: String) {
            self.roleARNUpdate = roleARNUpdate
            self.logStreamARNUpdate = logStreamARNUpdate
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case roleARNUpdate = "RoleARNUpdate"
            case logStreamARNUpdate = "LogStreamARNUpdate"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
        }
    }

    public struct DeleteApplicationReferenceDataSourceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Version of the application. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public let currentApplicationVersionId: Int64
        /// ID of the reference data source. When you add a reference data source to your application using the AddApplicationReferenceDataSource, Amazon Kinesis Analytics assigns an ID. You can use the DescribeApplication operation to get the reference ID. 
        public let referenceId: String
        /// Name of an existing application.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, referenceId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceId = referenceId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case referenceId = "ReferenceId"
            case applicationName = "ApplicationName"
        }
    }

    public enum RecordFormatType: String, CustomStringConvertible, Codable {
        case json = "JSON"
        case csv = "CSV"
        public var description: String { return self.rawValue }
    }

    public struct ReferenceDataSourceUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ReferenceDataSourceUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "TableNameUpdate", required: false, type: .string), 
            AWSShapeMember(label: "ReferenceSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ReferenceId", required: true, type: .string)
        ]
        /// Describes the S3 bucket name, object key name, and IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf and populate the in-application reference table.
        public let s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate?
        /// In-application table name that is created by this update.
        public let tableNameUpdate: String?
        public let referenceSchemaUpdate: SourceSchema?
        /// ID of the reference data source being updated. You can use the DescribeApplication operation to get this value.
        public let referenceId: String

        public init(s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil, tableNameUpdate: String? = nil, referenceSchemaUpdate: SourceSchema? = nil, referenceId: String) {
            self.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate
            self.tableNameUpdate = tableNameUpdate
            self.referenceSchemaUpdate = referenceSchemaUpdate
            self.referenceId = referenceId
        }

        private enum CodingKeys: String, CodingKey {
            case s3ReferenceDataSourceUpdate = "S3ReferenceDataSourceUpdate"
            case tableNameUpdate = "TableNameUpdate"
            case referenceSchemaUpdate = "ReferenceSchemaUpdate"
            case referenceId = "ReferenceId"
        }
    }

    public struct Output: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisFirehoseOutput", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationSchema", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "KinesisStreamsOutput", required: false, type: .structure)
        ]
        /// Identifies an Amazon Kinesis Firehose delivery stream as the destination.
        public let kinesisFirehoseOutput: KinesisFirehoseOutput?
        public let destinationSchema: DestinationSchema
        /// Name of the in-application stream.
        public let name: String
        /// Identifies an Amazon Kinesis stream as the destination.
        public let kinesisStreamsOutput: KinesisStreamsOutput?

        public init(kinesisFirehoseOutput: KinesisFirehoseOutput? = nil, destinationSchema: DestinationSchema, name: String, kinesisStreamsOutput: KinesisStreamsOutput? = nil) {
            self.kinesisFirehoseOutput = kinesisFirehoseOutput
            self.destinationSchema = destinationSchema
            self.name = name
            self.kinesisStreamsOutput = kinesisStreamsOutput
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisFirehoseOutput = "KinesisFirehoseOutput"
            case destinationSchema = "DestinationSchema"
            case name = "Name"
            case kinesisStreamsOutput = "KinesisStreamsOutput"
        }
    }

    public struct AddApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOption", required: true, type: .structure)
        ]
        /// The version ID of the Amazon Kinesis Analytics application.
        public let currentApplicationVersionId: Int64
        /// The Amazon Kinesis Analytics application name.
        public let applicationName: String
        /// Provide the CloudWatch log stream ARN and the IAM role ARN. Note: To write application messages to CloudWatch, the IAM role used must have the PutLogEvents policy action enabled. 
        public let cloudWatchLoggingOption: CloudWatchLoggingOption

        public init(currentApplicationVersionId: Int64, applicationName: String, cloudWatchLoggingOption: CloudWatchLoggingOption) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.cloudWatchLoggingOption = cloudWatchLoggingOption
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationName = "ApplicationName"
            case cloudWatchLoggingOption = "CloudWatchLoggingOption"
        }
    }

    public struct StartApplicationResponse: AWSShape {

    }

    public struct S3ReferenceDataSourceDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferenceRoleARN", required: true, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "FileKey", required: true, type: .string)
        ]
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf to populate the in-application reference table.
        public let referenceRoleARN: String
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public let bucketARN: String
        /// Amazon S3 object key name.
        public let fileKey: String

        public init(referenceRoleARN: String, bucketARN: String, fileKey: String) {
            self.referenceRoleARN = referenceRoleARN
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        private enum CodingKeys: String, CodingKey {
            case referenceRoleARN = "ReferenceRoleARN"
            case bucketARN = "BucketARN"
            case fileKey = "FileKey"
        }
    }

    public struct AddApplicationCloudWatchLoggingOptionResponse: AWSShape {

    }

    public struct ApplicationUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputUpdates", required: false, type: .list), 
            AWSShapeMember(label: "CloudWatchLoggingOptionUpdates", required: false, type: .list), 
            AWSShapeMember(label: "ReferenceDataSourceUpdates", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationCodeUpdate", required: false, type: .string), 
            AWSShapeMember(label: "InputUpdates", required: false, type: .list)
        ]
        /// Describes application output configuration updates.
        public let outputUpdates: [OutputUpdate]?
        /// Describes application CloudWatch logging option updates.
        public let cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]?
        /// Describes application reference data source updates.
        public let referenceDataSourceUpdates: [ReferenceDataSourceUpdate]?
        /// Describes application code updates.
        public let applicationCodeUpdate: String?
        /// Describes application input configuration updates.
        public let inputUpdates: [InputUpdate]?

        public init(outputUpdates: [OutputUpdate]? = nil, cloudWatchLoggingOptionUpdates: [CloudWatchLoggingOptionUpdate]? = nil, referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil, applicationCodeUpdate: String? = nil, inputUpdates: [InputUpdate]? = nil) {
            self.outputUpdates = outputUpdates
            self.cloudWatchLoggingOptionUpdates = cloudWatchLoggingOptionUpdates
            self.referenceDataSourceUpdates = referenceDataSourceUpdates
            self.applicationCodeUpdate = applicationCodeUpdate
            self.inputUpdates = inputUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case outputUpdates = "OutputUpdates"
            case cloudWatchLoggingOptionUpdates = "CloudWatchLoggingOptionUpdates"
            case referenceDataSourceUpdates = "ReferenceDataSourceUpdates"
            case applicationCodeUpdate = "ApplicationCodeUpdate"
            case inputUpdates = "InputUpdates"
        }
    }

    public struct MappingParameters: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CSVMappingParameters", required: false, type: .structure), 
            AWSShapeMember(label: "JSONMappingParameters", required: false, type: .structure)
        ]
        /// Provides additional mapping information when the record format uses delimiters (for example, CSV).
        public let cSVMappingParameters: CSVMappingParameters?
        /// Provides additional mapping information when JSON is the record format on the streaming source.
        public let jSONMappingParameters: JSONMappingParameters?

        public init(cSVMappingParameters: CSVMappingParameters? = nil, jSONMappingParameters: JSONMappingParameters? = nil) {
            self.cSVMappingParameters = cSVMappingParameters
            self.jSONMappingParameters = jSONMappingParameters
        }

        private enum CodingKeys: String, CodingKey {
            case cSVMappingParameters = "CSVMappingParameters"
            case jSONMappingParameters = "JSONMappingParameters"
        }
    }

    public struct OutputUpdate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NameUpdate", required: false, type: .string), 
            AWSShapeMember(label: "KinesisStreamsOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisFirehoseOutputUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationSchemaUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "OutputId", required: true, type: .string)
        ]
        /// If you want to specify a different in-application stream for this output configuration, use this field to specify the new in-application stream name.
        public let nameUpdate: String?
        /// Describes an Amazon Kinesis stream as the destination for the output.
        public let kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate?
        /// Describes a Amazon Kinesis Firehose delivery stream as the destination for the output.
        public let kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate?
        public let destinationSchemaUpdate: DestinationSchema?
        /// Identifies the specific output configuration that you want to update.
        public let outputId: String

        public init(nameUpdate: String? = nil, kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil, kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil, destinationSchemaUpdate: DestinationSchema? = nil, outputId: String) {
            self.nameUpdate = nameUpdate
            self.kinesisStreamsOutputUpdate = kinesisStreamsOutputUpdate
            self.kinesisFirehoseOutputUpdate = kinesisFirehoseOutputUpdate
            self.destinationSchemaUpdate = destinationSchemaUpdate
            self.outputId = outputId
        }

        private enum CodingKeys: String, CodingKey {
            case nameUpdate = "NameUpdate"
            case kinesisStreamsOutputUpdate = "KinesisStreamsOutputUpdate"
            case kinesisFirehoseOutputUpdate = "KinesisFirehoseOutputUpdate"
            case destinationSchemaUpdate = "DestinationSchemaUpdate"
            case outputId = "OutputId"
        }
    }

    public struct KinesisStreamsOutputDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        public let resourceARN: String?
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public let roleARN: String?

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case roleARN = "RoleARN"
        }
    }

    public struct ListApplicationsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ExclusiveStartApplicationName", required: false, type: .string)
        ]
        /// Maximum number of applications to list.
        public let limit: Int32?
        /// Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.
        public let exclusiveStartApplicationName: String?

        public init(limit: Int32? = nil, exclusiveStartApplicationName: String? = nil) {
            self.limit = limit
            self.exclusiveStartApplicationName = exclusiveStartApplicationName
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case exclusiveStartApplicationName = "ExclusiveStartApplicationName"
        }
    }

    public struct DeleteApplicationCloudWatchLoggingOptionResponse: AWSShape {

    }

    public struct DeleteApplicationCloudWatchLoggingOptionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "CloudWatchLoggingOptionId", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The version ID of the Amazon Kinesis Analytics application.
        public let currentApplicationVersionId: Int64
        /// The CloudWatchLoggingOptionId of the CloudWatch logging option to delete. You can use the DescribeApplication operation to get the CloudWatchLoggingOptionId. 
        public let cloudWatchLoggingOptionId: String
        /// The Amazon Kinesis Analytics application name.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, cloudWatchLoggingOptionId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.cloudWatchLoggingOptionId = cloudWatchLoggingOptionId
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case cloudWatchLoggingOptionId = "CloudWatchLoggingOptionId"
            case applicationName = "ApplicationName"
        }
    }

    public struct RecordColumn: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mapping", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SqlType", required: true, type: .string)
        ]
        /// Reference to the data element in the streaming input of the reference data source.
        public let mapping: String?
        /// Name of the column created in the in-application input stream or reference table.
        public let name: String
        /// Type of column created in the in-application input stream or reference table.
        public let sqlType: String

        public init(mapping: String? = nil, name: String, sqlType: String) {
            self.mapping = mapping
            self.name = name
            self.sqlType = sqlType
        }

        private enum CodingKeys: String, CodingKey {
            case mapping = "Mapping"
            case name = "Name"
            case sqlType = "SqlType"
        }
    }

    public struct DescribeApplicationResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationDetail", required: true, type: .structure)
        ]
        /// Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.
        public let applicationDetail: ApplicationDetail

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        private enum CodingKeys: String, CodingKey {
            case applicationDetail = "ApplicationDetail"
        }
    }

    public struct ReferenceDataSource: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ReferenceDataSource", required: false, type: .structure), 
            AWSShapeMember(label: "ReferenceSchema", required: true, type: .structure), 
            AWSShapeMember(label: "TableName", required: true, type: .string)
        ]
        public let s3ReferenceDataSource: S3ReferenceDataSource?
        public let referenceSchema: SourceSchema
        /// Name of the in-application table to create.
        public let tableName: String

        public init(s3ReferenceDataSource: S3ReferenceDataSource? = nil, referenceSchema: SourceSchema, tableName: String) {
            self.s3ReferenceDataSource = s3ReferenceDataSource
            self.referenceSchema = referenceSchema
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case s3ReferenceDataSource = "S3ReferenceDataSource"
            case referenceSchema = "ReferenceSchema"
            case tableName = "TableName"
        }
    }

    public struct UpdateApplicationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationUpdate", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The current application version ID. You can use the DescribeApplication operation to get this value.
        public let currentApplicationVersionId: Int64
        /// Describes application updates.
        public let applicationUpdate: ApplicationUpdate
        /// Name of the Amazon Kinesis Analytics application to update.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, applicationUpdate: ApplicationUpdate, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationUpdate = applicationUpdate
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case applicationUpdate = "ApplicationUpdate"
            case applicationName = "ApplicationName"
        }
    }

    public struct DeleteApplicationReferenceDataSourceResponse: AWSShape {

    }

    public struct AddApplicationInputRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentApplicationVersionId", required: true, type: .long), 
            AWSShapeMember(label: "Input", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Current version of your Amazon Kinesis Analytics application. You can use the DescribeApplication operation to find the current application version.
        public let currentApplicationVersionId: Int64
        public let input: Input
        /// Name of your existing Amazon Kinesis Analytics application to which you want to add the streaming source.
        public let applicationName: String

        public init(currentApplicationVersionId: Int64, input: Input, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.input = input
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case currentApplicationVersionId = "CurrentApplicationVersionId"
            case input = "Input"
            case applicationName = "ApplicationName"
        }
    }

}