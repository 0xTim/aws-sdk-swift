// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Kinesisanalytics {

    public struct ListApplicationsResponse: Serializable, Initializable {
        /// Returns true if there are more applications to retrieve.
        var hasMoreApplications: Bool = false
        /// List of ApplicationSummary objects. 
        var applicationSummaries: [ApplicationSummary] = []

        public init() {}

        public init(hasMoreApplications: Bool, applicationSummaries: [ApplicationSummary]) {
            self.hasMoreApplications = hasMoreApplications
            self.applicationSummaries = applicationSummaries
        }

    }

    public struct AddApplicationReferenceDataSourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct InputParallelismUpdate: Serializable, Initializable {
        /// Number of in-application streams to create for the specified streaming source.
        var countUpdate: Int32? = nil

        public init() {}

        public init(countUpdate: Int32? = nil) {
            self.countUpdate = countUpdate
        }

    }

    public struct UpdateApplicationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct KinesisStreamsOutput: Serializable, Initializable {
        /// ARN of the destination Amazon Kinesis stream to write to.
        var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct InputUpdate: Serializable, Initializable {
        /// Name prefix for in-application stream(s) that Kinesis Analytics creates for the specific streaming source.
        var namePrefixUpdate: String? = nil
        /// Describes the parallelism updates (the number in-application streams Kinesis Analytics creates for the specific streaming source).
        var inputParallelismUpdate: InputParallelismUpdate? = nil
        /// Input ID of the application input to be updated.
        var inputId: String = ""
        /// If a Amazon Kinesis stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.
        var kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil
        /// If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.
        var kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil
        /// Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.
        var inputSchemaUpdate: InputSchemaUpdate? = nil

        public init() {}

        public init(namePrefixUpdate: String? = nil, inputParallelismUpdate: InputParallelismUpdate? = nil, inputId: String, kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil, kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil, inputSchemaUpdate: InputSchemaUpdate? = nil) {
            self.namePrefixUpdate = namePrefixUpdate
            self.inputParallelismUpdate = inputParallelismUpdate
            self.inputId = inputId
            self.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate
            self.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate
            self.inputSchemaUpdate = inputSchemaUpdate
        }

    }

    public struct KinesisFirehoseInputDescription: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics assumes to access the stream.
        var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct KinesisStreamsOutputUpdate: Serializable, Initializable {
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        var roleARNUpdate: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream where you want to write the output.
        var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

    }

    public struct AddApplicationReferenceDataSourceRequest: Serializable, Initializable {
        /// Version of the application for which you are adding the reference data source. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        var currentApplicationVersionId: Int64 = 0
        /// The reference data source can be an object in your Amazon S3 bucket. Amazon Kinesis Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. You must also provide an IAM role with the necessary permissions that Amazon Kinesis Analytics can assume to read the object from your S3 bucket on your behalf.
        var referenceDataSource: ReferenceDataSource = ReferenceDataSource()
        /// Name of an existing application.
        var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, referenceDataSource: ReferenceDataSource, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceDataSource = referenceDataSource
            self.applicationName = applicationName
        }

    }

    public struct KinesisFirehoseInputUpdate: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
        var roleARNUpdate: String? = nil
        /// ARN of the input Amazon Kinesis Firehose delivery stream to read.
        var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

    }

    public struct AddApplicationOutputResponse: Serializable, Initializable {

        public init() {}

    }

    public struct CreateApplicationResponse: Serializable, Initializable {
        /// In response to your CreateApplication request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.
        var applicationSummary: ApplicationSummary = ApplicationSummary()

        public init() {}

        public init(applicationSummary: ApplicationSummary) {
            self.applicationSummary = applicationSummary
        }

    }

    public struct StartApplicationRequest: Serializable, Initializable {
        /// Identifies the specific input, by ID, that the application starts consuming. Amazon Kinesis Analytics starts reading the streaming source associated with the input. You can also specify where in the streaming source you want Amazon Kinesis Analytics to start reading.
        var inputConfigurations: [InputConfiguration] = []
        /// Name of the application.
        var applicationName: String = ""

        public init() {}

        public init(inputConfigurations: [InputConfiguration], applicationName: String) {
            self.inputConfigurations = inputConfigurations
            self.applicationName = applicationName
        }

    }

    public struct StopApplicationRequest: Serializable, Initializable {
        /// Name of the running application to stop.
        var applicationName: String = ""

        public init() {}

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

    }

    public struct S3ReferenceDataSource: Serializable, Initializable {
        /// ARN of the IAM role that the service can assume to read data on your behalf. This role must have permission for the s3:GetObject action on the object and trust policy that allows Amazon Kinesis Analytics service principal to assume this role.
        var referenceRoleARN: String = ""
        /// Amazon Resource Name (ARN) of the S3 bucket.
        var bucketARN: String = ""
        /// Object key name containing reference data.
        var fileKey: String = ""

        public init() {}

        public init(referenceRoleARN: String, bucketARN: String, fileKey: String) {
            self.referenceRoleARN = referenceRoleARN
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

    }

    public struct KinesisFirehoseOutputUpdate: Serializable, Initializable {
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
        var roleARNUpdate: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream to write to.
        var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

    }

    public struct InputStartingPositionConfiguration: Serializable, Initializable {
        /// The starting position on the stream.    LATEST - Start reading just after the most recent record in the stream.    TRIM_HORIZON - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Firehose delivery stream.    LAST_STOPPED_POINT - Resume reading from where the application last stopped reading.  
        var inputStartingPosition: String? = nil

        public init() {}

        public init(inputStartingPosition: String? = nil) {
            self.inputStartingPosition = inputStartingPosition
        }

    }

    public struct S3ReferenceDataSourceUpdate: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the S3 bucket.
        var bucketARNUpdate: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application.
        var referenceRoleARNUpdate: String? = nil
        /// Object key name.
        var fileKeyUpdate: String? = nil

        public init() {}

        public init(bucketARNUpdate: String? = nil, referenceRoleARNUpdate: String? = nil, fileKeyUpdate: String? = nil) {
            self.bucketARNUpdate = bucketARNUpdate
            self.referenceRoleARNUpdate = referenceRoleARNUpdate
            self.fileKeyUpdate = fileKeyUpdate
        }

    }

    public struct AddApplicationInputResponse: Serializable, Initializable {

        public init() {}

    }

    public struct RecordFormat: Serializable, Initializable {
        /// The type of record format.
        var recordFormatType: String = ""
        var mappingParameters: MappingParameters? = nil

        public init() {}

        public init(recordFormatType: String, mappingParameters: MappingParameters? = nil) {
            self.recordFormatType = recordFormatType
            self.mappingParameters = mappingParameters
        }

    }

    public struct CreateApplicationRequest: Serializable, Initializable {
        /// Use this parameter to configure the application input. You can configure your application to receive input from a single streaming source. In this configuration, you map this streaming source to an in-application stream that is created. Your application code can then query the in-application stream like a table (you can think of it as a constantly updating table). For the streaming source, you provide its Amazon Resource Name (ARN) and format of data on the stream (for example, JSON, CSV, etc). You also must provide an IAM role that Amazon Kinesis Analytics can assume to read this stream on your behalf. To create the in-application stream, you need to specify a schema to transform your data into a schematized version used in SQL. In the schema, you provide the necessary mapping of the data elements in the streaming source to record columns in the in-app stream.
        var inputs: [Input]? = nil
        /// Name of your Amazon Kinesis Analytics application (for example, sample-app).
        var applicationName: String = ""
        /// You can configure application output to write data from any of the in-application streams to up to five destinations. These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose delivery streams, or both. In the configuration, you specify the in-application stream name, the destination stream Amazon Resource Name (ARN), and the format to use when writing data. You must also provide an IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. In the output configuration, you also provide the output stream Amazon Resource Name (ARN) and the format of data in the stream (for example, JSON, CSV). You also must provide an IAM role that Amazon Kinesis Analytics can assume to write to this stream on your behalf.
        var outputs: [Output]? = nil
        /// One or more SQL statements that read input data, transform it, and generate output. For example, you can write a SQL statement that reads input data and generates a running average of the number of advertisement clicks by vendor. You can also provide a series of SQL statements, where output of one statement can be used as the input for the next statement. Note that the application code must create the streams with names specified in the Outputs. For example, if your Outputs defines output streams named ExampleOutputStream1 and ExampleOutputStream2, then your application code must create these streams. 
        var applicationCode: String? = nil
        /// Summary description of the application.
        var applicationDescription: String? = nil

        public init() {}

        public init(inputs: [Input]? = nil, applicationName: String, outputs: [Output]? = nil, applicationCode: String? = nil, applicationDescription: String? = nil) {
            self.inputs = inputs
            self.applicationName = applicationName
            self.outputs = outputs
            self.applicationCode = applicationCode
            self.applicationDescription = applicationDescription
        }

    }

    public struct DestinationSchema: Serializable, Initializable {
        /// Specifies the format of the records on the output stream.
        var recordFormatType: String? = nil

        public init() {}

        public init(recordFormatType: String? = nil) {
            self.recordFormatType = recordFormatType
        }

    }

    public struct DeleteApplicationRequest: Serializable, Initializable {
        ///  You can use the DescribeApplication operation to get this value. 
        var createTimestamp: Date = Date()
        /// Name of the Amazon Kinesis Analytics application to delete.
        var applicationName: String = ""

        public init() {}

        public init(createTimestamp: Date, applicationName: String) {
            self.createTimestamp = createTimestamp
            self.applicationName = applicationName
        }

    }

    public struct StopApplicationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DiscoverInputSchemaRequest: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the streaming source.
        var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf.
        var roleARN: String = ""
        /// Point at which you want Amazon Kinesis Analytics to start reading records from the specified streaming source discovery purposes.
        var inputStartingPositionConfiguration: InputStartingPositionConfiguration = InputStartingPositionConfiguration()

        public init() {}

        public init(resourceARN: String, roleARN: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

    }

    public struct DeleteApplicationOutputRequest: Serializable, Initializable {
        /// Amazon Kinesis Analytics application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        var currentApplicationVersionId: Int64 = 0
        /// The ID of the configuration to delete. Each output configuration that is added to the application, either when the application is created or later using the AddApplicationOutput operation, has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the DescribeApplication operation to get the specific OutputId. 
        var outputId: String = ""
        /// Amazon Kinesis Analytics application name.
        var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, outputId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.outputId = outputId
            self.applicationName = applicationName
        }

    }

    public struct InputDescription: Serializable, Initializable {
        /// If an Amazon Kinesis Firehose delivery stream is configured as a streaming source, provides the Firehose delivery stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        var kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil
        /// If an Amazon Kinesis stream is configured as streaming source, provides Amazon Kinesis stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        var kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil
        /// Describes the configured parallelism (number of in-application streams mapped to the streaming source).
        var inputParallelism: InputParallelism? = nil
        /// In-application name prefix.
        var namePrefix: String? = nil
        /// Returns the in-application stream names that are mapped to the stream source.
        var inAppStreamNames: [String]? = nil
        /// Point at which the application is configured to read from the input stream.
        var inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil
        var inputSchema: SourceSchema? = nil
        /// Input ID associated with the application input. This is the ID that Amazon Kinesis Analytics assigns to each input configuration you add to your application. 
        var inputId: String? = nil

        public init() {}

        public init(kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil, kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil, inputParallelism: InputParallelism? = nil, namePrefix: String? = nil, inAppStreamNames: [String]? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, inputSchema: SourceSchema? = nil, inputId: String? = nil) {
            self.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription
            self.kinesisStreamsInputDescription = kinesisStreamsInputDescription
            self.inputParallelism = inputParallelism
            self.namePrefix = namePrefix
            self.inAppStreamNames = inAppStreamNames
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.inputSchema = inputSchema
            self.inputId = inputId
        }

    }

    public struct ApplicationSummary: Serializable, Initializable {
        /// ARN of the application.
        var applicationARN: String = ""
        /// Name of the application.
        var applicationName: String = ""
        /// Status of the application.
        var applicationStatus: String = ""

        public init() {}

        public init(applicationARN: String, applicationName: String, applicationStatus: String) {
            self.applicationARN = applicationARN
            self.applicationName = applicationName
            self.applicationStatus = applicationStatus
        }

    }

    public struct JSONMappingParameters: Serializable, Initializable {
        /// Path to the top-level parent that contains the records. For example, consider the following JSON record: In the RecordRowPath, "$" refers to the root and path "$.vehicle.Model" refers to the specific "Model" key in the JSON.
        var recordRowPath: String = ""

        public init() {}

        public init(recordRowPath: String) {
            self.recordRowPath = recordRowPath
        }

    }

    public struct AddApplicationOutputRequest: Serializable, Initializable {
        /// Version of the application to which you want add the output configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        var currentApplicationVersionId: Int64 = 0
        /// Name of the application to which you want to add the output configuration.
        var applicationName: String = ""
        /// An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, an Amazon Kinesis stream or an Amazon Kinesis Firehose delivery stream), and record the formation to use when writing to the destination.
        var output: Output = Output()

        public init() {}

        public init(currentApplicationVersionId: Int64, applicationName: String, output: Output) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.output = output
        }

    }

    public struct CSVMappingParameters: Serializable, Initializable {
        /// Row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
        var recordRowDelimiter: String = ""
        /// Column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
        var recordColumnDelimiter: String = ""

        public init() {}

        public init(recordRowDelimiter: String, recordColumnDelimiter: String) {
            self.recordRowDelimiter = recordRowDelimiter
            self.recordColumnDelimiter = recordColumnDelimiter
        }

    }

    public struct KinesisStreamsInputDescription: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct Input: Serializable, Initializable {
        /// If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the Firehose delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        var kinesisFirehoseInput: KinesisFirehoseInput? = nil
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. Also used to describe the format of the reference data source.
        var inputSchema: SourceSchema = SourceSchema()
        /// Name prefix to use when creating in-application stream. Suppose you specify a prefix "MyInApplicationStream". Kinesis Analytics will then create one or more (as per the InputParallelism count you specified) in-application streams with names "MyInApplicationStream_001", "MyInApplicationStream_002" and so on. 
        var namePrefix: String = ""
        /// If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        var kinesisStreamsInput: KinesisStreamsInput? = nil
        /// Describes the number of in-application streams to create.  Data from your source will be routed to these in-application input streams.  (see Configuring Application Input.
        var inputParallelism: InputParallelism? = nil

        public init() {}

        public init(kinesisFirehoseInput: KinesisFirehoseInput? = nil, inputSchema: SourceSchema, namePrefix: String, kinesisStreamsInput: KinesisStreamsInput? = nil, inputParallelism: InputParallelism? = nil) {
            self.kinesisFirehoseInput = kinesisFirehoseInput
            self.inputSchema = inputSchema
            self.namePrefix = namePrefix
            self.kinesisStreamsInput = kinesisStreamsInput
            self.inputParallelism = inputParallelism
        }

    }

    public struct KinesisFirehoseOutputDescription: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct DeleteApplicationOutputResponse: Serializable, Initializable {

        public init() {}

    }

    public struct SourceSchema: Serializable, Initializable {
        /// Specifies the format of the records on the streaming source.
        var recordFormat: RecordFormat = RecordFormat()
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        var recordEncoding: String? = nil
        /// A list of RecordColumn objects.
        var recordColumns: [RecordColumn] = []

        public init() {}

        public init(recordFormat: RecordFormat, recordEncoding: String? = nil, recordColumns: [RecordColumn]) {
            self.recordFormat = recordFormat
            self.recordEncoding = recordEncoding
            self.recordColumns = recordColumns
        }

    }

    public struct KinesisFirehoseInput: Serializable, Initializable {
        /// ARN of the input Firehose delivery stream.
        var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to make sure the role has necessary permissions to access the stream.
        var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct InputConfiguration: Serializable, Initializable {
        /// Input source ID. You can get this ID by calling the DescribeApplication operation.
        var id: String = ""
        /// Point at which you want the application to start processing records from the streaming source.
        var inputStartingPositionConfiguration: InputStartingPositionConfiguration = InputStartingPositionConfiguration()

        public init() {}

        public init(id: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.id = id
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

    }

    public struct OutputDescription: Serializable, Initializable {
        /// Describes Amazon Kinesis stream configured as the destination where output is written.
        var kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil
        /// Data format used for writing data to the destination.
        var destinationSchema: DestinationSchema? = nil
        /// Name of the in-application stream configured as output.
        var name: String? = nil
        /// A unique identifier for the output configuration.
        var outputId: String? = nil
        /// Describes the Amazon Kinesis Firehose delivery stream configured as the destination where output is written.
        var kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil

        public init() {}

        public init(kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil, destinationSchema: DestinationSchema? = nil, name: String? = nil, outputId: String? = nil, kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil) {
            self.kinesisStreamsOutputDescription = kinesisStreamsOutputDescription
            self.destinationSchema = destinationSchema
            self.name = name
            self.outputId = outputId
            self.kinesisFirehoseOutputDescription = kinesisFirehoseOutputDescription
        }

    }

    public struct KinesisFirehoseOutput: Serializable, Initializable {
        /// ARN of the destination Amazon Kinesis Firehose delivery stream to write to.
        var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct KinesisStreamsInputUpdate: Serializable, Initializable {
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        var roleARNUpdate: String? = nil
        /// Amazon Resource Name (ARN) of the input Amazon Kinesis stream to read.
        var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

    }

    public struct DescribeApplicationRequest: Serializable, Initializable {
        /// Name of the application.
        var applicationName: String = ""

        public init() {}

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

    }

    public struct DiscoverInputSchemaResponse: Serializable, Initializable {
        /// Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.
        var inputSchema: SourceSchema? = nil
        /// An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).
        var parsedInputRecords: [[String]]? = nil
        /// Raw stream data that was sampled to infer the schema.
        var rawInputRecords: [String]? = nil

        public init() {}

        public init(inputSchema: SourceSchema? = nil, parsedInputRecords: [[String]]? = nil, rawInputRecords: [String]? = nil) {
            self.inputSchema = inputSchema
            self.parsedInputRecords = parsedInputRecords
            self.rawInputRecords = rawInputRecords
        }

    }

    public struct ApplicationDetail: Serializable, Initializable {
        /// Description of the application.
        var applicationDescription: String? = nil
        /// Status of the application.
        var applicationStatus: String = ""
        /// Describes the application input configuration. For more information, see Configuring Application Input. 
        var inputDescriptions: [InputDescription]? = nil
        /// Timestamp when the application was last updated.
        var lastUpdateTimestamp: Date? = nil
        /// Timestamp when the application version was created.
        var createTimestamp: Date? = nil
        /// Returns the application code that you provided to perform data analysis on any of the in-application streams in your application.
        var applicationCode: String? = nil
        /// Name of the application.
        var applicationName: String = ""
        /// ARN of the application.
        var applicationARN: String = ""
        /// Provides the current application version.
        var applicationVersionId: Int64 = 0
        /// Describes the application output configuration. For more information, see Configuring Application Output. 
        var outputDescriptions: [OutputDescription]? = nil
        /// Describes reference data sources configured for the application. For more information, see Configuring Application Input. 
        var referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil

        public init() {}

        public init(applicationDescription: String? = nil, applicationStatus: String, inputDescriptions: [InputDescription]? = nil, lastUpdateTimestamp: Date? = nil, createTimestamp: Date? = nil, applicationCode: String? = nil, applicationName: String, applicationARN: String, applicationVersionId: Int64, outputDescriptions: [OutputDescription]? = nil, referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil) {
            self.applicationDescription = applicationDescription
            self.applicationStatus = applicationStatus
            self.inputDescriptions = inputDescriptions
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.createTimestamp = createTimestamp
            self.applicationCode = applicationCode
            self.applicationName = applicationName
            self.applicationARN = applicationARN
            self.applicationVersionId = applicationVersionId
            self.outputDescriptions = outputDescriptions
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
        }

    }

    public struct InputSchemaUpdate: Serializable, Initializable {
        /// A list of RecordColumn objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream. 
        var recordColumnUpdates: [RecordColumn]? = nil
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        var recordEncodingUpdate: String? = nil
        /// Specifies the format of the records on the streaming source.
        var recordFormatUpdate: RecordFormat? = nil

        public init() {}

        public init(recordColumnUpdates: [RecordColumn]? = nil, recordEncodingUpdate: String? = nil, recordFormatUpdate: RecordFormat? = nil) {
            self.recordColumnUpdates = recordColumnUpdates
            self.recordEncodingUpdate = recordEncodingUpdate
            self.recordFormatUpdate = recordFormatUpdate
        }

    }

    public struct InputParallelism: Serializable, Initializable {
        /// Number of in-application streams to create. For more information, see Limits. 
        var count: Int32? = nil

        public init() {}

        public init(count: Int32? = nil) {
            self.count = count
        }

    }

    public struct KinesisStreamsInput: Serializable, Initializable {
        /// ARN of the input Amazon Kinesis stream to read.
        var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct DeleteApplicationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ReferenceDataSourceDescription: Serializable, Initializable {
        /// Provides the S3 bucket name, the object key name that contains the reference data. It also provides the Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application reference table.
        var s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription = S3ReferenceDataSourceDescription()
        /// ID of the reference data source. This is the ID that Amazon Kinesis Analytics assigns when you add the reference data source to your application using the AddApplicationReferenceDataSource operation.
        var referenceId: String = ""
        /// The in-application table name created by the specific reference data source configuration.
        var tableName: String = ""
        var referenceSchema: SourceSchema? = nil

        public init() {}

        public init(s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription, referenceId: String, tableName: String, referenceSchema: SourceSchema? = nil) {
            self.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription
            self.referenceId = referenceId
            self.tableName = tableName
            self.referenceSchema = referenceSchema
        }

    }

    public struct DeleteApplicationReferenceDataSourceRequest: Serializable, Initializable {
        /// Version of the application. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        var currentApplicationVersionId: Int64 = 0
        /// ID of the reference data source. When you add a reference data source to your application using the AddApplicationReferenceDataSource, Amazon Kinesis Analytics assigns an ID. You can use the DescribeApplication operation to get the reference ID. 
        var referenceId: String = ""
        /// Name of an existing application.
        var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, referenceId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceId = referenceId
            self.applicationName = applicationName
        }

    }

    public struct ReferenceDataSourceUpdate: Serializable, Initializable {
        /// Describes the S3 bucket name, object key name, and IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf and populate the in-application reference table.
        var s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil
        /// In-application table name that is created by this update.
        var tableNameUpdate: String? = nil
        var referenceSchemaUpdate: SourceSchema? = nil
        /// ID of the reference data source being updated. You can use the DescribeApplication operation to get this value.
        var referenceId: String = ""

        public init() {}

        public init(s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil, tableNameUpdate: String? = nil, referenceSchemaUpdate: SourceSchema? = nil, referenceId: String) {
            self.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate
            self.tableNameUpdate = tableNameUpdate
            self.referenceSchemaUpdate = referenceSchemaUpdate
            self.referenceId = referenceId
        }

    }

    public struct Output: Serializable, Initializable {
        /// Identifies an Amazon Kinesis Firehose delivery stream as the destination.
        var kinesisFirehoseOutput: KinesisFirehoseOutput? = nil
        var destinationSchema: DestinationSchema = DestinationSchema()
        /// Name of the in-application stream.
        var name: String = ""
        /// Identifies an Amazon Kinesis stream as the destination.
        var kinesisStreamsOutput: KinesisStreamsOutput? = nil

        public init() {}

        public init(kinesisFirehoseOutput: KinesisFirehoseOutput? = nil, destinationSchema: DestinationSchema, name: String, kinesisStreamsOutput: KinesisStreamsOutput? = nil) {
            self.kinesisFirehoseOutput = kinesisFirehoseOutput
            self.destinationSchema = destinationSchema
            self.name = name
            self.kinesisStreamsOutput = kinesisStreamsOutput
        }

    }

    public struct StartApplicationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct KinesisStreamsOutputDescription: Serializable, Initializable {
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

    }

    public struct S3ReferenceDataSourceDescription: Serializable, Initializable {
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf to populate the in-application reference table.
        var referenceRoleARN: String = ""
        /// Amazon Resource Name (ARN) of the S3 bucket.
        var bucketARN: String = ""
        /// Amazon S3 object key name.
        var fileKey: String = ""

        public init() {}

        public init(referenceRoleARN: String, bucketARN: String, fileKey: String) {
            self.referenceRoleARN = referenceRoleARN
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

    }

    public struct ApplicationUpdate: Serializable, Initializable {
        /// Describes application output configuration updates.
        var outputUpdates: [OutputUpdate]? = nil
        /// Describes application reference data source updates.
        var referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil
        /// Describes application code updates.
        var applicationCodeUpdate: String? = nil
        /// Describes application input configuration updates.
        var inputUpdates: [InputUpdate]? = nil

        public init() {}

        public init(outputUpdates: [OutputUpdate]? = nil, referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil, applicationCodeUpdate: String? = nil, inputUpdates: [InputUpdate]? = nil) {
            self.outputUpdates = outputUpdates
            self.referenceDataSourceUpdates = referenceDataSourceUpdates
            self.applicationCodeUpdate = applicationCodeUpdate
            self.inputUpdates = inputUpdates
        }

    }

    public struct MappingParameters: Serializable, Initializable {
        /// Provides additional mapping information when the record format uses delimiters (for example, CSV).
        var cSVMappingParameters: CSVMappingParameters? = nil
        /// Provides additional mapping information when JSON is the record format on the streaming source.
        var jSONMappingParameters: JSONMappingParameters? = nil

        public init() {}

        public init(cSVMappingParameters: CSVMappingParameters? = nil, jSONMappingParameters: JSONMappingParameters? = nil) {
            self.cSVMappingParameters = cSVMappingParameters
            self.jSONMappingParameters = jSONMappingParameters
        }

    }

    public struct OutputUpdate: Serializable, Initializable {
        /// If you want to specify a different in-application stream for this output configuration, use this field to specify the new in-application stream name.
        var nameUpdate: String? = nil
        /// Describes an Amazon Kinesis stream as the destination for the output.
        var kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil
        /// Describes a Amazon Kinesis Firehose delivery stream as the destination for the output.
        var kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil
        var destinationSchemaUpdate: DestinationSchema? = nil
        /// Identifies the specific output configuration that you want to update.
        var outputId: String = ""

        public init() {}

        public init(nameUpdate: String? = nil, kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil, kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil, destinationSchemaUpdate: DestinationSchema? = nil, outputId: String) {
            self.nameUpdate = nameUpdate
            self.kinesisStreamsOutputUpdate = kinesisStreamsOutputUpdate
            self.kinesisFirehoseOutputUpdate = kinesisFirehoseOutputUpdate
            self.destinationSchemaUpdate = destinationSchemaUpdate
            self.outputId = outputId
        }

    }

    public struct ListApplicationsRequest: Serializable, Initializable {
        /// Maximum number of applications to list.
        var limit: Int32? = nil
        /// Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.
        var exclusiveStartApplicationName: String? = nil

        public init() {}

        public init(limit: Int32? = nil, exclusiveStartApplicationName: String? = nil) {
            self.limit = limit
            self.exclusiveStartApplicationName = exclusiveStartApplicationName
        }

    }

    public struct RecordColumn: Serializable, Initializable {
        /// Reference to the data element in the streaming input of the reference data source.
        var mapping: String? = nil
        /// Name of the column created in the in-application input stream or reference table.
        var name: String = ""
        /// Type of column created in the in-application input stream or reference table.
        var sqlType: String = ""

        public init() {}

        public init(mapping: String? = nil, name: String, sqlType: String) {
            self.mapping = mapping
            self.name = name
            self.sqlType = sqlType
        }

    }

    public struct DescribeApplicationResponse: Serializable, Initializable {
        /// Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.
        var applicationDetail: ApplicationDetail = ApplicationDetail()

        public init() {}

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

    }

    public struct ReferenceDataSource: Serializable, Initializable {
        var s3ReferenceDataSource: S3ReferenceDataSource? = nil
        var referenceSchema: SourceSchema = SourceSchema()
        /// Name of the in-application table to create.
        var tableName: String = ""

        public init() {}

        public init(s3ReferenceDataSource: S3ReferenceDataSource? = nil, referenceSchema: SourceSchema, tableName: String) {
            self.s3ReferenceDataSource = s3ReferenceDataSource
            self.referenceSchema = referenceSchema
            self.tableName = tableName
        }

    }

    public struct UpdateApplicationRequest: Serializable, Initializable {
        /// The current application version ID. You can use the DescribeApplication operation to get this value.
        var currentApplicationVersionId: Int64 = 0
        /// Describes application updates.
        var applicationUpdate: ApplicationUpdate = ApplicationUpdate()
        /// Name of the Kinesis Analytics application to update.
        var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, applicationUpdate: ApplicationUpdate, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationUpdate = applicationUpdate
            self.applicationName = applicationName
        }

    }

    public struct DeleteApplicationReferenceDataSourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct AddApplicationInputRequest: Serializable, Initializable {
        /// Current version of your Amazon Kinesis Analytics application. You can use the DescribeApplication operation to find the current application version.
        var currentApplicationVersionId: Int64 = 0
        var input: Input = Input()
        /// Name of your existing Amazon Kinesis Analytics application to which you want to add the streaming source.
        var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, input: Input, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.input = input
            self.applicationName = applicationName
        }

    }

}