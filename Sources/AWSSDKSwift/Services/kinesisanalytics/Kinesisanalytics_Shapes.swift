// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Kinesisanalytics {

    public struct ListApplicationsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Returns true if there are more applications to retrieve.
        public var hasMoreApplications: Bool = false
        /// List of ApplicationSummary objects. 
        public var applicationSummaries: [ApplicationSummary] = []

        public init() {}

        public init(hasMoreApplications: Bool, applicationSummaries: [ApplicationSummary]) {
            self.hasMoreApplications = hasMoreApplications
            self.applicationSummaries = applicationSummaries
        }

        public init(dictionary: [String: Any]) throws {
            guard let hasMoreApplications = dictionary["HasMoreApplications"] as? Bool else { throw InitializableError.missingRequiredParam("HasMoreApplications") }
            self.hasMoreApplications = hasMoreApplications
            guard let applicationSummaries = dictionary["ApplicationSummaries"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("ApplicationSummaries") }
            self.applicationSummaries = try applicationSummaries.map({ try ApplicationSummary(dictionary: $0) })
        }
    }

    public struct AddApplicationReferenceDataSourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct InputParallelismUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of in-application streams to create for the specified streaming source.
        public var countUpdate: Int32? = nil

        public init() {}

        public init(countUpdate: Int32? = nil) {
            self.countUpdate = countUpdate
        }

        public init(dictionary: [String: Any]) throws {
            self.countUpdate = dictionary["CountUpdate"] as? Int32
        }
    }

    public struct UpdateApplicationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct KinesisStreamsOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the destination Amazon Kinesis stream to write to.
        public var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        public var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
        }
    }

    public struct InputUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name prefix for in-application stream(s) that Kinesis Analytics creates for the specific streaming source.
        public var namePrefixUpdate: String? = nil
        /// Describes the parallelism updates (the number in-application streams Kinesis Analytics creates for the specific streaming source).
        public var inputParallelismUpdate: InputParallelismUpdate? = nil
        /// Input ID of the application input to be updated.
        public var inputId: String = ""
        /// If a Amazon Kinesis stream is the streaming source to be updated, provides an updated stream ARN and IAM role ARN.
        public var kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil
        /// If an Amazon Kinesis Firehose delivery stream is the streaming source to be updated, provides an updated stream Amazon Resource Name (ARN) and IAM role ARN.
        public var kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil
        /// Describes the data format on the streaming source, and how record elements on the streaming source map to columns of the in-application stream that is created.
        public var inputSchemaUpdate: InputSchemaUpdate? = nil

        public init() {}

        public init(namePrefixUpdate: String? = nil, inputParallelismUpdate: InputParallelismUpdate? = nil, inputId: String, kinesisStreamsInputUpdate: KinesisStreamsInputUpdate? = nil, kinesisFirehoseInputUpdate: KinesisFirehoseInputUpdate? = nil, inputSchemaUpdate: InputSchemaUpdate? = nil) {
            self.namePrefixUpdate = namePrefixUpdate
            self.inputParallelismUpdate = inputParallelismUpdate
            self.inputId = inputId
            self.kinesisStreamsInputUpdate = kinesisStreamsInputUpdate
            self.kinesisFirehoseInputUpdate = kinesisFirehoseInputUpdate
            self.inputSchemaUpdate = inputSchemaUpdate
        }

        public init(dictionary: [String: Any]) throws {
            self.namePrefixUpdate = dictionary["NamePrefixUpdate"] as? String
            if let inputParallelismUpdate = dictionary["InputParallelismUpdate"] as? [String: Any] { self.inputParallelismUpdate = try Kinesisanalytics.InputParallelismUpdate(dictionary: inputParallelismUpdate) }
            guard let inputId = dictionary["InputId"] as? String else { throw InitializableError.missingRequiredParam("InputId") }
            self.inputId = inputId
            if let kinesisStreamsInputUpdate = dictionary["KinesisStreamsInputUpdate"] as? [String: Any] { self.kinesisStreamsInputUpdate = try Kinesisanalytics.KinesisStreamsInputUpdate(dictionary: kinesisStreamsInputUpdate) }
            if let kinesisFirehoseInputUpdate = dictionary["KinesisFirehoseInputUpdate"] as? [String: Any] { self.kinesisFirehoseInputUpdate = try Kinesisanalytics.KinesisFirehoseInputUpdate(dictionary: kinesisFirehoseInputUpdate) }
            if let inputSchemaUpdate = dictionary["InputSchemaUpdate"] as? [String: Any] { self.inputSchemaUpdate = try Kinesisanalytics.InputSchemaUpdate(dictionary: inputSchemaUpdate) }
        }
    }

    public struct KinesisFirehoseInputDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        public var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics assumes to access the stream.
        public var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceARN = dictionary["ResourceARN"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
        }
    }

    public struct KinesisStreamsOutputUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public var roleARNUpdate: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream where you want to write the output.
        public var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        public init(dictionary: [String: Any]) throws {
            self.roleARNUpdate = dictionary["RoleARNUpdate"] as? String
            self.resourceARNUpdate = dictionary["ResourceARNUpdate"] as? String
        }
    }

    public struct AddApplicationReferenceDataSourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Version of the application for which you are adding the reference data source. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public var currentApplicationVersionId: Int64 = 0
        /// The reference data source can be an object in your Amazon S3 bucket. Amazon Kinesis Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. You must also provide an IAM role with the necessary permissions that Amazon Kinesis Analytics can assume to read the object from your S3 bucket on your behalf.
        public var referenceDataSource: ReferenceDataSource = ReferenceDataSource()
        /// Name of an existing application.
        public var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, referenceDataSource: ReferenceDataSource, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceDataSource = referenceDataSource
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let currentApplicationVersionId = dictionary["CurrentApplicationVersionId"] as? Int64 else { throw InitializableError.missingRequiredParam("CurrentApplicationVersionId") }
            self.currentApplicationVersionId = currentApplicationVersionId
            guard let referenceDataSource = dictionary["ReferenceDataSource"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ReferenceDataSource") }
            self.referenceDataSource = try Kinesisanalytics.ReferenceDataSource(dictionary: referenceDataSource)
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct KinesisFirehoseInputUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
        public var roleARNUpdate: String? = nil
        /// ARN of the input Amazon Kinesis Firehose delivery stream to read.
        public var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        public init(dictionary: [String: Any]) throws {
            self.roleARNUpdate = dictionary["RoleARNUpdate"] as? String
            self.resourceARNUpdate = dictionary["ResourceARNUpdate"] as? String
        }
    }

    public struct AddApplicationOutputResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct CreateApplicationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// In response to your CreateApplication request, Amazon Kinesis Analytics returns a response with a summary of the application it created, including the application Amazon Resource Name (ARN), name, and status.
        public var applicationSummary: ApplicationSummary = ApplicationSummary()

        public init() {}

        public init(applicationSummary: ApplicationSummary) {
            self.applicationSummary = applicationSummary
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationSummary = dictionary["ApplicationSummary"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ApplicationSummary") }
            self.applicationSummary = try Kinesisanalytics.ApplicationSummary(dictionary: applicationSummary)
        }
    }

    public struct StartApplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifies the specific input, by ID, that the application starts consuming. Amazon Kinesis Analytics starts reading the streaming source associated with the input. You can also specify where in the streaming source you want Amazon Kinesis Analytics to start reading.
        public var inputConfigurations: [InputConfiguration] = []
        /// Name of the application.
        public var applicationName: String = ""

        public init() {}

        public init(inputConfigurations: [InputConfiguration], applicationName: String) {
            self.inputConfigurations = inputConfigurations
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let inputConfigurations = dictionary["InputConfigurations"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("InputConfigurations") }
            self.inputConfigurations = try inputConfigurations.map({ try InputConfiguration(dictionary: $0) })
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct StopApplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name of the running application to stop.
        public var applicationName: String = ""

        public init() {}

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct S3ReferenceDataSource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the IAM role that the service can assume to read data on your behalf. This role must have permission for the s3:GetObject action on the object and trust policy that allows Amazon Kinesis Analytics service principal to assume this role.
        public var referenceRoleARN: String = ""
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public var bucketARN: String = ""
        /// Object key name containing reference data.
        public var fileKey: String = ""

        public init() {}

        public init(referenceRoleARN: String, bucketARN: String, fileKey: String) {
            self.referenceRoleARN = referenceRoleARN
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let referenceRoleARN = dictionary["ReferenceRoleARN"] as? String else { throw InitializableError.missingRequiredParam("ReferenceRoleARN") }
            self.referenceRoleARN = referenceRoleARN
            guard let bucketARN = dictionary["BucketARN"] as? String else { throw InitializableError.missingRequiredParam("BucketARN") }
            self.bucketARN = bucketARN
            guard let fileKey = dictionary["FileKey"] as? String else { throw InitializableError.missingRequiredParam("FileKey") }
            self.fileKey = fileKey
        }
    }

    public struct KinesisFirehoseOutputUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant necessary permissions to this role.
        public var roleARNUpdate: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream to write to.
        public var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        public init(dictionary: [String: Any]) throws {
            self.roleARNUpdate = dictionary["RoleARNUpdate"] as? String
            self.resourceARNUpdate = dictionary["ResourceARNUpdate"] as? String
        }
    }

    public struct InputStartingPositionConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The starting position on the stream.    LATEST - Start reading just after the most recent record in the stream.    TRIM_HORIZON - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Firehose delivery stream.    LAST_STOPPED_POINT - Resume reading from where the application last stopped reading.  
        public var inputStartingPosition: String? = nil

        public init() {}

        public init(inputStartingPosition: String? = nil) {
            self.inputStartingPosition = inputStartingPosition
        }

        public init(dictionary: [String: Any]) throws {
            self.inputStartingPosition = dictionary["InputStartingPosition"] as? String
        }
    }

    public struct S3ReferenceDataSourceUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public var bucketARNUpdate: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application.
        public var referenceRoleARNUpdate: String? = nil
        /// Object key name.
        public var fileKeyUpdate: String? = nil

        public init() {}

        public init(bucketARNUpdate: String? = nil, referenceRoleARNUpdate: String? = nil, fileKeyUpdate: String? = nil) {
            self.bucketARNUpdate = bucketARNUpdate
            self.referenceRoleARNUpdate = referenceRoleARNUpdate
            self.fileKeyUpdate = fileKeyUpdate
        }

        public init(dictionary: [String: Any]) throws {
            self.bucketARNUpdate = dictionary["BucketARNUpdate"] as? String
            self.referenceRoleARNUpdate = dictionary["ReferenceRoleARNUpdate"] as? String
            self.fileKeyUpdate = dictionary["FileKeyUpdate"] as? String
        }
    }

    public struct AddApplicationInputResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct RecordFormat: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of record format.
        public var recordFormatType: String = ""
        public var mappingParameters: MappingParameters? = nil

        public init() {}

        public init(recordFormatType: String, mappingParameters: MappingParameters? = nil) {
            self.recordFormatType = recordFormatType
            self.mappingParameters = mappingParameters
        }

        public init(dictionary: [String: Any]) throws {
            guard let recordFormatType = dictionary["RecordFormatType"] as? String else { throw InitializableError.missingRequiredParam("RecordFormatType") }
            self.recordFormatType = recordFormatType
            if let mappingParameters = dictionary["MappingParameters"] as? [String: Any] { self.mappingParameters = try Kinesisanalytics.MappingParameters(dictionary: mappingParameters) }
        }
    }

    public struct CreateApplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Use this parameter to configure the application input. You can configure your application to receive input from a single streaming source. In this configuration, you map this streaming source to an in-application stream that is created. Your application code can then query the in-application stream like a table (you can think of it as a constantly updating table). For the streaming source, you provide its Amazon Resource Name (ARN) and format of data on the stream (for example, JSON, CSV, etc). You also must provide an IAM role that Amazon Kinesis Analytics can assume to read this stream on your behalf. To create the in-application stream, you need to specify a schema to transform your data into a schematized version used in SQL. In the schema, you provide the necessary mapping of the data elements in the streaming source to record columns in the in-app stream.
        public var inputs: [Input]? = nil
        /// Name of your Amazon Kinesis Analytics application (for example, sample-app).
        public var applicationName: String = ""
        /// You can configure application output to write data from any of the in-application streams to up to five destinations. These destinations can be Amazon Kinesis streams, Amazon Kinesis Firehose delivery streams, or both. In the configuration, you specify the in-application stream name, the destination stream Amazon Resource Name (ARN), and the format to use when writing data. You must also provide an IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. In the output configuration, you also provide the output stream Amazon Resource Name (ARN) and the format of data in the stream (for example, JSON, CSV). You also must provide an IAM role that Amazon Kinesis Analytics can assume to write to this stream on your behalf.
        public var outputs: [Output]? = nil
        /// One or more SQL statements that read input data, transform it, and generate output. For example, you can write a SQL statement that reads input data and generates a running average of the number of advertisement clicks by vendor. You can also provide a series of SQL statements, where output of one statement can be used as the input for the next statement. Note that the application code must create the streams with names specified in the Outputs. For example, if your Outputs defines output streams named ExampleOutputStream1 and ExampleOutputStream2, then your application code must create these streams. 
        public var applicationCode: String? = nil
        /// Summary description of the application.
        public var applicationDescription: String? = nil

        public init() {}

        public init(inputs: [Input]? = nil, applicationName: String, outputs: [Output]? = nil, applicationCode: String? = nil, applicationDescription: String? = nil) {
            self.inputs = inputs
            self.applicationName = applicationName
            self.outputs = outputs
            self.applicationCode = applicationCode
            self.applicationDescription = applicationDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let inputs = dictionary["Inputs"] as? [[String: Any]] {
                self.inputs = try inputs.map({ try Input(dictionary: $0) })
            }
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
            if let outputs = dictionary["Outputs"] as? [[String: Any]] {
                self.outputs = try outputs.map({ try Output(dictionary: $0) })
            }
            self.applicationCode = dictionary["ApplicationCode"] as? String
            self.applicationDescription = dictionary["ApplicationDescription"] as? String
        }
    }

    public struct DestinationSchema: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the format of the records on the output stream.
        public var recordFormatType: String? = nil

        public init() {}

        public init(recordFormatType: String? = nil) {
            self.recordFormatType = recordFormatType
        }

        public init(dictionary: [String: Any]) throws {
            self.recordFormatType = dictionary["RecordFormatType"] as? String
        }
    }

    public struct DeleteApplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  You can use the DescribeApplication operation to get this value. 
        public var createTimestamp: Date = Date()
        /// Name of the Amazon Kinesis Analytics application to delete.
        public var applicationName: String = ""

        public init() {}

        public init(createTimestamp: Date, applicationName: String) {
            self.createTimestamp = createTimestamp
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let createTimestamp = dictionary["CreateTimestamp"] as? Date else { throw InitializableError.missingRequiredParam("CreateTimestamp") }
            self.createTimestamp = createTimestamp
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct StopApplicationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct DiscoverInputSchemaRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of the streaming source.
        public var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf.
        public var roleARN: String = ""
        /// Point at which you want Amazon Kinesis Analytics to start reading records from the specified streaming source discovery purposes.
        public var inputStartingPositionConfiguration: InputStartingPositionConfiguration = InputStartingPositionConfiguration()

        public init() {}

        public init(resourceARN: String, roleARN: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
            guard let inputStartingPositionConfiguration = dictionary["InputStartingPositionConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("InputStartingPositionConfiguration") }
            self.inputStartingPositionConfiguration = try Kinesisanalytics.InputStartingPositionConfiguration(dictionary: inputStartingPositionConfiguration)
        }
    }

    public struct DeleteApplicationOutputRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Kinesis Analytics application version. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public var currentApplicationVersionId: Int64 = 0
        /// The ID of the configuration to delete. Each output configuration that is added to the application, either when the application is created or later using the AddApplicationOutput operation, has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the DescribeApplication operation to get the specific OutputId. 
        public var outputId: String = ""
        /// Amazon Kinesis Analytics application name.
        public var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, outputId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.outputId = outputId
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let currentApplicationVersionId = dictionary["CurrentApplicationVersionId"] as? Int64 else { throw InitializableError.missingRequiredParam("CurrentApplicationVersionId") }
            self.currentApplicationVersionId = currentApplicationVersionId
            guard let outputId = dictionary["OutputId"] as? String else { throw InitializableError.missingRequiredParam("OutputId") }
            self.outputId = outputId
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct InputDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If an Amazon Kinesis Firehose delivery stream is configured as a streaming source, provides the Firehose delivery stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public var kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil
        /// If an Amazon Kinesis stream is configured as streaming source, provides Amazon Kinesis stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public var kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil
        /// Describes the configured parallelism (number of in-application streams mapped to the streaming source).
        public var inputParallelism: InputParallelism? = nil
        /// In-application name prefix.
        public var namePrefix: String? = nil
        /// Returns the in-application stream names that are mapped to the stream source.
        public var inAppStreamNames: [String]? = nil
        /// Point at which the application is configured to read from the input stream.
        public var inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil
        public var inputSchema: SourceSchema? = nil
        /// Input ID associated with the application input. This is the ID that Amazon Kinesis Analytics assigns to each input configuration you add to your application. 
        public var inputId: String? = nil

        public init() {}

        public init(kinesisFirehoseInputDescription: KinesisFirehoseInputDescription? = nil, kinesisStreamsInputDescription: KinesisStreamsInputDescription? = nil, inputParallelism: InputParallelism? = nil, namePrefix: String? = nil, inAppStreamNames: [String]? = nil, inputStartingPositionConfiguration: InputStartingPositionConfiguration? = nil, inputSchema: SourceSchema? = nil, inputId: String? = nil) {
            self.kinesisFirehoseInputDescription = kinesisFirehoseInputDescription
            self.kinesisStreamsInputDescription = kinesisStreamsInputDescription
            self.inputParallelism = inputParallelism
            self.namePrefix = namePrefix
            self.inAppStreamNames = inAppStreamNames
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
            self.inputSchema = inputSchema
            self.inputId = inputId
        }

        public init(dictionary: [String: Any]) throws {
            if let kinesisFirehoseInputDescription = dictionary["KinesisFirehoseInputDescription"] as? [String: Any] { self.kinesisFirehoseInputDescription = try Kinesisanalytics.KinesisFirehoseInputDescription(dictionary: kinesisFirehoseInputDescription) }
            if let kinesisStreamsInputDescription = dictionary["KinesisStreamsInputDescription"] as? [String: Any] { self.kinesisStreamsInputDescription = try Kinesisanalytics.KinesisStreamsInputDescription(dictionary: kinesisStreamsInputDescription) }
            if let inputParallelism = dictionary["InputParallelism"] as? [String: Any] { self.inputParallelism = try Kinesisanalytics.InputParallelism(dictionary: inputParallelism) }
            self.namePrefix = dictionary["NamePrefix"] as? String
            if let inAppStreamNames = dictionary["InAppStreamNames"] as? [String] {
                self.inAppStreamNames = inAppStreamNames
            }
            if let inputStartingPositionConfiguration = dictionary["InputStartingPositionConfiguration"] as? [String: Any] { self.inputStartingPositionConfiguration = try Kinesisanalytics.InputStartingPositionConfiguration(dictionary: inputStartingPositionConfiguration) }
            if let inputSchema = dictionary["InputSchema"] as? [String: Any] { self.inputSchema = try Kinesisanalytics.SourceSchema(dictionary: inputSchema) }
            self.inputId = dictionary["InputId"] as? String
        }
    }

    public struct ApplicationSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the application.
        public var applicationARN: String = ""
        /// Name of the application.
        public var applicationName: String = ""
        /// Status of the application.
        public var applicationStatus: String = ""

        public init() {}

        public init(applicationARN: String, applicationName: String, applicationStatus: String) {
            self.applicationARN = applicationARN
            self.applicationName = applicationName
            self.applicationStatus = applicationStatus
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationARN = dictionary["ApplicationARN"] as? String else { throw InitializableError.missingRequiredParam("ApplicationARN") }
            self.applicationARN = applicationARN
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
            guard let applicationStatus = dictionary["ApplicationStatus"] as? String else { throw InitializableError.missingRequiredParam("ApplicationStatus") }
            self.applicationStatus = applicationStatus
        }
    }

    public struct JSONMappingParameters: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Path to the top-level parent that contains the records. For example, consider the following JSON record: In the RecordRowPath, "$" refers to the root and path "$.vehicle.Model" refers to the specific "Model" key in the JSON.
        public var recordRowPath: String = ""

        public init() {}

        public init(recordRowPath: String) {
            self.recordRowPath = recordRowPath
        }

        public init(dictionary: [String: Any]) throws {
            guard let recordRowPath = dictionary["RecordRowPath"] as? String else { throw InitializableError.missingRequiredParam("RecordRowPath") }
            self.recordRowPath = recordRowPath
        }
    }

    public struct AddApplicationOutputRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Version of the application to which you want add the output configuration. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned. 
        public var currentApplicationVersionId: Int64 = 0
        /// Name of the application to which you want to add the output configuration.
        public var applicationName: String = ""
        /// An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, an Amazon Kinesis stream or an Amazon Kinesis Firehose delivery stream), and record the formation to use when writing to the destination.
        public var output: Output = Output()

        public init() {}

        public init(currentApplicationVersionId: Int64, applicationName: String, output: Output) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationName = applicationName
            self.output = output
        }

        public init(dictionary: [String: Any]) throws {
            guard let currentApplicationVersionId = dictionary["CurrentApplicationVersionId"] as? Int64 else { throw InitializableError.missingRequiredParam("CurrentApplicationVersionId") }
            self.currentApplicationVersionId = currentApplicationVersionId
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
            guard let output = dictionary["Output"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Output") }
            self.output = try Kinesisanalytics.Output(dictionary: output)
        }
    }

    public struct CSVMappingParameters: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
        public var recordRowDelimiter: String = ""
        /// Column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
        public var recordColumnDelimiter: String = ""

        public init() {}

        public init(recordRowDelimiter: String, recordColumnDelimiter: String) {
            self.recordRowDelimiter = recordRowDelimiter
            self.recordColumnDelimiter = recordColumnDelimiter
        }

        public init(dictionary: [String: Any]) throws {
            guard let recordRowDelimiter = dictionary["RecordRowDelimiter"] as? String else { throw InitializableError.missingRequiredParam("RecordRowDelimiter") }
            self.recordRowDelimiter = recordRowDelimiter
            guard let recordColumnDelimiter = dictionary["RecordColumnDelimiter"] as? String else { throw InitializableError.missingRequiredParam("RecordColumnDelimiter") }
            self.recordColumnDelimiter = recordColumnDelimiter
        }
    }

    public struct KinesisStreamsInputDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        public var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceARN = dictionary["ResourceARN"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
        }
    }

    public struct Input: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If the streaming source is an Amazon Kinesis Firehose delivery stream, identifies the Firehose delivery stream's ARN and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public var kinesisFirehoseInput: KinesisFirehoseInput? = nil
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. Also used to describe the format of the reference data source.
        public var inputSchema: SourceSchema = SourceSchema()
        /// Name prefix to use when creating in-application stream. Suppose you specify a prefix "MyInApplicationStream". Kinesis Analytics will then create one or more (as per the InputParallelism count you specified) in-application streams with names "MyInApplicationStream_001", "MyInApplicationStream_002" and so on. 
        public var namePrefix: String = ""
        /// If the streaming source is an Amazon Kinesis stream, identifies the stream's Amazon Resource Name (ARN) and an IAM role that enables Amazon Kinesis Analytics to access the stream on your behalf.
        public var kinesisStreamsInput: KinesisStreamsInput? = nil
        /// Describes the number of in-application streams to create.  Data from your source will be routed to these in-application input streams.  (see Configuring Application Input.
        public var inputParallelism: InputParallelism? = nil

        public init() {}

        public init(kinesisFirehoseInput: KinesisFirehoseInput? = nil, inputSchema: SourceSchema, namePrefix: String, kinesisStreamsInput: KinesisStreamsInput? = nil, inputParallelism: InputParallelism? = nil) {
            self.kinesisFirehoseInput = kinesisFirehoseInput
            self.inputSchema = inputSchema
            self.namePrefix = namePrefix
            self.kinesisStreamsInput = kinesisStreamsInput
            self.inputParallelism = inputParallelism
        }

        public init(dictionary: [String: Any]) throws {
            if let kinesisFirehoseInput = dictionary["KinesisFirehoseInput"] as? [String: Any] { self.kinesisFirehoseInput = try Kinesisanalytics.KinesisFirehoseInput(dictionary: kinesisFirehoseInput) }
            guard let inputSchema = dictionary["InputSchema"] as? [String: Any] else { throw InitializableError.missingRequiredParam("InputSchema") }
            self.inputSchema = try Kinesisanalytics.SourceSchema(dictionary: inputSchema)
            guard let namePrefix = dictionary["NamePrefix"] as? String else { throw InitializableError.missingRequiredParam("NamePrefix") }
            self.namePrefix = namePrefix
            if let kinesisStreamsInput = dictionary["KinesisStreamsInput"] as? [String: Any] { self.kinesisStreamsInput = try Kinesisanalytics.KinesisStreamsInput(dictionary: kinesisStreamsInput) }
            if let inputParallelism = dictionary["InputParallelism"] as? [String: Any] { self.inputParallelism = try Kinesisanalytics.InputParallelism(dictionary: inputParallelism) }
        }
    }

    public struct KinesisFirehoseOutputDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis Firehose delivery stream.
        public var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceARN = dictionary["ResourceARN"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
        }
    }

    public struct DeleteApplicationOutputResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct SourceSchema: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Specifies the format of the records on the streaming source.
        public var recordFormat: RecordFormat = RecordFormat()
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public var recordEncoding: String? = nil
        /// A list of RecordColumn objects.
        public var recordColumns: [RecordColumn] = []

        public init() {}

        public init(recordFormat: RecordFormat, recordEncoding: String? = nil, recordColumns: [RecordColumn]) {
            self.recordFormat = recordFormat
            self.recordEncoding = recordEncoding
            self.recordColumns = recordColumns
        }

        public init(dictionary: [String: Any]) throws {
            guard let recordFormat = dictionary["RecordFormat"] as? [String: Any] else { throw InitializableError.missingRequiredParam("RecordFormat") }
            self.recordFormat = try Kinesisanalytics.RecordFormat(dictionary: recordFormat)
            self.recordEncoding = dictionary["RecordEncoding"] as? String
            guard let recordColumns = dictionary["RecordColumns"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("RecordColumns") }
            self.recordColumns = try recordColumns.map({ try RecordColumn(dictionary: $0) })
        }
    }

    public struct KinesisFirehoseInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the input Firehose delivery stream.
        public var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to make sure the role has necessary permissions to access the stream.
        public var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
        }
    }

    public struct InputConfiguration: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Input source ID. You can get this ID by calling the DescribeApplication operation.
        public var id: String = ""
        /// Point at which you want the application to start processing records from the streaming source.
        public var inputStartingPositionConfiguration: InputStartingPositionConfiguration = InputStartingPositionConfiguration()

        public init() {}

        public init(id: String, inputStartingPositionConfiguration: InputStartingPositionConfiguration) {
            self.id = id
            self.inputStartingPositionConfiguration = inputStartingPositionConfiguration
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["Id"] as? String else { throw InitializableError.missingRequiredParam("Id") }
            self.id = id
            guard let inputStartingPositionConfiguration = dictionary["InputStartingPositionConfiguration"] as? [String: Any] else { throw InitializableError.missingRequiredParam("InputStartingPositionConfiguration") }
            self.inputStartingPositionConfiguration = try Kinesisanalytics.InputStartingPositionConfiguration(dictionary: inputStartingPositionConfiguration)
        }
    }

    public struct OutputDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Describes Amazon Kinesis stream configured as the destination where output is written.
        public var kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil
        /// Data format used for writing data to the destination.
        public var destinationSchema: DestinationSchema? = nil
        /// Name of the in-application stream configured as output.
        public var name: String? = nil
        /// A unique identifier for the output configuration.
        public var outputId: String? = nil
        /// Describes the Amazon Kinesis Firehose delivery stream configured as the destination where output is written.
        public var kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil

        public init() {}

        public init(kinesisStreamsOutputDescription: KinesisStreamsOutputDescription? = nil, destinationSchema: DestinationSchema? = nil, name: String? = nil, outputId: String? = nil, kinesisFirehoseOutputDescription: KinesisFirehoseOutputDescription? = nil) {
            self.kinesisStreamsOutputDescription = kinesisStreamsOutputDescription
            self.destinationSchema = destinationSchema
            self.name = name
            self.outputId = outputId
            self.kinesisFirehoseOutputDescription = kinesisFirehoseOutputDescription
        }

        public init(dictionary: [String: Any]) throws {
            if let kinesisStreamsOutputDescription = dictionary["KinesisStreamsOutputDescription"] as? [String: Any] { self.kinesisStreamsOutputDescription = try Kinesisanalytics.KinesisStreamsOutputDescription(dictionary: kinesisStreamsOutputDescription) }
            if let destinationSchema = dictionary["DestinationSchema"] as? [String: Any] { self.destinationSchema = try Kinesisanalytics.DestinationSchema(dictionary: destinationSchema) }
            self.name = dictionary["Name"] as? String
            self.outputId = dictionary["OutputId"] as? String
            if let kinesisFirehoseOutputDescription = dictionary["KinesisFirehoseOutputDescription"] as? [String: Any] { self.kinesisFirehoseOutputDescription = try Kinesisanalytics.KinesisFirehoseOutputDescription(dictionary: kinesisFirehoseOutputDescription) }
        }
    }

    public struct KinesisFirehoseOutput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the destination Amazon Kinesis Firehose delivery stream to write to.
        public var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to write to the destination stream on your behalf. You need to grant the necessary permissions to this role.
        public var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
        }
    }

    public struct KinesisStreamsInputUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public var roleARNUpdate: String? = nil
        /// Amazon Resource Name (ARN) of the input Amazon Kinesis stream to read.
        public var resourceARNUpdate: String? = nil

        public init() {}

        public init(roleARNUpdate: String? = nil, resourceARNUpdate: String? = nil) {
            self.roleARNUpdate = roleARNUpdate
            self.resourceARNUpdate = resourceARNUpdate
        }

        public init(dictionary: [String: Any]) throws {
            self.roleARNUpdate = dictionary["RoleARNUpdate"] as? String
            self.resourceARNUpdate = dictionary["ResourceARNUpdate"] as? String
        }
    }

    public struct DescribeApplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Name of the application.
        public var applicationName: String = ""

        public init() {}

        public init(applicationName: String) {
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct DiscoverInputSchemaResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.
        public var inputSchema: SourceSchema? = nil
        /// An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).
        public var parsedInputRecords: [[String]]? = nil
        /// Raw stream data that was sampled to infer the schema.
        public var rawInputRecords: [String]? = nil

        public init() {}

        public init(inputSchema: SourceSchema? = nil, parsedInputRecords: [[String]]? = nil, rawInputRecords: [String]? = nil) {
            self.inputSchema = inputSchema
            self.parsedInputRecords = parsedInputRecords
            self.rawInputRecords = rawInputRecords
        }

        public init(dictionary: [String: Any]) throws {
            if let inputSchema = dictionary["InputSchema"] as? [String: Any] { self.inputSchema = try Kinesisanalytics.SourceSchema(dictionary: inputSchema) }
            if let parsedInputRecords = dictionary["ParsedInputRecords"] as? [[String]] {
                self.parsedInputRecords = parsedInputRecords
            }
            if let rawInputRecords = dictionary["RawInputRecords"] as? [String] {
                self.rawInputRecords = rawInputRecords
            }
        }
    }

    public struct ApplicationDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Description of the application.
        public var applicationDescription: String? = nil
        /// Status of the application.
        public var applicationStatus: String = ""
        /// Describes the application input configuration. For more information, see Configuring Application Input. 
        public var inputDescriptions: [InputDescription]? = nil
        /// Timestamp when the application was last updated.
        public var lastUpdateTimestamp: Date? = nil
        /// Timestamp when the application version was created.
        public var createTimestamp: Date? = nil
        /// Returns the application code that you provided to perform data analysis on any of the in-application streams in your application.
        public var applicationCode: String? = nil
        /// Name of the application.
        public var applicationName: String = ""
        /// ARN of the application.
        public var applicationARN: String = ""
        /// Provides the current application version.
        public var applicationVersionId: Int64 = 0
        /// Describes the application output configuration. For more information, see Configuring Application Output. 
        public var outputDescriptions: [OutputDescription]? = nil
        /// Describes reference data sources configured for the application. For more information, see Configuring Application Input. 
        public var referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil

        public init() {}

        public init(applicationDescription: String? = nil, applicationStatus: String, inputDescriptions: [InputDescription]? = nil, lastUpdateTimestamp: Date? = nil, createTimestamp: Date? = nil, applicationCode: String? = nil, applicationName: String, applicationARN: String, applicationVersionId: Int64, outputDescriptions: [OutputDescription]? = nil, referenceDataSourceDescriptions: [ReferenceDataSourceDescription]? = nil) {
            self.applicationDescription = applicationDescription
            self.applicationStatus = applicationStatus
            self.inputDescriptions = inputDescriptions
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.createTimestamp = createTimestamp
            self.applicationCode = applicationCode
            self.applicationName = applicationName
            self.applicationARN = applicationARN
            self.applicationVersionId = applicationVersionId
            self.outputDescriptions = outputDescriptions
            self.referenceDataSourceDescriptions = referenceDataSourceDescriptions
        }

        public init(dictionary: [String: Any]) throws {
            self.applicationDescription = dictionary["ApplicationDescription"] as? String
            guard let applicationStatus = dictionary["ApplicationStatus"] as? String else { throw InitializableError.missingRequiredParam("ApplicationStatus") }
            self.applicationStatus = applicationStatus
            if let inputDescriptions = dictionary["InputDescriptions"] as? [[String: Any]] {
                self.inputDescriptions = try inputDescriptions.map({ try InputDescription(dictionary: $0) })
            }
            self.lastUpdateTimestamp = dictionary["LastUpdateTimestamp"] as? Date
            self.createTimestamp = dictionary["CreateTimestamp"] as? Date
            self.applicationCode = dictionary["ApplicationCode"] as? String
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
            guard let applicationARN = dictionary["ApplicationARN"] as? String else { throw InitializableError.missingRequiredParam("ApplicationARN") }
            self.applicationARN = applicationARN
            guard let applicationVersionId = dictionary["ApplicationVersionId"] as? Int64 else { throw InitializableError.missingRequiredParam("ApplicationVersionId") }
            self.applicationVersionId = applicationVersionId
            if let outputDescriptions = dictionary["OutputDescriptions"] as? [[String: Any]] {
                self.outputDescriptions = try outputDescriptions.map({ try OutputDescription(dictionary: $0) })
            }
            if let referenceDataSourceDescriptions = dictionary["ReferenceDataSourceDescriptions"] as? [[String: Any]] {
                self.referenceDataSourceDescriptions = try referenceDataSourceDescriptions.map({ try ReferenceDataSourceDescription(dictionary: $0) })
            }
        }
    }

    public struct InputSchemaUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of RecordColumn objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream. 
        public var recordColumnUpdates: [RecordColumn]? = nil
        /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
        public var recordEncodingUpdate: String? = nil
        /// Specifies the format of the records on the streaming source.
        public var recordFormatUpdate: RecordFormat? = nil

        public init() {}

        public init(recordColumnUpdates: [RecordColumn]? = nil, recordEncodingUpdate: String? = nil, recordFormatUpdate: RecordFormat? = nil) {
            self.recordColumnUpdates = recordColumnUpdates
            self.recordEncodingUpdate = recordEncodingUpdate
            self.recordFormatUpdate = recordFormatUpdate
        }

        public init(dictionary: [String: Any]) throws {
            if let recordColumnUpdates = dictionary["RecordColumnUpdates"] as? [[String: Any]] {
                self.recordColumnUpdates = try recordColumnUpdates.map({ try RecordColumn(dictionary: $0) })
            }
            self.recordEncodingUpdate = dictionary["RecordEncodingUpdate"] as? String
            if let recordFormatUpdate = dictionary["RecordFormatUpdate"] as? [String: Any] { self.recordFormatUpdate = try Kinesisanalytics.RecordFormat(dictionary: recordFormatUpdate) }
        }
    }

    public struct InputParallelism: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Number of in-application streams to create. For more information, see Limits. 
        public var count: Int32? = nil

        public init() {}

        public init(count: Int32? = nil) {
            self.count = count
        }

        public init(dictionary: [String: Any]) throws {
            self.count = dictionary["Count"] as? Int32
        }
    }

    public struct KinesisStreamsInput: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the input Amazon Kinesis stream to read.
        public var resourceARN: String = ""
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream on your behalf. You need to grant the necessary permissions to this role.
        public var roleARN: String = ""

        public init() {}

        public init(resourceARN: String, roleARN: String) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceARN = dictionary["ResourceARN"] as? String else { throw InitializableError.missingRequiredParam("ResourceARN") }
            self.resourceARN = resourceARN
            guard let roleARN = dictionary["RoleARN"] as? String else { throw InitializableError.missingRequiredParam("RoleARN") }
            self.roleARN = roleARN
        }
    }

    public struct DeleteApplicationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ReferenceDataSourceDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Provides the S3 bucket name, the object key name that contains the reference data. It also provides the Amazon Resource Name (ARN) of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object and populate the in-application reference table.
        public var s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription = S3ReferenceDataSourceDescription()
        /// ID of the reference data source. This is the ID that Amazon Kinesis Analytics assigns when you add the reference data source to your application using the AddApplicationReferenceDataSource operation.
        public var referenceId: String = ""
        /// The in-application table name created by the specific reference data source configuration.
        public var tableName: String = ""
        public var referenceSchema: SourceSchema? = nil

        public init() {}

        public init(s3ReferenceDataSourceDescription: S3ReferenceDataSourceDescription, referenceId: String, tableName: String, referenceSchema: SourceSchema? = nil) {
            self.s3ReferenceDataSourceDescription = s3ReferenceDataSourceDescription
            self.referenceId = referenceId
            self.tableName = tableName
            self.referenceSchema = referenceSchema
        }

        public init(dictionary: [String: Any]) throws {
            guard let s3ReferenceDataSourceDescription = dictionary["S3ReferenceDataSourceDescription"] as? [String: Any] else { throw InitializableError.missingRequiredParam("S3ReferenceDataSourceDescription") }
            self.s3ReferenceDataSourceDescription = try Kinesisanalytics.S3ReferenceDataSourceDescription(dictionary: s3ReferenceDataSourceDescription)
            guard let referenceId = dictionary["ReferenceId"] as? String else { throw InitializableError.missingRequiredParam("ReferenceId") }
            self.referenceId = referenceId
            guard let tableName = dictionary["TableName"] as? String else { throw InitializableError.missingRequiredParam("TableName") }
            self.tableName = tableName
            if let referenceSchema = dictionary["ReferenceSchema"] as? [String: Any] { self.referenceSchema = try Kinesisanalytics.SourceSchema(dictionary: referenceSchema) }
        }
    }

    public struct DeleteApplicationReferenceDataSourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Version of the application. You can use the DescribeApplication operation to get the current application version. If the version specified is not the current version, the ConcurrentModificationException is returned.
        public var currentApplicationVersionId: Int64 = 0
        /// ID of the reference data source. When you add a reference data source to your application using the AddApplicationReferenceDataSource, Amazon Kinesis Analytics assigns an ID. You can use the DescribeApplication operation to get the reference ID. 
        public var referenceId: String = ""
        /// Name of an existing application.
        public var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, referenceId: String, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.referenceId = referenceId
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let currentApplicationVersionId = dictionary["CurrentApplicationVersionId"] as? Int64 else { throw InitializableError.missingRequiredParam("CurrentApplicationVersionId") }
            self.currentApplicationVersionId = currentApplicationVersionId
            guard let referenceId = dictionary["ReferenceId"] as? String else { throw InitializableError.missingRequiredParam("ReferenceId") }
            self.referenceId = referenceId
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct ReferenceDataSourceUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Describes the S3 bucket name, object key name, and IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf and populate the in-application reference table.
        public var s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil
        /// In-application table name that is created by this update.
        public var tableNameUpdate: String? = nil
        public var referenceSchemaUpdate: SourceSchema? = nil
        /// ID of the reference data source being updated. You can use the DescribeApplication operation to get this value.
        public var referenceId: String = ""

        public init() {}

        public init(s3ReferenceDataSourceUpdate: S3ReferenceDataSourceUpdate? = nil, tableNameUpdate: String? = nil, referenceSchemaUpdate: SourceSchema? = nil, referenceId: String) {
            self.s3ReferenceDataSourceUpdate = s3ReferenceDataSourceUpdate
            self.tableNameUpdate = tableNameUpdate
            self.referenceSchemaUpdate = referenceSchemaUpdate
            self.referenceId = referenceId
        }

        public init(dictionary: [String: Any]) throws {
            if let s3ReferenceDataSourceUpdate = dictionary["S3ReferenceDataSourceUpdate"] as? [String: Any] { self.s3ReferenceDataSourceUpdate = try Kinesisanalytics.S3ReferenceDataSourceUpdate(dictionary: s3ReferenceDataSourceUpdate) }
            self.tableNameUpdate = dictionary["TableNameUpdate"] as? String
            if let referenceSchemaUpdate = dictionary["ReferenceSchemaUpdate"] as? [String: Any] { self.referenceSchemaUpdate = try Kinesisanalytics.SourceSchema(dictionary: referenceSchemaUpdate) }
            guard let referenceId = dictionary["ReferenceId"] as? String else { throw InitializableError.missingRequiredParam("ReferenceId") }
            self.referenceId = referenceId
        }
    }

    public struct Output: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Identifies an Amazon Kinesis Firehose delivery stream as the destination.
        public var kinesisFirehoseOutput: KinesisFirehoseOutput? = nil
        public var destinationSchema: DestinationSchema = DestinationSchema()
        /// Name of the in-application stream.
        public var name: String = ""
        /// Identifies an Amazon Kinesis stream as the destination.
        public var kinesisStreamsOutput: KinesisStreamsOutput? = nil

        public init() {}

        public init(kinesisFirehoseOutput: KinesisFirehoseOutput? = nil, destinationSchema: DestinationSchema, name: String, kinesisStreamsOutput: KinesisStreamsOutput? = nil) {
            self.kinesisFirehoseOutput = kinesisFirehoseOutput
            self.destinationSchema = destinationSchema
            self.name = name
            self.kinesisStreamsOutput = kinesisStreamsOutput
        }

        public init(dictionary: [String: Any]) throws {
            if let kinesisFirehoseOutput = dictionary["KinesisFirehoseOutput"] as? [String: Any] { self.kinesisFirehoseOutput = try Kinesisanalytics.KinesisFirehoseOutput(dictionary: kinesisFirehoseOutput) }
            guard let destinationSchema = dictionary["DestinationSchema"] as? [String: Any] else { throw InitializableError.missingRequiredParam("DestinationSchema") }
            self.destinationSchema = try Kinesisanalytics.DestinationSchema(dictionary: destinationSchema)
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            if let kinesisStreamsOutput = dictionary["KinesisStreamsOutput"] as? [String: Any] { self.kinesisStreamsOutput = try Kinesisanalytics.KinesisStreamsOutput(dictionary: kinesisStreamsOutput) }
        }
    }

    public struct StartApplicationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct KinesisStreamsOutputDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Amazon Resource Name (ARN) of the Amazon Kinesis stream.
        public var resourceARN: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to access the stream.
        public var roleARN: String? = nil

        public init() {}

        public init(resourceARN: String? = nil, roleARN: String? = nil) {
            self.resourceARN = resourceARN
            self.roleARN = roleARN
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceARN = dictionary["ResourceARN"] as? String
            self.roleARN = dictionary["RoleARN"] as? String
        }
    }

    public struct S3ReferenceDataSourceDescription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ARN of the IAM role that Amazon Kinesis Analytics can assume to read the Amazon S3 object on your behalf to populate the in-application reference table.
        public var referenceRoleARN: String = ""
        /// Amazon Resource Name (ARN) of the S3 bucket.
        public var bucketARN: String = ""
        /// Amazon S3 object key name.
        public var fileKey: String = ""

        public init() {}

        public init(referenceRoleARN: String, bucketARN: String, fileKey: String) {
            self.referenceRoleARN = referenceRoleARN
            self.bucketARN = bucketARN
            self.fileKey = fileKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let referenceRoleARN = dictionary["ReferenceRoleARN"] as? String else { throw InitializableError.missingRequiredParam("ReferenceRoleARN") }
            self.referenceRoleARN = referenceRoleARN
            guard let bucketARN = dictionary["BucketARN"] as? String else { throw InitializableError.missingRequiredParam("BucketARN") }
            self.bucketARN = bucketARN
            guard let fileKey = dictionary["FileKey"] as? String else { throw InitializableError.missingRequiredParam("FileKey") }
            self.fileKey = fileKey
        }
    }

    public struct ApplicationUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Describes application output configuration updates.
        public var outputUpdates: [OutputUpdate]? = nil
        /// Describes application reference data source updates.
        public var referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil
        /// Describes application code updates.
        public var applicationCodeUpdate: String? = nil
        /// Describes application input configuration updates.
        public var inputUpdates: [InputUpdate]? = nil

        public init() {}

        public init(outputUpdates: [OutputUpdate]? = nil, referenceDataSourceUpdates: [ReferenceDataSourceUpdate]? = nil, applicationCodeUpdate: String? = nil, inputUpdates: [InputUpdate]? = nil) {
            self.outputUpdates = outputUpdates
            self.referenceDataSourceUpdates = referenceDataSourceUpdates
            self.applicationCodeUpdate = applicationCodeUpdate
            self.inputUpdates = inputUpdates
        }

        public init(dictionary: [String: Any]) throws {
            if let outputUpdates = dictionary["OutputUpdates"] as? [[String: Any]] {
                self.outputUpdates = try outputUpdates.map({ try OutputUpdate(dictionary: $0) })
            }
            if let referenceDataSourceUpdates = dictionary["ReferenceDataSourceUpdates"] as? [[String: Any]] {
                self.referenceDataSourceUpdates = try referenceDataSourceUpdates.map({ try ReferenceDataSourceUpdate(dictionary: $0) })
            }
            self.applicationCodeUpdate = dictionary["ApplicationCodeUpdate"] as? String
            if let inputUpdates = dictionary["InputUpdates"] as? [[String: Any]] {
                self.inputUpdates = try inputUpdates.map({ try InputUpdate(dictionary: $0) })
            }
        }
    }

    public struct MappingParameters: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Provides additional mapping information when the record format uses delimiters (for example, CSV).
        public var cSVMappingParameters: CSVMappingParameters? = nil
        /// Provides additional mapping information when JSON is the record format on the streaming source.
        public var jSONMappingParameters: JSONMappingParameters? = nil

        public init() {}

        public init(cSVMappingParameters: CSVMappingParameters? = nil, jSONMappingParameters: JSONMappingParameters? = nil) {
            self.cSVMappingParameters = cSVMappingParameters
            self.jSONMappingParameters = jSONMappingParameters
        }

        public init(dictionary: [String: Any]) throws {
            if let cSVMappingParameters = dictionary["CSVMappingParameters"] as? [String: Any] { self.cSVMappingParameters = try Kinesisanalytics.CSVMappingParameters(dictionary: cSVMappingParameters) }
            if let jSONMappingParameters = dictionary["JSONMappingParameters"] as? [String: Any] { self.jSONMappingParameters = try Kinesisanalytics.JSONMappingParameters(dictionary: jSONMappingParameters) }
        }
    }

    public struct OutputUpdate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// If you want to specify a different in-application stream for this output configuration, use this field to specify the new in-application stream name.
        public var nameUpdate: String? = nil
        /// Describes an Amazon Kinesis stream as the destination for the output.
        public var kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil
        /// Describes a Amazon Kinesis Firehose delivery stream as the destination for the output.
        public var kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil
        public var destinationSchemaUpdate: DestinationSchema? = nil
        /// Identifies the specific output configuration that you want to update.
        public var outputId: String = ""

        public init() {}

        public init(nameUpdate: String? = nil, kinesisStreamsOutputUpdate: KinesisStreamsOutputUpdate? = nil, kinesisFirehoseOutputUpdate: KinesisFirehoseOutputUpdate? = nil, destinationSchemaUpdate: DestinationSchema? = nil, outputId: String) {
            self.nameUpdate = nameUpdate
            self.kinesisStreamsOutputUpdate = kinesisStreamsOutputUpdate
            self.kinesisFirehoseOutputUpdate = kinesisFirehoseOutputUpdate
            self.destinationSchemaUpdate = destinationSchemaUpdate
            self.outputId = outputId
        }

        public init(dictionary: [String: Any]) throws {
            self.nameUpdate = dictionary["NameUpdate"] as? String
            if let kinesisStreamsOutputUpdate = dictionary["KinesisStreamsOutputUpdate"] as? [String: Any] { self.kinesisStreamsOutputUpdate = try Kinesisanalytics.KinesisStreamsOutputUpdate(dictionary: kinesisStreamsOutputUpdate) }
            if let kinesisFirehoseOutputUpdate = dictionary["KinesisFirehoseOutputUpdate"] as? [String: Any] { self.kinesisFirehoseOutputUpdate = try Kinesisanalytics.KinesisFirehoseOutputUpdate(dictionary: kinesisFirehoseOutputUpdate) }
            if let destinationSchemaUpdate = dictionary["DestinationSchemaUpdate"] as? [String: Any] { self.destinationSchemaUpdate = try Kinesisanalytics.DestinationSchema(dictionary: destinationSchemaUpdate) }
            guard let outputId = dictionary["OutputId"] as? String else { throw InitializableError.missingRequiredParam("OutputId") }
            self.outputId = outputId
        }
    }

    public struct ListApplicationsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Maximum number of applications to list.
        public var limit: Int32? = nil
        /// Name of the application to start the list with. When using pagination to retrieve the list, you don't need to specify this parameter in the first request. However, in subsequent requests, you add the last application name from the previous response to get the next page of applications.
        public var exclusiveStartApplicationName: String? = nil

        public init() {}

        public init(limit: Int32? = nil, exclusiveStartApplicationName: String? = nil) {
            self.limit = limit
            self.exclusiveStartApplicationName = exclusiveStartApplicationName
        }

        public init(dictionary: [String: Any]) throws {
            self.limit = dictionary["Limit"] as? Int32
            self.exclusiveStartApplicationName = dictionary["ExclusiveStartApplicationName"] as? String
        }
    }

    public struct RecordColumn: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Reference to the data element in the streaming input of the reference data source.
        public var mapping: String? = nil
        /// Name of the column created in the in-application input stream or reference table.
        public var name: String = ""
        /// Type of column created in the in-application input stream or reference table.
        public var sqlType: String = ""

        public init() {}

        public init(mapping: String? = nil, name: String, sqlType: String) {
            self.mapping = mapping
            self.name = name
            self.sqlType = sqlType
        }

        public init(dictionary: [String: Any]) throws {
            self.mapping = dictionary["Mapping"] as? String
            guard let name = dictionary["Name"] as? String else { throw InitializableError.missingRequiredParam("Name") }
            self.name = name
            guard let sqlType = dictionary["SqlType"] as? String else { throw InitializableError.missingRequiredParam("SqlType") }
            self.sqlType = sqlType
        }
    }

    public struct DescribeApplicationResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Provides a description of the application, such as the application Amazon Resource Name (ARN), status, latest version, and input and output configuration details.
        public var applicationDetail: ApplicationDetail = ApplicationDetail()

        public init() {}

        public init(applicationDetail: ApplicationDetail) {
            self.applicationDetail = applicationDetail
        }

        public init(dictionary: [String: Any]) throws {
            guard let applicationDetail = dictionary["ApplicationDetail"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ApplicationDetail") }
            self.applicationDetail = try Kinesisanalytics.ApplicationDetail(dictionary: applicationDetail)
        }
    }

    public struct ReferenceDataSource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var s3ReferenceDataSource: S3ReferenceDataSource? = nil
        public var referenceSchema: SourceSchema = SourceSchema()
        /// Name of the in-application table to create.
        public var tableName: String = ""

        public init() {}

        public init(s3ReferenceDataSource: S3ReferenceDataSource? = nil, referenceSchema: SourceSchema, tableName: String) {
            self.s3ReferenceDataSource = s3ReferenceDataSource
            self.referenceSchema = referenceSchema
            self.tableName = tableName
        }

        public init(dictionary: [String: Any]) throws {
            if let s3ReferenceDataSource = dictionary["S3ReferenceDataSource"] as? [String: Any] { self.s3ReferenceDataSource = try Kinesisanalytics.S3ReferenceDataSource(dictionary: s3ReferenceDataSource) }
            guard let referenceSchema = dictionary["ReferenceSchema"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ReferenceSchema") }
            self.referenceSchema = try Kinesisanalytics.SourceSchema(dictionary: referenceSchema)
            guard let tableName = dictionary["TableName"] as? String else { throw InitializableError.missingRequiredParam("TableName") }
            self.tableName = tableName
        }
    }

    public struct UpdateApplicationRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The current application version ID. You can use the DescribeApplication operation to get this value.
        public var currentApplicationVersionId: Int64 = 0
        /// Describes application updates.
        public var applicationUpdate: ApplicationUpdate = ApplicationUpdate()
        /// Name of the Kinesis Analytics application to update.
        public var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, applicationUpdate: ApplicationUpdate, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.applicationUpdate = applicationUpdate
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let currentApplicationVersionId = dictionary["CurrentApplicationVersionId"] as? Int64 else { throw InitializableError.missingRequiredParam("CurrentApplicationVersionId") }
            self.currentApplicationVersionId = currentApplicationVersionId
            guard let applicationUpdate = dictionary["ApplicationUpdate"] as? [String: Any] else { throw InitializableError.missingRequiredParam("ApplicationUpdate") }
            self.applicationUpdate = try Kinesisanalytics.ApplicationUpdate(dictionary: applicationUpdate)
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

    public struct DeleteApplicationReferenceDataSourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init() {}

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct AddApplicationInputRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Current version of your Amazon Kinesis Analytics application. You can use the DescribeApplication operation to find the current application version.
        public var currentApplicationVersionId: Int64 = 0
        public var input: Input = Input()
        /// Name of your existing Amazon Kinesis Analytics application to which you want to add the streaming source.
        public var applicationName: String = ""

        public init() {}

        public init(currentApplicationVersionId: Int64, input: Input, applicationName: String) {
            self.currentApplicationVersionId = currentApplicationVersionId
            self.input = input
            self.applicationName = applicationName
        }

        public init(dictionary: [String: Any]) throws {
            guard let currentApplicationVersionId = dictionary["CurrentApplicationVersionId"] as? Int64 else { throw InitializableError.missingRequiredParam("CurrentApplicationVersionId") }
            self.currentApplicationVersionId = currentApplicationVersionId
            guard let input = dictionary["Input"] as? [String: Any] else { throw InitializableError.missingRequiredParam("Input") }
            self.input = try Kinesisanalytics.Input(dictionary: input)
            guard let applicationName = dictionary["ApplicationName"] as? String else { throw InitializableError.missingRequiredParam("ApplicationName") }
            self.applicationName = applicationName
        }
    }

}