// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudWatch {

    public enum StateValue: String, CustomStringConvertible, Codable {
        case ok = "OK"
        case alarm = "ALARM"
        case insufficientData = "INSUFFICIENT_DATA"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAlarmHistoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AlarmHistoryItems", required: false, type: .list)
        ]
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?
        /// The alarm histories, in JSON format.
        public let alarmHistoryItems: [AlarmHistoryItem]?

        public init(nextToken: String? = nil, alarmHistoryItems: [AlarmHistoryItem]? = nil) {
            self.nextToken = nextToken
            self.alarmHistoryItems = alarmHistoryItems
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case alarmHistoryItems = "AlarmHistoryItems"
        }
    }

    public enum Statistic: String, CustomStringConvertible, Codable {
        case samplecount = "SampleCount"
        case average = "Average"
        case sum = "Sum"
        case minimum = "Minimum"
        case maximum = "Maximum"
        public var description: String { return self.rawValue }
    }

    public enum HistoryItemType: String, CustomStringConvertible, Codable {
        case configurationupdate = "ConfigurationUpdate"
        case stateupdate = "StateUpdate"
        case action = "Action"
        public var description: String { return self.rawValue }
    }

    public struct ListMetricsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .list)
        ]
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?
        /// The metrics.
        public let metrics: [Metric]?

        public init(nextToken: String? = nil, metrics: [Metric]? = nil) {
            self.nextToken = nextToken
            self.metrics = metrics
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case metrics = "Metrics"
        }
    }

    public struct SetAlarmStateInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmName", required: true, type: .string), 
            AWSShapeMember(label: "StateValue", required: true, type: .enum), 
            AWSShapeMember(label: "StateReason", required: true, type: .string), 
            AWSShapeMember(label: "StateReasonData", required: false, type: .string)
        ]
        /// The name for the alarm. This name must be unique within the AWS account. The maximum length is 255 characters.
        public let alarmName: String
        /// The value of the state.
        public let stateValue: StateValue
        /// The reason that this alarm is set to this specific state, in text format.
        public let stateReason: String
        /// The reason that this alarm is set to this specific state, in JSON format.
        public let stateReasonData: String?

        public init(alarmName: String, stateValue: StateValue, stateReason: String, stateReasonData: String? = nil) {
            self.alarmName = alarmName
            self.stateValue = stateValue
            self.stateReason = stateReason
            self.stateReasonData = stateReasonData
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "AlarmName"
            case stateValue = "StateValue"
            case stateReason = "StateReason"
            case stateReasonData = "StateReasonData"
        }
    }

    public struct MetricStat: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metric", required: true, type: .structure), 
            AWSShapeMember(label: "Stat", required: true, type: .string), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "Unit", required: false, type: .enum)
        ]
        /// The metric to return, including the metric name, namespace, and dimensions.
        public let metric: Metric
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic.
        public let stat: String
        /// The period to use when retrieving the metric.
        public let period: Int32
        /// The unit to use for the returned data points.
        public let unit: StandardUnit?

        public init(metric: Metric, stat: String, period: Int32, unit: StandardUnit? = nil) {
            self.metric = metric
            self.stat = stat
            self.period = period
            self.unit = unit
        }

        private enum CodingKeys: String, CodingKey {
            case metric = "Metric"
            case stat = "Stat"
            case period = "Period"
            case unit = "Unit"
        }
    }

    public struct DashboardValidationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "DataPath", required: false, type: .string)
        ]
        /// A message describing the error or warning.
        public let message: String?
        /// The data path related to the message.
        public let dataPath: String?

        public init(message: String? = nil, dataPath: String? = nil) {
            self.message = message
            self.dataPath = dataPath
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case dataPath = "DataPath"
        }
    }

    public struct MetricDatum: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Value", required: false, type: .double), 
            AWSShapeMember(label: "StatisticValues", required: false, type: .structure), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "StorageResolution", required: false, type: .integer)
        ]
        /// The dimensions associated with the metric.
        public let dimensions: [Dimension]?
        /// The value for the metric. Although the parameter accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2). In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.
        public let value: Double?
        /// The statistical values for the metric.
        public let statisticValues: StatisticSet?
        /// The unit of the metric.
        public let unit: StandardUnit?
        /// The time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let timestamp: TimeStamp?
        /// The name of the metric.
        public let metricName: String
        /// Valid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with sub-minute resolution down to one second. Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available only for custom metrics. For more information about high-resolution metrics, see High-Resolution Metrics in the Amazon CloudWatch User Guide.  This field is optional, if you do not specify it the default of 60 is used.
        public let storageResolution: Int32?

        public init(dimensions: [Dimension]? = nil, value: Double? = nil, statisticValues: StatisticSet? = nil, unit: StandardUnit? = nil, timestamp: TimeStamp? = nil, metricName: String, storageResolution: Int32? = nil) {
            self.dimensions = dimensions
            self.value = value
            self.statisticValues = statisticValues
            self.unit = unit
            self.timestamp = timestamp
            self.metricName = metricName
            self.storageResolution = storageResolution
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case value = "Value"
            case statisticValues = "StatisticValues"
            case unit = "Unit"
            case timestamp = "Timestamp"
            case metricName = "MetricName"
            case storageResolution = "StorageResolution"
        }
    }

    public struct MessageData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The error code or status code associated with the message.
        public let code: String?
        /// The message text.
        public let value: String?

        public init(code: String? = nil, value: String? = nil) {
            self.code = code
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case value = "Value"
        }
    }

    public struct GetMetricStatisticsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Datapoints", required: false, type: .list), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]
        /// The data points for the specified metric.
        public let datapoints: [Datapoint]?
        /// A label for the specified metric.
        public let label: String?

        public init(datapoints: [Datapoint]? = nil, label: String? = nil) {
            self.datapoints = datapoints
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case datapoints = "Datapoints"
            case label = "Label"
        }
    }

    public struct GetMetricDataOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MetricDataResults", required: false, type: .list)
        ]
        /// A token that marks the next batch of returned results.
        public let nextToken: String?
        /// The metrics that are returned, including the metric name, namespace, and dimensions.
        public let metricDataResults: [MetricDataResult]?

        public init(nextToken: String? = nil, metricDataResults: [MetricDataResult]? = nil) {
            self.nextToken = nextToken
            self.metricDataResults = metricDataResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case metricDataResults = "MetricDataResults"
        }
    }

    public struct GetMetricStatisticsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Statistics", required: false, type: .list), 
            AWSShapeMember(label: "ExtendedStatistics", required: false, type: .list), 
            AWSShapeMember(label: "Namespace", required: true, type: .string)
        ]
        /// The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can't retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see Dimension Combinations in the Amazon CloudWatch User Guide. For more information about specifying dimensions, see Publishing Metrics in the Amazon CloudWatch User Guide.
        public let dimensions: [Dimension]?
        /// The unit for a given metric. Metrics may be reported in multiple units. Not supplying a unit results in all units being returned. If you specify only a unit that the metric does not report, the results of the call are null.
        public let unit: StandardUnit?
        /// The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request. The value specified is inclusive; results include data points with the specified time stamp. The time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z). CloudWatch rounds the specified time stamp as follows:   Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.   Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.   Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.   If you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. 
        public let startTime: TimeStamp
        /// The time stamp that determines the last data point to return. The value specified is exclusive; results include data points up to the specified time stamp. The time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).
        public let endTime: TimeStamp
        /// The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second. If the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:   Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).   Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).   Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).  
        public let period: Int32
        /// The name of the metric, with or without spaces.
        public let metricName: String
        /// The metric statistics, other than percentile. For percentile statistics, use ExtendedStatistics. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both.
        public let statistics: [Statistic]?
        /// The percentile statistics. Specify values between p0.0 and p100. When calling GetMetricStatistics, you must specify either Statistics or ExtendedStatistics, but not both.
        public let extendedStatistics: [String]?
        /// The namespace of the metric, with or without spaces.
        public let namespace: String

        public init(dimensions: [Dimension]? = nil, unit: StandardUnit? = nil, startTime: TimeStamp, endTime: TimeStamp, period: Int32, metricName: String, statistics: [Statistic]? = nil, extendedStatistics: [String]? = nil, namespace: String) {
            self.dimensions = dimensions
            self.unit = unit
            self.startTime = startTime
            self.endTime = endTime
            self.period = period
            self.metricName = metricName
            self.statistics = statistics
            self.extendedStatistics = extendedStatistics
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case unit = "Unit"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case period = "Period"
            case metricName = "MetricName"
            case statistics = "Statistics"
            case extendedStatistics = "ExtendedStatistics"
            case namespace = "Namespace"
        }
    }

    public struct EnableAlarmActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmNames", required: true, type: .list)
        ]
        /// The names of the alarms.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        private enum CodingKeys: String, CodingKey {
            case alarmNames = "AlarmNames"
        }
    }

    public struct DescribeAlarmsForMetricInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "ExtendedStatistic", required: false, type: .string), 
            AWSShapeMember(label: "Period", required: false, type: .integer), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum)
        ]
        /// The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed.
        public let dimensions: [Dimension]?
        /// The unit for the metric.
        public let unit: StandardUnit?
        /// The percentile statistic for the metric. Specify a value between p0.0 and p100.
        public let extendedStatistic: String?
        /// The period, in seconds, over which the statistic is applied.
        public let period: Int32?
        /// The name of the metric.
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The statistic for the metric, other than percentiles. For percentile statistics, use ExtendedStatistics.
        public let statistic: Statistic?

        public init(dimensions: [Dimension]? = nil, unit: StandardUnit? = nil, extendedStatistic: String? = nil, period: Int32? = nil, metricName: String, namespace: String, statistic: Statistic? = nil) {
            self.dimensions = dimensions
            self.unit = unit
            self.extendedStatistic = extendedStatistic
            self.period = period
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case unit = "Unit"
            case extendedStatistic = "ExtendedStatistic"
            case period = "Period"
            case metricName = "MetricName"
            case namespace = "Namespace"
            case statistic = "Statistic"
        }
    }

    public struct DescribeAlarmsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "AlarmNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "ActionPrefix", required: false, type: .string), 
            AWSShapeMember(label: "AlarmNames", required: false, type: .list), 
            AWSShapeMember(label: "StateValue", required: false, type: .enum)
        ]
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// The maximum number of alarm descriptions to retrieve.
        public let maxRecords: Int32?
        /// The alarm name prefix. If this parameter is specified, you cannot specify AlarmNames.
        public let alarmNamePrefix: String?
        /// The action name prefix.
        public let actionPrefix: String?
        /// The names of the alarms.
        public let alarmNames: [String]?
        /// The state value to be used in matching alarms.
        public let stateValue: StateValue?

        public init(nextToken: String? = nil, maxRecords: Int32? = nil, alarmNamePrefix: String? = nil, actionPrefix: String? = nil, alarmNames: [String]? = nil, stateValue: StateValue? = nil) {
            self.nextToken = nextToken
            self.maxRecords = maxRecords
            self.alarmNamePrefix = alarmNamePrefix
            self.actionPrefix = actionPrefix
            self.alarmNames = alarmNames
            self.stateValue = stateValue
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxRecords = "MaxRecords"
            case alarmNamePrefix = "AlarmNamePrefix"
            case actionPrefix = "ActionPrefix"
            case alarmNames = "AlarmNames"
            case stateValue = "StateValue"
        }
    }

    public struct ListMetricsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "MetricName", required: false, type: .string)
        ]
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// The dimensions to filter against.
        public let dimensions: [DimensionFilter]?
        /// The namespace to filter against.
        public let namespace: String?
        /// The name of the metric to filter against.
        public let metricName: String?

        public init(nextToken: String? = nil, dimensions: [DimensionFilter]? = nil, namespace: String? = nil, metricName: String? = nil) {
            self.nextToken = nextToken
            self.dimensions = dimensions
            self.namespace = namespace
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case dimensions = "Dimensions"
            case namespace = "Namespace"
            case metricName = "MetricName"
        }
    }

    public struct DimensionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The dimension name to be matched.
        public let name: String
        /// The value of the dimension to be matched.
        public let value: String?

        public init(name: String, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct ListDashboardsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DashboardEntries", required: false, type: .list)
        ]
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?
        /// The list of matching dashboards.
        public let dashboardEntries: [DashboardEntry]?

        public init(nextToken: String? = nil, dashboardEntries: [DashboardEntry]? = nil) {
            self.nextToken = nextToken
            self.dashboardEntries = dashboardEntries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case dashboardEntries = "DashboardEntries"
        }
    }

    public struct GetMetricDataInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxDatapoints", required: false, type: .integer), 
            AWSShapeMember(label: "MetricDataQueries", required: true, type: .list), 
            AWSShapeMember(label: "EndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScanBy", required: false, type: .enum), 
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp)
        ]
        /// The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.
        public let maxDatapoints: Int32?
        /// The metric queries to be returned. A single GetMetricData call can include as many as 100 MetricDataQuery structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data. 
        public let metricDataQueries: [MetricDataQuery]
        /// The time stamp indicating the latest data to be returned.
        public let endTime: TimeStamp
        /// Include this value, if it was returned by the previous call, to get the next set of data points.
        public let nextToken: String?
        /// The order in which data points should be returned. TimestampDescending returns the newest data first and paginates when the MaxDatapoints limit is reached. TimestampAscending returns the oldest data first and paginates when the MaxDatapoints limit is reached.
        public let scanBy: ScanBy?
        /// The time stamp indicating the earliest data to be returned.
        public let startTime: TimeStamp

        public init(maxDatapoints: Int32? = nil, metricDataQueries: [MetricDataQuery], endTime: TimeStamp, nextToken: String? = nil, scanBy: ScanBy? = nil, startTime: TimeStamp) {
            self.maxDatapoints = maxDatapoints
            self.metricDataQueries = metricDataQueries
            self.endTime = endTime
            self.nextToken = nextToken
            self.scanBy = scanBy
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case maxDatapoints = "MaxDatapoints"
            case metricDataQueries = "MetricDataQueries"
            case endTime = "EndTime"
            case nextToken = "NextToken"
            case scanBy = "ScanBy"
            case startTime = "StartTime"
        }
    }

    public struct PutDashboardOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardValidationMessages", required: false, type: .list)
        ]
        /// If the input for PutDashboard was correct and the dashboard was successfully created or modified, this result is empty. If this result includes only warning messages, then the input was valid enough for the dashboard to be created or modified, but some elements of the dashboard may not render. If this result includes error messages, the input was not valid and the operation failed.
        public let dashboardValidationMessages: [DashboardValidationMessage]?

        public init(dashboardValidationMessages: [DashboardValidationMessage]? = nil) {
            self.dashboardValidationMessages = dashboardValidationMessages
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardValidationMessages = "DashboardValidationMessages"
        }
    }

    public struct Dimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The name of the dimension.
        public let name: String
        /// The value representing the dimension measurement.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct DeleteDashboardsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardNames", required: true, type: .list)
        ]
        /// The dashboards to be deleted. This parameter is required.
        public let dashboardNames: [String]

        public init(dashboardNames: [String]) {
            self.dashboardNames = dashboardNames
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardNames = "DashboardNames"
        }
    }

    public struct DeleteAlarmsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmNames", required: true, type: .list)
        ]
        /// The alarms to be deleted.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        private enum CodingKeys: String, CodingKey {
            case alarmNames = "AlarmNames"
        }
    }

    public struct PutMetricDataInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricData", required: true, type: .list), 
            AWSShapeMember(label: "Namespace", required: true, type: .string)
        ]
        /// The data for the metric.
        public let metricData: [MetricDatum]
        /// The namespace for the metric data. You cannot specify a namespace that begins with "AWS/". Namespaces that begin with "AWS/" are reserved for use by Amazon Web Services products.
        public let namespace: String

        public init(metricData: [MetricDatum], namespace: String) {
            self.metricData = metricData
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "MetricData"
            case namespace = "Namespace"
        }
    }

    public struct DisableAlarmActionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmNames", required: true, type: .list)
        ]
        /// The names of the alarms.
        public let alarmNames: [String]

        public init(alarmNames: [String]) {
            self.alarmNames = alarmNames
        }

        private enum CodingKeys: String, CodingKey {
            case alarmNames = "AlarmNames"
        }
    }

    public struct ListDashboardsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DashboardNamePrefix", required: false, type: .string)
        ]
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_". 
        public let dashboardNamePrefix: String?

        public init(nextToken: String? = nil, dashboardNamePrefix: String? = nil) {
            self.nextToken = nextToken
            self.dashboardNamePrefix = dashboardNamePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case dashboardNamePrefix = "DashboardNamePrefix"
        }
    }

    public struct StatisticSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Maximum", required: true, type: .double), 
            AWSShapeMember(label: "SampleCount", required: true, type: .double), 
            AWSShapeMember(label: "Minimum", required: true, type: .double), 
            AWSShapeMember(label: "Sum", required: true, type: .double)
        ]
        /// The maximum value of the sample set.
        public let maximum: Double
        /// The number of samples used for the statistic set.
        public let sampleCount: Double
        /// The minimum value of the sample set.
        public let minimum: Double
        /// The sum of values for the sample set.
        public let sum: Double

        public init(maximum: Double, sampleCount: Double, minimum: Double, sum: Double) {
            self.maximum = maximum
            self.sampleCount = sampleCount
            self.minimum = minimum
            self.sum = sum
        }

        private enum CodingKeys: String, CodingKey {
            case maximum = "Maximum"
            case sampleCount = "SampleCount"
            case minimum = "Minimum"
            case sum = "Sum"
        }
    }

    public enum StandardUnit: String, CustomStringConvertible, Codable {
        case seconds = "Seconds"
        case microseconds = "Microseconds"
        case milliseconds = "Milliseconds"
        case bytes = "Bytes"
        case kilobytes = "Kilobytes"
        case megabytes = "Megabytes"
        case gigabytes = "Gigabytes"
        case terabytes = "Terabytes"
        case bits = "Bits"
        case kilobits = "Kilobits"
        case megabits = "Megabits"
        case gigabits = "Gigabits"
        case terabits = "Terabits"
        case percent = "Percent"
        case count = "Count"
        case bytesSecond = "Bytes/Second"
        case kilobytesSecond = "Kilobytes/Second"
        case megabytesSecond = "Megabytes/Second"
        case gigabytesSecond = "Gigabytes/Second"
        case terabytesSecond = "Terabytes/Second"
        case bitsSecond = "Bits/Second"
        case kilobitsSecond = "Kilobits/Second"
        case megabitsSecond = "Megabits/Second"
        case gigabitsSecond = "Gigabits/Second"
        case terabitsSecond = "Terabits/Second"
        case countSecond = "Count/Second"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public struct MetricDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "StatusCode", required: false, type: .enum), 
            AWSShapeMember(label: "Timestamps", required: false, type: .list), 
            AWSShapeMember(label: "Messages", required: false, type: .list), 
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The human-readable label associated with the data.
        public let label: String?
        /// The status of the returned data. Complete indicates that all data points in the requested time range were returned. PartialData means that an incomplete set of data points were returned. You can use the NextToken value that was returned and repeat your request to get more data points. NextToken is not returned if you are performing a math expression. InternalError indicates that an error occurred. Retry your request using NextToken, if present.
        public let statusCode: StatusCode?
        /// The time stamps for the data points, formatted in Unix timestamp format. The number of time stamps always matches the number of values and the value for Timestamps[x] is Values[x].
        public let timestamps: [TimeStamp]?
        /// A list of messages with additional information about the data returned.
        public let messages: [MessageData]?
        /// The data points for the metric corresponding to Timestamps. The number of values always matches the number of time stamps and the time stamp for Values[x] is Timestamps[x].
        public let values: [Double]?
        /// The short name you specified to represent this metric.
        public let id: String?

        public init(label: String? = nil, statusCode: StatusCode? = nil, timestamps: [TimeStamp]? = nil, messages: [MessageData]? = nil, values: [Double]? = nil, id: String? = nil) {
            self.label = label
            self.statusCode = statusCode
            self.timestamps = timestamps
            self.messages = messages
            self.values = values
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
            case statusCode = "StatusCode"
            case timestamps = "Timestamps"
            case messages = "Messages"
            case values = "Values"
            case id = "Id"
        }
    }

    public struct GetDashboardOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardBody", required: false, type: .string), 
            AWSShapeMember(label: "DashboardName", required: false, type: .string), 
            AWSShapeMember(label: "DashboardArn", required: false, type: .string)
        ]
        /// The detailed information about the dashboard, including what widgets are included and their location on the dashboard. For more information about the DashboardBody syntax, see CloudWatch-Dashboard-Body-Structure. 
        public let dashboardBody: String?
        /// The name of the dashboard.
        public let dashboardName: String?
        /// The Amazon Resource Name (ARN) of the dashboard.
        public let dashboardArn: String?

        public init(dashboardBody: String? = nil, dashboardName: String? = nil, dashboardArn: String? = nil) {
            self.dashboardBody = dashboardBody
            self.dashboardName = dashboardName
            self.dashboardArn = dashboardArn
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardBody = "DashboardBody"
            case dashboardName = "DashboardName"
            case dashboardArn = "DashboardArn"
        }
    }

    public enum ScanBy: String, CustomStringConvertible, Codable {
        case timestampdescending = "TimestampDescending"
        case timestampascending = "TimestampAscending"
        public var description: String { return self.rawValue }
    }

    public struct MetricDataQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "Expression", required: false, type: .string), 
            AWSShapeMember(label: "ReturnData", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "MetricStat", required: false, type: .structure)
        ]
        /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.
        public let label: String?
        /// The math expression to be performed on the returned data, if this structure is performing a math expression. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide. Within one MetricDataQuery structure, you must specify either Expression or MetricStat but not both.
        public let expression: String?
        /// Indicates whether to return the time stamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify False. If you omit this, the default of True is used.
        public let returnData: Bool?
        /// A short name used to tie this structure to the results in the response. This name must be unique within a single call to GetMetricData. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
        public let id: String
        /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this structure is performing a data retrieval and not performing a math expression on the returned data. Within one MetricDataQuery structure, you must specify either Expression or MetricStat but not both.
        public let metricStat: MetricStat?

        public init(label: String? = nil, expression: String? = nil, returnData: Bool? = nil, id: String, metricStat: MetricStat? = nil) {
            self.label = label
            self.expression = expression
            self.returnData = returnData
            self.id = id
            self.metricStat = metricStat
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
            case expression = "Expression"
            case returnData = "ReturnData"
            case id = "Id"
            case metricStat = "MetricStat"
        }
    }

    public enum StatusCode: String, CustomStringConvertible, Codable {
        case complete = "Complete"
        case internalerror = "InternalError"
        case partialdata = "PartialData"
        public var description: String { return self.rawValue }
    }

    public struct GetDashboardInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardName", required: true, type: .string)
        ]
        /// The name of the dashboard to be described.
        public let dashboardName: String

        public init(dashboardName: String) {
            self.dashboardName = dashboardName
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardName = "DashboardName"
        }
    }

    public struct Datapoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SampleCount", required: false, type: .double), 
            AWSShapeMember(label: "Minimum", required: false, type: .double), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Sum", required: false, type: .double), 
            AWSShapeMember(label: "ExtendedStatistics", required: false, type: .map), 
            AWSShapeMember(label: "Average", required: false, type: .double), 
            AWSShapeMember(label: "Maximum", required: false, type: .double)
        ]
        /// The number of metric values that contributed to the aggregate value of this data point.
        public let sampleCount: Double?
        /// The minimum metric value for the data point.
        public let minimum: Double?
        /// The standard unit for the data point.
        public let unit: StandardUnit?
        /// The time stamp used for the data point.
        public let timestamp: TimeStamp?
        /// The sum of the metric values for the data point.
        public let sum: Double?
        /// The percentile statistic for the data point.
        public let extendedStatistics: [String: Double]?
        /// The average of the metric values that correspond to the data point.
        public let average: Double?
        /// The maximum metric value for the data point.
        public let maximum: Double?

        public init(sampleCount: Double? = nil, minimum: Double? = nil, unit: StandardUnit? = nil, timestamp: TimeStamp? = nil, sum: Double? = nil, extendedStatistics: [String: Double]? = nil, average: Double? = nil, maximum: Double? = nil) {
            self.sampleCount = sampleCount
            self.minimum = minimum
            self.unit = unit
            self.timestamp = timestamp
            self.sum = sum
            self.extendedStatistics = extendedStatistics
            self.average = average
            self.maximum = maximum
        }

        private enum CodingKeys: String, CodingKey {
            case sampleCount = "SampleCount"
            case minimum = "Minimum"
            case unit = "Unit"
            case timestamp = "Timestamp"
            case sum = "Sum"
            case extendedStatistics = "ExtendedStatistics"
            case average = "Average"
            case maximum = "Maximum"
        }
    }

    public struct AlarmHistoryItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmName", required: false, type: .string), 
            AWSShapeMember(label: "HistoryData", required: false, type: .string), 
            AWSShapeMember(label: "HistorySummary", required: false, type: .string), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "HistoryItemType", required: false, type: .enum)
        ]
        /// The descriptive name for the alarm.
        public let alarmName: String?
        /// Data about the alarm, in JSON format.
        public let historyData: String?
        /// A summary of the alarm history, in text format.
        public let historySummary: String?
        /// The time stamp for the alarm history item.
        public let timestamp: TimeStamp?
        /// The type of alarm history item.
        public let historyItemType: HistoryItemType?

        public init(alarmName: String? = nil, historyData: String? = nil, historySummary: String? = nil, timestamp: TimeStamp? = nil, historyItemType: HistoryItemType? = nil) {
            self.alarmName = alarmName
            self.historyData = historyData
            self.historySummary = historySummary
            self.timestamp = timestamp
            self.historyItemType = historyItemType
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "AlarmName"
            case historyData = "HistoryData"
            case historySummary = "HistorySummary"
            case timestamp = "Timestamp"
            case historyItemType = "HistoryItemType"
        }
    }

    public struct MetricAlarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmName", required: false, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "AlarmConfigurationUpdatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "AlarmActions", required: false, type: .list), 
            AWSShapeMember(label: "DatapointsToAlarm", required: false, type: .integer), 
            AWSShapeMember(label: "InsufficientDataActions", required: false, type: .list), 
            AWSShapeMember(label: "StateUpdatedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ActionsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AlarmDescription", required: false, type: .string), 
            AWSShapeMember(label: "StateValue", required: false, type: .enum), 
            AWSShapeMember(label: "EvaluateLowSampleCountPercentile", required: false, type: .string), 
            AWSShapeMember(label: "TreatMissingData", required: false, type: .string), 
            AWSShapeMember(label: "ExtendedStatistic", required: false, type: .string), 
            AWSShapeMember(label: "StateReason", required: false, type: .string), 
            AWSShapeMember(label: "MetricName", required: false, type: .string), 
            AWSShapeMember(label: "Period", required: false, type: .integer), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Threshold", required: false, type: .double), 
            AWSShapeMember(label: "AlarmArn", required: false, type: .string), 
            AWSShapeMember(label: "StateReasonData", required: false, type: .string), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "ComparisonOperator", required: false, type: .enum), 
            AWSShapeMember(label: "OKActions", required: false, type: .list)
        ]
        /// The name of the alarm.
        public let alarmName: String?
        /// The namespace of the metric associated with the alarm.
        public let namespace: String?
        /// The time stamp of the last update to the alarm configuration.
        public let alarmConfigurationUpdatedTimestamp: TimeStamp?
        /// The number of periods over which data is compared to the specified threshold.
        public let evaluationPeriods: Int32?
        /// The dimensions for the metric associated with the alarm.
        public let dimensions: [Dimension]?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let alarmActions: [String]?
        /// The number of datapoints that must be breaching to trigger the alarm.
        public let datapointsToAlarm: Int32?
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let insufficientDataActions: [String]?
        /// The time stamp of the last update to the alarm state.
        public let stateUpdatedTimestamp: TimeStamp?
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public let actionsEnabled: Bool?
        /// The description of the alarm.
        public let alarmDescription: String?
        /// The state value for the alarm.
        public let stateValue: StateValue?
        /// Used only for alarms based on percentiles. If ignore, the alarm state does not change during periods with too few data points to be statistically significant. If evaluate or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.
        public let evaluateLowSampleCountPercentile: String?
        /// Sets how this alarm is to handle missing data points. If this parameter is omitted, the default behavior of missing is used.
        public let treatMissingData: String?
        /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
        public let extendedStatistic: String?
        /// An explanation for the alarm state, in text format.
        public let stateReason: String?
        /// The name of the metric associated with the alarm.
        public let metricName: String?
        /// The period, in seconds, over which the statistic is applied.
        public let period: Int32?
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic.
        public let statistic: Statistic?
        /// The value to compare with the specified statistic.
        public let threshold: Double?
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmArn: String?
        /// An explanation for the alarm state, in JSON format.
        public let stateReasonData: String?
        /// The unit of the metric associated with the alarm.
        public let unit: StandardUnit?
        /// The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public let comparisonOperator: ComparisonOperator?
        /// The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        public let oKActions: [String]?

        public init(alarmName: String? = nil, namespace: String? = nil, alarmConfigurationUpdatedTimestamp: TimeStamp? = nil, evaluationPeriods: Int32? = nil, dimensions: [Dimension]? = nil, alarmActions: [String]? = nil, datapointsToAlarm: Int32? = nil, insufficientDataActions: [String]? = nil, stateUpdatedTimestamp: TimeStamp? = nil, actionsEnabled: Bool? = nil, alarmDescription: String? = nil, stateValue: StateValue? = nil, evaluateLowSampleCountPercentile: String? = nil, treatMissingData: String? = nil, extendedStatistic: String? = nil, stateReason: String? = nil, metricName: String? = nil, period: Int32? = nil, statistic: Statistic? = nil, threshold: Double? = nil, alarmArn: String? = nil, stateReasonData: String? = nil, unit: StandardUnit? = nil, comparisonOperator: ComparisonOperator? = nil, oKActions: [String]? = nil) {
            self.alarmName = alarmName
            self.namespace = namespace
            self.alarmConfigurationUpdatedTimestamp = alarmConfigurationUpdatedTimestamp
            self.evaluationPeriods = evaluationPeriods
            self.dimensions = dimensions
            self.alarmActions = alarmActions
            self.datapointsToAlarm = datapointsToAlarm
            self.insufficientDataActions = insufficientDataActions
            self.stateUpdatedTimestamp = stateUpdatedTimestamp
            self.actionsEnabled = actionsEnabled
            self.alarmDescription = alarmDescription
            self.stateValue = stateValue
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.treatMissingData = treatMissingData
            self.extendedStatistic = extendedStatistic
            self.stateReason = stateReason
            self.metricName = metricName
            self.period = period
            self.statistic = statistic
            self.threshold = threshold
            self.alarmArn = alarmArn
            self.stateReasonData = stateReasonData
            self.unit = unit
            self.comparisonOperator = comparisonOperator
            self.oKActions = oKActions
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "AlarmName"
            case namespace = "Namespace"
            case alarmConfigurationUpdatedTimestamp = "AlarmConfigurationUpdatedTimestamp"
            case evaluationPeriods = "EvaluationPeriods"
            case dimensions = "Dimensions"
            case alarmActions = "AlarmActions"
            case datapointsToAlarm = "DatapointsToAlarm"
            case insufficientDataActions = "InsufficientDataActions"
            case stateUpdatedTimestamp = "StateUpdatedTimestamp"
            case actionsEnabled = "ActionsEnabled"
            case alarmDescription = "AlarmDescription"
            case stateValue = "StateValue"
            case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
            case treatMissingData = "TreatMissingData"
            case extendedStatistic = "ExtendedStatistic"
            case stateReason = "StateReason"
            case metricName = "MetricName"
            case period = "Period"
            case statistic = "Statistic"
            case threshold = "Threshold"
            case alarmArn = "AlarmArn"
            case stateReasonData = "StateReasonData"
            case unit = "Unit"
            case comparisonOperator = "ComparisonOperator"
            case oKActions = "OKActions"
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAlarmsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricAlarms", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The information for the specified alarms.
        public let metricAlarms: [MetricAlarm]?
        /// The token that marks the start of the next batch of returned results.
        public let nextToken: String?

        public init(metricAlarms: [MetricAlarm]? = nil, nextToken: String? = nil) {
            self.metricAlarms = metricAlarms
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case metricAlarms = "MetricAlarms"
            case nextToken = "NextToken"
        }
    }

    public struct DashboardEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardName", required: false, type: .string), 
            AWSShapeMember(label: "DashboardArn", required: false, type: .string), 
            AWSShapeMember(label: "LastModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "Size", required: false, type: .long)
        ]
        /// The name of the dashboard.
        public let dashboardName: String?
        /// The Amazon Resource Name (ARN) of the dashboard.
        public let dashboardArn: String?
        /// The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.
        public let lastModified: TimeStamp?
        /// The size of the dashboard, in bytes.
        public let size: Int64?

        public init(dashboardName: String? = nil, dashboardArn: String? = nil, lastModified: TimeStamp? = nil, size: Int64? = nil) {
            self.dashboardName = dashboardName
            self.dashboardArn = dashboardArn
            self.lastModified = lastModified
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardName = "DashboardName"
            case dashboardArn = "DashboardArn"
            case lastModified = "LastModified"
            case size = "Size"
        }
    }

    public struct DescribeAlarmHistoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "AlarmName", required: false, type: .string), 
            AWSShapeMember(label: "StartDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "HistoryItemType", required: false, type: .enum), 
            AWSShapeMember(label: "EndDate", required: false, type: .timestamp)
        ]
        /// The token returned by a previous call to indicate that there is more data available.
        public let nextToken: String?
        /// The maximum number of alarm history records to retrieve.
        public let maxRecords: Int32?
        /// The name of the alarm.
        public let alarmName: String?
        /// The starting date to retrieve alarm history.
        public let startDate: TimeStamp?
        /// The type of alarm histories to retrieve.
        public let historyItemType: HistoryItemType?
        /// The ending date to retrieve alarm history.
        public let endDate: TimeStamp?

        public init(nextToken: String? = nil, maxRecords: Int32? = nil, alarmName: String? = nil, startDate: TimeStamp? = nil, historyItemType: HistoryItemType? = nil, endDate: TimeStamp? = nil) {
            self.nextToken = nextToken
            self.maxRecords = maxRecords
            self.alarmName = alarmName
            self.startDate = startDate
            self.historyItemType = historyItemType
            self.endDate = endDate
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxRecords = "MaxRecords"
            case alarmName = "AlarmName"
            case startDate = "StartDate"
            case historyItemType = "HistoryItemType"
            case endDate = "EndDate"
        }
    }

    public struct DeleteDashboardsOutput: AWSShape {

    }

    public struct Metric: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "MetricName", required: false, type: .string)
        ]
        /// The dimensions for the metric.
        public let dimensions: [Dimension]?
        /// The namespace of the metric.
        public let namespace: String?
        /// The name of the metric.
        public let metricName: String?

        public init(dimensions: [Dimension]? = nil, namespace: String? = nil, metricName: String? = nil) {
            self.dimensions = dimensions
            self.namespace = namespace
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case namespace = "Namespace"
            case metricName = "MetricName"
        }
    }

    public struct PutMetricAlarmInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "Period", required: true, type: .integer), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "TreatMissingData", required: false, type: .string), 
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "EvaluateLowSampleCountPercentile", required: false, type: .string), 
            AWSShapeMember(label: "AlarmDescription", required: false, type: .string), 
            AWSShapeMember(label: "DatapointsToAlarm", required: false, type: .integer), 
            AWSShapeMember(label: "ActionsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "OKActions", required: false, type: .list), 
            AWSShapeMember(label: "AlarmActions", required: false, type: .list), 
            AWSShapeMember(label: "AlarmName", required: true, type: .string), 
            AWSShapeMember(label: "InsufficientDataActions", required: false, type: .list), 
            AWSShapeMember(label: "Statistic", required: false, type: .enum), 
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "EvaluationPeriods", required: true, type: .integer), 
            AWSShapeMember(label: "ExtendedStatistic", required: false, type: .string)
        ]
        ///  The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.
        public let comparisonOperator: ComparisonOperator
        /// The period, in seconds, over which the specified statistic is applied. Valid values are 10, 30, and any multiple of 60. Be sure to specify 10 or 30 only for metrics that are stored by a PutMetricData call with a StorageResolution of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm may often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see Amazon CloudWatch Pricing. An alarm's total current evaluation period can be no longer than one day, so Period multiplied by EvaluationPeriods cannot be more than 86,400 seconds.
        public let period: Int32
        /// The dimensions for the metric associated with the alarm.
        public let dimensions: [Dimension]?
        ///  Sets how this alarm is to handle missing data points. If TreatMissingData is omitted, the default behavior of missing is used. For more information, see Configuring How CloudWatch Alarms Treats Missing Data. Valid Values: breaching | notBreaching | ignore | missing 
        public let treatMissingData: String?
        /// The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately. If you specify a unit, you must use a unit that is appropriate for the metric. Otherwise, the CloudWatch alarm can get stuck in the INSUFFICIENT DATA state. 
        public let unit: StandardUnit?
        /// The name for the metric associated with the alarm.
        public let metricName: String
        ///  Used only for alarms based on percentiles. If you specify ignore, the alarm state does not change during periods with too few data points to be statistically significant. If you specify evaluate or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see Percentile-Based CloudWatch Alarms and Low Data Samples. Valid Values: evaluate | ignore 
        public let evaluateLowSampleCountPercentile: String?
        /// The description for the alarm.
        public let alarmDescription: String?
        /// The number of datapoints that must be breaching to trigger the alarm. This is used only if you are setting an "M out of N" alarm. In that case, this value is the M. For more information, see Evaluating an Alarm in the Amazon CloudWatch User Guide.
        public let datapointsToAlarm: Int32?
        /// Indicates whether actions should be executed during any changes to the alarm state.
        public let actionsEnabled: Bool?
        /// The actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:sns:region:account-id:sns-topic-name | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name  Valid Values (for use with IAM roles): arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Reboot/1.0
        public let oKActions: [String]?
        /// The actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:sns:region:account-id:sns-topic-name | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name  Valid Values (for use with IAM roles): arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Reboot/1.0
        public let alarmActions: [String]?
        /// The name for the alarm. This name must be unique within the AWS account.
        public let alarmName: String
        /// The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid Values: arn:aws:automate:region:ec2:stop | arn:aws:automate:region:ec2:terminate | arn:aws:automate:region:ec2:recover | arn:aws:sns:region:account-id:sns-topic-name | arn:aws:autoscaling:region:account-id:scalingPolicy:policy-id autoScalingGroupName/group-friendly-name:policyName/policy-friendly-name  Valid Values (for use with IAM roles): arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:region:{account-id}:action/actions/AWS_EC2.InstanceId.Reboot/1.0
        public let insufficientDataActions: [String]?
        /// The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic. When you call PutMetricAlarm, you must specify either Statistic or ExtendedStatistic, but not both.
        public let statistic: Statistic?
        /// The value against which the specified statistic is compared.
        public let threshold: Double
        /// The namespace for the metric associated with the alarm.
        public let namespace: String
        /// The number of periods over which data is compared to the specified threshold. If you are setting an alarm which requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N. An alarm's total current evaluation period can be no longer than one day, so this number multiplied by Period cannot be more than 86,400 seconds.
        public let evaluationPeriods: Int32
        /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100. When you call PutMetricAlarm, you must specify either Statistic or ExtendedStatistic, but not both.
        public let extendedStatistic: String?

        public init(comparisonOperator: ComparisonOperator, period: Int32, dimensions: [Dimension]? = nil, treatMissingData: String? = nil, unit: StandardUnit? = nil, metricName: String, evaluateLowSampleCountPercentile: String? = nil, alarmDescription: String? = nil, datapointsToAlarm: Int32? = nil, actionsEnabled: Bool? = nil, oKActions: [String]? = nil, alarmActions: [String]? = nil, alarmName: String, insufficientDataActions: [String]? = nil, statistic: Statistic? = nil, threshold: Double, namespace: String, evaluationPeriods: Int32, extendedStatistic: String? = nil) {
            self.comparisonOperator = comparisonOperator
            self.period = period
            self.dimensions = dimensions
            self.treatMissingData = treatMissingData
            self.unit = unit
            self.metricName = metricName
            self.evaluateLowSampleCountPercentile = evaluateLowSampleCountPercentile
            self.alarmDescription = alarmDescription
            self.datapointsToAlarm = datapointsToAlarm
            self.actionsEnabled = actionsEnabled
            self.oKActions = oKActions
            self.alarmActions = alarmActions
            self.alarmName = alarmName
            self.insufficientDataActions = insufficientDataActions
            self.statistic = statistic
            self.threshold = threshold
            self.namespace = namespace
            self.evaluationPeriods = evaluationPeriods
            self.extendedStatistic = extendedStatistic
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case period = "Period"
            case dimensions = "Dimensions"
            case treatMissingData = "TreatMissingData"
            case unit = "Unit"
            case metricName = "MetricName"
            case evaluateLowSampleCountPercentile = "EvaluateLowSampleCountPercentile"
            case alarmDescription = "AlarmDescription"
            case datapointsToAlarm = "DatapointsToAlarm"
            case actionsEnabled = "ActionsEnabled"
            case oKActions = "OKActions"
            case alarmActions = "AlarmActions"
            case alarmName = "AlarmName"
            case insufficientDataActions = "InsufficientDataActions"
            case statistic = "Statistic"
            case threshold = "Threshold"
            case namespace = "Namespace"
            case evaluationPeriods = "EvaluationPeriods"
            case extendedStatistic = "ExtendedStatistic"
        }
    }

    public struct DescribeAlarmsForMetricOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricAlarms", required: false, type: .list)
        ]
        /// The information for each alarm with the specified metric.
        public let metricAlarms: [MetricAlarm]?

        public init(metricAlarms: [MetricAlarm]? = nil) {
            self.metricAlarms = metricAlarms
        }

        private enum CodingKeys: String, CodingKey {
            case metricAlarms = "MetricAlarms"
        }
    }

    public struct PutDashboardInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DashboardBody", required: true, type: .string), 
            AWSShapeMember(label: "DashboardName", required: true, type: .string)
        ]
        /// The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required. For more information about the syntax, see CloudWatch-Dashboard-Body-Structure.
        public let dashboardBody: String
        /// The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, "-", and "_". This parameter is required.
        public let dashboardName: String

        public init(dashboardBody: String, dashboardName: String) {
            self.dashboardBody = dashboardBody
            self.dashboardName = dashboardName
        }

        private enum CodingKeys: String, CodingKey {
            case dashboardBody = "DashboardBody"
            case dashboardName = "DashboardName"
        }
    }

}