// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Health {

    public struct DescribeEntityAggregatesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of entities that are affected by each of the specified events.
        public var entityAggregates: [EntityAggregate]? = nil

        public init() {}

        public init(entityAggregates: [EntityAggregate]? = nil) {
            self.entityAggregates = entityAggregates
        }

    }

    public struct AffectedEntity: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The most recent time that the entity was updated.
        public var lastUpdatedTime: Date? = nil
        /// The most recent status of the entity affected by the event. The possible values are IMPAIRED, UNIMPAIRED, and UNKNOWN.
        public var statusCode: String? = nil
        /// The unique identifier for the entity. Format: arn:aws:health:entity-region:aws-account:entity/entity-id . Example: arn:aws:health:us-east-1:111222333444:entity/AVh5GGT7ul1arKr1sE1K 
        public var entityArn: String? = nil
        /// A map of entity tags attached to the affected entity.
        public var tags: [String: String]? = nil
        /// The 12-digit AWS account number that contains the affected entity.
        public var awsAccountId: String? = nil
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public var eventArn: String? = nil
        /// The ID of the affected entity.
        public var entityValue: String? = nil

        public init() {}

        public init(lastUpdatedTime: Date? = nil, statusCode: String? = nil, entityArn: String? = nil, tags: [String: String]? = nil, awsAccountId: String? = nil, eventArn: String? = nil, entityValue: String? = nil) {
            self.lastUpdatedTime = lastUpdatedTime
            self.statusCode = statusCode
            self.entityArn = entityArn
            self.tags = tags
            self.awsAccountId = awsAccountId
            self.eventArn = eventArn
            self.entityValue = entityValue
        }

    }

    public struct EventDetailsErrorItem: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public var eventArn: String? = nil
        /// A message that describes the error.
        public var errorMessage: String? = nil
        /// The name of the error.
        public var errorName: String? = nil

        public init() {}

        public init(eventArn: String? = nil, errorMessage: String? = nil, errorName: String? = nil) {
            self.eventArn = eventArn
            self.errorMessage = errorMessage
            self.errorName = errorName
        }

    }

    public struct EventTypeFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public var eventTypeCategories: [String]? = nil
        /// The AWS services associated with the event. For example, EC2, RDS.
        public var services: [String]? = nil
        /// A list of event type codes.
        public var eventTypeCodes: [String]? = nil

        public init() {}

        public init(eventTypeCategories: [String]? = nil, services: [String]? = nil, eventTypeCodes: [String]? = nil) {
            self.eventTypeCategories = eventTypeCategories
            self.services = services
            self.eventTypeCodes = eventTypeCodes
        }

    }

    public struct DescribeAffectedEntitiesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The entities that match the filter criteria.
        public var entities: [AffectedEntity]? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil

        public init() {}

        public init(entities: [AffectedEntity]? = nil, nextToken: String? = nil) {
            self.entities = entities
            self.nextToken = nextToken
        }

    }

    public struct Event: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The AWS service that is affected by the event. For example, EC2, RDS.
        public var service: String? = nil
        /// The AWS Availability Zone of the event. For example, us-east-1a.
        public var availabilityZone: String? = nil
        /// The most recent date and time that the event was updated.
        public var lastUpdatedTime: Date? = nil
        /// The most recent status of the event. Possible values are open, closed, and upcoming.
        public var statusCode: String? = nil
        /// The AWS region name of the event.
        public var region: String? = nil
        /// The 
        public var eventTypeCategory: String? = nil
        /// The date and time that the event ended.
        public var endTime: Date? = nil
        /// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
        public var eventTypeCode: String? = nil
        /// The date and time that the event began.
        public var startTime: Date? = nil
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public var arn: String? = nil

        public init() {}

        public init(service: String? = nil, availabilityZone: String? = nil, lastUpdatedTime: Date? = nil, statusCode: String? = nil, region: String? = nil, eventTypeCategory: String? = nil, endTime: Date? = nil, eventTypeCode: String? = nil, startTime: Date? = nil, arn: String? = nil) {
            self.service = service
            self.availabilityZone = availabilityZone
            self.lastUpdatedTime = lastUpdatedTime
            self.statusCode = statusCode
            self.region = region
            self.eventTypeCategory = eventTypeCategory
            self.endTime = endTime
            self.eventTypeCode = eventTypeCode
            self.startTime = startTime
            self.arn = arn
        }

    }

    public struct DescribeEventDetailsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Error messages for any events that could not be retrieved.
        public var failedSet: [EventDetailsErrorItem]? = nil
        /// Information about the events that could be retrieved.
        public var successfulSet: [EventDetails]? = nil

        public init() {}

        public init(failedSet: [EventDetailsErrorItem]? = nil, successfulSet: [EventDetails]? = nil) {
            self.failedSet = failedSet
            self.successfulSet = successfulSet
        }

    }

    public struct DescribeEventDetailsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public var eventArns: [String] = []
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public var locale: String? = nil

        public init() {}

        public init(eventArns: [String], locale: String? = nil) {
            self.eventArns = eventArns
            self.locale = locale
        }

    }

    public struct EventDescription: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The most recent description of the event.
        public var latestDescription: String? = nil

        public init() {}

        public init(latestDescription: String? = nil) {
            self.latestDescription = latestDescription
        }

    }

    public struct DescribeEventAggregatesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of events in each category that meet the optional filter criteria.
        public var eventAggregates: [EventAggregate]? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil

        public init() {}

        public init(eventAggregates: [EventAggregate]? = nil, nextToken: String? = nil) {
            self.eventAggregates = eventAggregates
            self.nextToken = nextToken
        }

    }

    public struct DescribeEventAggregatesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil
        /// Values to narrow the results returned.
        public var filter: EventFilter? = nil
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public var maxResults: Int32? = nil
        /// The only currently supported value is eventTypeCategory.
        public var aggregateField: String = ""

        public init() {}

        public init(nextToken: String? = nil, filter: EventFilter? = nil, maxResults: Int32? = nil, aggregateField: String) {
            self.nextToken = nextToken
            self.filter = filter
            self.maxResults = maxResults
            self.aggregateField = aggregateField
        }

    }

    public struct EventFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public var eventTypeCategories: [String]? = nil
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public var eventArns: [String]? = nil
        /// A list of event status codes.
        public var eventStatusCodes: [String]? = nil
        /// A list of dates and times that the event was last updated.
        public var lastUpdatedTimes: [DateTimeRange]? = nil
        /// A map of entity tags attached to the affected entity.
        public var tags: [[String: String]]? = nil
        /// A list of unique identifiers for event types. For example, "AWS_EC2_SYSTEM_MAINTENANCE_EVENT","AWS_RDS_MAINTENANCE_SCHEDULED" 
        public var eventTypeCodes: [String]? = nil
        /// A list of entity ARNs (unique identifiers).
        public var entityArns: [String]? = nil
        /// A list of entity identifiers, such as EC2 instance IDs (i-34ab692e) or EBS volumes (vol-426ab23e).
        public var entityValues: [String]? = nil
        /// A list of AWS availability zones.
        public var availabilityZones: [String]? = nil
        /// The AWS services associated with the event. For example, EC2, RDS.
        public var services: [String]? = nil
        /// A list of dates and times that the event ended.
        public var endTimes: [DateTimeRange]? = nil
        /// A list of AWS regions.
        public var regions: [String]? = nil
        /// A list of dates and times that the event began.
        public var startTimes: [DateTimeRange]? = nil

        public init() {}

        public init(eventTypeCategories: [String]? = nil, eventArns: [String]? = nil, eventStatusCodes: [String]? = nil, lastUpdatedTimes: [DateTimeRange]? = nil, tags: [[String: String]]? = nil, eventTypeCodes: [String]? = nil, entityArns: [String]? = nil, entityValues: [String]? = nil, availabilityZones: [String]? = nil, services: [String]? = nil, endTimes: [DateTimeRange]? = nil, regions: [String]? = nil, startTimes: [DateTimeRange]? = nil) {
            self.eventTypeCategories = eventTypeCategories
            self.eventArns = eventArns
            self.eventStatusCodes = eventStatusCodes
            self.lastUpdatedTimes = lastUpdatedTimes
            self.tags = tags
            self.eventTypeCodes = eventTypeCodes
            self.entityArns = entityArns
            self.entityValues = entityValues
            self.availabilityZones = availabilityZones
            self.services = services
            self.endTimes = endTimes
            self.regions = regions
            self.startTimes = startTimes
        }

    }

    public struct EventAggregate: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The number of events of the associated issue type.
        public var count: Int32? = nil
        /// The issue type for the associated count.
        public var aggregateValue: String? = nil

        public init() {}

        public init(count: Int32? = nil, aggregateValue: String? = nil) {
            self.count = count
            self.aggregateValue = aggregateValue
        }

    }

    public struct EntityAggregate: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public var eventArn: String? = nil
        /// The number entities that match the criteria for the specified events.
        public var count: Int32? = nil

        public init() {}

        public init(eventArn: String? = nil, count: Int32? = nil) {
            self.eventArn = eventArn
            self.count = count
        }

    }

    public struct EventType: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The AWS service that is affected by the event. For example, EC2, RDS.
        public var service: String? = nil
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public var category: String? = nil
        /// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
        public var code: String? = nil

        public init() {}

        public init(service: String? = nil, category: String? = nil, code: String? = nil) {
            self.service = service
            self.category = category
            self.code = code
        }

    }

    public struct DescribeEntityAggregatesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public var eventArns: [String]? = nil

        public init() {}

        public init(eventArns: [String]? = nil) {
            self.eventArns = eventArns
        }

    }

    public struct DescribeEventTypesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of event types that match the filter criteria. Event types have a category (issue, accountNotification, or scheduledChange), a service (for example, EC2, RDS, DATAPIPELINE, BILLING), and a code (in the format AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT).
        public var eventTypes: [EventType]? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil

        public init() {}

        public init(eventTypes: [EventType]? = nil, nextToken: String? = nil) {
            self.eventTypes = eventTypes
            self.nextToken = nextToken
        }

    }

    public struct EventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Additional metadata about the event.
        public var eventMetadata: [String: String]? = nil
        /// Summary information about the event.
        public var event: Event? = nil
        /// The most recent description of the event.
        public var eventDescription: EventDescription? = nil

        public init() {}

        public init(eventMetadata: [String: String]? = nil, event: Event? = nil, eventDescription: EventDescription? = nil) {
            self.eventMetadata = eventMetadata
            self.event = event
            self.eventDescription = eventDescription
        }

    }

    public struct DescribeAffectedEntitiesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public var maxResults: Int32? = nil
        /// Values to narrow the results returned. At least one event ARN is required. 
        public var filter: EntityFilter = EntityFilter()
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public var locale: String? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: EntityFilter, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

    }

    public struct DescribeEventsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public var maxResults: Int32? = nil
        /// Values to narrow the results returned.
        public var filter: EventFilter? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public var locale: String? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: EventFilter? = nil, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

    }

    public struct DateTimeRange: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ending date and time of a time range.
        public var to: Date? = nil
        /// The starting date and time of a time range.
        public var from: Date? = nil

        public init() {}

        public init(to: Date? = nil, from: Date? = nil) {
            self.to = to
            self.from = from
        }

    }

    public struct EntityFilter: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public var eventArns: [String] = []
        /// A list of the most recent dates and times that the entity was updated.
        public var lastUpdatedTimes: [DateTimeRange]? = nil
        /// A list of entity status codes (IMPAIRED, UNIMPAIRED, or UNKNOWN).
        public var statusCodes: [String]? = nil
        /// A map of entity tags attached to the affected entity.
        public var tags: [[String: String]]? = nil
        /// A list of entity ARNs (unique identifiers).
        public var entityArns: [String]? = nil
        /// A list of IDs for affected entities.
        public var entityValues: [String]? = nil

        public init() {}

        public init(eventArns: [String], lastUpdatedTimes: [DateTimeRange]? = nil, statusCodes: [String]? = nil, tags: [[String: String]]? = nil, entityArns: [String]? = nil, entityValues: [String]? = nil) {
            self.eventArns = eventArns
            self.lastUpdatedTimes = lastUpdatedTimes
            self.statusCodes = statusCodes
            self.tags = tags
            self.entityArns = entityArns
            self.entityValues = entityValues
        }

    }

    public struct DescribeEventTypesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public var maxResults: Int32? = nil
        /// Values to narrow the results returned.
        public var filter: EventTypeFilter? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public var locale: String? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: EventTypeFilter? = nil, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

    }

    public struct DescribeEventsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The events that match the specified filter criteria.
        public var events: [Event]? = nil
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public var nextToken: String? = nil

        public init() {}

        public init(events: [Event]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

    }

}