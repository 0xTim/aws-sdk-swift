// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Health {

    public struct DescribeEntityAggregatesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "entityAggregates", required: false, type: .list)
        ]
        /// The number of entities that are affected by each of the specified events.
        public let entityAggregates: [EntityAggregate]?

        public init(entityAggregates: [EntityAggregate]? = nil) {
            self.entityAggregates = entityAggregates
        }

        private enum CodingKeys: String, CodingKey {
            case entityAggregates = "entityAggregates"
        }
    }

    public struct AffectedEntity: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "statusCode", required: false, type: .enum), 
            AWSShapeMember(label: "entityArn", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "awsAccountId", required: false, type: .string), 
            AWSShapeMember(label: "eventArn", required: false, type: .string), 
            AWSShapeMember(label: "entityValue", required: false, type: .string)
        ]
        /// The most recent time that the entity was updated.
        public let lastUpdatedTime: TimeStamp?
        /// The most recent status of the entity affected by the event. The possible values are IMPAIRED, UNIMPAIRED, and UNKNOWN.
        public let statusCode: EntityStatusCode?
        /// The unique identifier for the entity. Format: arn:aws:health:entity-region:aws-account:entity/entity-id . Example: arn:aws:health:us-east-1:111222333444:entity/AVh5GGT7ul1arKr1sE1K 
        public let entityArn: String?
        /// A map of entity tags attached to the affected entity.
        public let tags: [String: String]?
        /// The 12-digit AWS account number that contains the affected entity.
        public let awsAccountId: String?
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let eventArn: String?
        /// The ID of the affected entity.
        public let entityValue: String?

        public init(lastUpdatedTime: TimeStamp? = nil, statusCode: EntityStatusCode? = nil, entityArn: String? = nil, tags: [String: String]? = nil, awsAccountId: String? = nil, eventArn: String? = nil, entityValue: String? = nil) {
            self.lastUpdatedTime = lastUpdatedTime
            self.statusCode = statusCode
            self.entityArn = entityArn
            self.tags = tags
            self.awsAccountId = awsAccountId
            self.eventArn = eventArn
            self.entityValue = entityValue
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTime = "lastUpdatedTime"
            case statusCode = "statusCode"
            case entityArn = "entityArn"
            case tags = "tags"
            case awsAccountId = "awsAccountId"
            case eventArn = "eventArn"
            case entityValue = "entityValue"
        }
    }

    public struct EventDetailsErrorItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventArn", required: false, type: .string), 
            AWSShapeMember(label: "errorMessage", required: false, type: .string), 
            AWSShapeMember(label: "errorName", required: false, type: .string)
        ]
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let eventArn: String?
        /// A message that describes the error.
        public let errorMessage: String?
        /// The name of the error.
        public let errorName: String?

        public init(eventArn: String? = nil, errorMessage: String? = nil, errorName: String? = nil) {
            self.eventArn = eventArn
            self.errorMessage = errorMessage
            self.errorName = errorName
        }

        private enum CodingKeys: String, CodingKey {
            case eventArn = "eventArn"
            case errorMessage = "errorMessage"
            case errorName = "errorName"
        }
    }

    public struct EventTypeFilter: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventTypeCategories", required: false, type: .list), 
            AWSShapeMember(label: "services", required: false, type: .list), 
            AWSShapeMember(label: "eventTypeCodes", required: false, type: .list)
        ]
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public let eventTypeCategories: [EventTypeCategory]?
        /// The AWS services associated with the event. For example, EC2, RDS.
        public let services: [String]?
        /// A list of event type codes.
        public let eventTypeCodes: [String]?

        public init(eventTypeCategories: [EventTypeCategory]? = nil, services: [String]? = nil, eventTypeCodes: [String]? = nil) {
            self.eventTypeCategories = eventTypeCategories
            self.services = services
            self.eventTypeCodes = eventTypeCodes
        }

        private enum CodingKeys: String, CodingKey {
            case eventTypeCategories = "eventTypeCategories"
            case services = "services"
            case eventTypeCodes = "eventTypeCodes"
        }
    }

    public struct DescribeAffectedEntitiesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "entities", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The entities that match the filter criteria.
        public let entities: [AffectedEntity]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(entities: [AffectedEntity]? = nil, nextToken: String? = nil) {
            self.entities = entities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entities = "entities"
            case nextToken = "nextToken"
        }
    }

    public enum EventTypeCategory: String, CustomStringConvertible, Codable {
        case issue = "issue"
        case accountnotification = "accountNotification"
        case scheduledchange = "scheduledChange"
        public var description: String { return self.rawValue }
    }

    public struct Event: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "service", required: false, type: .string), 
            AWSShapeMember(label: "availabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "statusCode", required: false, type: .enum), 
            AWSShapeMember(label: "eventTypeCategory", required: false, type: .enum), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "eventTypeCode", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The AWS service that is affected by the event. For example, EC2, RDS.
        public let service: String?
        /// The AWS Availability Zone of the event. For example, us-east-1a.
        public let availabilityZone: String?
        /// The most recent date and time that the event was updated.
        public let lastUpdatedTime: TimeStamp?
        /// The most recent status of the event. Possible values are open, closed, and upcoming.
        public let statusCode: EventStatusCode?
        /// The 
        public let eventTypeCategory: EventTypeCategory?
        /// The AWS region name of the event.
        public let region: String?
        /// The date and time that the event ended.
        public let endTime: TimeStamp?
        /// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
        public let eventTypeCode: String?
        /// The date and time that the event began.
        public let startTime: TimeStamp?
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let arn: String?

        public init(service: String? = nil, availabilityZone: String? = nil, lastUpdatedTime: TimeStamp? = nil, statusCode: EventStatusCode? = nil, eventTypeCategory: EventTypeCategory? = nil, region: String? = nil, endTime: TimeStamp? = nil, eventTypeCode: String? = nil, startTime: TimeStamp? = nil, arn: String? = nil) {
            self.service = service
            self.availabilityZone = availabilityZone
            self.lastUpdatedTime = lastUpdatedTime
            self.statusCode = statusCode
            self.eventTypeCategory = eventTypeCategory
            self.region = region
            self.endTime = endTime
            self.eventTypeCode = eventTypeCode
            self.startTime = startTime
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
            case availabilityZone = "availabilityZone"
            case lastUpdatedTime = "lastUpdatedTime"
            case statusCode = "statusCode"
            case eventTypeCategory = "eventTypeCategory"
            case region = "region"
            case endTime = "endTime"
            case eventTypeCode = "eventTypeCode"
            case startTime = "startTime"
            case arn = "arn"
        }
    }

    public struct DescribeEventDetailsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedSet", required: false, type: .list), 
            AWSShapeMember(label: "successfulSet", required: false, type: .list)
        ]
        /// Error messages for any events that could not be retrieved.
        public let failedSet: [EventDetailsErrorItem]?
        /// Information about the events that could be retrieved.
        public let successfulSet: [EventDetails]?

        public init(failedSet: [EventDetailsErrorItem]? = nil, successfulSet: [EventDetails]? = nil) {
            self.failedSet = failedSet
            self.successfulSet = successfulSet
        }

        private enum CodingKeys: String, CodingKey {
            case failedSet = "failedSet"
            case successfulSet = "successfulSet"
        }
    }

    public struct DescribeEventDetailsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventArns", required: true, type: .list), 
            AWSShapeMember(label: "locale", required: false, type: .string)
        ]
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(eventArns: [String], locale: String? = nil) {
            self.eventArns = eventArns
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case eventArns = "eventArns"
            case locale = "locale"
        }
    }

    public enum EventStatusCode: String, CustomStringConvertible, Codable {
        case open = "open"
        case closed = "closed"
        case upcoming = "upcoming"
        public var description: String { return self.rawValue }
    }

    public struct EventDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "latestDescription", required: false, type: .string)
        ]
        /// The most recent description of the event.
        public let latestDescription: String?

        public init(latestDescription: String? = nil) {
            self.latestDescription = latestDescription
        }

        private enum CodingKeys: String, CodingKey {
            case latestDescription = "latestDescription"
        }
    }

    public struct DescribeEventAggregatesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventAggregates", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The number of events in each category that meet the optional filter criteria.
        public let eventAggregates: [EventAggregate]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(eventAggregates: [EventAggregate]? = nil, nextToken: String? = nil) {
            self.eventAggregates = eventAggregates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case eventAggregates = "eventAggregates"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeEventAggregatesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "aggregateField", required: true, type: .enum)
        ]
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// Values to narrow the results returned.
        public let filter: EventFilter?
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// The only currently supported value is eventTypeCategory.
        public let aggregateField: EventAggregateField

        public init(nextToken: String? = nil, filter: EventFilter? = nil, maxResults: Int32? = nil, aggregateField: EventAggregateField) {
            self.nextToken = nextToken
            self.filter = filter
            self.maxResults = maxResults
            self.aggregateField = aggregateField
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case filter = "filter"
            case maxResults = "maxResults"
            case aggregateField = "aggregateField"
        }
    }

    public struct EventFilter: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventTypeCategories", required: false, type: .list), 
            AWSShapeMember(label: "eventArns", required: false, type: .list), 
            AWSShapeMember(label: "eventStatusCodes", required: false, type: .list), 
            AWSShapeMember(label: "lastUpdatedTimes", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "eventTypeCodes", required: false, type: .list), 
            AWSShapeMember(label: "entityArns", required: false, type: .list), 
            AWSShapeMember(label: "entityValues", required: false, type: .list), 
            AWSShapeMember(label: "availabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "services", required: false, type: .list), 
            AWSShapeMember(label: "endTimes", required: false, type: .list), 
            AWSShapeMember(label: "regions", required: false, type: .list), 
            AWSShapeMember(label: "startTimes", required: false, type: .list)
        ]
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public let eventTypeCategories: [EventTypeCategory]?
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]?
        /// A list of event status codes.
        public let eventStatusCodes: [EventStatusCode]?
        /// A list of dates and times that the event was last updated.
        public let lastUpdatedTimes: [DateTimeRange]?
        /// A map of entity tags attached to the affected entity.
        public let tags: [[String: String]]?
        /// A list of unique identifiers for event types. For example, "AWS_EC2_SYSTEM_MAINTENANCE_EVENT","AWS_RDS_MAINTENANCE_SCHEDULED" 
        public let eventTypeCodes: [String]?
        /// A list of entity ARNs (unique identifiers).
        public let entityArns: [String]?
        /// A list of entity identifiers, such as EC2 instance IDs (i-34ab692e) or EBS volumes (vol-426ab23e).
        public let entityValues: [String]?
        /// A list of AWS availability zones.
        public let availabilityZones: [String]?
        /// The AWS services associated with the event. For example, EC2, RDS.
        public let services: [String]?
        /// A list of dates and times that the event ended.
        public let endTimes: [DateTimeRange]?
        /// A list of AWS regions.
        public let regions: [String]?
        /// A list of dates and times that the event began.
        public let startTimes: [DateTimeRange]?

        public init(eventTypeCategories: [EventTypeCategory]? = nil, eventArns: [String]? = nil, eventStatusCodes: [EventStatusCode]? = nil, lastUpdatedTimes: [DateTimeRange]? = nil, tags: [[String: String]]? = nil, eventTypeCodes: [String]? = nil, entityArns: [String]? = nil, entityValues: [String]? = nil, availabilityZones: [String]? = nil, services: [String]? = nil, endTimes: [DateTimeRange]? = nil, regions: [String]? = nil, startTimes: [DateTimeRange]? = nil) {
            self.eventTypeCategories = eventTypeCategories
            self.eventArns = eventArns
            self.eventStatusCodes = eventStatusCodes
            self.lastUpdatedTimes = lastUpdatedTimes
            self.tags = tags
            self.eventTypeCodes = eventTypeCodes
            self.entityArns = entityArns
            self.entityValues = entityValues
            self.availabilityZones = availabilityZones
            self.services = services
            self.endTimes = endTimes
            self.regions = regions
            self.startTimes = startTimes
        }

        private enum CodingKeys: String, CodingKey {
            case eventTypeCategories = "eventTypeCategories"
            case eventArns = "eventArns"
            case eventStatusCodes = "eventStatusCodes"
            case lastUpdatedTimes = "lastUpdatedTimes"
            case tags = "tags"
            case eventTypeCodes = "eventTypeCodes"
            case entityArns = "entityArns"
            case entityValues = "entityValues"
            case availabilityZones = "availabilityZones"
            case services = "services"
            case endTimes = "endTimes"
            case regions = "regions"
            case startTimes = "startTimes"
        }
    }

    public struct EventAggregate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "count", required: false, type: .integer), 
            AWSShapeMember(label: "aggregateValue", required: false, type: .string)
        ]
        /// The number of events of the associated issue type.
        public let count: Int32?
        /// The issue type for the associated count.
        public let aggregateValue: String?

        public init(count: Int32? = nil, aggregateValue: String? = nil) {
            self.count = count
            self.aggregateValue = aggregateValue
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case aggregateValue = "aggregateValue"
        }
    }

    public enum EventAggregateField: String, CustomStringConvertible, Codable {
        case eventtypecategory = "eventTypeCategory"
        public var description: String { return self.rawValue }
    }

    public struct EntityAggregate: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventArn", required: false, type: .string), 
            AWSShapeMember(label: "count", required: false, type: .integer)
        ]
        /// The unique identifier for the event. Format: arn:aws:health:event-region::event/EVENT_TYPE_PLUS_ID . Example: arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331 
        public let eventArn: String?
        /// The number entities that match the criteria for the specified events.
        public let count: Int32?

        public init(eventArn: String? = nil, count: Int32? = nil) {
            self.eventArn = eventArn
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case eventArn = "eventArn"
            case count = "count"
        }
    }

    public struct EventType: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "service", required: false, type: .string), 
            AWSShapeMember(label: "category", required: false, type: .enum), 
            AWSShapeMember(label: "code", required: false, type: .string)
        ]
        /// The AWS service that is affected by the event. For example, EC2, RDS.
        public let service: String?
        /// A list of event type category codes (issue, scheduledChange, or accountNotification).
        public let category: EventTypeCategory?
        /// The unique identifier for the event type. The format is AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT.
        public let code: String?

        public init(service: String? = nil, category: EventTypeCategory? = nil, code: String? = nil) {
            self.service = service
            self.category = category
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
            case category = "category"
            case code = "code"
        }
    }

    public struct DescribeEntityAggregatesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventArns", required: false, type: .list)
        ]
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]?

        public init(eventArns: [String]? = nil) {
            self.eventArns = eventArns
        }

        private enum CodingKeys: String, CodingKey {
            case eventArns = "eventArns"
        }
    }

    public struct DescribeEventTypesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventTypes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of event types that match the filter criteria. Event types have a category (issue, accountNotification, or scheduledChange), a service (for example, EC2, RDS, DATAPIPELINE, BILLING), and a code (in the format AWS_SERVICE_DESCRIPTION ; for example, AWS_EC2_SYSTEM_MAINTENANCE_EVENT).
        public let eventTypes: [EventType]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(eventTypes: [EventType]? = nil, nextToken: String? = nil) {
            self.eventTypes = eventTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case eventTypes = "eventTypes"
            case nextToken = "nextToken"
        }
    }

    public struct EventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventMetadata", required: false, type: .map), 
            AWSShapeMember(label: "event", required: false, type: .structure), 
            AWSShapeMember(label: "eventDescription", required: false, type: .structure)
        ]
        /// Additional metadata about the event.
        public let eventMetadata: [String: String]?
        /// Summary information about the event.
        public let event: Event?
        /// The most recent description of the event.
        public let eventDescription: EventDescription?

        public init(eventMetadata: [String: String]? = nil, event: Event? = nil, eventDescription: EventDescription? = nil) {
            self.eventMetadata = eventMetadata
            self.event = event
            self.eventDescription = eventDescription
        }

        private enum CodingKeys: String, CodingKey {
            case eventMetadata = "eventMetadata"
            case event = "event"
            case eventDescription = "eventDescription"
        }
    }

    public struct DescribeAffectedEntitiesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: true, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "locale", required: false, type: .string)
        ]
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// Values to narrow the results returned. At least one event ARN is required. 
        public let filter: EntityFilter
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(maxResults: Int32? = nil, filter: EntityFilter, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filter = "filter"
            case nextToken = "nextToken"
            case locale = "locale"
        }
    }

    public struct DescribeEventsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "locale", required: false, type: .string)
        ]
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// Values to narrow the results returned.
        public let filter: EventFilter?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(maxResults: Int32? = nil, filter: EventFilter? = nil, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filter = "filter"
            case nextToken = "nextToken"
            case locale = "locale"
        }
    }

    public struct DateTimeRange: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "to", required: false, type: .timestamp), 
            AWSShapeMember(label: "from", required: false, type: .timestamp)
        ]
        /// The ending date and time of a time range.
        public let to: TimeStamp?
        /// The starting date and time of a time range.
        public let from: TimeStamp?

        public init(to: TimeStamp? = nil, from: TimeStamp? = nil) {
            self.to = to
            self.from = from
        }

        private enum CodingKeys: String, CodingKey {
            case to = "to"
            case from = "from"
        }
    }

    public struct EntityFilter: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventArns", required: true, type: .list), 
            AWSShapeMember(label: "lastUpdatedTimes", required: false, type: .list), 
            AWSShapeMember(label: "statusCodes", required: false, type: .list), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "entityArns", required: false, type: .list), 
            AWSShapeMember(label: "entityValues", required: false, type: .list)
        ]
        /// A list of event ARNs (unique identifiers). For example: "arn:aws:health:us-east-1::event/AWS_EC2_MAINTENANCE_5331", "arn:aws:health:us-west-1::event/AWS_EBS_LOST_VOLUME_xyz" 
        public let eventArns: [String]
        /// A list of the most recent dates and times that the entity was updated.
        public let lastUpdatedTimes: [DateTimeRange]?
        /// A list of entity status codes (IMPAIRED, UNIMPAIRED, or UNKNOWN).
        public let statusCodes: [EntityStatusCode]?
        /// A map of entity tags attached to the affected entity.
        public let tags: [[String: String]]?
        /// A list of entity ARNs (unique identifiers).
        public let entityArns: [String]?
        /// A list of IDs for affected entities.
        public let entityValues: [String]?

        public init(eventArns: [String], lastUpdatedTimes: [DateTimeRange]? = nil, statusCodes: [EntityStatusCode]? = nil, tags: [[String: String]]? = nil, entityArns: [String]? = nil, entityValues: [String]? = nil) {
            self.eventArns = eventArns
            self.lastUpdatedTimes = lastUpdatedTimes
            self.statusCodes = statusCodes
            self.tags = tags
            self.entityArns = entityArns
            self.entityValues = entityValues
        }

        private enum CodingKeys: String, CodingKey {
            case eventArns = "eventArns"
            case lastUpdatedTimes = "lastUpdatedTimes"
            case statusCodes = "statusCodes"
            case tags = "tags"
            case entityArns = "entityArns"
            case entityValues = "entityValues"
        }
    }

    public enum EntityStatusCode: String, CustomStringConvertible, Codable {
        case impaired = "IMPAIRED"
        case unimpaired = "UNIMPAIRED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEventTypesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "locale", required: false, type: .string)
        ]
        /// The maximum number of items to return in one batch, between 10 and 100, inclusive.
        public let maxResults: Int32?
        /// Values to narrow the results returned.
        public let filter: EventTypeFilter?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?
        /// The locale (language) to return information in. English (en) is the default and the only supported value at this time.
        public let locale: String?

        public init(maxResults: Int32? = nil, filter: EventTypeFilter? = nil, nextToken: String? = nil, locale: String? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filter = "filter"
            case nextToken = "nextToken"
            case locale = "locale"
        }
    }

    public struct DescribeEventsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "events", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The events that match the specified filter criteria.
        public let events: [Event]?
        /// If the results of a search are large, only a portion of the results are returned, and a nextToken pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.
        public let nextToken: String?

        public init(events: [Event]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
            case nextToken = "nextToken"
        }
    }

}