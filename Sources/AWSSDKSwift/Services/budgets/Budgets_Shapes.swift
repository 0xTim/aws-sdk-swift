// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Budgets {

    public struct DeleteBudgetRequest: Serializable, Initializable {
        var accountId: String = ""
        var budgetName: String = ""

        public init() {}

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

    }

    public struct DescribeBudgetsResponse: Serializable, Initializable {
        var budgets: [Budget]? = nil
        var nextToken: String? = nil

        public init() {}

        public init(budgets: [Budget]? = nil, nextToken: String? = nil) {
            self.budgets = budgets
            self.nextToken = nextToken
        }

    }

    public struct DescribeBudgetRequest: Serializable, Initializable {
        var accountId: String = ""
        var budgetName: String = ""

        public init() {}

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

    }

    public struct DescribeBudgetResponse: Serializable, Initializable {
        var budget: Budget? = nil

        public init() {}

        public init(budget: Budget? = nil) {
            self.budget = budget
        }

    }

    public struct DeleteNotificationRequest: Serializable, Initializable {
        var accountId: String = ""
        var notification: Notification = Notification()
        var budgetName: String = ""

        public init() {}

        public init(accountId: String, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.budgetName = budgetName
        }

    }

    public struct NotificationWithSubscribers: Serializable, Initializable {
        var subscribers: [Subscriber] = []
        var notification: Notification = Notification()

        public init() {}

        public init(subscribers: [Subscriber], notification: Notification) {
            self.subscribers = subscribers
            self.notification = notification
        }

    }

    public struct UpdateSubscriberRequest: Serializable, Initializable {
        var accountId: String = ""
        var notification: Notification = Notification()
        var oldSubscriber: Subscriber = Subscriber()
        var budgetName: String = ""
        var newSubscriber: Subscriber = Subscriber()

        public init() {}

        public init(accountId: String, notification: Notification, oldSubscriber: Subscriber, budgetName: String, newSubscriber: Subscriber) {
            self.accountId = accountId
            self.notification = notification
            self.oldSubscriber = oldSubscriber
            self.budgetName = budgetName
            self.newSubscriber = newSubscriber
        }

    }

    public struct DeleteNotificationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct CreateNotificationRequest: Serializable, Initializable {
        var accountId: String = ""
        var notification: Notification = Notification()
        var subscribers: [Subscriber] = []
        var budgetName: String = ""

        public init() {}

        public init(accountId: String, notification: Notification, subscribers: [Subscriber], budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.subscribers = subscribers
            self.budgetName = budgetName
        }

    }

    public struct UpdateSubscriberResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeNotificationsForBudgetResponse: Serializable, Initializable {
        var notifications: [Notification]? = nil
        var nextToken: String? = nil

        public init() {}

        public init(notifications: [Notification]? = nil, nextToken: String? = nil) {
            self.notifications = notifications
            self.nextToken = nextToken
        }

    }

    public struct DeleteSubscriberRequest: Serializable, Initializable {
        var accountId: String = ""
        var subscriber: Subscriber = Subscriber()
        var notification: Notification = Notification()
        var budgetName: String = ""

        public init() {}

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

    }

    public struct CostTypes: Serializable, Initializable {
        var includeSubscription: Bool = false
        var useBlended: Bool = false
        var includeTax: Bool = false

        public init() {}

        public init(includeSubscription: Bool, useBlended: Bool, includeTax: Bool) {
            self.includeSubscription = includeSubscription
            self.useBlended = useBlended
            self.includeTax = includeTax
        }

    }

    public struct CreateBudgetResponse: Serializable, Initializable {

        public init() {}

    }

    public struct CreateNotificationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeBudgetsRequest: Serializable, Initializable {
        var accountId: String = ""
        var nextToken: String? = nil
        var maxResults: Int32? = nil

        public init() {}

        public init(accountId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DeleteBudgetResponse: Serializable, Initializable {

        public init() {}

    }

    public struct CreateBudgetRequest: Serializable, Initializable {
        var accountId: String = ""
        var budget: Budget = Budget()
        var notificationsWithSubscribers: [NotificationWithSubscribers]? = nil

        public init() {}

        public init(accountId: String, budget: Budget, notificationsWithSubscribers: [NotificationWithSubscribers]? = nil) {
            self.accountId = accountId
            self.budget = budget
            self.notificationsWithSubscribers = notificationsWithSubscribers
        }

    }

    public struct DeleteSubscriberResponse: Serializable, Initializable {

        public init() {}

    }

    public struct UpdateNotificationRequest: Serializable, Initializable {
        var accountId: String = ""
        var oldNotification: Notification = Notification()
        var newNotification: Notification = Notification()
        var budgetName: String = ""

        public init() {}

        public init(accountId: String, oldNotification: Notification, newNotification: Notification, budgetName: String) {
            self.accountId = accountId
            self.oldNotification = oldNotification
            self.newNotification = newNotification
            self.budgetName = budgetName
        }

    }

    public struct UpdateBudgetResponse: Serializable, Initializable {

        public init() {}

    }

    public struct UpdateNotificationResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeSubscribersForNotificationRequest: Serializable, Initializable {
        var accountId: String = ""
        var notification: Notification = Notification()
        var nextToken: String? = nil
        var budgetName: String = ""
        var maxResults: Int32? = nil

        public init() {}

        public init(accountId: String, notification: Notification, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.notification = notification
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

    }

    public struct CreateSubscriberRequest: Serializable, Initializable {
        var accountId: String = ""
        var subscriber: Subscriber = Subscriber()
        var notification: Notification = Notification()
        var budgetName: String = ""

        public init() {}

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

    }

    public struct CreateSubscriberResponse: Serializable, Initializable {

        public init() {}

    }

    public struct Notification: Serializable, Initializable {
        var comparisonOperator: String = ""
        var threshold: Double = 0
        var notificationType: String = ""

        public init() {}

        public init(comparisonOperator: String, threshold: Double, notificationType: String) {
            self.comparisonOperator = comparisonOperator
            self.threshold = threshold
            self.notificationType = notificationType
        }

    }

    public struct Subscriber: Serializable, Initializable {
        var address: String = ""
        var subscriptionType: String = ""

        public init() {}

        public init(address: String, subscriptionType: String) {
            self.address = address
            self.subscriptionType = subscriptionType
        }

    }

    public struct DescribeNotificationsForBudgetRequest: Serializable, Initializable {
        var accountId: String = ""
        var nextToken: String? = nil
        var budgetName: String = ""
        var maxResults: Int32? = nil

        public init() {}

        public init(accountId: String, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

    }

    public struct UpdateBudgetRequest: Serializable, Initializable {
        var accountId: String = ""
        var newBudget: Budget = Budget()

        public init() {}

        public init(accountId: String, newBudget: Budget) {
            self.accountId = accountId
            self.newBudget = newBudget
        }

    }

    public struct Budget: Serializable, Initializable {
        var timeUnit: String = ""
        var budgetLimit: Spend = Spend()
        var budgetName: String = ""
        var timePeriod: TimePeriod = TimePeriod()
        var budgetType: String = ""
        var costFilters: [String: [String]]? = nil
        var calculatedSpend: CalculatedSpend? = nil
        var costTypes: CostTypes = CostTypes()

        public init() {}

        public init(timeUnit: String, budgetLimit: Spend, budgetName: String, timePeriod: TimePeriod, budgetType: String, costFilters: [String: [String]]? = nil, calculatedSpend: CalculatedSpend? = nil, costTypes: CostTypes) {
            self.timeUnit = timeUnit
            self.budgetLimit = budgetLimit
            self.budgetName = budgetName
            self.timePeriod = timePeriod
            self.budgetType = budgetType
            self.costFilters = costFilters
            self.calculatedSpend = calculatedSpend
            self.costTypes = costTypes
        }

    }

    public struct TimePeriod: Serializable, Initializable {
        var start: Date = Date()
        var end: Date = Date()

        public init() {}

        public init(start: Date, end: Date) {
            self.start = start
            self.end = end
        }

    }

    public struct CalculatedSpend: Serializable, Initializable {
        var forecastedSpend: Spend? = nil
        var actualSpend: Spend = Spend()

        public init() {}

        public init(forecastedSpend: Spend? = nil, actualSpend: Spend) {
            self.forecastedSpend = forecastedSpend
            self.actualSpend = actualSpend
        }

    }

    public struct Spend: Serializable, Initializable {
        var unit: String = ""
        var amount: String = ""

        public init() {}

        public init(unit: String, amount: String) {
            self.unit = unit
            self.amount = amount
        }

    }

    public struct DescribeSubscribersForNotificationResponse: Serializable, Initializable {
        var subscribers: [Subscriber]? = nil
        var nextToken: String? = nil

        public init() {}

        public init(subscribers: [Subscriber]? = nil, nextToken: String? = nil) {
            self.subscribers = subscribers
            self.nextToken = nextToken
        }

    }

}