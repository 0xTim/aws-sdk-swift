// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Budgets {

    public struct DeleteBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId that is associated with the budget that you want to delete.
        public let accountId: String
        /// The name of the budget that you want to delete.
        public let budgetName: String

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case budgetName = "BudgetName"
        }
    }

    public struct DescribeBudgetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Budgets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of budgets.
        public let budgets: [Budget]?
        /// The pagination token that indicates the next set of results that you can retrieve.
        public let nextToken: String?

        public init(budgets: [Budget]? = nil, nextToken: String? = nil) {
            self.budgets = budgets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case budgets = "Budgets"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId that is associated with the budget that you want a description of.
        public let accountId: String
        /// The name of the budget that you want a description of.
        public let budgetName: String

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case budgetName = "BudgetName"
        }
    }

    public struct DescribeBudgetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Budget", required: false, type: .structure)
        ]
        /// The description of the budget.
        public let budget: Budget?

        public init(budget: Budget? = nil) {
            self.budget = budget
        }

        private enum CodingKeys: String, CodingKey {
            case budget = "Budget"
        }
    }

    public struct DeleteNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId that is associated with the budget whose notification you want to delete.
        public let accountId: String
        /// The notification that you want to delete.
        public let notification: Notification
        /// The name of the budget whose notification you want to delete.
        public let budgetName: String

        public init(accountId: String, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case budgetName = "BudgetName"
        }
    }

    public struct NotificationWithSubscribers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscribers", required: true, type: .list), 
            AWSShapeMember(label: "Notification", required: true, type: .structure)
        ]
        /// A list of subscribers who are subscribed to this notification.
        public let subscribers: [Subscriber]
        /// The notification associated with a budget.
        public let notification: Notification

        public init(subscribers: [Subscriber], notification: Notification) {
            self.subscribers = subscribers
            self.notification = notification
        }

        private enum CodingKeys: String, CodingKey {
            case subscribers = "Subscribers"
            case notification = "Notification"
        }
    }

    public struct UpdateSubscriberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "OldSubscriber", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "NewSubscriber", required: true, type: .structure)
        ]
        /// The accountId that is associated with the budget whose subscriber you want to update.
        public let accountId: String
        /// The notification whose subscriber you want to update.
        public let notification: Notification
        /// The previous subscriber associated with a budget notification.
        public let oldSubscriber: Subscriber
        /// The name of the budget whose subscriber you want to update.
        public let budgetName: String
        /// The updated subscriber associated with a budget notification.
        public let newSubscriber: Subscriber

        public init(accountId: String, notification: Notification, oldSubscriber: Subscriber, budgetName: String, newSubscriber: Subscriber) {
            self.accountId = accountId
            self.notification = notification
            self.oldSubscriber = oldSubscriber
            self.budgetName = budgetName
            self.newSubscriber = newSubscriber
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case oldSubscriber = "OldSubscriber"
            case budgetName = "BudgetName"
            case newSubscriber = "NewSubscriber"
        }
    }

    public struct DeleteNotificationResponse: AWSShape {

    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case sns = "SNS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct CreateNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "Subscribers", required: true, type: .list), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId that is associated with the budget that you want to create a notification for.
        public let accountId: String
        /// The notification that you want to create.
        public let notification: Notification
        /// A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to ten email subscribers.
        public let subscribers: [Subscriber]
        /// The name of the budget that you want AWS to notified you about. Budget names must be unique within an account.
        public let budgetName: String

        public init(accountId: String, notification: Notification, subscribers: [Subscriber], budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.subscribers = subscribers
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case subscribers = "Subscribers"
            case budgetName = "BudgetName"
        }
    }

    public struct UpdateSubscriberResponse: AWSShape {

    }

    public struct DescribeNotificationsForBudgetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notifications", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of notifications associated with a budget.
        public let notifications: [Notification]?
        /// The pagination token that indicates the next set of results that you can retrieve.
        public let nextToken: String?

        public init(notifications: [Notification]? = nil, nextToken: String? = nil) {
            self.notifications = notifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case notifications = "Notifications"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteSubscriberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Subscriber", required: true, type: .structure), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId that is associated with the budget whose subscriber you want to delete.
        public let accountId: String
        /// The subscriber that you want to delete.
        public let subscriber: Subscriber
        /// The notification whose subscriber you want to delete.
        public let notification: Notification
        /// The name of the budget whose subscriber you want to delete.
        public let budgetName: String

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case subscriber = "Subscriber"
            case notification = "Notification"
            case budgetName = "BudgetName"
        }
    }

    public struct CreateBudgetResponse: AWSShape {

    }

    public struct CostTypes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeSupport", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeCredit", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeSubscription", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeUpfront", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeOtherSubscription", required: false, type: .boolean), 
            AWSShapeMember(label: "UseAmortized", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeTax", required: false, type: .boolean), 
            AWSShapeMember(label: "UseBlended", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeRefund", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeDiscount", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeRecurring", required: false, type: .boolean)
        ]
        /// Specifies whether a budget includes support subscription fees. The default value is true.
        public let includeSupport: Bool?
        /// Specifies whether a budget includes credits. The default value is true.
        public let includeCredit: Bool?
        /// Specifies whether a budget includes subscriptions. The default value is true.
        public let includeSubscription: Bool?
        /// Specifies whether a budget includes upfront RI costs. The default value is true.
        public let includeUpfront: Bool?
        /// Specifies whether a budget includes non-RI subscription costs. The default value is true.
        public let includeOtherSubscription: Bool?
        /// Specifies whether a budget uses the amortized rate. The default value is false.
        public let useAmortized: Bool?
        /// Specifies whether a budget includes taxes. The default value is true.
        public let includeTax: Bool?
        /// Specifies whether a budget uses blended rate. The default value is false.
        public let useBlended: Bool?
        /// Specifies whether a budget includes refunds. The default value is true.
        public let includeRefund: Bool?
        /// Specifies whether a budget includes discounts. The default value is true.
        public let includeDiscount: Bool?
        /// Specifies whether a budget includes recurring fees such as monthly RI fees. The default value is true.
        public let includeRecurring: Bool?

        public init(includeSupport: Bool? = nil, includeCredit: Bool? = nil, includeSubscription: Bool? = nil, includeUpfront: Bool? = nil, includeOtherSubscription: Bool? = nil, useAmortized: Bool? = nil, includeTax: Bool? = nil, useBlended: Bool? = nil, includeRefund: Bool? = nil, includeDiscount: Bool? = nil, includeRecurring: Bool? = nil) {
            self.includeSupport = includeSupport
            self.includeCredit = includeCredit
            self.includeSubscription = includeSubscription
            self.includeUpfront = includeUpfront
            self.includeOtherSubscription = includeOtherSubscription
            self.useAmortized = useAmortized
            self.includeTax = includeTax
            self.useBlended = useBlended
            self.includeRefund = includeRefund
            self.includeDiscount = includeDiscount
            self.includeRecurring = includeRecurring
        }

        private enum CodingKeys: String, CodingKey {
            case includeSupport = "IncludeSupport"
            case includeCredit = "IncludeCredit"
            case includeSubscription = "IncludeSubscription"
            case includeUpfront = "IncludeUpfront"
            case includeOtherSubscription = "IncludeOtherSubscription"
            case useAmortized = "UseAmortized"
            case includeTax = "IncludeTax"
            case useBlended = "UseBlended"
            case includeRefund = "IncludeRefund"
            case includeDiscount = "IncludeDiscount"
            case includeRecurring = "IncludeRecurring"
        }
    }

    public struct CreateNotificationResponse: AWSShape {

    }

    public struct DescribeBudgetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The accountId that is associated with the budgets that you want descriptions of.
        public let accountId: String
        /// The pagination token that indicates the next set of results to retrieve.
        public let nextToken: String?
        /// Optional integer. Specifies the maximum number of results to return in response.
        public let maxResults: Int32?

        public init(accountId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteBudgetResponse: AWSShape {

    }

    public struct CreateBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Budget", required: true, type: .structure), 
            AWSShapeMember(label: "NotificationsWithSubscribers", required: false, type: .list)
        ]
        /// The accountId that is associated with the budget.
        public let accountId: String
        /// The budget object that you want to create.
        public let budget: Budget
        /// A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to ten email subscribers. If you include notifications and subscribers in your CreateBudget call, AWS creates the notifications and subscribers for you.
        public let notificationsWithSubscribers: [NotificationWithSubscribers]?

        public init(accountId: String, budget: Budget, notificationsWithSubscribers: [NotificationWithSubscribers]? = nil) {
            self.accountId = accountId
            self.budget = budget
            self.notificationsWithSubscribers = notificationsWithSubscribers
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case budget = "Budget"
            case notificationsWithSubscribers = "NotificationsWithSubscribers"
        }
    }

    public struct DeleteSubscriberResponse: AWSShape {

    }

    public struct UpdateNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "OldNotification", required: true, type: .structure), 
            AWSShapeMember(label: "NewNotification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId that is associated with the budget whose notification you want to update.
        public let accountId: String
        /// The previous notification associated with a budget.
        public let oldNotification: Notification
        /// The updated notification to be associated with a budget.
        public let newNotification: Notification
        /// The name of the budget whose notification you want to update.
        public let budgetName: String

        public init(accountId: String, oldNotification: Notification, newNotification: Notification, budgetName: String) {
            self.accountId = accountId
            self.oldNotification = oldNotification
            self.newNotification = newNotification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case oldNotification = "OldNotification"
            case newNotification = "NewNotification"
            case budgetName = "BudgetName"
        }
    }

    public struct UpdateBudgetResponse: AWSShape {

    }

    public struct UpdateNotificationResponse: AWSShape {

    }

    public enum ThresholdType: String, CustomStringConvertible, Codable {
        case percentage = "PERCENTAGE"
        case absoluteValue = "ABSOLUTE_VALUE"
        public var description: String { return self.rawValue }
    }

    public enum BudgetType: String, CustomStringConvertible, Codable {
        case usage = "USAGE"
        case cost = "COST"
        case riUtilization = "RI_UTILIZATION"
        case riCoverage = "RI_COVERAGE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSubscribersForNotificationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The accountId that is associated with the budget whose subscribers you want descriptions of.
        public let accountId: String
        /// The notification whose subscribers you want to list.
        public let notification: Notification
        /// The pagination token that indicates the next set of results to retrieve.
        public let nextToken: String?
        /// The name of the budget whose subscribers you want descriptions of.
        public let budgetName: String
        /// Optional integer. Specifies the maximum number of results to return in response.
        public let maxResults: Int32?

        public init(accountId: String, notification: Notification, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.notification = notification
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case nextToken = "NextToken"
            case budgetName = "BudgetName"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateSubscriberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Subscriber", required: true, type: .structure), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        /// The accountId associated with the budget that you want to create a subscriber for.
        public let accountId: String
        /// The subscriber that you want to associate with a budget notification.
        public let subscriber: Subscriber
        /// The notification that you want to create a subscriber for.
        public let notification: Notification
        /// The name of the budget that you want to subscribe to. Budget names must be unique within an account.
        public let budgetName: String

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case subscriber = "Subscriber"
            case notification = "Notification"
            case budgetName = "BudgetName"
        }
    }

    public struct CreateSubscriberResponse: AWSShape {

    }

    public struct Notification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "NotificationType", required: true, type: .enum), 
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "ThresholdType", required: false, type: .enum)
        ]
        /// The threshold associated with a notification. Thresholds are always a percentage.
        public let threshold: Double
        /// Whether the notification is for how much you have spent (ACTUAL) or for how much you are forecasted to spend (FORECASTED).
        public let notificationType: NotificationType
        /// The comparison used for this notification.
        public let comparisonOperator: ComparisonOperator
        /// The type of threshold for a notification. For ACTUAL thresholds, AWS notifies you when you go over the threshold, and for FORECASTED thresholds AWS notifies you when you are forecasted to go over the threshold.
        public let thresholdType: ThresholdType?

        public init(threshold: Double, notificationType: NotificationType, comparisonOperator: ComparisonOperator, thresholdType: ThresholdType? = nil) {
            self.threshold = threshold
            self.notificationType = notificationType
            self.comparisonOperator = comparisonOperator
            self.thresholdType = thresholdType
        }

        private enum CodingKeys: String, CodingKey {
            case threshold = "Threshold"
            case notificationType = "NotificationType"
            case comparisonOperator = "ComparisonOperator"
            case thresholdType = "ThresholdType"
        }
    }

    public struct Subscriber: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionType", required: true, type: .enum)
        ]
        /// The address that AWS sends budget notifications to, either an SNS topic or an email.
        public let address: String
        /// The type of notification that AWS sends to a subscriber.
        public let subscriptionType: SubscriptionType

        public init(address: String, subscriptionType: SubscriptionType) {
            self.address = address
            self.subscriptionType = subscriptionType
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case subscriptionType = "SubscriptionType"
        }
    }

    public struct DescribeNotificationsForBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The accountId that is associated with the budget whose notifications you want descriptions of.
        public let accountId: String
        /// The pagination token that indicates the next set of results to retrieve.
        public let nextToken: String?
        /// The name of the budget whose notifications you want descriptions of.
        public let budgetName: String
        /// Optional integer. Specifies the maximum number of results to return in response.
        public let maxResults: Int32?

        public init(accountId: String, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case nextToken = "NextToken"
            case budgetName = "BudgetName"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateBudgetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NewBudget", required: true, type: .structure)
        ]
        /// The accountId that is associated with the budget that you want to update.
        public let accountId: String
        /// The budget that you want to update your budget to.
        public let newBudget: Budget

        public init(accountId: String, newBudget: Budget) {
            self.accountId = accountId
            self.newBudget = newBudget
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case newBudget = "NewBudget"
        }
    }

    public enum TimeUnit: String, CustomStringConvertible, Codable {
        case daily = "DAILY"
        case monthly = "MONTHLY"
        case quarterly = "QUARTERLY"
        case annually = "ANNUALLY"
        public var description: String { return self.rawValue }
    }

    public struct Budget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeUnit", required: true, type: .enum), 
            AWSShapeMember(label: "BudgetLimit", required: false, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "TimePeriod", required: false, type: .structure), 
            AWSShapeMember(label: "BudgetType", required: true, type: .enum), 
            AWSShapeMember(label: "CostFilters", required: false, type: .map), 
            AWSShapeMember(label: "CalculatedSpend", required: false, type: .structure), 
            AWSShapeMember(label: "CostTypes", required: false, type: .structure)
        ]
        /// The length of time until a budget resets the actual and forecasted spend.
        public let timeUnit: TimeUnit
        /// The total amount of cost, usage, or RI utilization that you want to track with your budget.  BudgetLimit is required for cost or usage budgets, but optional for RI utilization budgets. RI utilization budgets default to the only valid value for RI utilization budgets, which is 100.
        public let budgetLimit: Spend?
        /// The name of a budget. Unique within accounts. : and \ characters are not allowed in the BudgetName.
        public let budgetName: String
        /// The period of time covered by a budget. Has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date.  If you created your budget and didn't specify a start date, AWS defaults to the start of your chosen time period (i.e. DAILY, MONTHLY, QUARTERLY, ANNUALLY). For example, if you created your budget on January 24th 2018, chose DAILY, and didn't set a start date, AWS set your start date to 01/24/18 00:00 UTC. If you chose MONTHLY, AWS set your start date to 01/01/18 00:00 UTC. If you didn't specify an end date, AWS set your end date to 06/15/87 00:00 UTC. The defaults are the same for the AWS Billing and Cost Management console and the API.  You can change either date with the UpdateBudget operation. After the end date, AWS deletes the budget and all associated notifications and subscribers.
        public let timePeriod: TimePeriod?
        /// Whether this budget tracks monetary costs, usage, or RI utilization.
        public let budgetType: BudgetType
        /// The cost filters applied to a budget, such as service or region.
        public let costFilters: [String: [String]]?
        /// The actual and forecasted cost or usage being tracked by a budget.
        public let calculatedSpend: CalculatedSpend?
        /// The types of costs included in this budget.
        public let costTypes: CostTypes?

        public init(timeUnit: TimeUnit, budgetLimit: Spend? = nil, budgetName: String, timePeriod: TimePeriod? = nil, budgetType: BudgetType, costFilters: [String: [String]]? = nil, calculatedSpend: CalculatedSpend? = nil, costTypes: CostTypes? = nil) {
            self.timeUnit = timeUnit
            self.budgetLimit = budgetLimit
            self.budgetName = budgetName
            self.timePeriod = timePeriod
            self.budgetType = budgetType
            self.costFilters = costFilters
            self.calculatedSpend = calculatedSpend
            self.costTypes = costTypes
        }

        private enum CodingKeys: String, CodingKey {
            case timeUnit = "TimeUnit"
            case budgetLimit = "BudgetLimit"
            case budgetName = "BudgetName"
            case timePeriod = "TimePeriod"
            case budgetType = "BudgetType"
            case costFilters = "CostFilters"
            case calculatedSpend = "CalculatedSpend"
            case costTypes = "CostTypes"
        }
    }

    public struct TimePeriod: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Start", required: false, type: .timestamp), 
            AWSShapeMember(label: "End", required: false, type: .timestamp)
        ]
        /// The start date for a budget. If you created your budget and didn't specify a start date, AWS defaults to the start of your chosen time period (i.e. DAILY, MONTHLY, QUARTERLY, ANNUALLY). For example, if you created your budget on January 24th 2018, chose DAILY, and didn't set a start date, AWS set your start date to 01/24/18 00:00 UTC. If you chose MONTHLY, AWS set your start date to 01/01/18 00:00 UTC. The defaults are the same for the AWS Billing and Cost Management console and the API. You can change your start date with the UpdateBudget operation.
        public let start: TimeStamp?
        /// The end date for a budget. If you didn't specify an end date, AWS set your end date to 06/15/87 00:00 UTC. The defaults are the same for the AWS Billing and Cost Management console and the API. After the end date, AWS deletes the budget and all associated notifications and subscribers. You can change your end date with the UpdateBudget operation.
        public let end: TimeStamp?

        public init(start: TimeStamp? = nil, end: TimeStamp? = nil) {
            self.start = start
            self.end = end
        }

        private enum CodingKeys: String, CodingKey {
            case start = "Start"
            case end = "End"
        }
    }

    public struct CalculatedSpend: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForecastedSpend", required: false, type: .structure), 
            AWSShapeMember(label: "ActualSpend", required: true, type: .structure)
        ]
        /// The amount of cost, usage, or RI units that you are forecasted to use.
        public let forecastedSpend: Spend?
        /// The amount of cost, usage, or RI units that you have used.
        public let actualSpend: Spend

        public init(forecastedSpend: Spend? = nil, actualSpend: Spend) {
            self.forecastedSpend = forecastedSpend
            self.actualSpend = actualSpend
        }

        private enum CodingKeys: String, CodingKey {
            case forecastedSpend = "ForecastedSpend"
            case actualSpend = "ActualSpend"
        }
    }

    public struct Spend: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unit", required: true, type: .string), 
            AWSShapeMember(label: "Amount", required: true, type: .string)
        ]
        /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB.
        public let unit: String
        /// The cost or usage amount associated with a budget forecast, actual spend, or budget threshold.
        public let amount: String

        public init(unit: String, amount: String) {
            self.unit = unit
            self.amount = amount
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "Unit"
            case amount = "Amount"
        }
    }

    public struct DescribeSubscribersForNotificationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscribers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of subscribers associated with a notification.
        public let subscribers: [Subscriber]?
        /// The pagination token that indicates the next set of results that you can retrieve.
        public let nextToken: String?

        public init(subscribers: [Subscriber]? = nil, nextToken: String? = nil) {
            self.subscribers = subscribers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case subscribers = "Subscribers"
            case nextToken = "NextToken"
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterThan = "GREATER_THAN"
        case lessThan = "LESS_THAN"
        case equalTo = "EQUAL_TO"
        public var description: String { return self.rawValue }
    }

    public enum NotificationType: String, CustomStringConvertible, Codable {
        case actual = "ACTUAL"
        case forecasted = "FORECASTED"
        public var description: String { return self.rawValue }
    }

}