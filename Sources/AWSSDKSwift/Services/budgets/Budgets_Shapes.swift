// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Budgets {

    public struct DeleteBudgetRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var budgetName: String = ""

        public init() {}

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

    }

    public struct DescribeBudgetsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var budgets: [Budget]? = nil
        public var nextToken: String? = nil

        public init() {}

        public init(budgets: [Budget]? = nil, nextToken: String? = nil) {
            self.budgets = budgets
            self.nextToken = nextToken
        }

    }

    public struct DescribeBudgetRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var budgetName: String = ""

        public init() {}

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

    }

    public struct DescribeBudgetResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var budget: Budget? = nil

        public init() {}

        public init(budget: Budget? = nil) {
            self.budget = budget
        }

    }

    public struct DeleteNotificationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var notification: Notification = Notification()
        public var budgetName: String = ""

        public init() {}

        public init(accountId: String, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.budgetName = budgetName
        }

    }

    public struct NotificationWithSubscribers: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var subscribers: [Subscriber] = []
        public var notification: Notification = Notification()

        public init() {}

        public init(subscribers: [Subscriber], notification: Notification) {
            self.subscribers = subscribers
            self.notification = notification
        }

    }

    public struct UpdateSubscriberRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var notification: Notification = Notification()
        public var oldSubscriber: Subscriber = Subscriber()
        public var budgetName: String = ""
        public var newSubscriber: Subscriber = Subscriber()

        public init() {}

        public init(accountId: String, notification: Notification, oldSubscriber: Subscriber, budgetName: String, newSubscriber: Subscriber) {
            self.accountId = accountId
            self.notification = notification
            self.oldSubscriber = oldSubscriber
            self.budgetName = budgetName
            self.newSubscriber = newSubscriber
        }

    }

    public struct DeleteNotificationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CreateNotificationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var notification: Notification = Notification()
        public var subscribers: [Subscriber] = []
        public var budgetName: String = ""

        public init() {}

        public init(accountId: String, notification: Notification, subscribers: [Subscriber], budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.subscribers = subscribers
            self.budgetName = budgetName
        }

    }

    public struct UpdateSubscriberResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeNotificationsForBudgetResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var notifications: [Notification]? = nil
        public var nextToken: String? = nil

        public init() {}

        public init(notifications: [Notification]? = nil, nextToken: String? = nil) {
            self.notifications = notifications
            self.nextToken = nextToken
        }

    }

    public struct DeleteSubscriberRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var subscriber: Subscriber = Subscriber()
        public var notification: Notification = Notification()
        public var budgetName: String = ""

        public init() {}

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

    }

    public struct CreateBudgetResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CostTypes: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var includeSubscription: Bool = false
        public var useBlended: Bool = false
        public var includeTax: Bool = false

        public init() {}

        public init(includeSubscription: Bool, useBlended: Bool, includeTax: Bool) {
            self.includeSubscription = includeSubscription
            self.useBlended = useBlended
            self.includeTax = includeTax
        }

    }

    public struct CreateNotificationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeBudgetsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var nextToken: String? = nil
        public var maxResults: Int32? = nil

        public init() {}

        public init(accountId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DeleteBudgetResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct CreateBudgetRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var budget: Budget = Budget()
        public var notificationsWithSubscribers: [NotificationWithSubscribers]? = nil

        public init() {}

        public init(accountId: String, budget: Budget, notificationsWithSubscribers: [NotificationWithSubscribers]? = nil) {
            self.accountId = accountId
            self.budget = budget
            self.notificationsWithSubscribers = notificationsWithSubscribers
        }

    }

    public struct DeleteSubscriberResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct UpdateNotificationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var oldNotification: Notification = Notification()
        public var newNotification: Notification = Notification()
        public var budgetName: String = ""

        public init() {}

        public init(accountId: String, oldNotification: Notification, newNotification: Notification, budgetName: String) {
            self.accountId = accountId
            self.oldNotification = oldNotification
            self.newNotification = newNotification
            self.budgetName = budgetName
        }

    }

    public struct UpdateBudgetResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct UpdateNotificationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeSubscribersForNotificationRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var notification: Notification = Notification()
        public var nextToken: String? = nil
        public var budgetName: String = ""
        public var maxResults: Int32? = nil

        public init() {}

        public init(accountId: String, notification: Notification, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.notification = notification
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

    }

    public struct CreateSubscriberRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var subscriber: Subscriber = Subscriber()
        public var notification: Notification = Notification()
        public var budgetName: String = ""

        public init() {}

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

    }

    public struct CreateSubscriberResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct Notification: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var comparisonOperator: String = ""
        public var threshold: Double = 0
        public var notificationType: String = ""

        public init() {}

        public init(comparisonOperator: String, threshold: Double, notificationType: String) {
            self.comparisonOperator = comparisonOperator
            self.threshold = threshold
            self.notificationType = notificationType
        }

    }

    public struct Subscriber: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var address: String = ""
        public var subscriptionType: String = ""

        public init() {}

        public init(address: String, subscriptionType: String) {
            self.address = address
            self.subscriptionType = subscriptionType
        }

    }

    public struct DescribeNotificationsForBudgetRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var nextToken: String? = nil
        public var budgetName: String = ""
        public var maxResults: Int32? = nil

        public init() {}

        public init(accountId: String, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

    }

    public struct UpdateBudgetRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var accountId: String = ""
        public var newBudget: Budget = Budget()

        public init() {}

        public init(accountId: String, newBudget: Budget) {
            self.accountId = accountId
            self.newBudget = newBudget
        }

    }

    public struct Budget: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var timeUnit: String = ""
        public var budgetLimit: Spend = Spend()
        public var budgetName: String = ""
        public var timePeriod: TimePeriod = TimePeriod()
        public var budgetType: String = ""
        public var costFilters: [String: [String]]? = nil
        public var calculatedSpend: CalculatedSpend? = nil
        public var costTypes: CostTypes = CostTypes()

        public init() {}

        public init(timeUnit: String, budgetLimit: Spend, budgetName: String, timePeriod: TimePeriod, budgetType: String, costFilters: [String: [String]]? = nil, calculatedSpend: CalculatedSpend? = nil, costTypes: CostTypes) {
            self.timeUnit = timeUnit
            self.budgetLimit = budgetLimit
            self.budgetName = budgetName
            self.timePeriod = timePeriod
            self.budgetType = budgetType
            self.costFilters = costFilters
            self.calculatedSpend = calculatedSpend
            self.costTypes = costTypes
        }

    }

    public struct TimePeriod: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var start: Date = Date()
        public var end: Date = Date()

        public init() {}

        public init(start: Date, end: Date) {
            self.start = start
            self.end = end
        }

    }

    public struct CalculatedSpend: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var forecastedSpend: Spend? = nil
        public var actualSpend: Spend = Spend()

        public init() {}

        public init(forecastedSpend: Spend? = nil, actualSpend: Spend) {
            self.forecastedSpend = forecastedSpend
            self.actualSpend = actualSpend
        }

    }

    public struct Spend: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var unit: String = ""
        public var amount: String = ""

        public init() {}

        public init(unit: String, amount: String) {
            self.unit = unit
            self.amount = amount
        }

    }

    public struct DescribeSubscribersForNotificationResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var subscribers: [Subscriber]? = nil
        public var nextToken: String? = nil

        public init() {}

        public init(subscribers: [Subscriber]? = nil, nextToken: String? = nil) {
            self.subscribers = subscribers
            self.nextToken = nextToken
        }

    }

}