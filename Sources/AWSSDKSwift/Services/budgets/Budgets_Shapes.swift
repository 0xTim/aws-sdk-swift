// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Budgets {

    public struct DeleteBudgetRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        public let accountId: String
        public let budgetName: String

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case budgetName = "BudgetName"
        }
    }

    public struct DescribeBudgetsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Budgets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let budgets: [Budget]?
        public let nextToken: String?

        public init(budgets: [Budget]? = nil, nextToken: String? = nil) {
            self.budgets = budgets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case budgets = "Budgets"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeBudgetRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        public let accountId: String
        public let budgetName: String

        public init(accountId: String, budgetName: String) {
            self.accountId = accountId
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case budgetName = "BudgetName"
        }
    }

    public struct DescribeBudgetResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Budget", required: false, type: .structure)
        ]
        public let budget: Budget?

        public init(budget: Budget? = nil) {
            self.budget = budget
        }

        private enum CodingKeys: String, CodingKey {
            case budget = "Budget"
        }
    }

    public struct DeleteNotificationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        public let accountId: String
        public let notification: Notification
        public let budgetName: String

        public init(accountId: String, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case budgetName = "BudgetName"
        }
    }

    public struct NotificationWithSubscribers: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscribers", required: true, type: .list), 
            AWSShapeMember(label: "Notification", required: true, type: .structure)
        ]
        public let subscribers: [Subscriber]
        public let notification: Notification

        public init(subscribers: [Subscriber], notification: Notification) {
            self.subscribers = subscribers
            self.notification = notification
        }

        private enum CodingKeys: String, CodingKey {
            case subscribers = "Subscribers"
            case notification = "Notification"
        }
    }

    public struct UpdateSubscriberRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "OldSubscriber", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "NewSubscriber", required: true, type: .structure)
        ]
        public let accountId: String
        public let notification: Notification
        public let oldSubscriber: Subscriber
        public let budgetName: String
        public let newSubscriber: Subscriber

        public init(accountId: String, notification: Notification, oldSubscriber: Subscriber, budgetName: String, newSubscriber: Subscriber) {
            self.accountId = accountId
            self.notification = notification
            self.oldSubscriber = oldSubscriber
            self.budgetName = budgetName
            self.newSubscriber = newSubscriber
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case oldSubscriber = "OldSubscriber"
            case budgetName = "BudgetName"
            case newSubscriber = "NewSubscriber"
        }
    }

    public struct DeleteNotificationResponse: AWSShape {
        /// The key for the payload

    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case sns = "SNS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct CreateNotificationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "Subscribers", required: true, type: .list), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        public let accountId: String
        public let notification: Notification
        public let subscribers: [Subscriber]
        public let budgetName: String

        public init(accountId: String, notification: Notification, subscribers: [Subscriber], budgetName: String) {
            self.accountId = accountId
            self.notification = notification
            self.subscribers = subscribers
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case subscribers = "Subscribers"
            case budgetName = "BudgetName"
        }
    }

    public struct UpdateSubscriberResponse: AWSShape {
        /// The key for the payload

    }

    public struct DescribeNotificationsForBudgetResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notifications", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let notifications: [Notification]?
        public let nextToken: String?

        public init(notifications: [Notification]? = nil, nextToken: String? = nil) {
            self.notifications = notifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case notifications = "Notifications"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteSubscriberRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Subscriber", required: true, type: .structure), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        public let accountId: String
        public let subscriber: Subscriber
        public let notification: Notification
        public let budgetName: String

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case subscriber = "Subscriber"
            case notification = "Notification"
            case budgetName = "BudgetName"
        }
    }

    public struct CreateBudgetResponse: AWSShape {
        /// The key for the payload

    }

    public struct CostTypes: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeSubscription", required: true, type: .boolean), 
            AWSShapeMember(label: "UseBlended", required: true, type: .boolean), 
            AWSShapeMember(label: "IncludeTax", required: true, type: .boolean)
        ]
        public let includeSubscription: Bool
        public let useBlended: Bool
        public let includeTax: Bool

        public init(includeSubscription: Bool, useBlended: Bool, includeTax: Bool) {
            self.includeSubscription = includeSubscription
            self.useBlended = useBlended
            self.includeTax = includeTax
        }

        private enum CodingKeys: String, CodingKey {
            case includeSubscription = "IncludeSubscription"
            case useBlended = "UseBlended"
            case includeTax = "IncludeTax"
        }
    }

    public struct CreateNotificationResponse: AWSShape {
        /// The key for the payload

    }

    public struct DescribeBudgetsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        public let accountId: String
        public let nextToken: String?
        public let maxResults: Int32?

        public init(accountId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteBudgetResponse: AWSShape {
        /// The key for the payload

    }

    public struct CreateBudgetRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Budget", required: true, type: .structure), 
            AWSShapeMember(label: "NotificationsWithSubscribers", required: false, type: .list)
        ]
        public let accountId: String
        public let budget: Budget
        public let notificationsWithSubscribers: [NotificationWithSubscribers]?

        public init(accountId: String, budget: Budget, notificationsWithSubscribers: [NotificationWithSubscribers]? = nil) {
            self.accountId = accountId
            self.budget = budget
            self.notificationsWithSubscribers = notificationsWithSubscribers
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case budget = "Budget"
            case notificationsWithSubscribers = "NotificationsWithSubscribers"
        }
    }

    public struct DeleteSubscriberResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateNotificationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "OldNotification", required: true, type: .structure), 
            AWSShapeMember(label: "NewNotification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        public let accountId: String
        public let oldNotification: Notification
        public let newNotification: Notification
        public let budgetName: String

        public init(accountId: String, oldNotification: Notification, newNotification: Notification, budgetName: String) {
            self.accountId = accountId
            self.oldNotification = oldNotification
            self.newNotification = newNotification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case oldNotification = "OldNotification"
            case newNotification = "NewNotification"
            case budgetName = "BudgetName"
        }
    }

    public struct UpdateBudgetResponse: AWSShape {
        /// The key for the payload

    }

    public struct UpdateNotificationResponse: AWSShape {
        /// The key for the payload

    }

    public enum BudgetType: String, CustomStringConvertible, Codable {
        case usage = "USAGE"
        case cost = "COST"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSubscribersForNotificationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        public let accountId: String
        public let notification: Notification
        public let nextToken: String?
        public let budgetName: String
        public let maxResults: Int32?

        public init(accountId: String, notification: Notification, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.notification = notification
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case notification = "Notification"
            case nextToken = "NextToken"
            case budgetName = "BudgetName"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateSubscriberRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "Subscriber", required: true, type: .structure), 
            AWSShapeMember(label: "Notification", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string)
        ]
        public let accountId: String
        public let subscriber: Subscriber
        public let notification: Notification
        public let budgetName: String

        public init(accountId: String, subscriber: Subscriber, notification: Notification, budgetName: String) {
            self.accountId = accountId
            self.subscriber = subscriber
            self.notification = notification
            self.budgetName = budgetName
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case subscriber = "Subscriber"
            case notification = "Notification"
            case budgetName = "BudgetName"
        }
    }

    public struct CreateSubscriberResponse: AWSShape {
        /// The key for the payload

    }

    public struct Notification: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "NotificationType", required: true, type: .enum)
        ]
        public let comparisonOperator: ComparisonOperator
        public let threshold: Double
        public let notificationType: NotificationType

        public init(comparisonOperator: ComparisonOperator, threshold: Double, notificationType: NotificationType) {
            self.comparisonOperator = comparisonOperator
            self.threshold = threshold
            self.notificationType = notificationType
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case threshold = "Threshold"
            case notificationType = "NotificationType"
        }
    }

    public struct Subscriber: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionType", required: true, type: .enum)
        ]
        public let address: String
        public let subscriptionType: SubscriptionType

        public init(address: String, subscriptionType: SubscriptionType) {
            self.address = address
            self.subscriptionType = subscriptionType
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case subscriptionType = "SubscriptionType"
        }
    }

    public struct DescribeNotificationsForBudgetRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        public let accountId: String
        public let nextToken: String?
        public let budgetName: String
        public let maxResults: Int32?

        public init(accountId: String, nextToken: String? = nil, budgetName: String, maxResults: Int32? = nil) {
            self.accountId = accountId
            self.nextToken = nextToken
            self.budgetName = budgetName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case nextToken = "NextToken"
            case budgetName = "BudgetName"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateBudgetRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "NewBudget", required: true, type: .structure)
        ]
        public let accountId: String
        public let newBudget: Budget

        public init(accountId: String, newBudget: Budget) {
            self.accountId = accountId
            self.newBudget = newBudget
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case newBudget = "NewBudget"
        }
    }

    public enum TimeUnit: String, CustomStringConvertible, Codable {
        case monthly = "MONTHLY"
        case quarterly = "QUARTERLY"
        case annually = "ANNUALLY"
        public var description: String { return self.rawValue }
    }

    public struct Budget: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeUnit", required: true, type: .enum), 
            AWSShapeMember(label: "BudgetLimit", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetName", required: true, type: .string), 
            AWSShapeMember(label: "TimePeriod", required: true, type: .structure), 
            AWSShapeMember(label: "BudgetType", required: true, type: .enum), 
            AWSShapeMember(label: "CostFilters", required: false, type: .map), 
            AWSShapeMember(label: "CalculatedSpend", required: false, type: .structure), 
            AWSShapeMember(label: "CostTypes", required: true, type: .structure)
        ]
        public let timeUnit: TimeUnit
        public let budgetLimit: Spend
        public let budgetName: String
        public let timePeriod: TimePeriod
        public let budgetType: BudgetType
        public let costFilters: [String: [String]]?
        public let calculatedSpend: CalculatedSpend?
        public let costTypes: CostTypes

        public init(timeUnit: TimeUnit, budgetLimit: Spend, budgetName: String, timePeriod: TimePeriod, budgetType: BudgetType, costFilters: [String: [String]]? = nil, calculatedSpend: CalculatedSpend? = nil, costTypes: CostTypes) {
            self.timeUnit = timeUnit
            self.budgetLimit = budgetLimit
            self.budgetName = budgetName
            self.timePeriod = timePeriod
            self.budgetType = budgetType
            self.costFilters = costFilters
            self.calculatedSpend = calculatedSpend
            self.costTypes = costTypes
        }

        private enum CodingKeys: String, CodingKey {
            case timeUnit = "TimeUnit"
            case budgetLimit = "BudgetLimit"
            case budgetName = "BudgetName"
            case timePeriod = "TimePeriod"
            case budgetType = "BudgetType"
            case costFilters = "CostFilters"
            case calculatedSpend = "CalculatedSpend"
            case costTypes = "CostTypes"
        }
    }

    public struct TimePeriod: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Start", required: true, type: .timestamp), 
            AWSShapeMember(label: "End", required: true, type: .timestamp)
        ]
        public let start: TimeStamp
        public let end: TimeStamp

        public init(start: TimeStamp, end: TimeStamp) {
            self.start = start
            self.end = end
        }

        private enum CodingKeys: String, CodingKey {
            case start = "Start"
            case end = "End"
        }
    }

    public struct CalculatedSpend: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForecastedSpend", required: false, type: .structure), 
            AWSShapeMember(label: "ActualSpend", required: true, type: .structure)
        ]
        public let forecastedSpend: Spend?
        public let actualSpend: Spend

        public init(forecastedSpend: Spend? = nil, actualSpend: Spend) {
            self.forecastedSpend = forecastedSpend
            self.actualSpend = actualSpend
        }

        private enum CodingKeys: String, CodingKey {
            case forecastedSpend = "ForecastedSpend"
            case actualSpend = "ActualSpend"
        }
    }

    public struct Spend: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unit", required: true, type: .string), 
            AWSShapeMember(label: "Amount", required: true, type: .string)
        ]
        public let unit: String
        public let amount: String

        public init(unit: String, amount: String) {
            self.unit = unit
            self.amount = amount
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "Unit"
            case amount = "Amount"
        }
    }

    public struct DescribeSubscribersForNotificationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscribers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let subscribers: [Subscriber]?
        public let nextToken: String?

        public init(subscribers: [Subscriber]? = nil, nextToken: String? = nil) {
            self.subscribers = subscribers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case subscribers = "Subscribers"
            case nextToken = "NextToken"
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case greaterThan = "GREATER_THAN"
        case lessThan = "LESS_THAN"
        case equalTo = "EQUAL_TO"
        public var description: String { return self.rawValue }
    }

    public enum NotificationType: String, CustomStringConvertible, Codable {
        case actual = "ACTUAL"
        case forecasted = "FORECASTED"
        public var description: String { return self.rawValue }
    }

}