// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ELBV2 {

    public enum LoadBalancerStateEnum: String, CustomStringConvertible, Codable {
        case active = "active"
        case provisioning = "provisioning"
        case activeImpaired = "active_impaired"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAccountLimitsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(pageSize: Int32? = nil, marker: String? = nil) {
            self.pageSize = pageSize
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case marker = "Marker"
        }
    }

    public enum IpAddressType: String, CustomStringConvertible, Codable {
        case ipv4 = "ipv4"
        case dualstack = "dualstack"
        public var description: String { return self.rawValue }
    }

    public enum AuthenticateOidcActionConditionalBehaviorEnum: String, CustomStringConvertible, Codable {
        case deny = "deny"
        case allow = "allow"
        case authenticate = "authenticate"
        public var description: String { return self.rawValue }
    }

    public enum ActionTypeEnum: String, CustomStringConvertible, Codable {
        case forward = "forward"
        case authenticateOidc = "authenticate-oidc"
        case authenticateCognito = "authenticate-cognito"
        case redirect = "redirect"
        case fixedResponse = "fixed-response"
        public var description: String { return self.rawValue }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "IsDefault", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the certificate.
        public let certificateArn: String?
        /// Indicates whether the certificate is the default certificate.
        public let isDefault: Bool?

        public init(certificateArn: String? = nil, isDefault: Bool? = nil) {
            self.certificateArn = certificateArn
            self.isDefault = isDefault
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case isDefault = "IsDefault"
        }
    }

    public struct AuthenticateCognitoActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserPoolDomain", required: true, type: .string), 
            AWSShapeMember(label: "SessionCookieName", required: false, type: .string), 
            AWSShapeMember(label: "OnUnauthenticatedRequest", required: false, type: .enum), 
            AWSShapeMember(label: "SessionTimeout", required: false, type: .long), 
            AWSShapeMember(label: "UserPoolClientId", required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationRequestExtraParams", required: false, type: .map), 
            AWSShapeMember(label: "UserPoolArn", required: true, type: .string), 
            AWSShapeMember(label: "Scope", required: false, type: .string)
        ]
        /// The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
        public let userPoolDomain: String
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public let sessionCookieName: String?
        /// The behavior if the user is not authenticated. The following are possible values:   deny - Return an HTTP 401 Unauthorized error.   allow - Allow the request to be forwarded to the target.   authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.  
        public let onUnauthenticatedRequest: AuthenticateCognitoActionConditionalBehaviorEnum?
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public let sessionTimeout: Int64?
        /// The ID of the Amazon Cognito user pool client.
        public let userPoolClientId: String
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public let authenticationRequestExtraParams: [String: String]?
        /// The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
        public let userPoolArn: String
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public let scope: String?

        public init(userPoolDomain: String, sessionCookieName: String? = nil, onUnauthenticatedRequest: AuthenticateCognitoActionConditionalBehaviorEnum? = nil, sessionTimeout: Int64? = nil, userPoolClientId: String, authenticationRequestExtraParams: [String: String]? = nil, userPoolArn: String, scope: String? = nil) {
            self.userPoolDomain = userPoolDomain
            self.sessionCookieName = sessionCookieName
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.sessionTimeout = sessionTimeout
            self.userPoolClientId = userPoolClientId
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.userPoolArn = userPoolArn
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case userPoolDomain = "UserPoolDomain"
            case sessionCookieName = "SessionCookieName"
            case onUnauthenticatedRequest = "OnUnauthenticatedRequest"
            case sessionTimeout = "SessionTimeout"
            case userPoolClientId = "UserPoolClientId"
            case authenticationRequestExtraParams = "AuthenticationRequestExtraParams"
            case userPoolArn = "UserPoolArn"
            case scope = "Scope"
        }
    }

    public struct DeleteLoadBalancerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(loadBalancerArn: String) {
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct SetSubnetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "Subnets", required: false, type: .list), 
            AWSShapeMember(label: "SubnetMappings", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The IDs of the public subnets. You must specify subnets from at least two Availability Zones. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.
        public let subnets: [String]?
        /// The IDs of the public subnets. You must specify subnets from at least two Availability Zones. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. You cannot specify Elastic IP addresses for your subnets.
        public let subnetMappings: [SubnetMapping]?

        public init(loadBalancerArn: String, subnets: [String]? = nil, subnetMappings: [SubnetMapping]? = nil) {
            self.loadBalancerArn = loadBalancerArn
            self.subnets = subnets
            self.subnetMappings = subnetMappings
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case subnets = "Subnets"
            case subnetMappings = "SubnetMappings"
        }
    }

    public struct TargetHealth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Reason", required: false, type: .enum)
        ]
        /// The state of the target.
        public let state: TargetHealthStateEnum?
        /// A description of the target health that provides additional details. If the state is healthy, a description is not provided.
        public let description: String?
        /// The reason code. If the target state is healthy, a reason code is not provided. If the target state is initial, the reason code can be one of the following values:    Elb.RegistrationInProgress - The target is in the process of being registered with the load balancer.    Elb.InitialHealthChecking - The load balancer is still sending the target the minimum number of health checks required to determine its health status.   If the target state is unhealthy, the reason code can be one of the following values:    Target.ResponseCodeMismatch - The health checks did not return an expected HTTP code.    Target.Timeout - The health check requests timed out.    Target.FailedHealthChecks - The health checks failed because the connection to the target timed out, the target response was malformed, or the target failed the health check for an unknown reason.    Elb.InternalError - The health checks failed due to an internal error.   If the target state is unused, the reason code can be one of the following values:    Target.NotRegistered - The target is not registered with the target group.    Target.NotInUse - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.    Target.IpUnusable - The target IP address is reserved for use by a load balancer.    Target.InvalidState - The target is in the stopped or terminated state.   If the target state is draining, the reason code can be the following value:    Target.DeregistrationInProgress - The target is in the process of being deregistered and the deregistration delay period has not expired.  
        public let reason: TargetHealthReasonEnum?

        public init(state: TargetHealthStateEnum? = nil, description: String? = nil, reason: TargetHealthReasonEnum? = nil) {
            self.state = state
            self.description = description
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case description = "Description"
            case reason = "Reason"
        }
    }

    public enum LoadBalancerSchemeEnum: String, CustomStringConvertible, Codable {
        case internetFacing = "internet-facing"
        case `internal` = "internal"
        public var description: String { return self.rawValue }
    }

    public struct RemoveListenerCertificatesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListenerArn", required: true, type: .string), 
            AWSShapeMember(label: "Certificates", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String
        /// The certificate to remove. You can specify one certificate per call.
        public let certificates: [Certificate]

        public init(listenerArn: String, certificates: [Certificate]) {
            self.listenerArn = listenerArn
            self.certificates = certificates
        }

        private enum CodingKeys: String, CodingKey {
            case listenerArn = "ListenerArn"
            case certificates = "Certificates"
        }
    }

    public struct DescribeSSLPoliciesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "SslPolicies", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?
        /// Information about the policies.
        public let sslPolicies: [SslPolicy]?

        public init(nextMarker: String? = nil, sslPolicies: [SslPolicy]? = nil) {
            self.nextMarker = nextMarker
            self.sslPolicies = sslPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case sslPolicies = "SslPolicies"
        }
    }

    public struct ModifyTargetGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String
        /// The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported only if the protocol of the target group is TCP.
        public let healthCheckProtocol: ProtocolEnum?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public let healthyThresholdCount: Int32?
        /// The number of consecutive health check failures required before considering the target unhealthy. For Network Load Balancers, this value must be the same as the healthy threshold count.
        public let unhealthyThresholdCount: Int32?
        /// [HTTP/HTTPS health checks] The ping path that is the destination for the health check request.
        public let healthCheckPath: String?
        /// The port the load balancer uses when performing health checks on targets.
        public let healthCheckPort: String?
        /// [HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target.
        public let matcher: Matcher?
        /// The approximate amount of time, in seconds, between health checks of an individual target. For Application Load Balancers, the range is 5–300 seconds. For Network Load Balancers, the supported values are 10 or 30 seconds.
        public let healthCheckIntervalSeconds: Int32?
        /// [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.
        public let healthCheckTimeoutSeconds: Int32?

        public init(targetGroupArn: String, healthCheckProtocol: ProtocolEnum? = nil, healthyThresholdCount: Int32? = nil, unhealthyThresholdCount: Int32? = nil, healthCheckPath: String? = nil, healthCheckPort: String? = nil, matcher: Matcher? = nil, healthCheckIntervalSeconds: Int32? = nil, healthCheckTimeoutSeconds: Int32? = nil) {
            self.targetGroupArn = targetGroupArn
            self.healthCheckProtocol = healthCheckProtocol
            self.healthyThresholdCount = healthyThresholdCount
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.healthCheckPath = healthCheckPath
            self.healthCheckPort = healthCheckPort
            self.matcher = matcher
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
            case healthCheckProtocol = "HealthCheckProtocol"
            case healthyThresholdCount = "HealthyThresholdCount"
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case healthCheckPath = "HealthCheckPath"
            case healthCheckPort = "HealthCheckPort"
            case matcher = "Matcher"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
        }
    }

    public struct DescribeListenerCertificatesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListenerArn", required: true, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Names (ARN) of the listener.
        public let listenerArn: String
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(listenerArn: String, pageSize: Int32? = nil, marker: String? = nil) {
            self.listenerArn = listenerArn
            self.pageSize = pageSize
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case listenerArn = "ListenerArn"
            case pageSize = "PageSize"
            case marker = "Marker"
        }
    }

    public struct DeleteListenerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(listenerArn: String) {
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case listenerArn = "ListenerArn"
        }
    }

    public struct DescribeTargetGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupArns", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Names", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupArns: [String]?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The names of the target groups.
        public let names: [String]?

        public init(loadBalancerArn: String? = nil, pageSize: Int32? = nil, targetGroupArns: [String]? = nil, marker: String? = nil, names: [String]? = nil) {
            self.loadBalancerArn = loadBalancerArn
            self.pageSize = pageSize
            self.targetGroupArns = targetGroupArns
            self.marker = marker
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case pageSize = "PageSize"
            case targetGroupArns = "TargetGroupArns"
            case marker = "Marker"
            case names = "Names"
        }
    }

    public enum LoadBalancerTypeEnum: String, CustomStringConvertible, Codable {
        case application = "application"
        case network = "network"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTagsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagDescriptions", required: false, type: .list)
        ]
        /// Information about the tags.
        public let tagDescriptions: [TagDescription]?

        public init(tagDescriptions: [TagDescription]? = nil) {
            self.tagDescriptions = tagDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case tagDescriptions = "TagDescriptions"
        }
    }

    public enum ProtocolEnum: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        case https = "HTTPS"
        case tcp = "TCP"
        public var description: String { return self.rawValue }
    }

    public struct CreateListenerOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// Information about the listener.
        public let listeners: [Listener]?

        public init(listeners: [Listener]? = nil) {
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
        }
    }

    public struct TargetGroupAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The name of the attribute. The following attributes are supported by both Application Load Balancers and Network Load Balancers:    deregistration_delay.timeout_seconds - The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds.   The following attributes are supported by only Application Load Balancers:    slow_start.duration_seconds - The time period, in seconds, during which a newly registered target receives a linearly increasing share of the traffic to the target group. After this time period ends, the target receives its full share of traffic. The range is 30-900 seconds (15 minutes). Slow start mode is disabled by default.    stickiness.enabled - Indicates whether sticky sessions are enabled. The value is true or false. The default is false.    stickiness.type - The type of sticky sessions. The possible value is lb_cookie.    stickiness.lb_cookie.duration_seconds - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).   The following attributes are supported by only Network Load Balancers:    proxy_protocol_v2.enabled - Indicates whether Proxy Protocol version 2 is enabled. The value is true or false. The default is false.  
        public let key: String?
        /// The value of the attribute.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct AddListenerCertificatesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListenerArn", required: true, type: .string), 
            AWSShapeMember(label: "Certificates", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String
        /// The certificate to add. You can specify one certificate per call.
        public let certificates: [Certificate]

        public init(listenerArn: String, certificates: [Certificate]) {
            self.listenerArn = listenerArn
            self.certificates = certificates
        }

        private enum CodingKeys: String, CodingKey {
            case listenerArn = "ListenerArn"
            case certificates = "Certificates"
        }
    }

    public struct DescribeTargetHealthInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "Targets", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String
        /// The targets.
        public let targets: [TargetDescription]?

        public init(targetGroupArn: String, targets: [TargetDescription]? = nil) {
            self.targetGroupArn = targetGroupArn
            self.targets = targets
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
            case targets = "Targets"
        }
    }

    public struct RemoveTagsOutput: AWSShape {

    }

    public struct ModifyTargetGroupAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the attributes.
        public let attributes: [TargetGroupAttribute]?

        public init(attributes: [TargetGroupAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct SetIpAddressTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "IpAddressType", required: true, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The IP address type. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4.
        public let ipAddressType: IpAddressType

        public init(loadBalancerArn: String, ipAddressType: IpAddressType) {
            self.loadBalancerArn = loadBalancerArn
            self.ipAddressType = ipAddressType
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case ipAddressType = "IpAddressType"
        }
    }

    public struct CreateTargetGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "TargetType", required: false, type: .enum), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: true, type: .integer), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum)
        ]
        /// The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
        public let name: String
        /// The identifier of the virtual private cloud (VPC).
        public let vpcId: String
        /// [HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target.
        public let matcher: Matcher?
        /// The amount of time, in seconds, during which no response from a target means a failed health check. For Application Load Balancers, the range is 2–60 seconds and the default is 5 seconds. For Network Load Balancers, this is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
        public let healthCheckTimeoutSeconds: Int32?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy. For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3.
        public let healthyThresholdCount: Int32?
        /// The port the load balancer uses when performing health checks on targets. The default is traffic-port, which is the port on which each target receives traffic from the load balancer.
        public let healthCheckPort: String?
        /// The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocol is TCP.
        public let `protocol`: ProtocolEnum
        /// The number of consecutive health check failures required before considering a target unhealthy. For Application Load Balancers, the default is 2. For Network Load Balancers, this value must be the same as the healthy threshold count.
        public let unhealthyThresholdCount: Int32?
        /// The type of target that you must specify when registering targets with this target group. The possible values are instance (targets are specified by instance ID) or ip (targets are specified by IP address). The default is instance. You can't specify targets for a target group using both instance IDs and IP addresses. If the target type is ip, specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.
        public let targetType: TargetTypeEnum?
        /// [HTTP/HTTPS health checks] The ping path that is the destination on the targets for health checks. The default is /.
        public let healthCheckPath: String?
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target.
        public let port: Int32
        /// The approximate amount of time, in seconds, between health checks of an individual target. For Application Load Balancers, the range is 5–300 seconds. For Network Load Balancers, the supported values are 10 or 30 seconds. The default is 30 seconds.
        public let healthCheckIntervalSeconds: Int32?
        /// The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported only if the protocol of the target group is TCP. For Application Load Balancers, the default is HTTP. For Network Load Balancers, the default is TCP.
        public let healthCheckProtocol: ProtocolEnum?

        public init(name: String, vpcId: String, matcher: Matcher? = nil, healthCheckTimeoutSeconds: Int32? = nil, healthyThresholdCount: Int32? = nil, healthCheckPort: String? = nil, protocol: ProtocolEnum, unhealthyThresholdCount: Int32? = nil, targetType: TargetTypeEnum? = nil, healthCheckPath: String? = nil, port: Int32, healthCheckIntervalSeconds: Int32? = nil, healthCheckProtocol: ProtocolEnum? = nil) {
            self.name = name
            self.vpcId = vpcId
            self.matcher = matcher
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.healthyThresholdCount = healthyThresholdCount
            self.healthCheckPort = healthCheckPort
            self.`protocol` = `protocol`
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.targetType = targetType
            self.healthCheckPath = healthCheckPath
            self.port = port
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthCheckProtocol = healthCheckProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case vpcId = "VpcId"
            case matcher = "Matcher"
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case healthyThresholdCount = "HealthyThresholdCount"
            case healthCheckPort = "HealthCheckPort"
            case `protocol` = "Protocol"
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case targetType = "TargetType"
            case healthCheckPath = "HealthCheckPath"
            case port = "Port"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case healthCheckProtocol = "HealthCheckProtocol"
        }
    }

    public struct DescribeListenerCertificatesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the certificates.
        public let certificates: [Certificate]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(certificates: [Certificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case nextMarker = "NextMarker"
        }
    }

    public struct CreateListenerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "Port", required: true, type: .integer), 
            AWSShapeMember(label: "DefaultActions", required: true, type: .list)
        ]
        /// The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocol is TCP.
        public let `protocol`: ProtocolEnum
        /// [HTTPS listeners] The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
        public let sslPolicy: String?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// [HTTPS listeners] The default SSL server certificate. You must provide exactly one default certificate. To create a certificate list, use AddListenerCertificates.
        public let certificates: [Certificate]?
        /// The port on which the load balancer is listening.
        public let port: Int32
        /// The actions for the default rule. The rule must include one forward action or one or more fixed-response actions. If the action type is forward, you can specify a single target group. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer or TCP for a Network Load Balancer. [HTTPS listener] If the action type is authenticate-oidc, you can use an identity provider that is OpenID Connect (OIDC) compliant to authenticate users as they access your application. [HTTPS listener] If the action type is authenticate-cognito, you can use Amazon Cognito to authenticate users as they access your application. [Application Load Balancer] If the action type is redirect, you can redirect HTTP and HTTPS requests. [Application Load Balancer] If the action type is fixed-response, you can return a custom HTTP response.
        public let defaultActions: [Action]

        public init(protocol: ProtocolEnum, sslPolicy: String? = nil, loadBalancerArn: String, certificates: [Certificate]? = nil, port: Int32, defaultActions: [Action]) {
            self.`protocol` = `protocol`
            self.sslPolicy = sslPolicy
            self.loadBalancerArn = loadBalancerArn
            self.certificates = certificates
            self.port = port
            self.defaultActions = defaultActions
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case sslPolicy = "SslPolicy"
            case loadBalancerArn = "LoadBalancerArn"
            case certificates = "Certificates"
            case port = "Port"
            case defaultActions = "DefaultActions"
        }
    }

    public struct Matcher: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpCode", required: true, type: .string)
        ]
        /// The HTTP codes. For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Network Load Balancers, this is 200–399.
        public let httpCode: String

        public init(httpCode: String) {
            self.httpCode = httpCode
        }

        private enum CodingKeys: String, CodingKey {
            case httpCode = "HttpCode"
        }
    }

    public struct DescribeLoadBalancerAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(loadBalancerArn: String) {
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct RegisterTargetsOutput: AWSShape {

    }

    public struct ModifyRuleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleArn", required: true, type: .string), 
            AWSShapeMember(label: "Actions", required: false, type: .list), 
            AWSShapeMember(label: "Conditions", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String
        /// The actions. If the action type is forward, you can specify a single target group. If the action type is authenticate-oidc, you can use an identity provider that is OpenID Connect (OIDC) compliant to authenticate users as they access your application. If the action type is authenticate-cognito, you can use Amazon Cognito to authenticate users as they access your application.
        public let actions: [Action]?
        /// The conditions. Each condition specifies a field name and a single value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let conditions: [RuleCondition]?

        public init(ruleArn: String, actions: [Action]? = nil, conditions: [RuleCondition]? = nil) {
            self.ruleArn = ruleArn
            self.actions = actions
            self.conditions = conditions
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArn = "RuleArn"
            case actions = "Actions"
            case conditions = "Conditions"
        }
    }

    public struct LoadBalancerAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", required: false, type: .string)
        ]
        /// The static IP address.
        public let ipAddress: String?
        /// [Network Load Balancers] The allocation ID of the Elastic IP address.
        public let allocationId: String?

        public init(ipAddress: String? = nil, allocationId: String? = nil) {
            self.ipAddress = ipAddress
            self.allocationId = allocationId
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddress = "IpAddress"
            case allocationId = "AllocationId"
        }
    }

    public struct DeleteRuleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String

        public init(ruleArn: String) {
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArn = "RuleArn"
        }
    }

    public struct CreateTargetGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list)
        ]
        /// Information about the target group.
        public let targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
        }
    }

    public struct SslPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ciphers", required: false, type: .list), 
            AWSShapeMember(label: "SslProtocols", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ciphers.
        public let ciphers: [Cipher]?
        /// The protocols.
        public let sslProtocols: [String]?
        /// The name of the policy.
        public let name: String?

        public init(ciphers: [Cipher]? = nil, sslProtocols: [String]? = nil, name: String? = nil) {
            self.ciphers = ciphers
            self.sslProtocols = sslProtocols
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case ciphers = "Ciphers"
            case sslProtocols = "SslProtocols"
            case name = "Name"
        }
    }

    public struct DescribeTargetHealthOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetHealthDescriptions", required: false, type: .list)
        ]
        /// Information about the health of the targets.
        public let targetHealthDescriptions: [TargetHealthDescription]?

        public init(targetHealthDescriptions: [TargetHealthDescription]? = nil) {
            self.targetHealthDescriptions = targetHealthDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case targetHealthDescriptions = "TargetHealthDescriptions"
        }
    }

    public struct DeregisterTargetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "Targets", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String
        /// The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.
        public let targets: [TargetDescription]

        public init(targetGroupArn: String, targets: [TargetDescription]) {
            self.targetGroupArn = targetGroupArn
            self.targets = targets
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
            case targets = "Targets"
        }
    }

    public struct DescribeTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArns", required: true, type: .list)
        ]
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
        }
    }

    public struct LoadBalancer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .structure), 
            AWSShapeMember(label: "CanonicalHostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum), 
            AWSShapeMember(label: "DNSName", required: false, type: .string), 
            AWSShapeMember(label: "Scheme", required: false, type: .enum), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list)
        ]
        /// The name of the load balancer.
        public let loadBalancerName: String?
        /// The state of the load balancer.
        public let state: LoadBalancerState?
        /// The ID of the Amazon Route 53 hosted zone associated with the load balancer.
        public let canonicalHostedZoneId: String?
        /// The date and time the load balancer was created.
        public let createdTime: TimeStamp?
        /// The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
        public let ipAddressType: IpAddressType?
        /// The public DNS name of the load balancer.
        public let dNSName: String?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.
        public let scheme: LoadBalancerSchemeEnum?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The ID of the VPC for the load balancer.
        public let vpcId: String?
        /// The Availability Zones for the load balancer.
        public let availabilityZones: [AvailabilityZone]?
        /// The type of load balancer.
        public let `type`: LoadBalancerTypeEnum?
        /// The IDs of the security groups for the load balancer.
        public let securityGroups: [String]?

        public init(loadBalancerName: String? = nil, state: LoadBalancerState? = nil, canonicalHostedZoneId: String? = nil, createdTime: TimeStamp? = nil, ipAddressType: IpAddressType? = nil, dNSName: String? = nil, scheme: LoadBalancerSchemeEnum? = nil, loadBalancerArn: String? = nil, vpcId: String? = nil, availabilityZones: [AvailabilityZone]? = nil, type: LoadBalancerTypeEnum? = nil, securityGroups: [String]? = nil) {
            self.loadBalancerName = loadBalancerName
            self.state = state
            self.canonicalHostedZoneId = canonicalHostedZoneId
            self.createdTime = createdTime
            self.ipAddressType = ipAddressType
            self.dNSName = dNSName
            self.scheme = scheme
            self.loadBalancerArn = loadBalancerArn
            self.vpcId = vpcId
            self.availabilityZones = availabilityZones
            self.`type` = `type`
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "LoadBalancerName"
            case state = "State"
            case canonicalHostedZoneId = "CanonicalHostedZoneId"
            case createdTime = "CreatedTime"
            case ipAddressType = "IpAddressType"
            case dNSName = "DNSName"
            case scheme = "Scheme"
            case loadBalancerArn = "LoadBalancerArn"
            case vpcId = "VpcId"
            case availabilityZones = "AvailabilityZones"
            case `type` = "Type"
            case securityGroups = "SecurityGroups"
        }
    }

    public struct ModifyRuleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the modified rule.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct DescribeLoadBalancerAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the load balancer attributes.
        public let attributes: [LoadBalancerAttribute]?

        public init(attributes: [LoadBalancerAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DescribeRulesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the rules.
        public let rules: [Rule]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(rules: [Rule]? = nil, nextMarker: String? = nil) {
            self.rules = rules
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case nextMarker = "NextMarker"
        }
    }

    public struct Cipher: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The priority of the cipher.
        public let priority: Int32?
        /// The name of the cipher.
        public let name: String?

        public init(priority: Int32? = nil, name: String? = nil) {
            self.priority = priority
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case name = "Name"
        }
    }

    public struct DeleteRuleOutput: AWSShape {

    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "ZoneName", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerAddresses", required: false, type: .list)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// The name of the Availability Zone.
        public let zoneName: String?
        /// [Network Load Balancers] The static IP address.
        public let loadBalancerAddresses: [LoadBalancerAddress?]?

        public init(subnetId: String? = nil, zoneName: String? = nil, loadBalancerAddresses: [LoadBalancerAddress]? = nil) {
            self.subnetId = subnetId
            self.zoneName = zoneName
            self.loadBalancerAddresses = loadBalancerAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case zoneName = "ZoneName"
            case loadBalancerAddresses = "LoadBalancerAddresses"
        }
    }

    public enum AuthenticateCognitoActionConditionalBehaviorEnum: String, CustomStringConvertible, Codable {
        case deny = "deny"
        case allow = "allow"
        case authenticate = "authenticate"
        public var description: String { return self.rawValue }
    }

    public struct LoadBalancerAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The name of the attribute. The following attributes are supported by both Application Load Balancers and Network Load Balancers:    deletion_protection.enabled - Indicates whether deletion protection is enabled. The value is true or false. The default is false.   The following attributes are supported by only Application Load Balancers:    access_logs.s3.enabled - Indicates whether access logs are enabled. The value is true or false. The default is false.    access_logs.s3.bucket - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.    access_logs.s3.prefix - The prefix for the location in the S3 bucket for the access logs.    idle_timeout.timeout_seconds - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The default is 60 seconds.    routing.http2.enabled - Indicates whether HTTP/2 is enabled. The value is true or false. The default is true.   The following attributes are supported by only Network Load Balancers:    load_balancing.cross_zone.enabled - Indicates whether cross-zone load balancing is enabled. The value is true or false. The default is false.  
        public let key: String?
        /// The value of the attribute.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DeleteTargetGroupOutput: AWSShape {

    }

    public struct SetRulePrioritiesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the rules.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct RemoveListenerCertificatesOutput: AWSShape {

    }

    public struct DescribeTargetGroupAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targetGroupArn: String) {
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct SetSecurityGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroups", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The IDs of the security groups.
        public let securityGroups: [String]

        public init(loadBalancerArn: String, securityGroups: [String]) {
            self.loadBalancerArn = loadBalancerArn
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case securityGroups = "SecurityGroups"
        }
    }

    public enum TargetHealthStateEnum: String, CustomStringConvertible, Codable {
        case initial = "initial"
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        case unused = "unused"
        case draining = "draining"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public struct AuthenticateOidcActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionCookieName", required: false, type: .string), 
            AWSShapeMember(label: "ClientSecret", required: true, type: .string), 
            AWSShapeMember(label: "OnUnauthenticatedRequest", required: false, type: .enum), 
            AWSShapeMember(label: "AuthorizationEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "SessionTimeout", required: false, type: .long), 
            AWSShapeMember(label: "UserInfoEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationRequestExtraParams", required: false, type: .map), 
            AWSShapeMember(label: "TokenEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "Scope", required: false, type: .string), 
            AWSShapeMember(label: "Issuer", required: true, type: .string)
        ]
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public let sessionCookieName: String?
        /// The OAuth 2.0 client secret.
        public let clientSecret: String
        /// The behavior if the user is not authenticated. The following are possible values:   deny - Return an HTTP 401 Unauthorized error.   allow - Allow the request to be forwarded to the target.   authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.  
        public let onUnauthenticatedRequest: AuthenticateOidcActionConditionalBehaviorEnum?
        /// The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let authorizationEndpoint: String
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public let sessionTimeout: Int64?
        /// The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let userInfoEndpoint: String
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public let authenticationRequestExtraParams: [String: String]?
        /// The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let tokenEndpoint: String
        /// The OAuth 2.0 client identifier.
        public let clientId: String
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public let scope: String?
        /// The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let issuer: String

        public init(sessionCookieName: String? = nil, clientSecret: String, onUnauthenticatedRequest: AuthenticateOidcActionConditionalBehaviorEnum? = nil, authorizationEndpoint: String, sessionTimeout: Int64? = nil, userInfoEndpoint: String, authenticationRequestExtraParams: [String: String]? = nil, tokenEndpoint: String, clientId: String, scope: String? = nil, issuer: String) {
            self.sessionCookieName = sessionCookieName
            self.clientSecret = clientSecret
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.authorizationEndpoint = authorizationEndpoint
            self.sessionTimeout = sessionTimeout
            self.userInfoEndpoint = userInfoEndpoint
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.tokenEndpoint = tokenEndpoint
            self.clientId = clientId
            self.scope = scope
            self.issuer = issuer
        }

        private enum CodingKeys: String, CodingKey {
            case sessionCookieName = "SessionCookieName"
            case clientSecret = "ClientSecret"
            case onUnauthenticatedRequest = "OnUnauthenticatedRequest"
            case authorizationEndpoint = "AuthorizationEndpoint"
            case sessionTimeout = "SessionTimeout"
            case userInfoEndpoint = "UserInfoEndpoint"
            case authenticationRequestExtraParams = "AuthenticationRequestExtraParams"
            case tokenEndpoint = "TokenEndpoint"
            case clientId = "ClientId"
            case scope = "Scope"
            case issuer = "Issuer"
        }
    }

    public enum RedirectActionStatusCodeEnum: String, CustomStringConvertible, Codable {
        case http301 = "HTTP_301"
        case http302 = "HTTP_302"
        public var description: String { return self.rawValue }
    }

    public struct AddTagsOutput: AWSShape {

    }

    public struct LoadBalancerState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum), 
            AWSShapeMember(label: "Reason", required: false, type: .string)
        ]
        /// The state code. The initial state of the load balancer is provisioning. After the load balancer is fully set up and ready to route traffic, its state is active. If the load balancer could not be set up, its state is failed.
        public let code: LoadBalancerStateEnum?
        /// A description of the state.
        public let reason: String?

        public init(code: LoadBalancerStateEnum? = nil, reason: String? = nil) {
            self.code = code
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case reason = "Reason"
        }
    }

    public struct TargetDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address.
        public let id: String
        /// The port on which the target is listening.
        public let port: Int32?
        /// An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer. This parameter is not supported if the target type of the target group is instance. If the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional. If the IP address is outside the VPC, this parameter is required. With an Application Load Balancer, if the IP address is outside the VPC for the target group, the only supported value is all.
        public let availabilityZone: String?

        public init(id: String, port: Int32? = nil, availabilityZone: String? = nil) {
            self.id = id
            self.port = port
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case port = "Port"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct AddListenerCertificatesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .list)
        ]
        /// Information about the certificates.
        public let certificates: [Certificate]?

        public init(certificates: [Certificate]? = nil) {
            self.certificates = certificates
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
        }
    }

    public struct DeleteListenerOutput: AWSShape {

    }

    public struct ModifyListenerOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// Information about the modified listener.
        public let listeners: [Listener]?

        public init(listeners: [Listener]? = nil) {
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
        }
    }

    public struct DescribeSSLPoliciesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Names", required: false, type: .list)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The names of the policies.
        public let names: [String]?

        public init(pageSize: Int32? = nil, marker: String? = nil, names: [String]? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case marker = "Marker"
            case names = "Names"
        }
    }

    public struct SetRulePrioritiesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RulePriorities", required: true, type: .list)
        ]
        /// The rule priorities.
        public let rulePriorities: [RulePriorityPair]

        public init(rulePriorities: [RulePriorityPair]) {
            self.rulePriorities = rulePriorities
        }

        private enum CodingKeys: String, CodingKey {
            case rulePriorities = "RulePriorities"
        }
    }

    public struct ModifyTargetGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list)
        ]
        /// Information about the modified target group.
        public let targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
        }
    }

    public struct DeleteTargetGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targetGroupArn: String) {
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct CreateLoadBalancerOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list)
        ]
        /// Information about the load balancer.
        public let loadBalancers: [LoadBalancer]?

        public init(loadBalancers: [LoadBalancer]? = nil) {
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancers = "LoadBalancers"
        }
    }

    public struct DescribeRulesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleArns", required: false, type: .list), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ListenerArn", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon Resource Names (ARN) of the rules.
        public let ruleArns: [String]?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(ruleArns: [String]? = nil, pageSize: Int32? = nil, listenerArn: String? = nil, marker: String? = nil) {
            self.ruleArns = ruleArns
            self.pageSize = pageSize
            self.listenerArn = listenerArn
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArns = "RuleArns"
            case pageSize = "PageSize"
            case listenerArn = "ListenerArn"
            case marker = "Marker"
        }
    }

    public struct RulePriorityPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleArn", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String?
        /// The rule priority.
        public let priority: Int32?

        public init(ruleArn: String? = nil, priority: Int32? = nil) {
            self.ruleArn = ruleArn
            self.priority = priority
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArn = "RuleArn"
            case priority = "Priority"
        }
    }

    public struct DescribeAccountLimitsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Limits", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?
        /// Information about the limits.
        public let limits: [Limit]?

        public init(nextMarker: String? = nil, limits: [Limit]? = nil) {
            self.nextMarker = nextMarker
            self.limits = limits
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case limits = "Limits"
        }
    }

    public struct DescribeListenersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ListenerArns", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Names (ARN) of the listeners.
        public let listenerArns: [String]?

        public init(loadBalancerArn: String? = nil, pageSize: Int32? = nil, marker: String? = nil, listenerArns: [String]? = nil) {
            self.loadBalancerArn = loadBalancerArn
            self.pageSize = pageSize
            self.marker = marker
            self.listenerArns = listenerArns
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case pageSize = "PageSize"
            case marker = "Marker"
            case listenerArns = "ListenerArns"
        }
    }

    public struct RemoveTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArns", required: true, type: .list), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArns: [String]
        /// The tag keys for the tags to remove.
        public let tagKeys: [String]

        public init(resourceArns: [String], tagKeys: [String]) {
            self.resourceArns = resourceArns
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
            case tagKeys = "TagKeys"
        }
    }

    public struct ModifyListenerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string), 
            AWSShapeMember(label: "DefaultActions", required: false, type: .list)
        ]
        /// The protocol for connections from clients to the load balancer. Application Load Balancers support HTTP and HTTPS and Network Load Balancers support TCP.
        public let `protocol`: ProtocolEnum?
        /// [HTTPS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see Security Policies in the Application Load Balancers Guide.
        public let sslPolicy: String?
        /// The port for connections from clients to the load balancer.
        public let port: Int32?
        /// [HTTPS listeners] The default SSL server certificate. You must provide exactly one default certificate. To create a certificate list, use AddListenerCertificates.
        public let certificates: [Certificate]?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String
        /// The actions for the default rule. The rule must include one forward action or one or more fixed-response actions. If the action type is forward, you can specify a single target group. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer or TCP for a Network Load Balancer. [HTTPS listener] If the action type is authenticate-oidc, you can use an identity provider that is OpenID Connect (OIDC) compliant to authenticate users as they access your application. [HTTPS listener] If the action type is authenticate-cognito, you can use Amazon Cognito to authenticate users as they access your application. [Application Load Balancer] If the action type is redirect, you can redirect HTTP and HTTPS requests. [Application Load Balancer] If the action type is fixed-response, you can return a custom HTTP response.
        public let defaultActions: [Action]?

        public init(protocol: ProtocolEnum? = nil, sslPolicy: String? = nil, port: Int32? = nil, certificates: [Certificate]? = nil, listenerArn: String, defaultActions: [Action]? = nil) {
            self.`protocol` = `protocol`
            self.sslPolicy = sslPolicy
            self.port = port
            self.certificates = certificates
            self.listenerArn = listenerArn
            self.defaultActions = defaultActions
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case sslPolicy = "SslPolicy"
            case port = "Port"
            case certificates = "Certificates"
            case listenerArn = "ListenerArn"
            case defaultActions = "DefaultActions"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key of the tag.
        public let key: String
        /// The value of the tag.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .string), 
            AWSShapeMember(label: "Conditions", required: false, type: .list), 
            AWSShapeMember(label: "IsDefault", required: false, type: .boolean), 
            AWSShapeMember(label: "Actions", required: false, type: .list), 
            AWSShapeMember(label: "RuleArn", required: false, type: .string)
        ]
        /// The priority.
        public let priority: String?
        /// The conditions.
        public let conditions: [RuleCondition]?
        /// Indicates whether this is the default rule.
        public let isDefault: Bool?
        /// The actions.
        public let actions: [Action]?
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String?

        public init(priority: String? = nil, conditions: [RuleCondition]? = nil, isDefault: Bool? = nil, actions: [Action]? = nil, ruleArn: String? = nil) {
            self.priority = priority
            self.conditions = conditions
            self.isDefault = isDefault
            self.actions = actions
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case conditions = "Conditions"
            case isDefault = "IsDefault"
            case actions = "Actions"
            case ruleArn = "RuleArn"
        }
    }

    public struct SetIpAddressTypeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum)
        ]
        /// The IP address type.
        public let ipAddressType: IpAddressType?

        public init(ipAddressType: IpAddressType? = nil) {
            self.ipAddressType = ipAddressType
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddressType = "IpAddressType"
        }
    }

    public struct CreateRuleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the rule.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct DescribeTargetGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "TargetGroups", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?
        /// Information about the target groups.
        public let targetGroups: [TargetGroup]?

        public init(nextMarker: String? = nil, targetGroups: [TargetGroup]? = nil) {
            self.nextMarker = nextMarker
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case targetGroups = "TargetGroups"
        }
    }

    public struct DeleteLoadBalancerOutput: AWSShape {

    }

    public struct DescribeListenersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?
        /// Information about the listeners.
        public let listeners: [Listener]?

        public init(nextMarker: String? = nil, listeners: [Listener]? = nil) {
            self.nextMarker = nextMarker
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case listeners = "Listeners"
        }
    }

    public struct RegisterTargetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "Targets", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String
        /// The targets.
        public let targets: [TargetDescription]

        public init(targetGroupArn: String, targets: [TargetDescription]) {
            self.targetGroupArn = targetGroupArn
            self.targets = targets
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
            case targets = "Targets"
        }
    }

    public struct Listener: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "DefaultActions", required: false, type: .list), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: false, type: .string)
        ]
        /// The port on which the load balancer is listening.
        public let port: Int32?
        /// The protocol for connections from clients to the load balancer.
        public let `protocol`: ProtocolEnum?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The default actions for the listener.
        public let defaultActions: [Action]?
        /// The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
        public let sslPolicy: String?
        /// The SSL server certificate. You must provide a certificate if the protocol is HTTPS.
        public let certificates: [Certificate]?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String?

        public init(port: Int32? = nil, protocol: ProtocolEnum? = nil, loadBalancerArn: String? = nil, defaultActions: [Action]? = nil, sslPolicy: String? = nil, certificates: [Certificate]? = nil, listenerArn: String? = nil) {
            self.port = port
            self.`protocol` = `protocol`
            self.loadBalancerArn = loadBalancerArn
            self.defaultActions = defaultActions
            self.sslPolicy = sslPolicy
            self.certificates = certificates
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case `protocol` = "Protocol"
            case loadBalancerArn = "LoadBalancerArn"
            case defaultActions = "DefaultActions"
            case sslPolicy = "SslPolicy"
            case certificates = "Certificates"
            case listenerArn = "ListenerArn"
        }
    }

    public struct SubnetMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", required: false, type: .string)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// [Network Load Balancers] The allocation ID of the Elastic IP address.
        public let allocationId: String?

        public init(subnetId: String? = nil, allocationId: String? = nil) {
            self.subnetId = subnetId
            self.allocationId = allocationId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case allocationId = "AllocationId"
        }
    }

    public struct TargetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "TargetType", required: false, type: .enum), 
            AWSShapeMember(label: "LoadBalancerArns", required: false, type: .list), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String?
        /// The ID of the VPC for the targets.
        public let vpcId: String?
        /// The HTTP codes to use when checking for a successful response from a target.
        public let matcher: Matcher?
        /// The amount of time, in seconds, during which no response means a failed health check.
        public let healthCheckTimeoutSeconds: Int32?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public let healthyThresholdCount: Int32?
        /// The port to use to connect with the target.
        public let healthCheckPort: String?
        /// The protocol to use for routing traffic to the targets.
        public let `protocol`: ProtocolEnum?
        /// The number of consecutive health check failures required before considering the target unhealthy.
        public let unhealthyThresholdCount: Int32?
        /// The type of target that you must specify when registering targets with this target group. The possible values are instance (targets are specified by instance ID) or ip (targets are specified by IP address).
        public let targetType: TargetTypeEnum?
        /// The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.
        public let loadBalancerArns: [String]?
        /// The destination for the health check request.
        public let healthCheckPath: String?
        /// The port on which the targets are listening.
        public let port: Int32?
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        public let healthCheckIntervalSeconds: Int32?
        /// The name of the target group.
        public let targetGroupName: String?
        /// The protocol to use to connect with the target.
        public let healthCheckProtocol: ProtocolEnum?

        public init(targetGroupArn: String? = nil, vpcId: String? = nil, matcher: Matcher? = nil, healthCheckTimeoutSeconds: Int32? = nil, healthyThresholdCount: Int32? = nil, healthCheckPort: String? = nil, protocol: ProtocolEnum? = nil, unhealthyThresholdCount: Int32? = nil, targetType: TargetTypeEnum? = nil, loadBalancerArns: [String]? = nil, healthCheckPath: String? = nil, port: Int32? = nil, healthCheckIntervalSeconds: Int32? = nil, targetGroupName: String? = nil, healthCheckProtocol: ProtocolEnum? = nil) {
            self.targetGroupArn = targetGroupArn
            self.vpcId = vpcId
            self.matcher = matcher
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.healthyThresholdCount = healthyThresholdCount
            self.healthCheckPort = healthCheckPort
            self.`protocol` = `protocol`
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.targetType = targetType
            self.loadBalancerArns = loadBalancerArns
            self.healthCheckPath = healthCheckPath
            self.port = port
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.targetGroupName = targetGroupName
            self.healthCheckProtocol = healthCheckProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
            case vpcId = "VpcId"
            case matcher = "Matcher"
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case healthyThresholdCount = "HealthyThresholdCount"
            case healthCheckPort = "HealthCheckPort"
            case `protocol` = "Protocol"
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case targetType = "TargetType"
            case loadBalancerArns = "LoadBalancerArns"
            case healthCheckPath = "HealthCheckPath"
            case port = "Port"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case targetGroupName = "TargetGroupName"
            case healthCheckProtocol = "HealthCheckProtocol"
        }
    }

    public struct CreateRuleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Conditions", required: true, type: .list), 
            AWSShapeMember(label: "Priority", required: true, type: .integer), 
            AWSShapeMember(label: "Actions", required: true, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The conditions. Each condition specifies a field name and a single value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let conditions: [RuleCondition]
        /// The rule priority. A listener can't have multiple rules with the same priority.
        public let priority: Int32
        /// The actions. Each rule must include exactly one of the following types of actions: forward, fixed-response, or redirect. If the action type is forward, you can specify a single target group. [HTTPS listener] If the action type is authenticate-oidc, you can use an identity provider that is OpenID Connect (OIDC) compliant to authenticate users as they access your application. [HTTPS listener] If the action type is authenticate-cognito, you can use Amazon Cognito to authenticate users as they access your application. [Application Load Balancer] If the action type is redirect, you can redirect HTTP and HTTPS requests. [Application Load Balancer] If the action type is fixed-response, you can return a custom HTTP response.
        public let actions: [Action]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(conditions: [RuleCondition], priority: Int32, actions: [Action], listenerArn: String) {
            self.conditions = conditions
            self.priority = priority
            self.actions = actions
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case conditions = "Conditions"
            case priority = "Priority"
            case actions = "Actions"
            case listenerArn = "ListenerArn"
        }
    }

    public struct FixedResponseActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageBody", required: false, type: .string), 
            AWSShapeMember(label: "StatusCode", required: true, type: .string), 
            AWSShapeMember(label: "ContentType", required: false, type: .string)
        ]
        /// The message.
        public let messageBody: String?
        /// The HTTP response code (2XX, 4XX, or 5XX).
        public let statusCode: String
        /// The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json
        public let contentType: String?

        public init(messageBody: String? = nil, statusCode: String, contentType: String? = nil) {
            self.messageBody = messageBody
            self.statusCode = statusCode
            self.contentType = contentType
        }

        private enum CodingKeys: String, CodingKey {
            case messageBody = "MessageBody"
            case statusCode = "StatusCode"
            case contentType = "ContentType"
        }
    }

    public struct SetSecurityGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list)
        ]
        /// The IDs of the security groups associated with the load balancer.
        public let securityGroupIds: [String]?

        public init(securityGroupIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    public struct ModifyLoadBalancerAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the load balancer attributes.
        public let attributes: [LoadBalancerAttribute]?

        public init(attributes: [LoadBalancerAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct SetSubnetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list)
        ]
        /// Information about the subnet and Availability Zone.
        public let availabilityZones: [AvailabilityZone]?

        public init(availabilityZones: [AvailabilityZone]? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
        }
    }

    public enum TargetHealthReasonEnum: String, CustomStringConvertible, Codable {
        case elbRegistrationinprogress = "Elb.RegistrationInProgress"
        case elbInitialhealthchecking = "Elb.InitialHealthChecking"
        case targetResponsecodemismatch = "Target.ResponseCodeMismatch"
        case targetTimeout = "Target.Timeout"
        case targetFailedhealthchecks = "Target.FailedHealthChecks"
        case targetNotregistered = "Target.NotRegistered"
        case targetNotinuse = "Target.NotInUse"
        case targetDeregistrationinprogress = "Target.DeregistrationInProgress"
        case targetInvalidstate = "Target.InvalidState"
        case targetIpunusable = "Target.IpUnusable"
        case elbInternalerror = "Elb.InternalError"
        public var description: String { return self.rawValue }
    }

    public struct ModifyLoadBalancerAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The load balancer attributes.
        public let attributes: [LoadBalancerAttribute]

        public init(loadBalancerArn: String, attributes: [LoadBalancerAttribute]) {
            self.loadBalancerArn = loadBalancerArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case attributes = "Attributes"
        }
    }

    public enum TargetTypeEnum: String, CustomStringConvertible, Codable {
        case instance = "instance"
        case ip = "ip"
        public var description: String { return self.rawValue }
    }

    public struct AddTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArns", required: true, type: .list), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArns: [String]
        /// The tags. Each resource can have a maximum of 10 tags.
        public let tags: [Tag]

        public init(resourceArns: [String], tags: [Tag]) {
            self.resourceArns = resourceArns
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
            case tags = "Tags"
        }
    }

    public struct TargetHealthDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "TargetHealth", required: false, type: .structure), 
            AWSShapeMember(label: "Target", required: false, type: .structure)
        ]
        /// The port to use to connect with the target.
        public let healthCheckPort: String?
        /// The health information for the target.
        public let targetHealth: TargetHealth?
        /// The description of the target.
        public let target: TargetDescription?

        public init(healthCheckPort: String? = nil, targetHealth: TargetHealth? = nil, target: TargetDescription? = nil) {
            self.healthCheckPort = healthCheckPort
            self.targetHealth = targetHealth
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case healthCheckPort = "HealthCheckPort"
            case targetHealth = "TargetHealth"
            case target = "Target"
        }
    }

    public struct DescribeTargetGroupAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the target group attributes
        public let attributes: [TargetGroupAttribute]?

        public init(attributes: [TargetGroupAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct CreateLoadBalancerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", required: false, type: .list), 
            AWSShapeMember(label: "SubnetMappings", required: false, type: .list), 
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Scheme", required: false, type: .enum), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones.
        public let subnets: [String]?
        /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet.
        public let subnetMappings: [SubnetMapping]?
        /// [Application Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4.
        public let ipAddressType: IpAddressType?
        /// The type of load balancer. The default is application.
        public let `type`: LoadBalancerTypeEnum?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer.
        public let scheme: LoadBalancerSchemeEnum?
        /// [Application Load Balancers] The IDs of the security groups for the load balancer.
        public let securityGroups: [String]?
        /// The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
        public let name: String
        /// One or more tags to assign to the load balancer.
        public let tags: [Tag]?

        public init(subnets: [String]? = nil, subnetMappings: [SubnetMapping]? = nil, ipAddressType: IpAddressType? = nil, type: LoadBalancerTypeEnum? = nil, scheme: LoadBalancerSchemeEnum? = nil, securityGroups: [String]? = nil, name: String, tags: [Tag]? = nil) {
            self.subnets = subnets
            self.subnetMappings = subnetMappings
            self.ipAddressType = ipAddressType
            self.`type` = `type`
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "Subnets"
            case subnetMappings = "SubnetMappings"
            case ipAddressType = "IpAddressType"
            case `type` = "Type"
            case scheme = "Scheme"
            case securityGroups = "SecurityGroups"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct DescribeLoadBalancersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list)
        ]
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?
        /// Information about the load balancers.
        public let loadBalancers: [LoadBalancer]?

        public init(nextMarker: String? = nil, loadBalancers: [LoadBalancer]? = nil) {
            self.nextMarker = nextMarker
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "NextMarker"
            case loadBalancers = "LoadBalancers"
        }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "AuthenticateCognitoConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Order", required: false, type: .integer), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "FixedResponseConfig", required: false, type: .structure), 
            AWSShapeMember(label: "AuthenticateOidcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "RedirectConfig", required: false, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the target group. Specify only when Type is forward.
        public let targetGroupArn: String?
        /// [HTTPS listener] Information for using Amazon Cognito to authenticate users. Specify only when Type is authenticate-cognito.
        public let authenticateCognitoConfig: AuthenticateCognitoActionConfig?
        /// The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. The final action to be performed must be a forward or a fixed-response action.
        public let order: Int32?
        /// The type of action. Each rule must include exactly one of the following types of actions: forward, fixed-response, or redirect.
        public let `type`: ActionTypeEnum
        /// [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when Type is fixed-response.
        public let fixedResponseConfig: FixedResponseActionConfig?
        /// [HTTPS listener] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when Type is authenticate-oidc.
        public let authenticateOidcConfig: AuthenticateOidcActionConfig?
        /// [Application Load Balancer] Information for creating a redirect action. Specify only when Type is redirect.
        public let redirectConfig: RedirectActionConfig?

        public init(targetGroupArn: String? = nil, authenticateCognitoConfig: AuthenticateCognitoActionConfig? = nil, order: Int32? = nil, type: ActionTypeEnum, fixedResponseConfig: FixedResponseActionConfig? = nil, authenticateOidcConfig: AuthenticateOidcActionConfig? = nil, redirectConfig: RedirectActionConfig? = nil) {
            self.targetGroupArn = targetGroupArn
            self.authenticateCognitoConfig = authenticateCognitoConfig
            self.order = order
            self.`type` = `type`
            self.fixedResponseConfig = fixedResponseConfig
            self.authenticateOidcConfig = authenticateOidcConfig
            self.redirectConfig = redirectConfig
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
            case authenticateCognitoConfig = "AuthenticateCognitoConfig"
            case order = "Order"
            case `type` = "Type"
            case fixedResponseConfig = "FixedResponseConfig"
            case authenticateOidcConfig = "AuthenticateOidcConfig"
            case redirectConfig = "RedirectConfig"
        }
    }

    public struct ModifyTargetGroupAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The attributes.
        public let attributes: [TargetGroupAttribute]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(attributes: [TargetGroupAttribute], targetGroupArn: String) {
            self.attributes = attributes
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct Limit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Max", required: false, type: .string)
        ]
        /// The name of the limit. The possible values are:   application-load-balancers   listeners-per-application-load-balancer   listeners-per-network-load-balancer   network-load-balancers   rules-per-application-load-balancer   target-groups   targets-per-application-load-balancer   targets-per-availability-zone-per-network-load-balancer   targets-per-network-load-balancer  
        public let name: String?
        /// The maximum value of the limit.
        public let max: String?

        public init(name: String? = nil, max: String? = nil) {
            self.name = name
            self.max = max
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case max = "Max"
        }
    }

    public struct DescribeLoadBalancersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerArns", required: false, type: .list), 
            AWSShapeMember(label: "Names", required: false, type: .list)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
        public let loadBalancerArns: [String]?
        /// The names of the load balancers.
        public let names: [String]?

        public init(pageSize: Int32? = nil, marker: String? = nil, loadBalancerArns: [String]? = nil, names: [String]? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.loadBalancerArns = loadBalancerArns
            self.names = names
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case marker = "Marker"
            case loadBalancerArns = "LoadBalancerArns"
            case names = "Names"
        }
    }

    public struct RedirectActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: false, type: .string), 
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "StatusCode", required: true, type: .enum), 
            AWSShapeMember(label: "Host", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .string), 
            AWSShapeMember(label: "Query", required: false, type: .string)
        ]
        /// The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
        public let `protocol`: String?
        /// The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.
        public let path: String?
        /// The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
        public let statusCode: RedirectActionStatusCodeEnum
        /// The hostname. This component is not percent-encoded. The hostname can contain #{host}.
        public let host: String?
        /// The port. You can specify a value from 1 to 65535 or #{port}.
        public let port: String?
        /// The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.
        public let query: String?

        public init(protocol: String? = nil, path: String? = nil, statusCode: RedirectActionStatusCodeEnum, host: String? = nil, port: String? = nil, query: String? = nil) {
            self.`protocol` = `protocol`
            self.path = path
            self.statusCode = statusCode
            self.host = host
            self.port = port
            self.query = query
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case path = "Path"
            case statusCode = "StatusCode"
            case host = "Host"
            case port = "Port"
            case query = "Query"
        }
    }

    public struct TagDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?
        /// Information about the tags.
        public let tags: [Tag]?

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct DeregisterTargetsOutput: AWSShape {

    }

    public struct RuleCondition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Field", required: false, type: .string)
        ]
        /// The condition value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern (for example, /img/*). A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let values: [String]?
        /// The name of the field. The possible values are host-header and path-pattern.
        public let field: String?

        public init(values: [String]? = nil, field: String? = nil) {
            self.values = values
            self.field = field
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case field = "Field"
        }
    }

}
