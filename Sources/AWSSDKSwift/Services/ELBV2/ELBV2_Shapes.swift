// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ELBV2 {

    public struct QueryStringConditionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        public let values: [String]?

        public init(values: [String]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public enum LoadBalancerSchemeEnum: String, CustomStringConvertible, Codable {
        case internetFacing = "internet-facing"
        case `internal` = "internal"
        public var description: String { return self.rawValue }
    }

    public struct Matcher: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HttpCode", required: true, type: .string)
        ]
        /// The HTTP codes. For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). For Network Load Balancers, this is 200â€“399.
        public let httpCode: String

        public init(httpCode: String) {
            self.httpCode = httpCode
        }

        private enum CodingKeys: String, CodingKey {
            case httpCode = "HttpCode"
        }
    }

    public struct DescribeAccountLimitsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(pageSize: Int32? = nil, marker: String? = nil) {
            self.pageSize = pageSize
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case marker = "Marker"
        }
    }

    public struct RemoveTagsOutput: AWSShape {

    }

    public struct DescribeLoadBalancersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerArns", required: false, type: .list)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The names of the load balancers.
        public let names: [String]?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.
        public let loadBalancerArns: [String]?

        public init(pageSize: Int32? = nil, names: [String]? = nil, marker: String? = nil, loadBalancerArns: [String]? = nil) {
            self.pageSize = pageSize
            self.names = names
            self.marker = marker
            self.loadBalancerArns = loadBalancerArns
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case names = "Names"
            case marker = "Marker"
            case loadBalancerArns = "LoadBalancerArns"
        }
    }

    public struct ModifyTargetGroupAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the attributes.
        public let attributes: [TargetGroupAttribute]?

        public init(attributes: [TargetGroupAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DescribeTargetHealthOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetHealthDescriptions", required: false, type: .list)
        ]
        /// Information about the health of the targets.
        public let targetHealthDescriptions: [TargetHealthDescription]?

        public init(targetHealthDescriptions: [TargetHealthDescription]? = nil) {
            self.targetHealthDescriptions = targetHealthDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case targetHealthDescriptions = "TargetHealthDescriptions"
        }
    }

    public struct ModifyProvisionedCapacityOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedCapacity", required: false, type: .structure)
        ]
        public let provisionedCapacity: ProvisionedCapacity?

        public init(provisionedCapacity: ProvisionedCapacity? = nil) {
            self.provisionedCapacity = provisionedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedCapacity = "ProvisionedCapacity"
        }
    }

    public enum ProtocolEnum: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        case https = "HTTPS"
        case tcp = "TCP"
        case tls = "TLS"
        case udp = "UDP"
        public var description: String { return self.rawValue }
    }

    public struct SetSubnetsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list)
        ]
        /// Information about the subnet and Availability Zone.
        public let availabilityZones: [AvailabilityZone]?

        public init(availabilityZones: [AvailabilityZone]? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
        }
    }

    public struct HttpRequestMethodConditionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        public let values: [HttpRequestMethodEnum]?

        public init(values: [HttpRequestMethodEnum]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public struct CreateListenerOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// Information about the listener.
        public let listeners: [Listener]?

        public init(listeners: [Listener]? = nil) {
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
        }
    }

    public struct DeleteRuleOutput: AWSShape {

    }

    public struct CreateTargetGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list)
        ]
        /// Information about the target group.
        public let targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
        }
    }

    public struct RemoveTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "ResourceArns", required: true, type: .list)
        ]
        /// The tag keys for the tags to remove.
        public let tagKeys: [String]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArns: [String]

        public init(tagKeys: [String], resourceArns: [String]) {
            self.tagKeys = tagKeys
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case resourceArns = "ResourceArns"
        }
    }

    public struct RemoveListenerCertificatesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: true, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The certificate to remove. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
        public let certificates: [Certificate]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(certificates: [Certificate], listenerArn: String) {
            self.certificates = certificates
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case listenerArn = "ListenerArn"
        }
    }

    public struct DescribeAccountLimitsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limits", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the limits.
        public let limits: [Limit]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(limits: [Limit]? = nil, nextMarker: String? = nil) {
            self.limits = limits
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case limits = "Limits"
            case nextMarker = "NextMarker"
        }
    }

    public struct CreateRuleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Conditions", required: true, type: .list), 
            AWSShapeMember(label: "Actions", required: true, type: .list), 
            AWSShapeMember(label: "Priority", required: true, type: .integer), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The conditions. Each condition specifies a field name and a single value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let conditions: [RuleCondition]
        /// The actions. Each rule must include exactly one of the following types of actions: forward, fixed-response, or redirect. If the action type is forward, you specify a target group. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer or TCP for a Network Load Balancer. [HTTPS listener] If the action type is authenticate-oidc, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant. [HTTPS listener] If the action type is authenticate-cognito, you authenticate users through the user pools supported by Amazon Cognito. [Application Load Balancer] If the action type is redirect, you redirect specified client requests from one URL to another. [Application Load Balancer] If the action type is fixed-response, you drop specified client requests and return a custom HTTP response.
        public let actions: [Action]
        /// The rule priority. A listener can't have multiple rules with the same priority.
        public let priority: Int32
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(conditions: [RuleCondition], actions: [Action], priority: Int32, listenerArn: String) {
            self.conditions = conditions
            self.actions = actions
            self.priority = priority
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case conditions = "Conditions"
            case actions = "Actions"
            case priority = "Priority"
            case listenerArn = "ListenerArn"
        }
    }

    public enum AuthenticateCognitoActionConditionalBehaviorEnum: String, CustomStringConvertible, Codable {
        case deny = "deny"
        case allow = "allow"
        case authenticate = "authenticate"
        public var description: String { return self.rawValue }
    }

    public struct TargetHealth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .enum), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The reason code. If the target state is healthy, a reason code is not provided. If the target state is initial, the reason code can be one of the following values:    Elb.RegistrationInProgress - The target is in the process of being registered with the load balancer.    Elb.InitialHealthChecking - The load balancer is still sending the target the minimum number of health checks required to determine its health status.   If the target state is unhealthy, the reason code can be one of the following values:    Target.ResponseCodeMismatch - The health checks did not return an expected HTTP code.    Target.Timeout - The health check requests timed out.    Target.FailedHealthChecks - The health checks failed because the connection to the target timed out, the target response was malformed, or the target failed the health check for an unknown reason.    Elb.InternalError - The health checks failed due to an internal error.   If the target state is unused, the reason code can be one of the following values:    Target.NotRegistered - The target is not registered with the target group.    Target.NotInUse - The target group is not used by any load balancer or the target is in an Availability Zone that is not enabled for its load balancer.    Target.IpUnusable - The target IP address is reserved for use by a load balancer.    Target.InvalidState - The target is in the stopped or terminated state.   If the target state is draining, the reason code can be the following value:    Target.DeregistrationInProgress - The target is in the process of being deregistered and the deregistration delay period has not expired.   If the target state is unavailable, the reason code can be the following value:    Target.HealthCheckDisabled - Health checks are disabled for the target group.  
        public let reason: TargetHealthReasonEnum?
        /// The state of the target.
        public let state: TargetHealthStateEnum?
        /// A description of the target health that provides additional details. If the state is healthy, a description is not provided.
        public let description: String?

        public init(reason: TargetHealthReasonEnum? = nil, state: TargetHealthStateEnum? = nil, description: String? = nil) {
            self.reason = reason
            self.state = state
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case state = "State"
            case description = "Description"
        }
    }

    public struct ModifyRuleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the modified rule.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct DescribeProvisionedCapacityOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedCapacity", required: false, type: .structure)
        ]
        public let provisionedCapacity: ProvisionedCapacity?

        public init(provisionedCapacity: ProvisionedCapacity? = nil) {
            self.provisionedCapacity = provisionedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedCapacity = "ProvisionedCapacity"
        }
    }

    public struct DescribeLoadBalancerAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(loadBalancerArn: String) {
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct DescribeTagsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagDescriptions", required: false, type: .list)
        ]
        /// Information about the tags.
        public let tagDescriptions: [TagDescription]?

        public init(tagDescriptions: [TagDescription]? = nil) {
            self.tagDescriptions = tagDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case tagDescriptions = "TagDescriptions"
        }
    }

    public struct LoadBalancerAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The name of the attribute. The following attributes are supported by both Application Load Balancers and Network Load Balancers:    deletion_protection.enabled - Indicates whether deletion protection is enabled. The value is true or false. The default is false.   The following attributes are supported by only Application Load Balancers:    access_logs.s3.enabled - Indicates whether access logs are enabled. The value is true or false. The default is false.    access_logs.s3.bucket - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.    access_logs.s3.prefix - The prefix for the location in the S3 bucket for the access logs.    idle_timeout.timeout_seconds - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The default is 60 seconds.    routing.http2.enabled - Indicates whether HTTP/2 is enabled. The value is true or false. The default is true.   The following attributes are supported by only Network Load Balancers:    load_balancing.cross_zone.enabled - Indicates whether cross-zone load balancing is enabled. The value is true or false. The default is false.  
        public let key: String?
        /// The value of the attribute.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct Limit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Max", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The maximum value of the limit.
        public let max: String?
        /// The name of the limit. The possible values are:   application-load-balancers   listeners-per-application-load-balancer   listeners-per-network-load-balancer   network-load-balancers   rules-per-application-load-balancer   target-groups   targets-per-application-load-balancer   targets-per-availability-zone-per-network-load-balancer   targets-per-network-load-balancer  
        public let name: String?

        public init(max: String? = nil, name: String? = nil) {
            self.max = max
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case name = "Name"
        }
    }

    public enum LoadBalancerStateEnum: String, CustomStringConvertible, Codable {
        case active = "active"
        case provisioning = "provisioning"
        case activeImpaired = "active_impaired"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct ModifyTargetGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "HealthCheckEnabled", required: false, type: .boolean)
        ]
        /// The number of consecutive health check failures required before considering the target unhealthy. For Network Load Balancers, this value must be the same as the healthy threshold count.
        public let unhealthyThresholdCount: Int32?
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String
        /// [HTTP/HTTPS health checks] The ping path that is the destination for the health check request.
        public let healthCheckPath: String?
        /// [HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check. If the protocol of the target group is TCP, you can't modify this setting.
        public let healthCheckTimeoutSeconds: Int32?
        /// [HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target. If the protocol of the target group is TCP, you can't modify this setting.
        public let matcher: Matcher?
        /// The port the load balancer uses when performing health checks on targets.
        public let healthCheckPort: String?
        /// The approximate amount of time, in seconds, between health checks of an individual target. For Application Load Balancers, the range is 5â€“300 seconds. For Network Load Balancers, the supported values are 10 or 30 seconds. If the protocol of the target group is TCP, you can't modify this setting.
        public let healthCheckIntervalSeconds: Int32?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public let healthyThresholdCount: Int32?
        /// The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported only if the protocol of the target group is TCP. If the protocol of the target group is TCP, you can't modify this setting.
        public let healthCheckProtocol: ProtocolEnum?
        /// Indicates whether health checks are enabled.
        public let healthCheckEnabled: Bool?

        public init(unhealthyThresholdCount: Int32? = nil, targetGroupArn: String, healthCheckPath: String? = nil, healthCheckTimeoutSeconds: Int32? = nil, matcher: Matcher? = nil, healthCheckPort: String? = nil, healthCheckIntervalSeconds: Int32? = nil, healthyThresholdCount: Int32? = nil, healthCheckProtocol: ProtocolEnum? = nil, healthCheckEnabled: Bool? = nil) {
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.targetGroupArn = targetGroupArn
            self.healthCheckPath = healthCheckPath
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.matcher = matcher
            self.healthCheckPort = healthCheckPort
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthyThresholdCount = healthyThresholdCount
            self.healthCheckProtocol = healthCheckProtocol
            self.healthCheckEnabled = healthCheckEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case targetGroupArn = "TargetGroupArn"
            case healthCheckPath = "HealthCheckPath"
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case matcher = "Matcher"
            case healthCheckPort = "HealthCheckPort"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case healthyThresholdCount = "HealthyThresholdCount"
            case healthCheckProtocol = "HealthCheckProtocol"
            case healthCheckEnabled = "HealthCheckEnabled"
        }
    }

    public enum ProvisionedCapacityStatus: String, CustomStringConvertible, Codable {
        case disabled = "disabled"
        case pending = "pending"
        case provisioned = "provisioned"
        case preWarmed = "pre-warmed"
        public var description: String { return self.rawValue }
    }

    public struct Cipher: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The priority of the cipher.
        public let priority: Int32?
        /// The name of the cipher.
        public let name: String?

        public init(priority: Int32? = nil, name: String? = nil) {
            self.priority = priority
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case name = "Name"
        }
    }

    public struct LoadBalancerState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Reason", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// A description of the state.
        public let reason: String?
        /// The state code. The initial state of the load balancer is provisioning. After the load balancer is fully set up and ready to route traffic, its state is active. If the load balancer could not be set up, its state is failed.
        public let code: LoadBalancerStateEnum?

        public init(reason: String? = nil, code: LoadBalancerStateEnum? = nil) {
            self.reason = reason
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "Reason"
            case code = "Code"
        }
    }

    public struct ModifyTargetGroupAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The attributes.
        public let attributes: [TargetGroupAttribute]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(attributes: [TargetGroupAttribute], targetGroupArn: String) {
            self.attributes = attributes
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct DescribeProvisionedCapacityInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        public let loadBalancerArn: String

        public init(loadBalancerArn: String) {
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct TargetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "TargetType", required: false, type: .enum), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "LoadBalancerArns", required: false, type: .list), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "TargetGroupName", required: false, type: .string)
        ]
        /// The amount of time, in seconds, during which no response means a failed health check.
        public let healthCheckTimeoutSeconds: Int32?
        /// The HTTP codes to use when checking for a successful response from a target.
        public let matcher: Matcher?
        /// The ID of the VPC for the targets.
        public let vpcId: String?
        /// The type of target that you must specify when registering targets with this target group. The possible values are instance (targets are specified by instance ID) or ip (targets are specified by IP address).
        public let targetType: TargetTypeEnum?
        /// The port to use to connect with the target.
        public let healthCheckPort: String?
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        public let healthCheckIntervalSeconds: Int32?
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String?
        /// Indicates whether health checks are enabled.
        public let healthCheckEnabled: Bool?
        /// The number of consecutive health check failures required before considering the target unhealthy.
        public let unhealthyThresholdCount: Int32?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy.
        public let healthyThresholdCount: Int32?
        /// The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.
        public let loadBalancerArns: [String]?
        /// The protocol to use to connect with the target.
        public let healthCheckProtocol: ProtocolEnum?
        /// The destination for the health check request.
        public let healthCheckPath: String?
        /// The protocol to use for routing traffic to the targets.
        public let `protocol`: ProtocolEnum?
        /// The port on which the targets are listening.
        public let port: Int32?
        /// The name of the target group.
        public let targetGroupName: String?

        public init(healthCheckTimeoutSeconds: Int32? = nil, matcher: Matcher? = nil, vpcId: String? = nil, targetType: TargetTypeEnum? = nil, healthCheckPort: String? = nil, healthCheckIntervalSeconds: Int32? = nil, targetGroupArn: String? = nil, healthCheckEnabled: Bool? = nil, unhealthyThresholdCount: Int32? = nil, healthyThresholdCount: Int32? = nil, loadBalancerArns: [String]? = nil, healthCheckProtocol: ProtocolEnum? = nil, healthCheckPath: String? = nil, protocol: ProtocolEnum? = nil, port: Int32? = nil, targetGroupName: String? = nil) {
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.matcher = matcher
            self.vpcId = vpcId
            self.targetType = targetType
            self.healthCheckPort = healthCheckPort
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.targetGroupArn = targetGroupArn
            self.healthCheckEnabled = healthCheckEnabled
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.healthyThresholdCount = healthyThresholdCount
            self.loadBalancerArns = loadBalancerArns
            self.healthCheckProtocol = healthCheckProtocol
            self.healthCheckPath = healthCheckPath
            self.`protocol` = `protocol`
            self.port = port
            self.targetGroupName = targetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case matcher = "Matcher"
            case vpcId = "VpcId"
            case targetType = "TargetType"
            case healthCheckPort = "HealthCheckPort"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case targetGroupArn = "TargetGroupArn"
            case healthCheckEnabled = "HealthCheckEnabled"
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case healthyThresholdCount = "HealthyThresholdCount"
            case loadBalancerArns = "LoadBalancerArns"
            case healthCheckProtocol = "HealthCheckProtocol"
            case healthCheckPath = "HealthCheckPath"
            case `protocol` = "Protocol"
            case port = "Port"
            case targetGroupName = "TargetGroupName"
        }
    }

    public struct RegisterTargetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The targets. To register a target by instance ID, specify the instance ID. To register a target by IP address, specify the IP address. To register a Lambda function, specify the ARN of the Lambda function.
        public let targets: [TargetDescription]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targets: [TargetDescription], targetGroupArn: String) {
            self.targets = targets
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct ModifyTargetGroupOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list)
        ]
        /// Information about the modified target group.
        public let targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
        }
    }

    public struct RedirectActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .string), 
            AWSShapeMember(label: "StatusCode", required: true, type: .enum), 
            AWSShapeMember(label: "Protocol", required: false, type: .string), 
            AWSShapeMember(label: "Query", required: false, type: .string), 
            AWSShapeMember(label: "Host", required: false, type: .string)
        ]
        /// The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.
        public let path: String?
        /// The port. You can specify a value from 1 to 65535 or #{port}.
        public let port: String?
        /// The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
        public let statusCode: RedirectActionStatusCodeEnum
        /// The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
        public let `protocol`: String?
        /// The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.
        public let query: String?
        /// The hostname. This component is not percent-encoded. The hostname can contain #{host}.
        public let host: String?

        public init(path: String? = nil, port: String? = nil, statusCode: RedirectActionStatusCodeEnum, protocol: String? = nil, query: String? = nil, host: String? = nil) {
            self.path = path
            self.port = port
            self.statusCode = statusCode
            self.`protocol` = `protocol`
            self.query = query
            self.host = host
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
            case port = "Port"
            case statusCode = "StatusCode"
            case `protocol` = "Protocol"
            case query = "Query"
            case host = "Host"
        }
    }

    public struct SetIpAddressTypeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum)
        ]
        /// The IP address type.
        public let ipAddressType: IpAddressType?

        public init(ipAddressType: IpAddressType? = nil) {
            self.ipAddressType = ipAddressType
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddressType = "IpAddressType"
        }
    }

    public struct CreateListenerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultActions", required: true, type: .list), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: true, type: .integer), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The actions for the default rule. The rule must include one forward action or one or more fixed-response actions. If the action type is forward, you specify a target group. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer or TCP for a Network Load Balancer. [HTTPS listener] If the action type is authenticate-oidc, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant. [HTTPS listener] If the action type is authenticate-cognito, you authenticate users through the user pools supported by Amazon Cognito. [Application Load Balancer] If the action type is redirect, you redirect specified client requests from one URL to another. [Application Load Balancer] If the action type is fixed-response, you drop specified client requests and return a custom HTTP response.
        public let defaultActions: [Action]
        /// [HTTPS listeners] The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
        public let sslPolicy: String?
        /// The port on which the load balancer is listening.
        public let port: Int32
        /// The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocol is TCP.
        public let `protocol`: ProtocolEnum
        /// [HTTPS listeners] The default SSL server certificate. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault. To create a certificate list, use AddListenerCertificates.
        public let certificates: [Certificate]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(defaultActions: [Action], sslPolicy: String? = nil, port: Int32, protocol: ProtocolEnum, certificates: [Certificate]? = nil, loadBalancerArn: String) {
            self.defaultActions = defaultActions
            self.sslPolicy = sslPolicy
            self.port = port
            self.`protocol` = `protocol`
            self.certificates = certificates
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case defaultActions = "DefaultActions"
            case sslPolicy = "SslPolicy"
            case port = "Port"
            case `protocol` = "Protocol"
            case certificates = "Certificates"
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct SubnetMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticIp", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocationId", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string)
        ]
        public let staticIp: Bool?
        /// [Network Load Balancers] The allocation ID of the Elastic IP address.
        public let allocationId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(staticIp: Bool? = nil, allocationId: String? = nil, subnetId: String? = nil) {
            self.staticIp = staticIp
            self.allocationId = allocationId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case staticIp = "StaticIp"
            case allocationId = "AllocationId"
            case subnetId = "SubnetId"
        }
    }

    public struct TargetDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The port on which the target is listening.
        public let port: Int32?
        /// An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer. This parameter is not supported if the target type of the target group is instance. If the target type is ip and the IP address is in a subnet of the VPC for the target group, the Availability Zone is automatically detected and this parameter is optional. If the IP address is outside the VPC, this parameter is required. With an Application Load Balancer, if the target type is ip and the IP address is outside the VPC for the target group, the only supported value is all. If the target type is lambda, this parameter is optional and the only supported value is all.
        public let availabilityZone: String?
        /// The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function.
        public let id: String

        public init(port: Int32? = nil, availabilityZone: String? = nil, id: String) {
            self.port = port
            self.availabilityZone = availabilityZone
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case availabilityZone = "AvailabilityZone"
            case id = "Id"
        }
    }

    public struct RemoveListenerCertificatesOutput: AWSShape {

    }

    public struct LoadBalancer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DNSName", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LoadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "State", required: false, type: .structure), 
            AWSShapeMember(label: "Scheme", required: false, type: .enum), 
            AWSShapeMember(label: "CanonicalHostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string)
        ]
        /// The public DNS name of the load balancer.
        public let dNSName: String?
        /// The ID of the VPC for the load balancer.
        public let vpcId: String?
        /// The Availability Zones for the load balancer.
        public let availabilityZones: [AvailabilityZone]?
        /// The date and time the load balancer was created.
        public let createdTime: TimeStamp?
        /// The name of the load balancer.
        public let loadBalancerName: String?
        /// The type of load balancer.
        public let `type`: LoadBalancerTypeEnum?
        /// The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses).
        public let ipAddressType: IpAddressType?
        /// The IDs of the security groups for the load balancer.
        public let securityGroups: [String]?
        /// The state of the load balancer.
        public let state: LoadBalancerState?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer.
        public let scheme: LoadBalancerSchemeEnum?
        /// The ID of the Amazon Route 53 hosted zone associated with the load balancer.
        public let canonicalHostedZoneId: String?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?

        public init(dNSName: String? = nil, vpcId: String? = nil, availabilityZones: [AvailabilityZone]? = nil, createdTime: TimeStamp? = nil, loadBalancerName: String? = nil, type: LoadBalancerTypeEnum? = nil, ipAddressType: IpAddressType? = nil, securityGroups: [String]? = nil, state: LoadBalancerState? = nil, scheme: LoadBalancerSchemeEnum? = nil, canonicalHostedZoneId: String? = nil, loadBalancerArn: String? = nil) {
            self.dNSName = dNSName
            self.vpcId = vpcId
            self.availabilityZones = availabilityZones
            self.createdTime = createdTime
            self.loadBalancerName = loadBalancerName
            self.`type` = `type`
            self.ipAddressType = ipAddressType
            self.securityGroups = securityGroups
            self.state = state
            self.scheme = scheme
            self.canonicalHostedZoneId = canonicalHostedZoneId
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case dNSName = "DNSName"
            case vpcId = "VpcId"
            case availabilityZones = "AvailabilityZones"
            case createdTime = "CreatedTime"
            case loadBalancerName = "LoadBalancerName"
            case `type` = "Type"
            case ipAddressType = "IpAddressType"
            case securityGroups = "SecurityGroups"
            case state = "State"
            case scheme = "Scheme"
            case canonicalHostedZoneId = "CanonicalHostedZoneId"
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct SetIpAddressTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "IpAddressType", required: true, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The IP address type. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4.
        public let ipAddressType: IpAddressType

        public init(loadBalancerArn: String, ipAddressType: IpAddressType) {
            self.loadBalancerArn = loadBalancerArn
            self.ipAddressType = ipAddressType
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case ipAddressType = "IpAddressType"
        }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticateOidcConfig", required: false, type: .structure), 
            AWSShapeMember(label: "FixedResponseConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Order", required: false, type: .integer), 
            AWSShapeMember(label: "AuthenticateCognitoConfig", required: false, type: .structure), 
            AWSShapeMember(label: "RedirectConfig", required: false, type: .structure), 
            AWSShapeMember(label: "TargetGroupArn", required: false, type: .string)
        ]
        /// [HTTPS listener] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when Type is authenticate-oidc.
        public let authenticateOidcConfig: AuthenticateOidcActionConfig?
        /// [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when Type is fixed-response.
        public let fixedResponseConfig: FixedResponseActionConfig?
        /// The type of action. Each rule must include exactly one of the following types of actions: forward, fixed-response, or redirect.
        public let `type`: ActionTypeEnum
        /// The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first. The final action to be performed must be a forward or a fixed-response action.
        public let order: Int32?
        /// [HTTPS listener] Information for using Amazon Cognito to authenticate users. Specify only when Type is authenticate-cognito.
        public let authenticateCognitoConfig: AuthenticateCognitoActionConfig?
        /// [Application Load Balancer] Information for creating a redirect action. Specify only when Type is redirect.
        public let redirectConfig: RedirectActionConfig?
        /// The Amazon Resource Name (ARN) of the target group. Specify only when Type is forward.
        public let targetGroupArn: String?

        public init(authenticateOidcConfig: AuthenticateOidcActionConfig? = nil, fixedResponseConfig: FixedResponseActionConfig? = nil, type: ActionTypeEnum, order: Int32? = nil, authenticateCognitoConfig: AuthenticateCognitoActionConfig? = nil, redirectConfig: RedirectActionConfig? = nil, targetGroupArn: String? = nil) {
            self.authenticateOidcConfig = authenticateOidcConfig
            self.fixedResponseConfig = fixedResponseConfig
            self.`type` = `type`
            self.order = order
            self.authenticateCognitoConfig = authenticateCognitoConfig
            self.redirectConfig = redirectConfig
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case authenticateOidcConfig = "AuthenticateOidcConfig"
            case fixedResponseConfig = "FixedResponseConfig"
            case `type` = "Type"
            case order = "Order"
            case authenticateCognitoConfig = "AuthenticateCognitoConfig"
            case redirectConfig = "RedirectConfig"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public enum AuthenticateOidcActionConditionalBehaviorEnum: String, CustomStringConvertible, Codable {
        case deny = "deny"
        case allow = "allow"
        case authenticate = "authenticate"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTargetGroupAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the target group attributes
        public let attributes: [TargetGroupAttribute]?

        public init(attributes: [TargetGroupAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DescribeListenerCertificatesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The Amazon Resource Names (ARN) of the listener.
        public let listenerArn: String
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(pageSize: Int32? = nil, listenerArn: String, marker: String? = nil) {
            self.pageSize = pageSize
            self.listenerArn = listenerArn
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case listenerArn = "ListenerArn"
            case marker = "Marker"
        }
    }

    public struct CreateLoadBalancerOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list)
        ]
        /// Information about the load balancer.
        public let loadBalancers: [LoadBalancer]?

        public init(loadBalancers: [LoadBalancer]? = nil) {
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancers = "LoadBalancers"
        }
    }

    public struct DescribeListenerCertificatesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the certificates.
        public let certificates: [Certificate]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(certificates: [Certificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case nextMarker = "NextMarker"
        }
    }

    public struct Listener: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "ListenerArn", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DefaultActions", required: false, type: .list), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string)
        ]
        /// The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
        public let sslPolicy: String?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String?
        /// The port on which the load balancer is listening.
        public let port: Int32?
        /// The default actions for the listener.
        public let defaultActions: [Action]?
        /// The protocol for connections from clients to the load balancer.
        public let `protocol`: ProtocolEnum?
        /// The SSL server certificate. You must provide a certificate if the protocol is HTTPS.
        public let certificates: [Certificate]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?

        public init(sslPolicy: String? = nil, listenerArn: String? = nil, port: Int32? = nil, defaultActions: [Action]? = nil, protocol: ProtocolEnum? = nil, certificates: [Certificate]? = nil, loadBalancerArn: String? = nil) {
            self.sslPolicy = sslPolicy
            self.listenerArn = listenerArn
            self.port = port
            self.defaultActions = defaultActions
            self.`protocol` = `protocol`
            self.certificates = certificates
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case sslPolicy = "SslPolicy"
            case listenerArn = "ListenerArn"
            case port = "Port"
            case defaultActions = "DefaultActions"
            case `protocol` = "Protocol"
            case certificates = "Certificates"
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct DeregisterTargetsOutput: AWSShape {

    }

    public struct AddTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "ResourceArns", required: true, type: .list)
        ]
        /// The tags. Each resource can have a maximum of 10 tags.
        public let tags: [Tag]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArns: [String]

        public init(tags: [Tag], resourceArns: [String]) {
            self.tags = tags
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceArns = "ResourceArns"
        }
    }

    public struct PathPatternConditionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        public let values: [String]?

        public init(values: [String]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public struct ModifyLoadBalancerAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the load balancer attributes.
        public let attributes: [LoadBalancerAttribute]?

        public init(attributes: [LoadBalancerAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DeleteTargetGroupOutput: AWSShape {

    }

    public struct RulePriorityPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Priority", required: false, type: .integer), 
            AWSShapeMember(label: "RuleArn", required: false, type: .string)
        ]
        /// The rule priority.
        public let priority: Int32?
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String?

        public init(priority: Int32? = nil, ruleArn: String? = nil) {
            self.priority = priority
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case priority = "Priority"
            case ruleArn = "RuleArn"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Conditions", required: false, type: .list), 
            AWSShapeMember(label: "IsDefault", required: false, type: .boolean), 
            AWSShapeMember(label: "RuleArn", required: false, type: .string), 
            AWSShapeMember(label: "Priority", required: false, type: .string), 
            AWSShapeMember(label: "Actions", required: false, type: .list)
        ]
        /// The conditions.
        public let conditions: [RuleCondition]?
        /// Indicates whether this is the default rule.
        public let isDefault: Bool?
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String?
        /// The priority.
        public let priority: String?
        /// The actions.
        public let actions: [Action]?

        public init(conditions: [RuleCondition]? = nil, isDefault: Bool? = nil, ruleArn: String? = nil, priority: String? = nil, actions: [Action]? = nil) {
            self.conditions = conditions
            self.isDefault = isDefault
            self.ruleArn = ruleArn
            self.priority = priority
            self.actions = actions
        }

        private enum CodingKeys: String, CodingKey {
            case conditions = "Conditions"
            case isDefault = "IsDefault"
            case ruleArn = "RuleArn"
            case priority = "Priority"
            case actions = "Actions"
        }
    }

    public struct DescribeSSLPoliciesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The names of the policies.
        public let names: [String]?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?

        public init(names: [String]? = nil, pageSize: Int32? = nil, marker: String? = nil) {
            self.names = names
            self.pageSize = pageSize
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case names = "Names"
            case pageSize = "PageSize"
            case marker = "Marker"
        }
    }

    public struct DescribeTargetGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroups", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the target groups.
        public let targetGroups: [TargetGroup]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(targetGroups: [TargetGroup]? = nil, nextMarker: String? = nil) {
            self.targetGroups = targetGroups
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups = "TargetGroups"
            case nextMarker = "NextMarker"
        }
    }

    public struct ModifyLoadBalancerAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The load balancer attributes.
        public let attributes: [LoadBalancerAttribute]

        public init(loadBalancerArn: String, attributes: [LoadBalancerAttribute]) {
            self.loadBalancerArn = loadBalancerArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case attributes = "Attributes"
        }
    }

    public struct DescribeLoadBalancersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the load balancers.
        public let loadBalancers: [LoadBalancer]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(loadBalancers: [LoadBalancer]? = nil, nextMarker: String? = nil) {
            self.loadBalancers = loadBalancers
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancers = "LoadBalancers"
            case nextMarker = "NextMarker"
        }
    }

    public struct LoadBalancerAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", required: false, type: .string)
        ]
        /// The static IP address.
        public let ipAddress: String?
        /// [Network Load Balancers] The allocation ID of the Elastic IP address.
        public let allocationId: String?

        public init(ipAddress: String? = nil, allocationId: String? = nil) {
            self.ipAddress = ipAddress
            self.allocationId = allocationId
        }

        private enum CodingKeys: String, CodingKey {
            case ipAddress = "IpAddress"
            case allocationId = "AllocationId"
        }
    }

    public struct RuleCondition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "QueryStringConfig", required: false, type: .structure), 
            AWSShapeMember(label: "HttpRequestMethodConfig", required: false, type: .structure), 
            AWSShapeMember(label: "HostHeaderConfig", required: false, type: .structure), 
            AWSShapeMember(label: "HttpHeaderConfig", required: false, type: .structure), 
            AWSShapeMember(label: "PathPatternConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Field", required: false, type: .string)
        ]
        public let queryStringConfig: QueryStringConditionConfig?
        public let httpRequestMethodConfig: HttpRequestMethodConditionConfig?
        public let hostHeaderConfig: HostHeaderConditionConfig?
        public let httpHeaderConfig: HttpHeaderConditionConfig?
        public let pathPatternConfig: PathPatternConditionConfig?
        /// The condition value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern (for example, /img/*). A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let values: [String]?
        /// The name of the field. The possible values are host-header and path-pattern.
        public let field: String?

        public init(queryStringConfig: QueryStringConditionConfig? = nil, httpRequestMethodConfig: HttpRequestMethodConditionConfig? = nil, hostHeaderConfig: HostHeaderConditionConfig? = nil, httpHeaderConfig: HttpHeaderConditionConfig? = nil, pathPatternConfig: PathPatternConditionConfig? = nil, values: [String]? = nil, field: String? = nil) {
            self.queryStringConfig = queryStringConfig
            self.httpRequestMethodConfig = httpRequestMethodConfig
            self.hostHeaderConfig = hostHeaderConfig
            self.httpHeaderConfig = httpHeaderConfig
            self.pathPatternConfig = pathPatternConfig
            self.values = values
            self.field = field
        }

        private enum CodingKeys: String, CodingKey {
            case queryStringConfig = "QueryStringConfig"
            case httpRequestMethodConfig = "HttpRequestMethodConfig"
            case hostHeaderConfig = "HostHeaderConfig"
            case httpHeaderConfig = "HttpHeaderConfig"
            case pathPatternConfig = "PathPatternConfig"
            case values = "Values"
            case field = "Field"
        }
    }

    public struct DeleteListenerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(listenerArn: String) {
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case listenerArn = "ListenerArn"
        }
    }

    public struct SslPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SslProtocols", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Ciphers", required: false, type: .list)
        ]
        /// The protocols.
        public let sslProtocols: [String]?
        /// The name of the policy.
        public let name: String?
        /// The ciphers.
        public let ciphers: [Cipher]?

        public init(sslProtocols: [String]? = nil, name: String? = nil, ciphers: [Cipher]? = nil) {
            self.sslProtocols = sslProtocols
            self.name = name
            self.ciphers = ciphers
        }

        private enum CodingKeys: String, CodingKey {
            case sslProtocols = "SslProtocols"
            case name = "Name"
            case ciphers = "Ciphers"
        }
    }

    public struct DescribeListenersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the listeners.
        public let listeners: [Listener]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(listeners: [Listener]? = nil, nextMarker: String? = nil) {
            self.listeners = listeners
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
            case nextMarker = "NextMarker"
        }
    }

    public struct ModifyListenerOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// Information about the modified listener.
        public let listeners: [Listener]?

        public init(listeners: [Listener]? = nil) {
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case listeners = "Listeners"
        }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "IsDefault", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the certificate.
        public let certificateArn: String?
        /// Indicates whether the certificate is the default certificate. Do not set IsDefault when specifying a certificate as an input parameter.
        public let isDefault: Bool?

        public init(certificateArn: String? = nil, isDefault: Bool? = nil) {
            self.certificateArn = certificateArn
            self.isDefault = isDefault
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case isDefault = "IsDefault"
        }
    }

    public enum TargetHealthStateEnum: String, CustomStringConvertible, Codable {
        case initial = "initial"
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        case unused = "unused"
        case draining = "draining"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public struct DeleteLoadBalancerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String

        public init(loadBalancerArn: String) {
            self.loadBalancerArn = loadBalancerArn
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
        }
    }

    public struct TagDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string)
        ]
        /// Information about the tags.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?

        public init(tags: [Tag]? = nil, resourceArn: String? = nil) {
            self.tags = tags
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceArn = "ResourceArn"
        }
    }

    public struct DeleteRuleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuleArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String

        public init(ruleArn: String) {
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArn = "RuleArn"
        }
    }

    public enum HttpRequestMethodEnum: String, CustomStringConvertible, Codable {
        case get = "GET"
        case head = "HEAD"
        case post = "POST"
        case put = "PUT"
        case delete = "DELETE"
        case connect = "CONNECT"
        case options = "OPTIONS"
        case trace = "TRACE"
        case patch = "PATCH"
        public var description: String { return self.rawValue }
    }

    public enum TargetHealthReasonEnum: String, CustomStringConvertible, Codable {
        case elbRegistrationinprogress = "Elb.RegistrationInProgress"
        case elbInitialhealthchecking = "Elb.InitialHealthChecking"
        case targetResponsecodemismatch = "Target.ResponseCodeMismatch"
        case targetTimeout = "Target.Timeout"
        case targetFailedhealthchecks = "Target.FailedHealthChecks"
        case targetNotregistered = "Target.NotRegistered"
        case targetNotinuse = "Target.NotInUse"
        case targetDeregistrationinprogress = "Target.DeregistrationInProgress"
        case targetInvalidstate = "Target.InvalidState"
        case targetIpunusable = "Target.IpUnusable"
        case targetHealthcheckdisabled = "Target.HealthCheckDisabled"
        case elbInternalerror = "Elb.InternalError"
        public var description: String { return self.rawValue }
    }

    public struct DeleteTargetGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targetGroupArn: String) {
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct ModifyListenerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultActions", required: false, type: .list), 
            AWSShapeMember(label: "SslPolicy", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "Certificates", required: false, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The actions for the default rule. The rule must include one forward action or one or more fixed-response actions. If the action type is forward, you specify a target group. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer or TCP for a Network Load Balancer. [HTTPS listener] If the action type is authenticate-oidc, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant. [HTTPS listener] If the action type is authenticate-cognito, you authenticate users through the user pools supported by Amazon Cognito. [Application Load Balancer] If the action type is redirect, you redirect specified client requests from one URL to another. [Application Load Balancer] If the action type is fixed-response, you drop specified client requests and return a custom HTTP response.
        public let defaultActions: [Action]?
        /// [HTTPS listeners] The security policy that defines which protocols and ciphers are supported. For more information, see Security Policies in the Application Load Balancers Guide.
        public let sslPolicy: String?
        /// The port for connections from clients to the load balancer.
        public let port: Int32?
        /// The protocol for connections from clients to the load balancer. Application Load Balancers support HTTP and HTTPS and Network Load Balancers support TCP.
        public let `protocol`: ProtocolEnum?
        /// [HTTPS listeners] The default SSL server certificate. You must provide exactly one certificate. Set CertificateArn to the certificate ARN but do not set IsDefault. To create a certificate list, use AddListenerCertificates.
        public let certificates: [Certificate]?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(defaultActions: [Action]? = nil, sslPolicy: String? = nil, port: Int32? = nil, protocol: ProtocolEnum? = nil, certificates: [Certificate]? = nil, listenerArn: String) {
            self.defaultActions = defaultActions
            self.sslPolicy = sslPolicy
            self.port = port
            self.`protocol` = `protocol`
            self.certificates = certificates
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case defaultActions = "DefaultActions"
            case sslPolicy = "SslPolicy"
            case port = "Port"
            case `protocol` = "Protocol"
            case certificates = "Certificates"
            case listenerArn = "ListenerArn"
        }
    }

    public struct SetSecurityGroupsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list)
        ]
        /// The IDs of the security groups associated with the load balancer.
        public let securityGroupIds: [String]?

        public init(securityGroupIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    public struct DeleteListenerOutput: AWSShape {

    }

    public struct TargetGroupAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The name of the attribute. The following attribute is supported by both Application Load Balancers and Network Load Balancers:    deregistration_delay.timeout_seconds - The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600 seconds. The default value is 300 seconds. If the target is a Lambda function, this attribute is not supported.   The following attributes are supported by Application Load Balancers if the target is not a Lambda function:    slow_start.duration_seconds - The time period, in seconds, during which a newly registered target receives a linearly increasing share of the traffic to the target group. After this time period ends, the target receives its full share of traffic. The range is 30-900 seconds (15 minutes). Slow start mode is disabled by default.    stickiness.enabled - Indicates whether sticky sessions are enabled. The value is true or false. The default is false.    stickiness.type - The type of sticky sessions. The possible value is lb_cookie.    stickiness.lb_cookie.duration_seconds - The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).   The following attribute is supported only if the target is a Lambda function.    lambda.multi_value_headers.enabled - Indicates whether the request and response headers exchanged between the load balancer and the Lambda function include arrays of values or strings. The value is true or false. The default is false. If the value is false and the request contains a duplicate header field name or query parameter key, the load balancer uses the last value sent by the client.   The following attribute is supported only by Network Load Balancers:    proxy_protocol_v2.enabled - Indicates whether Proxy Protocol version 2 is enabled. The value is true or false. The default is false.  
        public let key: String?
        /// The value of the attribute.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DeleteLoadBalancerOutput: AWSShape {

    }

    public struct ModifyRuleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", required: false, type: .list), 
            AWSShapeMember(label: "RuleArn", required: true, type: .string), 
            AWSShapeMember(label: "Conditions", required: false, type: .list)
        ]
        /// The actions. If the action type is forward, you specify a target group. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer or TCP for a Network Load Balancer. [HTTPS listener] If the action type is authenticate-oidc, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant. [HTTPS listener] If the action type is authenticate-cognito, you authenticate users through the user pools supported by Amazon Cognito. [Application Load Balancer] If the action type is redirect, you redirect specified client requests from one URL to another. [Application Load Balancer] If the action type is fixed-response, you drop specified client requests and return a custom HTTP response.
        public let actions: [Action]?
        /// The Amazon Resource Name (ARN) of the rule.
        public let ruleArn: String
        /// The conditions. Each condition specifies a field name and a single value. If the field name is host-header, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   - .   * (matches 0 or more characters)   ? (matches exactly 1 character)   If the field name is path-pattern, you can specify a single path pattern. A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters. You can include up to three wildcard characters.   A-Z, a-z, 0-9   _ - . $ / ~ " ' @ : +   &amp; (using &amp;amp;)   * (matches 0 or more characters)   ? (matches exactly 1 character)  
        public let conditions: [RuleCondition]?

        public init(actions: [Action]? = nil, ruleArn: String, conditions: [RuleCondition]? = nil) {
            self.actions = actions
            self.ruleArn = ruleArn
            self.conditions = conditions
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case ruleArn = "RuleArn"
            case conditions = "Conditions"
        }
    }

    public struct AddListenerCertificatesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .list)
        ]
        /// Information about the certificates.
        public let certificates: [Certificate]?

        public init(certificates: [Certificate]? = nil) {
            self.certificates = certificates
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
        }
    }

    public struct DescribeRulesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the rules.
        public let rules: [Rule]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(rules: [Rule]? = nil, nextMarker: String? = nil) {
            self.rules = rules
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case nextMarker = "NextMarker"
        }
    }

    public struct DescribeSSLPoliciesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SslPolicies", required: false, type: .list), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string)
        ]
        /// Information about the policies.
        public let sslPolicies: [SslPolicy]?
        /// The marker to use when requesting the next set of results. If there are no additional results, the string is empty.
        public let nextMarker: String?

        public init(sslPolicies: [SslPolicy]? = nil, nextMarker: String? = nil) {
            self.sslPolicies = sslPolicies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case sslPolicies = "SslPolicies"
            case nextMarker = "NextMarker"
        }
    }

    public struct HostHeaderConditionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        public let values: [String]?

        public init(values: [String]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
        }
    }

    public enum TargetTypeEnum: String, CustomStringConvertible, Codable {
        case instance = "instance"
        case ip = "ip"
        case lambda = "lambda"
        public var description: String { return self.rawValue }
    }

    public struct AddListenerCertificatesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: true, type: .list), 
            AWSShapeMember(label: "ListenerArn", required: true, type: .string)
        ]
        /// The certificate to add. You can specify one certificate per call. Set CertificateArn to the certificate ARN but do not set IsDefault.
        public let certificates: [Certificate]
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String

        public init(certificates: [Certificate], listenerArn: String) {
            self.certificates = certificates
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case listenerArn = "ListenerArn"
        }
    }

    public struct AuthenticateOidcActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizationEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "SessionCookieName", required: false, type: .string), 
            AWSShapeMember(label: "TokenEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "Issuer", required: true, type: .string), 
            AWSShapeMember(label: "ClientSecret", required: false, type: .string), 
            AWSShapeMember(label: "SessionTimeout", required: false, type: .long), 
            AWSShapeMember(label: "Scope", required: false, type: .string), 
            AWSShapeMember(label: "UserInfoEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "ClientId", required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationRequestExtraParams", required: false, type: .map), 
            AWSShapeMember(label: "OnUnauthenticatedRequest", required: false, type: .enum), 
            AWSShapeMember(label: "UseExistingClientSecret", required: false, type: .boolean)
        ]
        /// The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let authorizationEndpoint: String
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public let sessionCookieName: String?
        /// The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let tokenEndpoint: String
        /// The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let issuer: String
        /// The OAuth 2.0 client secret.
        public let clientSecret: String?
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public let sessionTimeout: Int64?
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public let scope: String?
        /// The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
        public let userInfoEndpoint: String
        /// The OAuth 2.0 client identifier.
        public let clientId: String
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public let authenticationRequestExtraParams: [String: String]?
        /// The behavior if the user is not authenticated. The following are possible values:   deny - Return an HTTP 401 Unauthorized error.   allow - Allow the request to be forwarded to the target.   authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.  
        public let onUnauthenticatedRequest: AuthenticateOidcActionConditionalBehaviorEnum?
        public let useExistingClientSecret: Bool?

        public init(authorizationEndpoint: String, sessionCookieName: String? = nil, tokenEndpoint: String, issuer: String, clientSecret: String? = nil, sessionTimeout: Int64? = nil, scope: String? = nil, userInfoEndpoint: String, clientId: String, authenticationRequestExtraParams: [String: String]? = nil, onUnauthenticatedRequest: AuthenticateOidcActionConditionalBehaviorEnum? = nil, useExistingClientSecret: Bool? = nil) {
            self.authorizationEndpoint = authorizationEndpoint
            self.sessionCookieName = sessionCookieName
            self.tokenEndpoint = tokenEndpoint
            self.issuer = issuer
            self.clientSecret = clientSecret
            self.sessionTimeout = sessionTimeout
            self.scope = scope
            self.userInfoEndpoint = userInfoEndpoint
            self.clientId = clientId
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
            self.useExistingClientSecret = useExistingClientSecret
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationEndpoint = "AuthorizationEndpoint"
            case sessionCookieName = "SessionCookieName"
            case tokenEndpoint = "TokenEndpoint"
            case issuer = "Issuer"
            case clientSecret = "ClientSecret"
            case sessionTimeout = "SessionTimeout"
            case scope = "Scope"
            case userInfoEndpoint = "UserInfoEndpoint"
            case clientId = "ClientId"
            case authenticationRequestExtraParams = "AuthenticationRequestExtraParams"
            case onUnauthenticatedRequest = "OnUnauthenticatedRequest"
            case useExistingClientSecret = "UseExistingClientSecret"
        }
    }

    public struct CreateLoadBalancerInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SubnetMappings", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "IpAddressType", required: false, type: .enum), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "Subnets", required: false, type: .list), 
            AWSShapeMember(label: "Scheme", required: false, type: .enum)
        ]
        /// The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
        public let name: String
        /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets. [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet.
        public let subnetMappings: [SubnetMapping]?
        /// One or more tags to assign to the load balancer.
        public let tags: [Tag]?
        /// The type of load balancer. The default is application.
        public let `type`: LoadBalancerTypeEnum?
        /// [Application Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are ipv4 (for IPv4 addresses) and dualstack (for IPv4 and IPv6 addresses). Internal load balancers must use ipv4.
        public let ipAddressType: IpAddressType?
        /// [Application Load Balancers] The IDs of the security groups for the load balancer.
        public let securityGroups: [String]?
        /// The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. [Application Load Balancers] You must specify subnets from at least two Availability Zones. [Network Load Balancers] You can specify subnets from one or more Availability Zones.
        public let subnets: [String]?
        /// The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet. The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can only route requests from clients with access to the VPC for the load balancer. The default is an Internet-facing load balancer.
        public let scheme: LoadBalancerSchemeEnum?

        public init(name: String, subnetMappings: [SubnetMapping]? = nil, tags: [Tag]? = nil, type: LoadBalancerTypeEnum? = nil, ipAddressType: IpAddressType? = nil, securityGroups: [String]? = nil, subnets: [String]? = nil, scheme: LoadBalancerSchemeEnum? = nil) {
            self.name = name
            self.subnetMappings = subnetMappings
            self.tags = tags
            self.`type` = `type`
            self.ipAddressType = ipAddressType
            self.securityGroups = securityGroups
            self.subnets = subnets
            self.scheme = scheme
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case subnetMappings = "SubnetMappings"
            case tags = "Tags"
            case `type` = "Type"
            case ipAddressType = "IpAddressType"
            case securityGroups = "SecurityGroups"
            case subnets = "Subnets"
            case scheme = "Scheme"
        }
    }

    public struct SetRulePrioritiesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RulePriorities", required: true, type: .list)
        ]
        /// The rule priorities.
        public let rulePriorities: [RulePriorityPair]

        public init(rulePriorities: [RulePriorityPair]) {
            self.rulePriorities = rulePriorities
        }

        private enum CodingKeys: String, CodingKey {
            case rulePriorities = "RulePriorities"
        }
    }

    public struct AuthenticateCognitoActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionCookieName", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolDomain", required: true, type: .string), 
            AWSShapeMember(label: "SessionTimeout", required: false, type: .long), 
            AWSShapeMember(label: "UserPoolClientId", required: true, type: .string), 
            AWSShapeMember(label: "AuthenticationRequestExtraParams", required: false, type: .map), 
            AWSShapeMember(label: "UserPoolArn", required: true, type: .string), 
            AWSShapeMember(label: "Scope", required: false, type: .string), 
            AWSShapeMember(label: "OnUnauthenticatedRequest", required: false, type: .enum)
        ]
        /// The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
        public let sessionCookieName: String?
        /// The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
        public let userPoolDomain: String
        /// The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
        public let sessionTimeout: Int64?
        /// The ID of the Amazon Cognito user pool client.
        public let userPoolClientId: String
        /// The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
        public let authenticationRequestExtraParams: [String: String]?
        /// The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
        public let userPoolArn: String
        /// The set of user claims to be requested from the IdP. The default is openid. To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
        public let scope: String?
        /// The behavior if the user is not authenticated. The following are possible values:   deny - Return an HTTP 401 Unauthorized error.   allow - Allow the request to be forwarded to the target.   authenticate - Redirect the request to the IdP authorization endpoint. This is the default value.  
        public let onUnauthenticatedRequest: AuthenticateCognitoActionConditionalBehaviorEnum?

        public init(sessionCookieName: String? = nil, userPoolDomain: String, sessionTimeout: Int64? = nil, userPoolClientId: String, authenticationRequestExtraParams: [String: String]? = nil, userPoolArn: String, scope: String? = nil, onUnauthenticatedRequest: AuthenticateCognitoActionConditionalBehaviorEnum? = nil) {
            self.sessionCookieName = sessionCookieName
            self.userPoolDomain = userPoolDomain
            self.sessionTimeout = sessionTimeout
            self.userPoolClientId = userPoolClientId
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.userPoolArn = userPoolArn
            self.scope = scope
            self.onUnauthenticatedRequest = onUnauthenticatedRequest
        }

        private enum CodingKeys: String, CodingKey {
            case sessionCookieName = "SessionCookieName"
            case userPoolDomain = "UserPoolDomain"
            case sessionTimeout = "SessionTimeout"
            case userPoolClientId = "UserPoolClientId"
            case authenticationRequestExtraParams = "AuthenticationRequestExtraParams"
            case userPoolArn = "UserPoolArn"
            case scope = "Scope"
            case onUnauthenticatedRequest = "OnUnauthenticatedRequest"
        }
    }

    public struct DescribeRulesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "RuleArns", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ListenerArn", required: false, type: .string)
        ]
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?
        /// The Amazon Resource Names (ARN) of the rules.
        public let ruleArns: [String]?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Name (ARN) of the listener.
        public let listenerArn: String?

        public init(pageSize: Int32? = nil, ruleArns: [String]? = nil, marker: String? = nil, listenerArn: String? = nil) {
            self.pageSize = pageSize
            self.ruleArns = ruleArns
            self.marker = marker
            self.listenerArn = listenerArn
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case ruleArns = "RuleArns"
            case marker = "Marker"
            case listenerArn = "ListenerArn"
        }
    }

    public struct RegisterTargetsOutput: AWSShape {

    }

    public struct ModifyProvisionedCapacityInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "MinimumLBCapacityUnits", required: true, type: .integer)
        ]
        public let loadBalancerArn: String
        public let minimumLBCapacityUnits: Int32

        public init(loadBalancerArn: String, minimumLBCapacityUnits: Int32) {
            self.loadBalancerArn = loadBalancerArn
            self.minimumLBCapacityUnits = minimumLBCapacityUnits
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case minimumLBCapacityUnits = "MinimumLBCapacityUnits"
        }
    }

    public struct FixedResponseActionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusCode", required: true, type: .string), 
            AWSShapeMember(label: "ContentType", required: false, type: .string), 
            AWSShapeMember(label: "MessageBody", required: false, type: .string)
        ]
        /// The HTTP response code (2XX, 4XX, or 5XX).
        public let statusCode: String
        /// The content type. Valid Values: text/plain | text/css | text/html | application/javascript | application/json
        public let contentType: String?
        /// The message.
        public let messageBody: String?

        public init(statusCode: String, contentType: String? = nil, messageBody: String? = nil) {
            self.statusCode = statusCode
            self.contentType = contentType
            self.messageBody = messageBody
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "StatusCode"
            case contentType = "ContentType"
            case messageBody = "MessageBody"
        }
    }

    public struct DescribeTargetHealthInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The targets.
        public let targets: [TargetDescription]?
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targets: [TargetDescription]? = nil, targetGroupArn: String) {
            self.targets = targets
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct ProvisionedCapacity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinimumLBCapacityUnits", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "DecreasesRemaining", required: false, type: .integer)
        ]
        public let minimumLBCapacityUnits: Int32?
        public let lastModifiedTime: TimeStamp?
        public let status: ProvisionedCapacityStatus?
        public let decreasesRemaining: Int32?

        public init(minimumLBCapacityUnits: Int32? = nil, lastModifiedTime: TimeStamp? = nil, status: ProvisionedCapacityStatus? = nil, decreasesRemaining: Int32? = nil) {
            self.minimumLBCapacityUnits = minimumLBCapacityUnits
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.decreasesRemaining = decreasesRemaining
        }

        private enum CodingKeys: String, CodingKey {
            case minimumLBCapacityUnits = "MinimumLBCapacityUnits"
            case lastModifiedTime = "LastModifiedTime"
            case status = "Status"
            case decreasesRemaining = "DecreasesRemaining"
        }
    }

    public struct CreateTargetGroupInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HealthCheckTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Matcher", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "TargetType", required: false, type: .enum), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckIntervalSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "UnhealthyThresholdCount", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "HealthCheckProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "HealthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .enum), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// The amount of time, in seconds, during which no response from a target means a failed health check. For Application Load Balancers, the range is 2â€“120 seconds and the default is 5 seconds if the target type is instance or ip and 30 seconds if the target type is lambda. For Network Load Balancers, this is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
        public let healthCheckTimeoutSeconds: Int32?
        /// [HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target.
        public let matcher: Matcher?
        /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        public let vpcId: String?
        /// The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.    instance - Targets are specified by instance ID. This is the default value.    ip - Targets are specified by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.    lambda - The target groups contains a single Lambda function.  
        public let targetType: TargetTypeEnum?
        /// The port the load balancer uses when performing health checks on targets. The default is traffic-port, which is the port on which each target receives traffic from the load balancer.
        public let healthCheckPort: String?
        /// The approximate amount of time, in seconds, between health checks of an individual target. For Application Load Balancers, the range is 5â€“300 seconds. For Network Load Balancers, the supported values are 10 or 30 seconds. If the target type is instance or ip, the default is 30 seconds. If the target type is lambda, the default is 35 seconds.
        public let healthCheckIntervalSeconds: Int32?
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy. For Application Load Balancers, the default is 5. For Network Load Balancers, the default is 3.
        public let healthyThresholdCount: Int32?
        /// The number of consecutive health check failures required before considering a target unhealthy. For Application Load Balancers, the default is 2. For Network Load Balancers, this value must be the same as the healthy threshold count.
        public let unhealthyThresholdCount: Int32?
        /// The name of the target group. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.
        public let name: String
        /// Indicates whether health checks are enabled. If the target type is instance or ip, the default is true. If the target type is lambda, the default is false.
        public let healthCheckEnabled: Bool?
        /// The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported only if the protocol of the target group is TCP. For Application Load Balancers, the default is HTTP. For Network Load Balancers, the default is TCP.
        public let healthCheckProtocol: ProtocolEnum?
        /// [HTTP/HTTPS health checks] The ping path that is the destination on the targets for health checks. The default is /.
        public let healthCheckPath: String?
        /// The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocol is TCP. If the target is a Lambda function, this parameter does not apply.
        public let `protocol`: ProtocolEnum?
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply.
        public let port: Int32?

        public init(healthCheckTimeoutSeconds: Int32? = nil, matcher: Matcher? = nil, vpcId: String? = nil, targetType: TargetTypeEnum? = nil, healthCheckPort: String? = nil, healthCheckIntervalSeconds: Int32? = nil, healthyThresholdCount: Int32? = nil, unhealthyThresholdCount: Int32? = nil, name: String, healthCheckEnabled: Bool? = nil, healthCheckProtocol: ProtocolEnum? = nil, healthCheckPath: String? = nil, protocol: ProtocolEnum? = nil, port: Int32? = nil) {
            self.healthCheckTimeoutSeconds = healthCheckTimeoutSeconds
            self.matcher = matcher
            self.vpcId = vpcId
            self.targetType = targetType
            self.healthCheckPort = healthCheckPort
            self.healthCheckIntervalSeconds = healthCheckIntervalSeconds
            self.healthyThresholdCount = healthyThresholdCount
            self.unhealthyThresholdCount = unhealthyThresholdCount
            self.name = name
            self.healthCheckEnabled = healthCheckEnabled
            self.healthCheckProtocol = healthCheckProtocol
            self.healthCheckPath = healthCheckPath
            self.`protocol` = `protocol`
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case healthCheckTimeoutSeconds = "HealthCheckTimeoutSeconds"
            case matcher = "Matcher"
            case vpcId = "VpcId"
            case targetType = "TargetType"
            case healthCheckPort = "HealthCheckPort"
            case healthCheckIntervalSeconds = "HealthCheckIntervalSeconds"
            case healthyThresholdCount = "HealthyThresholdCount"
            case unhealthyThresholdCount = "UnhealthyThresholdCount"
            case name = "Name"
            case healthCheckEnabled = "HealthCheckEnabled"
            case healthCheckProtocol = "HealthCheckProtocol"
            case healthCheckPath = "HealthCheckPath"
            case `protocol` = "Protocol"
            case port = "Port"
        }
    }

    public struct DescribeTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArns", required: true, type: .list)
        ]
        /// The Amazon Resource Names (ARN) of the resources.
        public let resourceArns: [String]

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "ResourceArns"
        }
    }

    public struct SetSubnetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "SubnetMappings", required: false, type: .list)
        ]
        /// The IDs of the public subnets. You must specify subnets from at least two Availability Zones. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.
        public let subnets: [String]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The IDs of the public subnets. You must specify subnets from at least two Availability Zones. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings. You cannot specify Elastic IP addresses for your subnets.
        public let subnetMappings: [SubnetMapping]?

        public init(subnets: [String]? = nil, loadBalancerArn: String, subnetMappings: [SubnetMapping]? = nil) {
            self.subnets = subnets
            self.loadBalancerArn = loadBalancerArn
            self.subnetMappings = subnetMappings
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "Subnets"
            case loadBalancerArn = "LoadBalancerArn"
            case subnetMappings = "SubnetMappings"
        }
    }

    public enum LoadBalancerTypeEnum: String, CustomStringConvertible, Codable {
        case application = "application"
        case network = "network"
        public var description: String { return self.rawValue }
    }

    public enum IpAddressType: String, CustomStringConvertible, Codable {
        case ipv4 = "ipv4"
        case dualstack = "dualstack"
        public var description: String { return self.rawValue }
    }

    public struct TargetHealthDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetHealth", required: false, type: .structure), 
            AWSShapeMember(label: "Target", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckPort", required: false, type: .string)
        ]
        /// The health information for the target.
        public let targetHealth: TargetHealth?
        /// The description of the target.
        public let target: TargetDescription?
        /// The port to use to connect with the target.
        public let healthCheckPort: String?

        public init(targetHealth: TargetHealth? = nil, target: TargetDescription? = nil, healthCheckPort: String? = nil) {
            self.targetHealth = targetHealth
            self.target = target
            self.healthCheckPort = healthCheckPort
        }

        private enum CodingKeys: String, CodingKey {
            case targetHealth = "TargetHealth"
            case target = "Target"
            case healthCheckPort = "HealthCheckPort"
        }
    }

    public struct DescribeListenersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ListenerArns", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Names (ARN) of the listeners.
        public let listenerArns: [String]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?

        public init(marker: String? = nil, listenerArns: [String]? = nil, loadBalancerArn: String? = nil, pageSize: Int32? = nil) {
            self.marker = marker
            self.listenerArns = listenerArns
            self.loadBalancerArn = loadBalancerArn
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case listenerArns = "ListenerArns"
            case loadBalancerArn = "LoadBalancerArn"
            case pageSize = "PageSize"
        }
    }

    public struct HttpHeaderConditionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "HttpHeaderName", required: false, type: .string)
        ]
        public let values: [String]?
        public let httpHeaderName: String?

        public init(values: [String]? = nil, httpHeaderName: String? = nil) {
            self.values = values
            self.httpHeaderName = httpHeaderName
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case httpHeaderName = "HttpHeaderName"
        }
    }

    public struct DescribeTargetGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TargetGroupArns", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancerArn", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The names of the target groups.
        public let names: [String]?
        /// The marker for the next set of results. (You received this marker from a previous call.)
        public let marker: String?
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupArns: [String]?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The maximum number of results to return with this call.
        public let pageSize: Int32?

        public init(names: [String]? = nil, marker: String? = nil, targetGroupArns: [String]? = nil, loadBalancerArn: String? = nil, pageSize: Int32? = nil) {
            self.names = names
            self.marker = marker
            self.targetGroupArns = targetGroupArns
            self.loadBalancerArn = loadBalancerArn
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case names = "Names"
            case marker = "Marker"
            case targetGroupArns = "TargetGroupArns"
            case loadBalancerArn = "LoadBalancerArn"
            case pageSize = "PageSize"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticIp", required: false, type: .boolean), 
            AWSShapeMember(label: "LoadBalancerAddresses", required: false, type: .list), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "ZoneName", required: false, type: .string)
        ]
        public let staticIp: Bool?
        /// [Network Load Balancers] The static IP address.
        public let loadBalancerAddresses: [LoadBalancerAddress]?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The name of the Availability Zone.
        public let zoneName: String?

        public init(staticIp: Bool? = nil, loadBalancerAddresses: [LoadBalancerAddress]? = nil, subnetId: String? = nil, zoneName: String? = nil) {
            self.staticIp = staticIp
            self.loadBalancerAddresses = loadBalancerAddresses
            self.subnetId = subnetId
            self.zoneName = zoneName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIp = "StaticIp"
            case loadBalancerAddresses = "LoadBalancerAddresses"
            case subnetId = "SubnetId"
            case zoneName = "ZoneName"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key of the tag.
        public let key: String
        /// The value of the tag.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct SetSecurityGroupsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerArn", required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroups", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String
        /// The IDs of the security groups.
        public let securityGroups: [String]

        public init(loadBalancerArn: String, securityGroups: [String]) {
            self.loadBalancerArn = loadBalancerArn
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerArn = "LoadBalancerArn"
            case securityGroups = "SecurityGroups"
        }
    }

    public struct DescribeLoadBalancerAttributesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// Information about the load balancer attributes.
        public let attributes: [LoadBalancerAttribute]?

        public init(attributes: [LoadBalancerAttribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public enum RedirectActionStatusCodeEnum: String, CustomStringConvertible, Codable {
        case http301 = "HTTP_301"
        case http302 = "HTTP_302"
        public var description: String { return self.rawValue }
    }

    public enum ActionTypeEnum: String, CustomStringConvertible, Codable {
        case forward = "forward"
        case authenticateOidc = "authenticate-oidc"
        case redirect = "redirect"
        case authenticateCognito = "authenticate-cognito"
        case fixedResponse = "fixed-response"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTargetGroupAttributesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targetGroupArn: String) {
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct SetRulePrioritiesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the rules.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct CreateRuleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .list)
        ]
        /// Information about the rule.
        public let rules: [Rule]?

        public init(rules: [Rule]? = nil) {
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
        }
    }

    public struct DeregisterTargetsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: true, type: .list), 
            AWSShapeMember(label: "TargetGroupArn", required: true, type: .string)
        ]
        /// The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.
        public let targets: [TargetDescription]
        /// The Amazon Resource Name (ARN) of the target group.
        public let targetGroupArn: String

        public init(targets: [TargetDescription], targetGroupArn: String) {
            self.targets = targets
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case targetGroupArn = "TargetGroupArn"
        }
    }

    public struct AddTagsOutput: AWSShape {

    }

}