// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Sns {

    public struct SetPlatformApplicationAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformApplicationArn", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .map)
        ]
        /// PlatformApplicationArn for SetPlatformApplicationAttributes action.
        public let platformApplicationArn: String
        /// A map of the platform application attributes. Attributes in this map include the following:    PlatformCredential -- The credential received from the notification service. For APNS/APNS_SANDBOX, PlatformCredential is private key. For GCM, PlatformCredential is "API key". For ADM, PlatformCredential is "client secret".    PlatformPrincipal -- The principal received from the notification service. For APNS/APNS_SANDBOX, PlatformPrincipal is SSL certificate. For GCM, PlatformPrincipal is not applicable. For ADM, PlatformPrincipal is "client id".    EventEndpointCreated -- Topic ARN to which EndpointCreated event notifications should be sent.    EventEndpointDeleted -- Topic ARN to which EndpointDeleted event notifications should be sent.    EventEndpointUpdated -- Topic ARN to which EndpointUpdate event notifications should be sent.    EventDeliveryFailure -- Topic ARN to which DeliveryFailure event notifications should be sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.    SuccessFeedbackRoleArn -- IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.    FailureFeedbackRoleArn -- IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.    SuccessFeedbackSampleRate -- Sample rate percentage (0-100) of successfully delivered messages.  
        public let attributes: [String: String]

        public init(platformApplicationArn: String, attributes: [String: String]) {
            self.platformApplicationArn = platformApplicationArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
            case attributes = "Attributes"
        }
    }

    public struct RemovePermissionInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: true, type: .string), 
            AWSShapeMember(label: "Label", required: true, type: .string)
        ]
        /// The ARN of the topic whose access control policy you wish to modify.
        public let topicArn: String
        /// The unique label of the statement you want to remove.
        public let label: String

        public init(topicArn: String, label: String) {
            self.topicArn = topicArn
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
            case label = "Label"
        }
    }

    public struct ListSubscriptionsByTopicInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARN of the topic for which you wish to find subscriptions.
        public let topicArn: String
        /// Token returned by the previous ListSubscriptionsByTopic request.
        public let nextToken: String?

        public init(topicArn: String, nextToken: String? = nil) {
            self.topicArn = topicArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
            case nextToken = "NextToken"
        }
    }

    public struct ListPhoneNumbersOptedOutInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A NextToken string is used when you call the ListPhoneNumbersOptedOut action to retrieve additional records that are available after the first page of results.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public struct PublishResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageId", required: false, type: .string)
        ]
        /// Unique identifier assigned to the published message. Length Constraint: Maximum 100 characters
        public let messageId: String?

        public init(messageId: String? = nil) {
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case messageId = "MessageId"
        }
    }

    public struct ListEndpointsByPlatformApplicationInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PlatformApplicationArn", required: true, type: .string)
        ]
        /// NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results.
        public let nextToken: String?
        /// PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action.
        public let platformApplicationArn: String

        public init(nextToken: String? = nil, platformApplicationArn: String) {
            self.nextToken = nextToken
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct OptInPhoneNumberInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "phoneNumber", required: true, type: .string)
        ]
        /// The phone number to opt in.
        public let phoneNumber: String

        public init(phoneNumber: String) {
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "phoneNumber"
        }
    }

    public struct Subscription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionArn", required: false, type: .string), 
            AWSShapeMember(label: "Protocol", required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string)
        ]
        /// The ARN of the subscription's topic.
        public let topicArn: String?
        /// The subscription's owner.
        public let owner: String?
        /// The subscription's ARN.
        public let subscriptionArn: String?
        /// The subscription's protocol.
        public let `protocol`: String?
        /// The subscription's endpoint (format depends on the protocol).
        public let endpoint: String?

        public init(topicArn: String? = nil, owner: String? = nil, subscriptionArn: String? = nil, protocol: String? = nil, endpoint: String? = nil) {
            self.topicArn = topicArn
            self.owner = owner
            self.subscriptionArn = subscriptionArn
            self.`protocol` = `protocol`
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
            case owner = "Owner"
            case subscriptionArn = "SubscriptionArn"
            case `protocol` = "Protocol"
            case endpoint = "Endpoint"
        }
    }

    public struct AddPermissionInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: true, type: .string), 
            AWSShapeMember(label: "AWSAccountId", required: true, type: .list), 
            AWSShapeMember(label: "ActionName", required: true, type: .list), 
            AWSShapeMember(label: "Label", required: true, type: .string)
        ]
        /// The ARN of the topic whose access control policy you wish to modify.
        public let topicArn: String
        /// The AWS account IDs of the users (principals) who will be given access to the specified actions. The users must have AWS accounts, but do not need to be signed up for this service.
        public let aWSAccountId: [String]
        /// The action you want to allow for the specified principal(s). Valid values: any Amazon SNS action name.
        public let actionName: [String]
        /// A unique identifier for the new policy statement.
        public let label: String

        public init(topicArn: String, aWSAccountId: [String], actionName: [String], label: String) {
            self.topicArn = topicArn
            self.aWSAccountId = aWSAccountId
            self.actionName = actionName
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
            case aWSAccountId = "AWSAccountId"
            case actionName = "ActionName"
            case label = "Label"
        }
    }

    public struct ListTopicsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Token returned by the previous ListTopics request.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct Endpoint: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .map)
        ]
        /// EndpointArn for mobile app and device.
        public let endpointArn: String?
        /// Attributes for endpoint.
        public let attributes: [String: String]?

        public init(endpointArn: String? = nil, attributes: [String: String]? = nil) {
            self.endpointArn = endpointArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
            case attributes = "Attributes"
        }
    }

    public struct UnsubscribeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionArn", required: true, type: .string)
        ]
        /// The ARN of the subscription to be deleted.
        public let subscriptionArn: String

        public init(subscriptionArn: String) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct SetEndpointAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .map)
        ]
        /// EndpointArn used for SetEndpointAttributes action.
        public let endpointArn: String
        /// A map of the endpoint attributes. Attributes in this map include the following:    CustomUserData -- arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.    Enabled -- flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.    Token -- device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.  
        public let attributes: [String: String]

        public init(endpointArn: String, attributes: [String: String]) {
            self.endpointArn = endpointArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
            case attributes = "Attributes"
        }
    }

    public struct PlatformApplication: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformApplicationArn", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .map)
        ]
        /// PlatformApplicationArn for platform application object.
        public let platformApplicationArn: String?
        /// Attributes for platform application object.
        public let attributes: [String: String]?

        public init(platformApplicationArn: String? = nil, attributes: [String: String]? = nil) {
            self.platformApplicationArn = platformApplicationArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
            case attributes = "Attributes"
        }
    }

    public struct GetSubscriptionAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionArn", required: true, type: .string)
        ]
        /// The ARN of the subscription whose properties you want to get.
        public let subscriptionArn: String

        public init(subscriptionArn: String) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct SetSubscriptionAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "AttributeValue", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionArn", required: true, type: .string)
        ]
        /// The name of the attribute you want to set. Only a subset of the subscriptions attributes are mutable. Valid values: DeliveryPolicy | RawMessageDelivery 
        public let attributeName: String
        /// The new value for the attribute in JSON format.
        public let attributeValue: String?
        /// The ARN of the subscription to modify.
        public let subscriptionArn: String

        public init(attributeName: String, attributeValue: String? = nil, subscriptionArn: String) {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValue = "AttributeValue"
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct GetSMSAttributesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .map)
        ]
        /// The SMS attribute names and their values.
        public let attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct CreatePlatformEndpointInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomUserData", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "Token", required: true, type: .string), 
            AWSShapeMember(label: "PlatformApplicationArn", required: true, type: .string)
        ]
        /// Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.
        public let customUserData: String?
        /// For a list of attributes, see SetEndpointAttributes.
        public let attributes: [String: String]?
        /// Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM or ADM, the device token equivalent is called the registration ID.
        public let token: String
        /// PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint.
        public let platformApplicationArn: String

        public init(customUserData: String? = nil, attributes: [String: String]? = nil, token: String, platformApplicationArn: String) {
            self.customUserData = customUserData
            self.attributes = attributes
            self.token = token
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case customUserData = "CustomUserData"
            case attributes = "Attributes"
            case token = "Token"
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct GetEndpointAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// EndpointArn for GetEndpointAttributes input.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct ListTopicsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Topics", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of topic ARNs.
        public let topics: [Topic]?
        /// Token to pass along to the next ListTopics request. This element is returned if there are additional topics to retrieve.
        public let nextToken: String?

        public init(topics: [Topic]? = nil, nextToken: String? = nil) {
            self.topics = topics
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case topics = "Topics"
            case nextToken = "NextToken"
        }
    }

    public struct GetPlatformApplicationAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformApplicationArn", required: true, type: .string)
        ]
        /// PlatformApplicationArn for GetPlatformApplicationAttributesInput.
        public let platformApplicationArn: String

        public init(platformApplicationArn: String) {
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct GetPlatformApplicationAttributesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .map)
        ]
        /// Attributes include the following:    EventEndpointCreated -- Topic ARN to which EndpointCreated event notifications should be sent.    EventEndpointDeleted -- Topic ARN to which EndpointDeleted event notifications should be sent.    EventEndpointUpdated -- Topic ARN to which EndpointUpdate event notifications should be sent.    EventDeliveryFailure -- Topic ARN to which DeliveryFailure event notifications should be sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.  
        public let attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct GetTopicAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: true, type: .string)
        ]
        /// The ARN of the topic whose properties you want to get.
        public let topicArn: String

        public init(topicArn: String) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct CreatePlatformApplicationInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .map), 
            AWSShapeMember(label: "Platform", required: true, type: .string)
        ]
        /// Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long.
        public let name: String
        /// For a list of attributes, see SetPlatformApplicationAttributes 
        public let attributes: [String: String]
        /// The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Google Cloud Messaging).
        public let platform: String

        public init(name: String, attributes: [String: String], platform: String) {
            self.name = name
            self.attributes = attributes
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case attributes = "Attributes"
            case platform = "Platform"
        }
    }

    public struct CreatePlatformApplicationResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformApplicationArn", required: false, type: .string)
        ]
        /// PlatformApplicationArn is returned.
        public let platformApplicationArn: String?

        public init(platformApplicationArn: String? = nil) {
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct DeleteTopicInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: true, type: .string)
        ]
        /// The ARN of the topic you want to delete.
        public let topicArn: String

        public init(topicArn: String) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct ListEndpointsByPlatformApplicationResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Endpoints", required: false, type: .list)
        ]
        /// NextToken string is returned when calling ListEndpointsByPlatformApplication action if additional records are available after the first page results.
        public let nextToken: String?
        /// Endpoints returned for ListEndpointsByPlatformApplication action.
        public let endpoints: [Endpoint]?

        public init(nextToken: String? = nil, endpoints: [Endpoint]? = nil) {
            self.nextToken = nextToken
            self.endpoints = endpoints
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case endpoints = "Endpoints"
        }
    }

    public struct ListPhoneNumbersOptedOutResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "phoneNumbers", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of phone numbers that are opted out of receiving SMS messages. The list is paginated, and each page can contain up to 100 phone numbers.
        public let phoneNumbers: [String]?
        /// A NextToken string is returned when you call the ListPhoneNumbersOptedOut action if additional records are available after the first page of results.
        public let nextToken: String?

        public init(phoneNumbers: [String]? = nil, nextToken: String? = nil) {
            self.phoneNumbers = phoneNumbers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumbers = "phoneNumbers"
            case nextToken = "nextToken"
        }
    }

    public struct CheckIfPhoneNumberIsOptedOutResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "isOptedOut", required: false, type: .boolean)
        ]
        /// Indicates whether the phone number is opted out:    true – The phone number is opted out, meaning you cannot publish SMS messages to it.    false – The phone number is opted in, meaning you can publish SMS messages to it.  
        public let isOptedOut: Bool?

        public init(isOptedOut: Bool? = nil) {
            self.isOptedOut = isOptedOut
        }

        private enum CodingKeys: String, CodingKey {
            case isOptedOut = "isOptedOut"
        }
    }

    public struct ConfirmSubscriptionResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionArn", required: false, type: .string)
        ]
        /// The ARN of the created subscription.
        public let subscriptionArn: String?

        public init(subscriptionArn: String? = nil) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct SubscribeResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionArn", required: false, type: .string)
        ]
        /// The ARN of the subscription, if the service was able to create a subscription immediately (without requiring endpoint owner confirmation).
        public let subscriptionArn: String?

        public init(subscriptionArn: String? = nil) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct ListSubscriptionsByTopicResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        /// Token to pass along to the next ListSubscriptionsByTopic request. This element is returned if there are more subscriptions to retrieve.
        public let nextToken: String?
        /// A list of subscriptions.
        public let subscriptions: [Subscription]?

        public init(nextToken: String? = nil, subscriptions: [Subscription]? = nil) {
            self.nextToken = nextToken
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subscriptions = "Subscriptions"
        }
    }

    public struct ListSubscriptionsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        /// Token to pass along to the next ListSubscriptions request. This element is returned if there are more subscriptions to retrieve.
        public let nextToken: String?
        /// A list of subscriptions.
        public let subscriptions: [Subscription]?

        public init(nextToken: String? = nil, subscriptions: [Subscription]? = nil) {
            self.nextToken = nextToken
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subscriptions = "Subscriptions"
        }
    }

    public struct MessageAttributeValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataType", required: true, type: .string), 
            AWSShapeMember(label: "BinaryValue", required: false, type: .blob), 
            AWSShapeMember(label: "StringValue", required: false, type: .string)
        ]
        /// Amazon SNS supports the following logical data types: String, Number, and Binary. For more information, see Message Attribute Data Types.
        public let dataType: String
        /// Binary type attributes can store any binary data, for example, compressed data, encrypted data, or images.
        public let binaryValue: Data?
        /// Strings are Unicode with UTF8 binary encoding. For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters.
        public let stringValue: String?

        public init(dataType: String, binaryValue: Data? = nil, stringValue: String? = nil) {
            self.dataType = dataType
            self.binaryValue = binaryValue
            self.stringValue = stringValue
        }

        private enum CodingKeys: String, CodingKey {
            case dataType = "DataType"
            case binaryValue = "BinaryValue"
            case stringValue = "StringValue"
        }
    }

    public struct ListPlatformApplicationsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PlatformApplications", required: false, type: .list)
        ]
        /// NextToken string is returned when calling ListPlatformApplications action if additional records are available after the first page results.
        public let nextToken: String?
        /// Platform applications returned when calling ListPlatformApplications action.
        public let platformApplications: [PlatformApplication]?

        public init(nextToken: String? = nil, platformApplications: [PlatformApplication]? = nil) {
            self.nextToken = nextToken
            self.platformApplications = platformApplications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case platformApplications = "PlatformApplications"
        }
    }

    public struct ConfirmSubscriptionInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticateOnUnsubscribe", required: false, type: .string), 
            AWSShapeMember(label: "TopicArn", required: true, type: .string), 
            AWSShapeMember(label: "Token", required: true, type: .string)
        ]
        /// Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is true and the request has an AWS signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires AWS authentication. 
        public let authenticateOnUnsubscribe: String?
        /// The ARN of the topic for which you wish to confirm a subscription.
        public let topicArn: String
        /// Short-lived token sent to an endpoint during the Subscribe action.
        public let token: String

        public init(authenticateOnUnsubscribe: String? = nil, topicArn: String, token: String) {
            self.authenticateOnUnsubscribe = authenticateOnUnsubscribe
            self.topicArn = topicArn
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case authenticateOnUnsubscribe = "AuthenticateOnUnsubscribe"
            case topicArn = "TopicArn"
            case token = "Token"
        }
    }

    public struct ListSubscriptionsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Token returned by the previous ListSubscriptions request.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct Topic: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: false, type: .string)
        ]
        /// The topic's ARN.
        public let topicArn: String?

        public init(topicArn: String? = nil) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct OptInPhoneNumberResponse: AWSShape {

    }

    public struct SetSMSAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: true, type: .map)
        ]
        /// The default settings for sending SMS messages from your account. You can set values for the following attribute names:  MonthlySpendLimit – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.  Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.  By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to exceed the maximum, contact AWS Support or your AWS sales representative for a service limit increase.  DeliveryStatusIAMRole – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.  DeliveryStatusSuccessSamplingRate – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to 0. To write logs for 10% of your successful deliveries, set it to 10.  DefaultSenderID – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.  DefaultSMSType – The type of SMS message that you will send by default. You can assign the following values:    Promotional – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.    Transactional – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.    UsageReportS3Bucket – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your account:   Time that the message was published (in UTC)   Message ID   Destination phone number   Message type   Delivery status   Message price (in USD)   Part number (a message is split into multiple parts if it is too long for a single message)   Total number of parts   To receive the report, the bucket must have a policy that allows the Amazon SNS service principle to perform the s3:PutObject and s3:GetBucketLocation actions. For an example bucket policy and usage report, see Monitoring SMS Activity in the Amazon SNS Developer Guide.
        public let attributes: [String: String]

        public init(attributes: [String: String]) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct SubscribeInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", required: false, type: .string), 
            AWSShapeMember(label: "TopicArn", required: true, type: .string), 
            AWSShapeMember(label: "Protocol", required: true, type: .string)
        ]
        /// The endpoint that you want to receive notifications. Endpoints vary by protocol:   For the http protocol, the endpoint is an URL beginning with "http://"   For the https protocol, the endpoint is a URL beginning with "https://"   For the email protocol, the endpoint is an email address   For the email-json protocol, the endpoint is an email address   For the sms protocol, the endpoint is a phone number of an SMS-enabled device   For the sqs protocol, the endpoint is the ARN of an Amazon SQS queue   For the application protocol, the endpoint is the EndpointArn of a mobile app and device.   For the lambda protocol, the endpoint is the ARN of an AWS Lambda function.  
        public let endpoint: String?
        /// The ARN of the topic you want to subscribe to.
        public let topicArn: String
        /// The protocol you want to use. Supported protocols include:    http -- delivery of JSON-encoded message via HTTP POST    https -- delivery of JSON-encoded message via HTTPS POST    email -- delivery of message via SMTP    email-json -- delivery of JSON-encoded message via SMTP    sms -- delivery of message via SMS    sqs -- delivery of JSON-encoded message to an Amazon SQS queue    application -- delivery of JSON-encoded message to an EndpointArn for a mobile app and device.    lambda -- delivery of JSON-encoded message to an AWS Lambda function.  
        public let `protocol`: String

        public init(endpoint: String? = nil, topicArn: String, protocol: String) {
            self.endpoint = endpoint
            self.topicArn = topicArn
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
            case topicArn = "TopicArn"
            case `protocol` = "Protocol"
        }
    }

    public struct GetTopicAttributesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .map)
        ]
        /// A map of the topic's attributes. Attributes in this map include the following:    TopicArn -- the topic's ARN    Owner -- the AWS account ID of the topic's owner    Policy -- the JSON serialization of the topic's access control policy    DisplayName -- the human-readable name used in the "From" field for notifications to email and email-json endpoints    SubscriptionsPending -- the number of subscriptions pending confirmation on this topic    SubscriptionsConfirmed -- the number of confirmed subscriptions on this topic    SubscriptionsDeleted -- the number of deleted subscriptions on this topic    DeliveryPolicy -- the JSON serialization of the topic's delivery policy    EffectiveDeliveryPolicy -- the JSON serialization of the effective delivery policy that takes into account system defaults  
        public let attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct CreateTopicResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) assigned to the created topic.
        public let topicArn: String?

        public init(topicArn: String? = nil) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct CreateEndpointResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: false, type: .string)
        ]
        /// EndpointArn returned from CreateEndpoint action.
        public let endpointArn: String?

        public init(endpointArn: String? = nil) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct PublishInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageAttributes", required: false, type: .map), 
            AWSShapeMember(label: "PhoneNumber", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: true, type: .string), 
            AWSShapeMember(label: "TargetArn", required: false, type: .string), 
            AWSShapeMember(label: "MessageStructure", required: false, type: .string), 
            AWSShapeMember(label: "TopicArn", required: false, type: .string), 
            AWSShapeMember(label: "Subject", required: false, type: .string)
        ]
        /// Message attributes for Publish action.
        public let messageAttributes: [String: MessageAttributeValue]?
        /// The phone number to which you want to deliver an SMS message. Use E.164 format. If you don't specify a value for the PhoneNumber parameter, you must specify a value for the TargetArn or TopicArn parameters.
        public let phoneNumber: String?
        /// The message you want to send to the topic. If you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the MessageStructure parameter to json and use a JSON object for the Message parameter.  Constraints: Messages must be UTF-8 encoded strings at most 256 KB in size (262144 bytes, not 262144 characters). JSON-specific constraints:   Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.   The values will be parsed (unescaped) before they are used in outgoing messages.   Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).   Values have a minimum length of 0 (the empty string, "", is allowed).   Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).   Non-string values will cause the key to be ignored.   Keys that do not correspond to supported transport protocols are ignored.   Duplicate keys are not allowed.   Failure to parse or validate any key or value in the message will cause the Publish call to return an error (no partial delivery).  
        public let message: String
        /// Either TopicArn or EndpointArn, but not both. If you don't specify a value for the TargetArn parameter, you must specify a value for the PhoneNumber or TopicArn parameters.
        public let targetArn: String?
        /// Set MessageStructure to json if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set MessageStructure to json, the value of the Message parameter must:    be a syntactically valid JSON object; and   contain at least a top-level JSON key of "default" with a value that is a string.   You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., "http"). For information about sending different messages for each protocol using the AWS Management Console, go to Create Different Messages for Each Protocol in the Amazon Simple Notification Service Getting Started Guide.  Valid value: json 
        public let messageStructure: String?
        /// The topic you want to publish to. If you don't specify a value for the TopicArn parameter, you must specify a value for the PhoneNumber or TargetArn parameters.
        public let topicArn: String?
        /// Optional parameter to be used as the "Subject" line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints. Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.
        public let subject: String?

        public init(messageAttributes: [String: MessageAttributeValue]? = nil, phoneNumber: String? = nil, message: String, targetArn: String? = nil, messageStructure: String? = nil, topicArn: String? = nil, subject: String? = nil) {
            self.messageAttributes = messageAttributes
            self.phoneNumber = phoneNumber
            self.message = message
            self.targetArn = targetArn
            self.messageStructure = messageStructure
            self.topicArn = topicArn
            self.subject = subject
        }

        private enum CodingKeys: String, CodingKey {
            case messageAttributes = "MessageAttributes"
            case phoneNumber = "PhoneNumber"
            case message = "Message"
            case targetArn = "TargetArn"
            case messageStructure = "MessageStructure"
            case topicArn = "TopicArn"
            case subject = "Subject"
        }
    }

    public struct CheckIfPhoneNumberIsOptedOutInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "phoneNumber", required: true, type: .string)
        ]
        /// The phone number for which you want to check the opt out status.
        public let phoneNumber: String

        public init(phoneNumber: String) {
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "phoneNumber"
        }
    }

    public struct GetEndpointAttributesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .map)
        ]
        /// Attributes include the following:    CustomUserData -- arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.    Enabled -- flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.    Token -- device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.  
        public let attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DeleteEndpointInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// EndpointArn of endpoint to delete.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct SetSMSAttributesResponse: AWSShape {

    }

    public struct SetTopicAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "TopicArn", required: true, type: .string), 
            AWSShapeMember(label: "AttributeValue", required: false, type: .string)
        ]
        /// The name of the attribute you want to set. Only a subset of the topic's attributes are mutable. Valid values: Policy | DisplayName | DeliveryPolicy 
        public let attributeName: String
        /// The ARN of the topic to modify.
        public let topicArn: String
        /// The new value for the attribute.
        public let attributeValue: String?

        public init(attributeName: String, topicArn: String, attributeValue: String? = nil) {
            self.attributeName = attributeName
            self.topicArn = topicArn
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case topicArn = "TopicArn"
            case attributeValue = "AttributeValue"
        }
    }

    public struct GetSMSAttributesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .list)
        ]
        /// A list of the individual attribute names, such as MonthlySpendLimit, for which you want values. For all attribute names, see SetSMSAttributes. If you don't use this parameter, Amazon SNS returns all SMS attributes.
        public let attributes: [String]?

        public init(attributes: [String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct CreateTopicInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name of the topic you want to create. Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ListPlatformApplicationsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct GetSubscriptionAttributesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .map)
        ]
        /// A map of the subscription's attributes. Attributes in this map include the following:    SubscriptionArn -- the subscription's ARN    TopicArn -- the topic ARN that the subscription is associated with    Owner -- the AWS account ID of the subscription's owner    ConfirmationWasAuthenticated -- true if the subscription confirmation request was authenticated    DeliveryPolicy -- the JSON serialization of the subscription's delivery policy    EffectiveDeliveryPolicy -- the JSON serialization of the effective delivery policy that takes into account the topic delivery policy and account system defaults  
        public let attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DeletePlatformApplicationInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformApplicationArn", required: true, type: .string)
        ]
        /// PlatformApplicationArn of platform application object to delete.
        public let platformApplicationArn: String

        public init(platformApplicationArn: String) {
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

}