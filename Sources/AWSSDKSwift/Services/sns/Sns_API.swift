// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
Amazon Simple Notification Service Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see http://aws.amazon.com/sns. For detailed information about Amazon SNS features and their associated API calls, see the Amazon SNS Developer Guide.  We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to Tools for Amazon Web Services. 
*/
public struct Sns {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "sns",
            endpoint: endpoint
        )
    }

    ///  Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them. The results for ListPhoneNumbersOptedOut are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a NextToken string will be returned. To receive the next page, you call ListPhoneNumbersOptedOut again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null.
    public func listPhoneNumbersOptedOut(_ input: ListPhoneNumbersOptedOutInput) throws -> ListPhoneNumbersOptedOutResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListPhoneNumbersOptedOut", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptionsByTopic call to get further results.
    public func listSubscriptionsByTopic(_ input: ListSubscriptionsByTopicInput) throws -> ListSubscriptionsByTopicResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListSubscriptionsByTopic", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM and APNS. CreatePlatformEndpoint requires the PlatformApplicationArn that is returned from CreatePlatformApplication. The EndpointArn that is returned when using CreatePlatformEndpoint can then be used by the Publish action to send a message to a mobile app or by the Subscribe action for subscription to a topic. The CreatePlatformEndpoint action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint's ARN is returned without creating a new endpoint. For more information, see Using Amazon SNS Mobile Push Notifications.  When using CreatePlatformEndpoint with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see Creating an Amazon SNS Endpoint for Baidu. 
    public func createPlatformEndpoint(_ input: CreatePlatformEndpointInput) throws -> CreateEndpointResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreatePlatformEndpoint", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Adds a statement to a topic's access control policy, granting access for the specified AWS accounts to the specified actions.
    public func addPermission(_ input: AddPermissionInput) throws {
        _ = try request.invoke(operation: "AddPermission", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Allows a subscription owner to set an attribute of the topic to a new value.
    public func setSubscriptionAttributes(_ input: SetSubscriptionAttributesInput) throws {
        _ = try request.invoke(operation: "SetSubscriptionAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic's owner can unsubscribe, and an AWS signature is required. If the Unsubscribe call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the Unsubscribe request was unintended.
    public func unsubscribe(_ input: UnsubscribeInput) throws {
        _ = try request.invoke(operation: "Unsubscribe", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
    public func getTopicAttributes(_ input: GetTopicAttributesInput) throws -> GetTopicAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetTopicAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns all of the properties of a subscription.
    public func getSubscriptionAttributes(_ input: GetSubscriptionAttributesInput) throws -> GetSubscriptionAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSubscriptionAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM and APNS. For more information, see Using Amazon SNS Mobile Push Notifications. 
    public func getEndpointAttributes(_ input: GetEndpointAttributesInput) throws -> GetEndpointAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetEndpointAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number. You can opt in a phone number only once every 30 days.
    public func optInPhoneNumber(_ input: OptInPhoneNumberInput) throws -> OptInPhoneNumberResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "OptInPhoneNumber", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists the platform application objects for the supported push notification services, such as APNS and GCM. The results for ListPlatformApplications are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListPlatformApplications using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications. 
    public func listPlatformApplications(_ input: ListPlatformApplicationsInput) throws -> ListPlatformApplicationsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListPlatformApplications", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM and APNS. For more information, see Using Amazon SNS Mobile Push Notifications. 
    public func setEndpointAttributes(_ input: SetEndpointAttributesInput) throws {
        _ = try request.invoke(operation: "SetEndpointAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your account. You cannot send SMS messages to a number that is opted out. To resume sending messages, you can opt in the number by using the OptInPhoneNumber action.
    public func checkIfPhoneNumberIsOptedOut(_ input: CheckIfPhoneNumberIsOptedOutInput) throws -> CheckIfPhoneNumberIsOptedOutResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CheckIfPhoneNumberIsOptedOut", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Removes a statement from a topic's access control policy.
    public func removePermission(_ input: RemovePermissionInput) throws {
        _ = try request.invoke(operation: "RemovePermission", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Creates a topic to which notifications can be published. Users can create at most 100,000 topics. For more information, see http://aws.amazon.com/sns. This action is idempotent, so if the requester already owns a topic with the specified name, that topic's ARN is returned without creating a new topic.
    public func createTopic(_ input: CreateTopicInput) throws -> CreateTopicResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateTopic", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
    public func deleteTopic(_ input: DeleteTopicInput) throws {
        _ = try request.invoke(operation: "DeleteTopic", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM. For more information, see Using Amazon SNS Mobile Push Notifications. 
    public func getPlatformApplicationAttributes(_ input: GetPlatformApplicationAttributesInput) throws -> GetPlatformApplicationAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetPlatformApplicationAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Allows a topic owner to set an attribute of the topic to a new value.
    public func setTopicAttributes(_ input: SetTopicAttributesInput) throws {
        _ = try request.invoke(operation: "SetTopicAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Creates a platform application object for one of the supported push notification services, such as APNS and GCM, to which devices and mobile apps may register. You must specify PlatformPrincipal and PlatformCredential attributes when using the CreatePlatformApplication action. The PlatformPrincipal is received from the notification service. For APNS/APNS_SANDBOX, PlatformPrincipal is "SSL certificate". For GCM, PlatformPrincipal is not applicable. For ADM, PlatformPrincipal is "client id". The PlatformCredential is also received from the notification service. For WNS, PlatformPrincipal is "Package Security Identifier". For MPNS, PlatformPrincipal is "TLS certificate". For Baidu, PlatformPrincipal is "API key". For APNS/APNS_SANDBOX, PlatformCredential is "private key". For GCM, PlatformCredential is "API key". For ADM, PlatformCredential is "client secret". For WNS, PlatformCredential is "secret key". For MPNS, PlatformCredential is "private key". For Baidu, PlatformCredential is "secret key". The PlatformApplicationArn that is returned when using CreatePlatformApplication is then used as an attribute for the CreatePlatformEndpoint action. For more information, see Using Amazon SNS Mobile Push Notifications. For more information about obtaining the PlatformPrincipal and PlatformCredential for each of the supported push notification services, see Getting Started with Apple Push Notification Service, Getting Started with Amazon Device Messaging, Getting Started with Baidu Cloud Push, Getting Started with Google Cloud Messaging for Android, Getting Started with MPNS, or Getting Started with WNS. 
    public func createPlatformApplication(_ input: CreatePlatformApplicationInput) throws -> CreatePlatformApplicationResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreatePlatformApplication", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns the settings for sending SMS messages from your account. These settings are set with the SetSMSAttributes action.
    public func getSMSAttributes(_ input: GetSMSAttributesInput) throws -> GetSMSAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSMSAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM and APNS. The results for ListEndpointsByPlatformApplication are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListEndpointsByPlatformApplication again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications. 
    public func listEndpointsByPlatformApplication(_ input: ListEndpointsByPlatformApplicationInput) throws -> ListEndpointsByPlatformApplicationResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListEndpointsByPlatformApplication", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Prepares to subscribe an endpoint by sending the endpoint a confirmation message. To actually create a subscription, the endpoint owner must call the ConfirmSubscription action with the token from the confirmation message. Confirmation tokens are valid for three days.
    public func subscribe(_ input: SubscribeInput) throws -> SubscribeResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "Subscribe", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Sends a message to all of a topic's subscribed endpoints. When a messageId is returned, the message has been saved and Amazon SNS will attempt to deliver it to the topic's subscribers shortly. The format of the outgoing message to each subscribed endpoint depends on the notification protocol. To use the Publish action for sending a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the CreatePlatformEndpoint action.  For more information about formatting messages, see Send Custom Platform-Specific Payloads in Messages to Mobile Devices. 
    public func publish(_ input: PublishInput) throws -> PublishResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "Publish", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see Using Amazon SNS Mobile Push Notifications.  When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.
    public func deleteEndpoint(_ input: DeleteEndpointInput) throws {
        _ = try request.invoke(operation: "DeleteEndpoint", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Deletes a platform application object for one of the supported push notification services, such as APNS and GCM. For more information, see Using Amazon SNS Mobile Push Notifications. 
    public func deletePlatformApplication(_ input: DeletePlatformApplicationInput) throws {
        _ = try request.invoke(operation: "DeletePlatformApplication", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Returns a list of the requester's topics. Each call returns a limited list of topics, up to 100. If there are more topics, a NextToken is also returned. Use the NextToken parameter in a new ListTopics call to get further results.
    public func listTopics(_ input: ListTopicsInput) throws -> ListTopicsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListTopics", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports. You can override some of these settings for a single message when you use the Publish action with the MessageAttributes.entry.N parameter. For more information, see Sending an SMS Message in the Amazon SNS Developer Guide.
    public func setSMSAttributes(_ input: SetSMSAttributesInput) throws -> SetSMSAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "SetSMSAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns a list of the requester's subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptions call to get further results.
    public func listSubscriptions(_ input: ListSubscriptionsInput) throws -> ListSubscriptionsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListSubscriptions", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM. For more information, see Using Amazon SNS Mobile Push Notifications. For information on configuring attributes for message delivery status, see Using Amazon SNS Application Attributes for Message Delivery Status. 
    public func setPlatformApplicationAttributes(_ input: SetPlatformApplicationAttributesInput) throws {
        _ = try request.invoke(operation: "SetPlatformApplicationAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  Verifies an endpoint owner's intent to receive messages by validating the token sent to the endpoint by an earlier Subscribe action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the AuthenticateOnUnsubscribe flag is set to "true".
    public func confirmSubscription(_ input: ConfirmSubscriptionInput) throws -> ConfirmSubscriptionResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ConfirmSubscription", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try SnsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}