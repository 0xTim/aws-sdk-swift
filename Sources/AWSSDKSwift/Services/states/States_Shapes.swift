// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension States {

    public struct StateEnteredEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "input", required: false, type: .string)
        ]
        /// The name of the state.
        public let name: String
        /// The JSON input data to the state.
        public let input: String?

        public init(name: String, input: String? = nil) {
            self.name = name
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case input = "input"
        }
    }

    public struct SendTaskHeartbeatOutput: AWSShape {

    }

    public struct StopExecutionOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "stopDate", required: true, type: .timestamp)
        ]
        /// The date the execution was stopped.
        public let stopDate: TimeStamp

        public init(stopDate: TimeStamp) {
            self.stopDate = stopDate
        }

        private enum CodingKeys: String, CodingKey {
            case stopDate = "stopDate"
        }
    }

    public struct CreateActivityOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityArn", required: true, type: .string), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) that identifies the created activity.
        public let activityArn: String
        /// The date the activity was created.
        public let creationDate: TimeStamp

        public init(activityArn: String, creationDate: TimeStamp) {
            self.activityArn = activityArn
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case activityArn = "activityArn"
            case creationDate = "creationDate"
        }
    }

    public struct ListActivitiesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maxResults: Int32?
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct GetExecutionHistoryOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "events", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of events that occurred in the execution.
        public let events: [HistoryEvent]
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?

        public init(events: [HistoryEvent], nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case events = "events"
            case nextToken = "nextToken"
        }
    }

    public struct ActivityFailedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct ActivityListItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityArn", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) that identifies the activity.
        public let activityArn: String
        /// The name of the activity.
        public let name: String
        /// The date the activity was created.
        public let creationDate: TimeStamp

        public init(activityArn: String, name: String, creationDate: TimeStamp) {
            self.activityArn = activityArn
            self.name = name
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case activityArn = "activityArn"
            case name = "name"
            case creationDate = "creationDate"
        }
    }

    public struct DescribeActivityOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityArn", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) that identifies the activity.
        public let activityArn: String
        /// The name of the activity.
        public let name: String
        /// The date the activity was created.
        public let creationDate: TimeStamp

        public init(activityArn: String, name: String, creationDate: TimeStamp) {
            self.activityArn = activityArn
            self.name = name
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case activityArn = "activityArn"
            case name = "name"
            case creationDate = "creationDate"
        }
    }

    public struct ExecutionListItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string), 
            AWSShapeMember(label: "startDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "stopDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "executionArn", required: true, type: .string)
        ]
        /// The current status of the execution.
        public let status: ExecutionStatus
        /// The name of the execution.
        public let name: String
        /// The Amazon Resource Name (ARN) of the executed state machine.
        public let stateMachineArn: String
        /// The date the execution started.
        public let startDate: TimeStamp
        /// If the execution already ended, the date the execution stopped.
        public let stopDate: TimeStamp?
        /// The Amazon Resource Name (ARN) that identifies the execution.
        public let executionArn: String

        public init(status: ExecutionStatus, name: String, stateMachineArn: String, startDate: TimeStamp, stopDate: TimeStamp? = nil, executionArn: String) {
            self.status = status
            self.name = name
            self.stateMachineArn = stateMachineArn
            self.startDate = startDate
            self.stopDate = stopDate
            self.executionArn = executionArn
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case name = "name"
            case stateMachineArn = "stateMachineArn"
            case startDate = "startDate"
            case stopDate = "stopDate"
            case executionArn = "executionArn"
        }
    }

    public struct StartExecutionInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string)
        ]
        /// The name of the execution. This name must be unique for your AWS account and region.
        public let name: String?
        /// The JSON input data for the execution.
        public let input: String?
        /// The Amazon Resource Name (ARN) of the state machine to execute.
        public let stateMachineArn: String

        public init(name: String? = nil, input: String? = nil, stateMachineArn: String) {
            self.name = name
            self.input = input
            self.stateMachineArn = stateMachineArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case input = "input"
            case stateMachineArn = "stateMachineArn"
        }
    }

    public struct DeleteActivityOutput: AWSShape {

    }

    public enum HistoryEventType: String, CustomStringConvertible, Codable {
        case activityfailed = "ActivityFailed"
        case activityschedulefailed = "ActivityScheduleFailed"
        case activityscheduled = "ActivityScheduled"
        case activitystarted = "ActivityStarted"
        case activitysucceeded = "ActivitySucceeded"
        case activitytimedout = "ActivityTimedOut"
        case choicestateentered = "ChoiceStateEntered"
        case choicestateexited = "ChoiceStateExited"
        case executionfailed = "ExecutionFailed"
        case executionstarted = "ExecutionStarted"
        case executionsucceeded = "ExecutionSucceeded"
        case executionaborted = "ExecutionAborted"
        case executiontimedout = "ExecutionTimedOut"
        case failstateentered = "FailStateEntered"
        case lambdafunctionfailed = "LambdaFunctionFailed"
        case lambdafunctionschedulefailed = "LambdaFunctionScheduleFailed"
        case lambdafunctionscheduled = "LambdaFunctionScheduled"
        case lambdafunctionstartfailed = "LambdaFunctionStartFailed"
        case lambdafunctionstarted = "LambdaFunctionStarted"
        case lambdafunctionsucceeded = "LambdaFunctionSucceeded"
        case lambdafunctiontimedout = "LambdaFunctionTimedOut"
        case succeedstateentered = "SucceedStateEntered"
        case succeedstateexited = "SucceedStateExited"
        case taskstateentered = "TaskStateEntered"
        case taskstateexited = "TaskStateExited"
        case passstateentered = "PassStateEntered"
        case passstateexited = "PassStateExited"
        case parallelstateentered = "ParallelStateEntered"
        case parallelstateexited = "ParallelStateExited"
        case waitstateentered = "WaitStateEntered"
        case waitstateexited = "WaitStateExited"
        public var description: String { return self.rawValue }
    }

    public struct DescribeStateMachineOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "definition", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The current status of the state machine.
        public let status: StateMachineStatus?
        /// The name of the state machine.
        public let name: String
        /// The Amazon Resource Name (ARN) that identifies the state machine.
        public let stateMachineArn: String
        /// The date the state machine was created.
        public let creationDate: TimeStamp
        /// The Amazon States Language definition of the state machine.
        public let definition: String
        /// The Amazon Resource Name (ARN) of the IAM role used for executing this state machine.
        public let roleArn: String

        public init(status: StateMachineStatus? = nil, name: String, stateMachineArn: String, creationDate: TimeStamp, definition: String, roleArn: String) {
            self.status = status
            self.name = name
            self.stateMachineArn = stateMachineArn
            self.creationDate = creationDate
            self.definition = definition
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case name = "name"
            case stateMachineArn = "stateMachineArn"
            case creationDate = "creationDate"
            case definition = "definition"
            case roleArn = "roleArn"
        }
    }

    public struct LambdaFunctionStartFailedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct ActivityTimedOutEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the timeout.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct StartExecutionOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "startDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "executionArn", required: true, type: .string)
        ]
        /// The date the execution was started.
        public let startDate: TimeStamp
        /// The Amazon Resource Name (ARN) that identifies the execution.
        public let executionArn: String

        public init(startDate: TimeStamp, executionArn: String) {
            self.startDate = startDate
            self.executionArn = executionArn
        }

        private enum CodingKeys: String, CodingKey {
            case startDate = "startDate"
            case executionArn = "executionArn"
        }
    }

    public struct HistoryEvent: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "lambdaFunctionSucceededEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionFailedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "executionSucceededEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "activityFailedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "executionTimedOutEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionTimedOutEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "executionAbortedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "executionFailedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "activityScheduledEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "activityStartedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "type", required: true, type: .enum), 
            AWSShapeMember(label: "stateEnteredEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "executionStartedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "activityScheduleFailedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "timestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "previousEventId", required: false, type: .long), 
            AWSShapeMember(label: "id", required: true, type: .long), 
            AWSShapeMember(label: "activityTimedOutEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionScheduledEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "activitySucceededEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "stateExitedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionScheduleFailedEventDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionStartFailedEventDetails", required: false, type: .structure)
        ]
        public let lambdaFunctionSucceededEventDetails: LambdaFunctionSucceededEventDetails?
        public let lambdaFunctionFailedEventDetails: LambdaFunctionFailedEventDetails?
        public let executionSucceededEventDetails: ExecutionSucceededEventDetails?
        public let activityFailedEventDetails: ActivityFailedEventDetails?
        public let executionTimedOutEventDetails: ExecutionTimedOutEventDetails?
        public let lambdaFunctionTimedOutEventDetails: LambdaFunctionTimedOutEventDetails?
        public let executionAbortedEventDetails: ExecutionAbortedEventDetails?
        public let executionFailedEventDetails: ExecutionFailedEventDetails?
        public let activityScheduledEventDetails: ActivityScheduledEventDetails?
        public let activityStartedEventDetails: ActivityStartedEventDetails?
        /// The type of the event.
        public let `type`: HistoryEventType
        public let stateEnteredEventDetails: StateEnteredEventDetails?
        public let executionStartedEventDetails: ExecutionStartedEventDetails?
        public let activityScheduleFailedEventDetails: ActivityScheduleFailedEventDetails?
        /// The date the event occured.
        public let timestamp: TimeStamp
        /// The id of the previous event.
        public let previousEventId: Int64?
        /// The id of the event. Events are numbered sequentially, starting at one.
        public let id: Int64
        public let activityTimedOutEventDetails: ActivityTimedOutEventDetails?
        public let lambdaFunctionScheduledEventDetails: LambdaFunctionScheduledEventDetails?
        public let activitySucceededEventDetails: ActivitySucceededEventDetails?
        public let stateExitedEventDetails: StateExitedEventDetails?
        public let lambdaFunctionScheduleFailedEventDetails: LambdaFunctionScheduleFailedEventDetails?
        public let lambdaFunctionStartFailedEventDetails: LambdaFunctionStartFailedEventDetails?

        public init(lambdaFunctionSucceededEventDetails: LambdaFunctionSucceededEventDetails? = nil, lambdaFunctionFailedEventDetails: LambdaFunctionFailedEventDetails? = nil, executionSucceededEventDetails: ExecutionSucceededEventDetails? = nil, activityFailedEventDetails: ActivityFailedEventDetails? = nil, executionTimedOutEventDetails: ExecutionTimedOutEventDetails? = nil, lambdaFunctionTimedOutEventDetails: LambdaFunctionTimedOutEventDetails? = nil, executionAbortedEventDetails: ExecutionAbortedEventDetails? = nil, executionFailedEventDetails: ExecutionFailedEventDetails? = nil, activityScheduledEventDetails: ActivityScheduledEventDetails? = nil, activityStartedEventDetails: ActivityStartedEventDetails? = nil, type: HistoryEventType, stateEnteredEventDetails: StateEnteredEventDetails? = nil, executionStartedEventDetails: ExecutionStartedEventDetails? = nil, activityScheduleFailedEventDetails: ActivityScheduleFailedEventDetails? = nil, timestamp: TimeStamp, previousEventId: Int64? = nil, id: Int64, activityTimedOutEventDetails: ActivityTimedOutEventDetails? = nil, lambdaFunctionScheduledEventDetails: LambdaFunctionScheduledEventDetails? = nil, activitySucceededEventDetails: ActivitySucceededEventDetails? = nil, stateExitedEventDetails: StateExitedEventDetails? = nil, lambdaFunctionScheduleFailedEventDetails: LambdaFunctionScheduleFailedEventDetails? = nil, lambdaFunctionStartFailedEventDetails: LambdaFunctionStartFailedEventDetails? = nil) {
            self.lambdaFunctionSucceededEventDetails = lambdaFunctionSucceededEventDetails
            self.lambdaFunctionFailedEventDetails = lambdaFunctionFailedEventDetails
            self.executionSucceededEventDetails = executionSucceededEventDetails
            self.activityFailedEventDetails = activityFailedEventDetails
            self.executionTimedOutEventDetails = executionTimedOutEventDetails
            self.lambdaFunctionTimedOutEventDetails = lambdaFunctionTimedOutEventDetails
            self.executionAbortedEventDetails = executionAbortedEventDetails
            self.executionFailedEventDetails = executionFailedEventDetails
            self.activityScheduledEventDetails = activityScheduledEventDetails
            self.activityStartedEventDetails = activityStartedEventDetails
            self.`type` = `type`
            self.stateEnteredEventDetails = stateEnteredEventDetails
            self.executionStartedEventDetails = executionStartedEventDetails
            self.activityScheduleFailedEventDetails = activityScheduleFailedEventDetails
            self.timestamp = timestamp
            self.previousEventId = previousEventId
            self.id = id
            self.activityTimedOutEventDetails = activityTimedOutEventDetails
            self.lambdaFunctionScheduledEventDetails = lambdaFunctionScheduledEventDetails
            self.activitySucceededEventDetails = activitySucceededEventDetails
            self.stateExitedEventDetails = stateExitedEventDetails
            self.lambdaFunctionScheduleFailedEventDetails = lambdaFunctionScheduleFailedEventDetails
            self.lambdaFunctionStartFailedEventDetails = lambdaFunctionStartFailedEventDetails
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaFunctionSucceededEventDetails = "lambdaFunctionSucceededEventDetails"
            case lambdaFunctionFailedEventDetails = "lambdaFunctionFailedEventDetails"
            case executionSucceededEventDetails = "executionSucceededEventDetails"
            case activityFailedEventDetails = "activityFailedEventDetails"
            case executionTimedOutEventDetails = "executionTimedOutEventDetails"
            case lambdaFunctionTimedOutEventDetails = "lambdaFunctionTimedOutEventDetails"
            case executionAbortedEventDetails = "executionAbortedEventDetails"
            case executionFailedEventDetails = "executionFailedEventDetails"
            case activityScheduledEventDetails = "activityScheduledEventDetails"
            case activityStartedEventDetails = "activityStartedEventDetails"
            case `type` = "type"
            case stateEnteredEventDetails = "stateEnteredEventDetails"
            case executionStartedEventDetails = "executionStartedEventDetails"
            case activityScheduleFailedEventDetails = "activityScheduleFailedEventDetails"
            case timestamp = "timestamp"
            case previousEventId = "previousEventId"
            case id = "id"
            case activityTimedOutEventDetails = "activityTimedOutEventDetails"
            case lambdaFunctionScheduledEventDetails = "lambdaFunctionScheduledEventDetails"
            case activitySucceededEventDetails = "activitySucceededEventDetails"
            case stateExitedEventDetails = "stateExitedEventDetails"
            case lambdaFunctionScheduleFailedEventDetails = "lambdaFunctionScheduleFailedEventDetails"
            case lambdaFunctionStartFailedEventDetails = "lambdaFunctionStartFailedEventDetails"
        }
    }

    public struct ListActivitiesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "activities", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of activities.
        public let activities: [ActivityListItem]
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?

        public init(activities: [ActivityListItem], nextToken: String? = nil) {
            self.activities = activities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "activities"
            case nextToken = "nextToken"
        }
    }

    public struct SendTaskFailureOutput: AWSShape {

    }

    public struct ListStateMachinesInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maxResults: Int32?
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListExecutionsOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "executions", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of matching executions.
        public let executions: [ExecutionListItem]
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?

        public init(executions: [ExecutionListItem], nextToken: String? = nil) {
            self.executions = executions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case executions = "executions"
            case nextToken = "nextToken"
        }
    }

    public struct CreateStateMachineInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "definition", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The name of the state machine. This name must be unique for your AWS account and region.
        public let name: String
        /// The Amazon States Language definition of the state machine.
        public let definition: String
        /// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
        public let roleArn: String

        public init(name: String, definition: String, roleArn: String) {
            self.name = name
            self.definition = definition
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case definition = "definition"
            case roleArn = "roleArn"
        }
    }

    public struct SendTaskHeartbeatInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: true, type: .string)
        ]
        /// The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
        public let taskToken: String

        public init(taskToken: String) {
            self.taskToken = taskToken
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
        }
    }

    public struct ActivityScheduleFailedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public enum StateMachineStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct ActivitySucceededEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "output", required: false, type: .string)
        ]
        /// The JSON data output by the activity task.
        public let output: String?

        public init(output: String? = nil) {
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
        }
    }

    public struct SendTaskFailureInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: true, type: .string), 
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
        public let taskToken: String
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// An arbitrary error code that identifies the cause of the failure.
        public let error: String?

        public init(taskToken: String, cause: String? = nil, error: String? = nil) {
            self.taskToken = taskToken
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
            case cause = "cause"
            case error = "error"
        }
    }

    public struct GetActivityTaskInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "workerName", required: false, type: .string), 
            AWSShapeMember(label: "activityArn", required: true, type: .string)
        ]
        /// An arbitrary name may be provided in order to identify the worker that the task is assigned to. This name will be used when it is logged in the execution history.
        public let workerName: String?
        /// The Amazon Resource Name (ARN) of the activity to retrieve tasks from.
        public let activityArn: String

        public init(workerName: String? = nil, activityArn: String) {
            self.workerName = workerName
            self.activityArn = activityArn
        }

        private enum CodingKeys: String, CodingKey {
            case workerName = "workerName"
            case activityArn = "activityArn"
        }
    }

    public struct DescribeActivityInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the activity to describe.
        public let activityArn: String

        public init(activityArn: String) {
            self.activityArn = activityArn
        }

        private enum CodingKeys: String, CodingKey {
            case activityArn = "activityArn"
        }
    }

    public struct LambdaFunctionScheduledEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "resource", required: true, type: .string)
        ]
        /// The maximum allowed duration of the lambda function.
        public let timeoutInSeconds: Int64?
        /// The JSON data input to the lambda function.
        public let input: String?
        /// The Amazon Resource Name (ARN) of the scheduled lambda function.
        public let resource: String

        public init(timeoutInSeconds: Int64? = nil, input: String? = nil, resource: String) {
            self.timeoutInSeconds = timeoutInSeconds
            self.input = input
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutInSeconds = "timeoutInSeconds"
            case input = "input"
            case resource = "resource"
        }
    }

    public struct DeleteStateMachineOutput: AWSShape {

    }

    public struct GetActivityTaskOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: false, type: .string), 
            AWSShapeMember(label: "input", required: false, type: .string)
        ]
        /// A token that identifies the scheduled task. This token must be copied and included in subsequent calls to SendTaskHeartbeat, SendTaskSuccess or SendTaskFailure in order to report the progress or completion of the task.
        public let taskToken: String?
        /// The JSON input data for the task.
        public let input: String?

        public init(taskToken: String? = nil, input: String? = nil) {
            self.taskToken = taskToken
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
            case input = "input"
        }
    }

    public struct StateExitedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "output", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The JSON output data of the state.
        public let output: String?
        /// The name of the state.
        public let name: String

        public init(output: String? = nil, name: String) {
            self.output = output
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
            case name = "name"
        }
    }

    public enum ExecutionStatus: String, CustomStringConvertible, Codable {
        case running = "RUNNING"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case timedOut = "TIMED_OUT"
        case aborted = "ABORTED"
        public var description: String { return self.rawValue }
    }

    public struct LambdaFunctionSucceededEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "output", required: false, type: .string)
        ]
        /// The JSON data output by the lambda function.
        public let output: String?

        public init(output: String? = nil) {
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
        }
    }

    public struct ActivityScheduledEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "heartbeatInSeconds", required: false, type: .long), 
            AWSShapeMember(label: "resource", required: true, type: .string)
        ]
        /// The maximum allowed duration of the activity task.
        public let timeoutInSeconds: Int64?
        /// The JSON data input to the activity task.
        public let input: String?
        /// The maximum allowed duration between two heartbeats for the activity task.
        public let heartbeatInSeconds: Int64?
        /// The Amazon Resource Name (ARN) of the scheduled activity.
        public let resource: String

        public init(timeoutInSeconds: Int64? = nil, input: String? = nil, heartbeatInSeconds: Int64? = nil, resource: String) {
            self.timeoutInSeconds = timeoutInSeconds
            self.input = input
            self.heartbeatInSeconds = heartbeatInSeconds
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutInSeconds = "timeoutInSeconds"
            case input = "input"
            case heartbeatInSeconds = "heartbeatInSeconds"
            case resource = "resource"
        }
    }

    public struct CreateStateMachineOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) that identifies the created state machine.
        public let stateMachineArn: String
        /// The date the state machine was created.
        public let creationDate: TimeStamp

        public init(stateMachineArn: String, creationDate: TimeStamp) {
            self.stateMachineArn = stateMachineArn
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case stateMachineArn = "stateMachineArn"
            case creationDate = "creationDate"
        }
    }

    public struct DescribeExecutionInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the execution to describe.
        public let executionArn: String

        public init(executionArn: String) {
            self.executionArn = executionArn
        }

        private enum CodingKeys: String, CodingKey {
            case executionArn = "executionArn"
        }
    }

    public struct DeleteActivityInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the activity to delete.
        public let activityArn: String

        public init(activityArn: String) {
            self.activityArn = activityArn
        }

        private enum CodingKeys: String, CodingKey {
            case activityArn = "activityArn"
        }
    }

    public struct DeleteStateMachineInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the state machine to delete.
        public let stateMachineArn: String

        public init(stateMachineArn: String) {
            self.stateMachineArn = stateMachineArn
        }

        private enum CodingKeys: String, CodingKey {
            case stateMachineArn = "stateMachineArn"
        }
    }

    public struct DescribeStateMachineInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the state machine to describe.
        public let stateMachineArn: String

        public init(stateMachineArn: String) {
            self.stateMachineArn = stateMachineArn
        }

        private enum CodingKeys: String, CodingKey {
            case stateMachineArn = "stateMachineArn"
        }
    }

    public struct SendTaskSuccessInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "output", required: true, type: .string), 
            AWSShapeMember(label: "taskToken", required: true, type: .string)
        ]
        /// The JSON output of the task.
        public let output: String
        /// The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
        public let taskToken: String

        public init(output: String, taskToken: String) {
            self.output = output
            self.taskToken = taskToken
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
            case taskToken = "taskToken"
        }
    }

    public struct LambdaFunctionScheduleFailedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct ExecutionFailedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct ListStateMachinesOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "stateMachines", required: true, type: .list)
        ]
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?
        public let stateMachines: [StateMachineListItem]

        public init(nextToken: String? = nil, stateMachines: [StateMachineListItem]) {
            self.nextToken = nextToken
            self.stateMachines = stateMachines
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case stateMachines = "stateMachines"
        }
    }

    public struct CreateActivityInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the activity to create. This name must be unique for your AWS account and region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct ListExecutionsInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "statusFilter", required: false, type: .enum), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// If specified, only list the executions whose current execution status matches the given filter.
        public let statusFilter: ExecutionStatus?
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) of the state machine whose executions will be listed.
        public let stateMachineArn: String
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?

        public init(statusFilter: ExecutionStatus? = nil, maxResults: Int32? = nil, stateMachineArn: String, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.maxResults = maxResults
            self.stateMachineArn = stateMachineArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case statusFilter = "statusFilter"
            case maxResults = "maxResults"
            case stateMachineArn = "stateMachineArn"
            case nextToken = "nextToken"
        }
    }

    public struct LambdaFunctionTimedOutEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the timeout.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct GetExecutionHistoryInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "executionArn", required: true, type: .string)
        ]
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public let nextToken: String?
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maxResults: Int32?
        /// Lists events in descending order of their timeStamp.
        public let reverseOrder: Bool?
        /// The Amazon Resource Name (ARN) of the execution.
        public let executionArn: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, reverseOrder: Bool? = nil, executionArn: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.reverseOrder = reverseOrder
            self.executionArn = executionArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case reverseOrder = "reverseOrder"
            case executionArn = "executionArn"
        }
    }

    public struct ExecutionStartedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "input", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM role used for executing AWS Lambda tasks.
        public let roleArn: String?
        /// The JSON data input to the execution.
        public let input: String?

        public init(roleArn: String? = nil, input: String? = nil) {
            self.roleArn = roleArn
            self.input = input
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case input = "input"
        }
    }

    public struct LambdaFunctionFailedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct ActivityStartedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "workerName", required: false, type: .string)
        ]
        /// The name of the worker that the task was assigned to. These names are provided by the workers when calling GetActivityTask.
        public let workerName: String?

        public init(workerName: String? = nil) {
            self.workerName = workerName
        }

        private enum CodingKeys: String, CodingKey {
            case workerName = "workerName"
        }
    }

    public struct StateMachineListItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) that identifies the state machine.
        public let stateMachineArn: String
        /// The name of the state machine.
        public let name: String
        /// The date the state machine was created.
        public let creationDate: TimeStamp

        public init(stateMachineArn: String, name: String, creationDate: TimeStamp) {
            self.stateMachineArn = stateMachineArn
            self.name = name
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case stateMachineArn = "stateMachineArn"
            case name = "name"
            case creationDate = "creationDate"
        }
    }

    public struct SendTaskSuccessOutput: AWSShape {

    }

    public struct ExecutionTimedOutEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the timeout.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct ExecutionAbortedEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .string), 
            AWSShapeMember(label: "error", required: false, type: .string)
        ]
        /// A more detailed explanation of the cause of the failure.
        public let cause: String?
        /// The error code of the failure.
        public let error: String?

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case error = "error"
        }
    }

    public struct ExecutionSucceededEventDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "output", required: false, type: .string)
        ]
        /// The JSON data output by the execution.
        public let output: String?

        public init(output: String? = nil) {
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case output = "output"
        }
    }

    public struct DescribeExecutionOutput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "stopDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "startDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "output", required: false, type: .string), 
            AWSShapeMember(label: "executionArn", required: true, type: .string), 
            AWSShapeMember(label: "input", required: true, type: .string), 
            AWSShapeMember(label: "stateMachineArn", required: true, type: .string)
        ]
        /// The current status of the execution.
        public let status: ExecutionStatus
        /// The name of the execution.
        public let name: String?
        /// If the execution has already ended, the date the execution stopped.
        public let stopDate: TimeStamp?
        /// The date the execution was started.
        public let startDate: TimeStamp
        /// The JSON output data of the execution.
        public let output: String?
        /// The Amazon Resource Name (ARN) that identifies the execution.
        public let executionArn: String
        /// The JSON input data of the execution.
        public let input: String
        /// The Amazon Resource Name (ARN) of the executed stated machine.
        public let stateMachineArn: String

        public init(status: ExecutionStatus, name: String? = nil, stopDate: TimeStamp? = nil, startDate: TimeStamp, output: String? = nil, executionArn: String, input: String, stateMachineArn: String) {
            self.status = status
            self.name = name
            self.stopDate = stopDate
            self.startDate = startDate
            self.output = output
            self.executionArn = executionArn
            self.input = input
            self.stateMachineArn = stateMachineArn
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case name = "name"
            case stopDate = "stopDate"
            case startDate = "startDate"
            case output = "output"
            case executionArn = "executionArn"
            case input = "input"
            case stateMachineArn = "stateMachineArn"
        }
    }

    public struct StopExecutionInput: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "error", required: false, type: .string), 
            AWSShapeMember(label: "executionArn", required: true, type: .string), 
            AWSShapeMember(label: "cause", required: false, type: .string)
        ]
        /// An arbitrary error code that identifies the cause of the termination.
        public let error: String?
        /// The Amazon Resource Name (ARN) of the execution to stop.
        public let executionArn: String
        /// A more detailed explanation of the cause of the termination.
        public let cause: String?

        public init(error: String? = nil, executionArn: String, cause: String? = nil) {
            self.error = error
            self.executionArn = executionArn
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case executionArn = "executionArn"
            case cause = "cause"
        }
    }

}