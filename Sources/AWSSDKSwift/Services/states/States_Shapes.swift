// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension States {

    public struct StateEnteredEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the state.
        public var name: String = ""
        /// The JSON input data to the state.
        public var input: String? = nil

        public init() {}

        public init(name: String, input: String? = nil) {
            self.name = name
            self.input = input
        }

    }

    public struct SendTaskHeartbeatOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct StopExecutionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date the execution was stopped.
        public var stopDate: Date = Date()

        public init() {}

        public init(stopDate: Date) {
            self.stopDate = stopDate
        }

    }

    public struct CreateActivityOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) that identifies the created activity.
        public var activityArn: String = ""
        /// The date the activity was created.
        public var creationDate: Date = Date()

        public init() {}

        public init(activityArn: String, creationDate: Date) {
            self.activityArn = activityArn
            self.creationDate = creationDate
        }

    }

    public struct ListActivitiesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public var maxResults: Int32? = nil
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

    }

    public struct GetExecutionHistoryOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of events that occurred in the execution.
        public var events: [HistoryEvent] = []
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil

        public init() {}

        public init(events: [HistoryEvent], nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

    }

    public struct ActivityFailedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ActivityListItem: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) that identifies the activity.
        public var activityArn: String = ""
        /// The name of the activity.
        public var name: String = ""
        /// The date the activity was created.
        public var creationDate: Date = Date()

        public init() {}

        public init(activityArn: String, name: String, creationDate: Date) {
            self.activityArn = activityArn
            self.name = name
            self.creationDate = creationDate
        }

    }

    public struct DescribeActivityOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) that identifies the activity.
        public var activityArn: String = ""
        /// The name of the activity.
        public var name: String = ""
        /// The date the activity was created.
        public var creationDate: Date = Date()

        public init() {}

        public init(activityArn: String, name: String, creationDate: Date) {
            self.activityArn = activityArn
            self.name = name
            self.creationDate = creationDate
        }

    }

    public struct ExecutionListItem: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current status of the execution.
        public var status: String = ""
        /// The name of the execution.
        public var name: String = ""
        /// The Amazon Resource Name (ARN) of the executed state machine.
        public var stateMachineArn: String = ""
        /// The date the execution started.
        public var startDate: Date = Date()
        /// If the execution already ended, the date the execution stopped.
        public var stopDate: Date? = nil
        /// The Amazon Resource Name (ARN) that identifies the execution.
        public var executionArn: String = ""

        public init() {}

        public init(status: String, name: String, stateMachineArn: String, startDate: Date, stopDate: Date? = nil, executionArn: String) {
            self.status = status
            self.name = name
            self.stateMachineArn = stateMachineArn
            self.startDate = startDate
            self.stopDate = stopDate
            self.executionArn = executionArn
        }

    }

    public struct StartExecutionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the execution. This name must be unique for your AWS account and region.
        public var name: String? = nil
        /// The JSON input data for the execution.
        public var input: String? = nil
        /// The Amazon Resource Name (ARN) of the state machine to execute.
        public var stateMachineArn: String = ""

        public init() {}

        public init(name: String? = nil, input: String? = nil, stateMachineArn: String) {
            self.name = name
            self.input = input
            self.stateMachineArn = stateMachineArn
        }

    }

    public struct DeleteActivityOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct DescribeStateMachineOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current status of the state machine.
        public var status: String? = nil
        /// The name of the state machine.
        public var name: String = ""
        /// The Amazon Resource Name (ARN) that identifies the state machine.
        public var stateMachineArn: String = ""
        /// The date the state machine was created.
        public var creationDate: Date = Date()
        /// The Amazon States Language definition of the state machine.
        public var definition: String = ""
        /// The Amazon Resource Name (ARN) of the IAM role used for executing this state machine.
        public var roleArn: String = ""

        public init() {}

        public init(status: String? = nil, name: String, stateMachineArn: String, creationDate: Date, definition: String, roleArn: String) {
            self.status = status
            self.name = name
            self.stateMachineArn = stateMachineArn
            self.creationDate = creationDate
            self.definition = definition
            self.roleArn = roleArn
        }

    }

    public struct LambdaFunctionStartFailedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ActivityTimedOutEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the timeout.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct StartExecutionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date the execution was started.
        public var startDate: Date = Date()
        /// The Amazon Resource Name (ARN) that identifies the execution.
        public var executionArn: String = ""

        public init() {}

        public init(startDate: Date, executionArn: String) {
            self.startDate = startDate
            self.executionArn = executionArn
        }

    }

    public struct HistoryEvent: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var lambdaFunctionSucceededEventDetails: LambdaFunctionSucceededEventDetails? = nil
        public var lambdaFunctionFailedEventDetails: LambdaFunctionFailedEventDetails? = nil
        public var executionSucceededEventDetails: ExecutionSucceededEventDetails? = nil
        public var activityFailedEventDetails: ActivityFailedEventDetails? = nil
        public var executionTimedOutEventDetails: ExecutionTimedOutEventDetails? = nil
        public var lambdaFunctionTimedOutEventDetails: LambdaFunctionTimedOutEventDetails? = nil
        public var executionAbortedEventDetails: ExecutionAbortedEventDetails? = nil
        public var executionFailedEventDetails: ExecutionFailedEventDetails? = nil
        public var activityScheduledEventDetails: ActivityScheduledEventDetails? = nil
        public var activityStartedEventDetails: ActivityStartedEventDetails? = nil
        /// The type of the event.
        public var type: String = ""
        public var stateEnteredEventDetails: StateEnteredEventDetails? = nil
        public var executionStartedEventDetails: ExecutionStartedEventDetails? = nil
        public var activityScheduleFailedEventDetails: ActivityScheduleFailedEventDetails? = nil
        /// The date the event occured.
        public var timestamp: Date = Date()
        /// The id of the previous event.
        public var previousEventId: Int64? = nil
        /// The id of the event. Events are numbered sequentially, starting at one.
        public var id: Int64 = 0
        public var activityTimedOutEventDetails: ActivityTimedOutEventDetails? = nil
        public var lambdaFunctionScheduledEventDetails: LambdaFunctionScheduledEventDetails? = nil
        public var activitySucceededEventDetails: ActivitySucceededEventDetails? = nil
        public var stateExitedEventDetails: StateExitedEventDetails? = nil
        public var lambdaFunctionScheduleFailedEventDetails: LambdaFunctionScheduleFailedEventDetails? = nil
        public var lambdaFunctionStartFailedEventDetails: LambdaFunctionStartFailedEventDetails? = nil

        public init() {}

        public init(lambdaFunctionSucceededEventDetails: LambdaFunctionSucceededEventDetails? = nil, lambdaFunctionFailedEventDetails: LambdaFunctionFailedEventDetails? = nil, executionSucceededEventDetails: ExecutionSucceededEventDetails? = nil, activityFailedEventDetails: ActivityFailedEventDetails? = nil, executionTimedOutEventDetails: ExecutionTimedOutEventDetails? = nil, lambdaFunctionTimedOutEventDetails: LambdaFunctionTimedOutEventDetails? = nil, executionAbortedEventDetails: ExecutionAbortedEventDetails? = nil, executionFailedEventDetails: ExecutionFailedEventDetails? = nil, activityScheduledEventDetails: ActivityScheduledEventDetails? = nil, activityStartedEventDetails: ActivityStartedEventDetails? = nil, type: String, stateEnteredEventDetails: StateEnteredEventDetails? = nil, executionStartedEventDetails: ExecutionStartedEventDetails? = nil, activityScheduleFailedEventDetails: ActivityScheduleFailedEventDetails? = nil, timestamp: Date, previousEventId: Int64? = nil, id: Int64, activityTimedOutEventDetails: ActivityTimedOutEventDetails? = nil, lambdaFunctionScheduledEventDetails: LambdaFunctionScheduledEventDetails? = nil, activitySucceededEventDetails: ActivitySucceededEventDetails? = nil, stateExitedEventDetails: StateExitedEventDetails? = nil, lambdaFunctionScheduleFailedEventDetails: LambdaFunctionScheduleFailedEventDetails? = nil, lambdaFunctionStartFailedEventDetails: LambdaFunctionStartFailedEventDetails? = nil) {
            self.lambdaFunctionSucceededEventDetails = lambdaFunctionSucceededEventDetails
            self.lambdaFunctionFailedEventDetails = lambdaFunctionFailedEventDetails
            self.executionSucceededEventDetails = executionSucceededEventDetails
            self.activityFailedEventDetails = activityFailedEventDetails
            self.executionTimedOutEventDetails = executionTimedOutEventDetails
            self.lambdaFunctionTimedOutEventDetails = lambdaFunctionTimedOutEventDetails
            self.executionAbortedEventDetails = executionAbortedEventDetails
            self.executionFailedEventDetails = executionFailedEventDetails
            self.activityScheduledEventDetails = activityScheduledEventDetails
            self.activityStartedEventDetails = activityStartedEventDetails
            self.type = type
            self.stateEnteredEventDetails = stateEnteredEventDetails
            self.executionStartedEventDetails = executionStartedEventDetails
            self.activityScheduleFailedEventDetails = activityScheduleFailedEventDetails
            self.timestamp = timestamp
            self.previousEventId = previousEventId
            self.id = id
            self.activityTimedOutEventDetails = activityTimedOutEventDetails
            self.lambdaFunctionScheduledEventDetails = lambdaFunctionScheduledEventDetails
            self.activitySucceededEventDetails = activitySucceededEventDetails
            self.stateExitedEventDetails = stateExitedEventDetails
            self.lambdaFunctionScheduleFailedEventDetails = lambdaFunctionScheduleFailedEventDetails
            self.lambdaFunctionStartFailedEventDetails = lambdaFunctionStartFailedEventDetails
        }

    }

    public struct ListActivitiesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of activities.
        public var activities: [ActivityListItem] = []
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil

        public init() {}

        public init(activities: [ActivityListItem], nextToken: String? = nil) {
            self.activities = activities
            self.nextToken = nextToken
        }

    }

    public struct SendTaskFailureOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ListStateMachinesInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public var maxResults: Int32? = nil
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

    }

    public struct ListExecutionsOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of matching executions.
        public var executions: [ExecutionListItem] = []
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil

        public init() {}

        public init(executions: [ExecutionListItem], nextToken: String? = nil) {
            self.executions = executions
            self.nextToken = nextToken
        }

    }

    public struct CreateStateMachineInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the state machine. This name must be unique for your AWS account and region.
        public var name: String = ""
        /// The Amazon States Language definition of the state machine.
        public var definition: String = ""
        /// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
        public var roleArn: String = ""

        public init() {}

        public init(name: String, definition: String, roleArn: String) {
            self.name = name
            self.definition = definition
            self.roleArn = roleArn
        }

    }

    public struct SendTaskHeartbeatInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
        public var taskToken: String = ""

        public init() {}

        public init(taskToken: String) {
            self.taskToken = taskToken
        }

    }

    public struct ActivityScheduleFailedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ActivitySucceededEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The JSON data output by the activity task.
        public var output: String? = nil

        public init() {}

        public init(output: String? = nil) {
            self.output = output
        }

    }

    public struct SendTaskFailureInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
        public var taskToken: String = ""
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// An arbitrary error code that identifies the cause of the failure.
        public var error: String? = nil

        public init() {}

        public init(taskToken: String, cause: String? = nil, error: String? = nil) {
            self.taskToken = taskToken
            self.cause = cause
            self.error = error
        }

    }

    public struct GetActivityTaskInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An arbitrary name may be provided in order to identify the worker that the task is assigned to. This name will be used when it is logged in the execution history.
        public var workerName: String? = nil
        /// The Amazon Resource Name (ARN) of the activity to retrieve tasks from.
        public var activityArn: String = ""

        public init() {}

        public init(workerName: String? = nil, activityArn: String) {
            self.workerName = workerName
            self.activityArn = activityArn
        }

    }

    public struct DescribeActivityInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the activity to describe.
        public var activityArn: String = ""

        public init() {}

        public init(activityArn: String) {
            self.activityArn = activityArn
        }

    }

    public struct LambdaFunctionScheduledEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum allowed duration of the lambda function.
        public var timeoutInSeconds: Int64? = nil
        /// The JSON data input to the lambda function.
        public var input: String? = nil
        /// The Amazon Resource Name (ARN) of the scheduled lambda function.
        public var resource: String = ""

        public init() {}

        public init(timeoutInSeconds: Int64? = nil, input: String? = nil, resource: String) {
            self.timeoutInSeconds = timeoutInSeconds
            self.input = input
            self.resource = resource
        }

    }

    public struct DeleteStateMachineOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct GetActivityTaskOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A token that identifies the scheduled task. This token must be copied and included in subsequent calls to SendTaskHeartbeat, SendTaskSuccess or SendTaskFailure in order to report the progress or completion of the task.
        public var taskToken: String? = nil
        /// The JSON input data for the task.
        public var input: String? = nil

        public init() {}

        public init(taskToken: String? = nil, input: String? = nil) {
            self.taskToken = taskToken
            self.input = input
        }

    }

    public struct StateExitedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The JSON output data of the state.
        public var output: String? = nil
        /// The name of the state.
        public var name: String = ""

        public init() {}

        public init(output: String? = nil, name: String) {
            self.output = output
            self.name = name
        }

    }

    public struct LambdaFunctionSucceededEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The JSON data output by the lambda function.
        public var output: String? = nil

        public init() {}

        public init(output: String? = nil) {
            self.output = output
        }

    }

    public struct ActivityScheduledEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The maximum allowed duration of the activity task.
        public var timeoutInSeconds: Int64? = nil
        /// The JSON data input to the activity task.
        public var input: String? = nil
        /// The maximum allowed duration between two heartbeats for the activity task.
        public var heartbeatInSeconds: Int64? = nil
        /// The Amazon Resource Name (ARN) of the scheduled activity.
        public var resource: String = ""

        public init() {}

        public init(timeoutInSeconds: Int64? = nil, input: String? = nil, heartbeatInSeconds: Int64? = nil, resource: String) {
            self.timeoutInSeconds = timeoutInSeconds
            self.input = input
            self.heartbeatInSeconds = heartbeatInSeconds
            self.resource = resource
        }

    }

    public struct CreateStateMachineOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) that identifies the created state machine.
        public var stateMachineArn: String = ""
        /// The date the state machine was created.
        public var creationDate: Date = Date()

        public init() {}

        public init(stateMachineArn: String, creationDate: Date) {
            self.stateMachineArn = stateMachineArn
            self.creationDate = creationDate
        }

    }

    public struct DescribeExecutionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the execution to describe.
        public var executionArn: String = ""

        public init() {}

        public init(executionArn: String) {
            self.executionArn = executionArn
        }

    }

    public struct DeleteActivityInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the activity to delete.
        public var activityArn: String = ""

        public init() {}

        public init(activityArn: String) {
            self.activityArn = activityArn
        }

    }

    public struct DeleteStateMachineInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the state machine to delete.
        public var stateMachineArn: String = ""

        public init() {}

        public init(stateMachineArn: String) {
            self.stateMachineArn = stateMachineArn
        }

    }

    public struct DescribeStateMachineInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the state machine to describe.
        public var stateMachineArn: String = ""

        public init() {}

        public init(stateMachineArn: String) {
            self.stateMachineArn = stateMachineArn
        }

    }

    public struct SendTaskSuccessInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The JSON output of the task.
        public var output: String = ""
        /// The token that represents this task. Task tokens are generated by the service when the tasks are assigned to a worker (see GetActivityTask::taskToken).
        public var taskToken: String = ""

        public init() {}

        public init(output: String, taskToken: String) {
            self.output = output
            self.taskToken = taskToken
        }

    }

    public struct LambdaFunctionScheduleFailedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ExecutionFailedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ListStateMachinesOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If a nextToken is returned, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil
        public var stateMachines: [StateMachineListItem] = []

        public init() {}

        public init(nextToken: String? = nil, stateMachines: [StateMachineListItem]) {
            self.nextToken = nextToken
            self.stateMachines = stateMachines
        }

    }

    public struct CreateActivityInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the activity to create. This name must be unique for your AWS account and region.
        public var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct ListExecutionsInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If specified, only list the executions whose current execution status matches the given filter.
        public var statusFilter: String? = nil
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public var maxResults: Int32? = nil
        /// The Amazon Resource Name (ARN) of the state machine whose executions will be listed.
        public var stateMachineArn: String = ""
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil

        public init() {}

        public init(statusFilter: String? = nil, maxResults: Int32? = nil, stateMachineArn: String, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.maxResults = maxResults
            self.stateMachineArn = stateMachineArn
            self.nextToken = nextToken
        }

    }

    public struct LambdaFunctionTimedOutEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the timeout.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct GetExecutionHistoryInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// If a nextToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextToken. Keep all other arguments unchanged. The configured maxResults determines how many results can be returned in a single call.
        public var nextToken: String? = nil
        /// The maximum number of results that will be returned per call. nextToken can be used to obtain further pages of results. The default is 100 and the maximum allowed page size is 1000. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public var maxResults: Int32? = nil
        /// Lists events in descending order of their timeStamp.
        public var reverseOrder: Bool? = nil
        /// The Amazon Resource Name (ARN) of the execution.
        public var executionArn: String = ""

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil, reverseOrder: Bool? = nil, executionArn: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.reverseOrder = reverseOrder
            self.executionArn = executionArn
        }

    }

    public struct ExecutionStartedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM role used for executing AWS Lambda tasks.
        public var roleArn: String? = nil
        /// The JSON data input to the execution.
        public var input: String? = nil

        public init() {}

        public init(roleArn: String? = nil, input: String? = nil) {
            self.roleArn = roleArn
            self.input = input
        }

    }

    public struct LambdaFunctionFailedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ActivityStartedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the worker that the task was assigned to. These names are provided by the workers when calling GetActivityTask.
        public var workerName: String? = nil

        public init() {}

        public init(workerName: String? = nil) {
            self.workerName = workerName
        }

    }

    public struct StateMachineListItem: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) that identifies the state machine.
        public var stateMachineArn: String = ""
        /// The name of the state machine.
        public var name: String = ""
        /// The date the state machine was created.
        public var creationDate: Date = Date()

        public init() {}

        public init(stateMachineArn: String, name: String, creationDate: Date) {
            self.stateMachineArn = stateMachineArn
            self.name = name
            self.creationDate = creationDate
        }

    }

    public struct SendTaskSuccessOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ExecutionTimedOutEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the timeout.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ExecutionAbortedEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A more detailed explanation of the cause of the failure.
        public var cause: String? = nil
        /// The error code of the failure.
        public var error: String? = nil

        public init() {}

        public init(cause: String? = nil, error: String? = nil) {
            self.cause = cause
            self.error = error
        }

    }

    public struct ExecutionSucceededEventDetails: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The JSON data output by the execution.
        public var output: String? = nil

        public init() {}

        public init(output: String? = nil) {
            self.output = output
        }

    }

    public struct DescribeExecutionOutput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The current status of the execution.
        public var status: String = ""
        /// The name of the execution.
        public var name: String? = nil
        /// If the execution has already ended, the date the execution stopped.
        public var stopDate: Date? = nil
        /// The date the execution was started.
        public var startDate: Date = Date()
        /// The JSON output data of the execution.
        public var output: String? = nil
        /// The Amazon Resource Name (ARN) that identifies the execution.
        public var executionArn: String = ""
        /// The JSON input data of the execution.
        public var input: String = ""
        /// The Amazon Resource Name (ARN) of the executed stated machine.
        public var stateMachineArn: String = ""

        public init() {}

        public init(status: String, name: String? = nil, stopDate: Date? = nil, startDate: Date, output: String? = nil, executionArn: String, input: String, stateMachineArn: String) {
            self.status = status
            self.name = name
            self.stopDate = stopDate
            self.startDate = startDate
            self.output = output
            self.executionArn = executionArn
            self.input = input
            self.stateMachineArn = stateMachineArn
        }

    }

    public struct StopExecutionInput: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An arbitrary error code that identifies the cause of the termination.
        public var error: String? = nil
        /// The Amazon Resource Name (ARN) of the execution to stop.
        public var executionArn: String = ""
        /// A more detailed explanation of the cause of the termination.
        public var cause: String? = nil

        public init() {}

        public init(error: String? = nil, executionArn: String, cause: String? = nil) {
            self.error = error
            self.executionArn = executionArn
            self.cause = cause
        }

    }

}