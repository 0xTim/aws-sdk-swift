// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Swf {

    public struct RequestCancelWorkflowExecutionInput: Serializable, Initializable {
        /// The runId of the workflow execution to cancel.
        var runId: String? = nil
        /// The workflowId of the workflow execution to cancel.
        var workflowId: String = ""
        /// The name of the domain containing the workflow execution to cancel.
        var domain: String = ""

        public init() {}

        public init(runId: String? = nil, workflowId: String, domain: String) {
            self.runId = runId
            self.workflowId = workflowId
            self.domain = domain
        }

    }

    public struct CountClosedWorkflowExecutionsInput: Serializable, Initializable {
        /// If specified, indicates the type of the workflow executions to be counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var typeFilter: WorkflowTypeFilter? = nil
        /// If specified, only workflow executions that match this close status are counted. This filter has an affect only if executionStatus is specified as CLOSED. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var closeStatusFilter: CloseStatusFilter? = nil
        /// If specified, only executions that have a tag that matches the filter are counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var tagFilter: TagFilter? = nil
        /// If specified, only workflow executions matching the WorkflowId in the filter are counted. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var executionFilter: WorkflowExecutionFilter? = nil
        /// If specified, only workflow executions that meet the close time criteria of the filter are counted. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        var closeTimeFilter: ExecutionTimeFilter? = nil
        /// If specified, only workflow executions that meet the start time criteria of the filter are counted. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        var startTimeFilter: ExecutionTimeFilter? = nil
        /// The name of the domain containing the workflow executions to count.
        var domain: String = ""

        public init() {}

        public init(typeFilter: WorkflowTypeFilter? = nil, closeStatusFilter: CloseStatusFilter? = nil, tagFilter: TagFilter? = nil, executionFilter: WorkflowExecutionFilter? = nil, closeTimeFilter: ExecutionTimeFilter? = nil, startTimeFilter: ExecutionTimeFilter? = nil, domain: String) {
            self.typeFilter = typeFilter
            self.closeStatusFilter = closeStatusFilter
            self.tagFilter = tagFilter
            self.executionFilter = executionFilter
            self.closeTimeFilter = closeTimeFilter
            self.startTimeFilter = startTimeFilter
            self.domain = domain
        }

    }

    public struct LambdaFunctionTimedOutEventAttributes: Serializable, Initializable {
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0
        /// The ID of the LambdaFunctionStarted event recorded in the history.
        var startedEventId: Int64 = 0
        /// The type of the timeout that caused this event.
        var timeoutType: String? = nil

        public init() {}

        public init(scheduledEventId: Int64, startedEventId: Int64, timeoutType: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
        }

    }

    public struct ActivityType: Serializable, Initializable {
        /// The name of this activity. The combination of activity type name and version must be unique within a domain.
        var name: String = ""
        /// The version of this activity. The combination of activity type name and version must be unique with in a domain.
        var version: String = ""

        public init() {}

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

    }

    public struct DecisionTask: Serializable, Initializable {
        /// The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.
        var previousStartedEventId: Int64? = nil
        /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
        var taskToken: String = ""
        /// The type of the workflow execution for which this decision task was created.
        var workflowType: WorkflowType = WorkflowType()
        /// The ID of the DecisionTaskStarted event recorded in the history.
        var startedEventId: Int64 = 0
        /// A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.
        var events: [HistoryEvent] = []
        /// The workflow execution for which this decision task was created.
        var workflowExecution: WorkflowExecution = WorkflowExecution()
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil

        public init() {}

        public init(previousStartedEventId: Int64? = nil, taskToken: String, workflowType: WorkflowType, startedEventId: Int64, events: [HistoryEvent], workflowExecution: WorkflowExecution, nextPageToken: String? = nil) {
            self.previousStartedEventId = previousStartedEventId
            self.taskToken = taskToken
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.events = events
            self.workflowExecution = workflowExecution
            self.nextPageToken = nextPageToken
        }

    }

    public struct StartChildWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The workflow type provided in the StartChildWorkflowExecution decision that failed.
        var workflowType: WorkflowType = WorkflowType()
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution decision to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The workflowId of the child workflow execution.
        var workflowId: String = ""
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""
        var control: String? = nil

        public init() {}

        public init(initiatedEventId: Int64, workflowType: WorkflowType, decisionTaskCompletedEventId: Int64, workflowId: String, cause: String, control: String? = nil) {
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.cause = cause
            self.control = control
        }

    }

    public struct WorkflowExecutionInfo: Serializable, Initializable {
        /// The workflow execution this information is about.
        var execution: WorkflowExecution = WorkflowExecution()
        /// The time when the execution was started.
        var startTimestamp: Date = Date()
        /// If this workflow execution is a child of another execution then contains the workflow execution that started this execution.
        var parent: WorkflowExecution? = nil
        /// The time when the workflow execution was closed. Set only if the execution status is CLOSED.
        var closeTimestamp: Date? = nil
        /// The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.
        var tagList: [String]? = nil
        /// Set to true if a cancellation is requested for this workflow execution.
        var cancelRequested: Bool? = nil
        /// If the execution status is closed then this specifies how the execution was closed:   COMPLETED: the execution was successfully completed.  CANCELED: the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.  TERMINATED: the execution was force terminated.  FAILED: the execution failed to complete.  TIMED_OUT: the execution did not complete in the alloted time and was automatically timed out.  CONTINUED_AS_NEW: the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow. 
        var closeStatus: String? = nil
        /// The type of the workflow execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The current status of the execution.
        var executionStatus: String = ""

        public init() {}

        public init(execution: WorkflowExecution, startTimestamp: Date, parent: WorkflowExecution? = nil, closeTimestamp: Date? = nil, tagList: [String]? = nil, cancelRequested: Bool? = nil, closeStatus: String? = nil, workflowType: WorkflowType, executionStatus: String) {
            self.execution = execution
            self.startTimestamp = startTimestamp
            self.parent = parent
            self.closeTimestamp = closeTimestamp
            self.tagList = tagList
            self.cancelRequested = cancelRequested
            self.closeStatus = closeStatus
            self.workflowType = workflowType
            self.executionStatus = executionStatus
        }

    }

    public struct CancelWorkflowExecutionDecisionAttributes: Serializable, Initializable {
        /// Optional. details of the cancellation.
        var details: String? = nil

        public init() {}

        public init(details: String? = nil) {
            self.details = details
        }

    }

    public struct WorkflowType: Serializable, Initializable {
        /// Required. The name of the workflow type. The combination of workflow type name and version must be unique with in a domain.
        var name: String = ""
        /// Required. The version of the workflow type. The combination of workflow type name and version must be unique with in a domain.
        var version: String = ""

        public init() {}

        public init(name: String, version: String) {
            self.name = name
            self.version = version
        }

    }

    public struct PollForDecisionTaskInput: Serializable, Initializable {
        /// Identity of the decider making the request, which is recorded in the DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        var identity: String? = nil
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        var maximumPageSize: Int32? = nil
        /// Specifies the task list to poll for decision tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var taskList: TaskList = TaskList()
        /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimestamp of the events.
        var reverseOrder: Bool? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call. The nextPageToken returned by this action cannot be used with GetWorkflowExecutionHistory to get the next page. You must call PollForDecisionTask again (with the nextPageToken) to retrieve the next page of history records. Calling PollForDecisionTask with a nextPageToken will not return a new decision task..
        var nextPageToken: String? = nil
        /// The name of the domain containing the task lists to poll.
        var domain: String = ""

        public init() {}

        public init(identity: String? = nil, maximumPageSize: Int32? = nil, taskList: TaskList, reverseOrder: Bool? = nil, nextPageToken: String? = nil, domain: String) {
            self.identity = identity
            self.maximumPageSize = maximumPageSize
            self.taskList = taskList
            self.reverseOrder = reverseOrder
            self.nextPageToken = nextPageToken
            self.domain = domain
        }

    }

    public struct WorkflowTypeDetail: Serializable, Initializable {
        /// General information about the workflow type. The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.   REGISTERED: The type is registered and available. Workers supporting this type should be running.  DEPRECATED: The type was deprecated using DeprecateWorkflowType, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type. 
        var typeInfo: WorkflowTypeInfo = WorkflowTypeInfo()
        /// Configuration settings of the workflow type registered through RegisterWorkflowType
        var configuration: WorkflowTypeConfiguration = WorkflowTypeConfiguration()

        public init() {}

        public init(typeInfo: WorkflowTypeInfo, configuration: WorkflowTypeConfiguration) {
            self.typeInfo = typeInfo
            self.configuration = configuration
        }

    }

    public struct DecisionTaskCompletedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// User defined context for the workflow execution.
        var executionContext: String? = nil

        public init() {}

        public init(scheduledEventId: Int64, startedEventId: Int64, executionContext: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.executionContext = executionContext
        }

    }

    public struct DomainDetail: Serializable, Initializable {
        var domainInfo: DomainInfo = DomainInfo()
        var configuration: DomainConfiguration = DomainConfiguration()

        public init() {}

        public init(domainInfo: DomainInfo, configuration: DomainConfiguration) {
            self.domainInfo = domainInfo
            self.configuration = configuration
        }

    }

    public struct RespondActivityTaskFailedInput: Serializable, Initializable {
        /// Optional. Detailed information about the failure.
        var details: String? = nil
        /// The taskToken of the ActivityTask.  taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        var taskToken: String = ""
        /// Description of the error that may assist in diagnostics.
        var reason: String? = nil

        public init() {}

        public init(details: String? = nil, taskToken: String, reason: String? = nil) {
            self.details = details
            self.taskToken = taskToken
            self.reason = reason
        }

    }

    public struct CancelTimerFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""
        /// The timerId provided in the CancelTimer decision that failed.
        var timerId: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, cause: String, timerId: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
            self.timerId = timerId
        }

    }

    public struct DescribeDomainInput: Serializable, Initializable {
        /// The name of the domain to describe.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct StartTimerDecisionAttributes: Serializable, Initializable {
        /// Required. The unique ID of the timer. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var timerId: String = ""
        /// Required. The duration to wait before firing the timer. The duration is specified in seconds; an integer greater than or equal to 0.
        var startToFireTimeout: String = ""
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        var control: String? = nil

        public init() {}

        public init(timerId: String, startToFireTimeout: String, control: String? = nil) {
            self.timerId = timerId
            self.startToFireTimeout = startToFireTimeout
            self.control = control
        }

    }

    public struct DescribeWorkflowTypeInput: Serializable, Initializable {
        /// The name of the domain in which this workflow type is registered.
        var domain: String = ""
        /// The workflow type to describe.
        var workflowType: WorkflowType = WorkflowType()

        public init() {}

        public init(domain: String, workflowType: WorkflowType) {
            self.domain = domain
            self.workflowType = workflowType
        }

    }

    public struct ExecutionTimeFilter: Serializable, Initializable {
        /// Specifies the oldest start or close date and time to return.
        var oldestDate: Date = Date()
        /// Specifies the latest start or close date and time to return.
        var latestDate: Date? = nil

        public init() {}

        public init(oldestDate: Date, latestDate: Date? = nil) {
            self.oldestDate = oldestDate
            self.latestDate = latestDate
        }

    }

    public struct PollForActivityTaskInput: Serializable, Initializable {
        /// Identity of the worker making the request, recorded in the ActivityTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        var identity: String? = nil
        /// The name of the domain that contains the task lists being polled.
        var domain: String = ""
        /// Specifies the task list to poll for activity tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var taskList: TaskList = TaskList()

        public init() {}

        public init(identity: String? = nil, domain: String, taskList: TaskList) {
            self.identity = identity
            self.domain = domain
            self.taskList = taskList
        }

    }

    public struct ListClosedWorkflowExecutionsInput: Serializable, Initializable {
        /// If specified, only executions of the type specified in the filter are returned. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var typeFilter: WorkflowTypeFilter? = nil
        /// If specified, only workflow executions that match this close status are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var closeStatusFilter: CloseStatusFilter? = nil
        /// If specified, only executions that have the matching tag are listed. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var tagFilter: TagFilter? = nil
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        var maximumPageSize: Int32? = nil
        /// If specified, only workflow executions matching the workflow ID specified in the filter are returned. closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var executionFilter: WorkflowExecutionFilter? = nil
        /// If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        var closeTimeFilter: ExecutionTimeFilter? = nil
        /// If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times. startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both.
        var startTimeFilter: ExecutionTimeFilter? = nil
        /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.
        var reverseOrder: Bool? = nil
        /// The name of the domain that contains the workflow executions to list.
        var domain: String = ""
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil

        public init() {}

        public init(typeFilter: WorkflowTypeFilter? = nil, closeStatusFilter: CloseStatusFilter? = nil, tagFilter: TagFilter? = nil, maximumPageSize: Int32? = nil, executionFilter: WorkflowExecutionFilter? = nil, closeTimeFilter: ExecutionTimeFilter? = nil, startTimeFilter: ExecutionTimeFilter? = nil, reverseOrder: Bool? = nil, domain: String, nextPageToken: String? = nil) {
            self.typeFilter = typeFilter
            self.closeStatusFilter = closeStatusFilter
            self.tagFilter = tagFilter
            self.maximumPageSize = maximumPageSize
            self.executionFilter = executionFilter
            self.closeTimeFilter = closeTimeFilter
            self.startTimeFilter = startTimeFilter
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.nextPageToken = nextPageToken
        }

    }

    public struct ActivityTask: Serializable, Initializable {
        /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
        var taskToken: String = ""
        /// The inputs provided when the activity task was scheduled. The form of the input is user defined and should be meaningful to the activity implementation.
        var input: String? = nil
        /// The ID of the ActivityTaskStarted event recorded in the history.
        var startedEventId: Int64 = 0
        /// The workflow execution that started this activity task.
        var workflowExecution: WorkflowExecution = WorkflowExecution()
        /// The unique ID of the task.
        var activityId: String = ""
        /// The type of this activity task.
        var activityType: ActivityType = ActivityType()

        public init() {}

        public init(taskToken: String, input: String? = nil, startedEventId: Int64, workflowExecution: WorkflowExecution, activityId: String, activityType: ActivityType) {
            self.taskToken = taskToken
            self.input = input
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.activityId = activityId
            self.activityType = activityType
        }

    }

    public struct DescribeActivityTypeInput: Serializable, Initializable {
        /// The activity type to get information about. Activity types are identified by the name and version that were supplied when the activity was registered.
        var activityType: ActivityType = ActivityType()
        /// The name of the domain in which the activity type is registered.
        var domain: String = ""

        public init() {}

        public init(activityType: ActivityType, domain: String) {
            self.activityType = activityType
            self.domain = domain
        }

    }

    public struct TagFilter: Serializable, Initializable {
        /// Required. Specifies the tag that must be associated with the execution for it to meet the filter criteria.
        var tag: String = ""

        public init() {}

        public init(tag: String) {
            self.tag = tag
        }

    }

    public struct TaskList: Serializable, Initializable {
        /// The name of the task list.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct WorkflowExecutionTerminatedEventAttributes: Serializable, Initializable {
        /// The details provided for the termination (if any).
        var details: String? = nil
        /// The reason provided for the termination (if any).
        var reason: String? = nil
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var childPolicy: String = ""
        /// If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.
        var cause: String? = nil

        public init() {}

        public init(details: String? = nil, reason: String? = nil, childPolicy: String, cause: String? = nil) {
            self.details = details
            self.reason = reason
            self.childPolicy = childPolicy
            self.cause = cause
        }

    }

    public struct ScheduleActivityTaskFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The activity type provided in the ScheduleActivityTask decision that failed.
        var activityType: ActivityType = ActivityType()
        /// The activityId provided in the ScheduleActivityTask decision that failed.
        var activityId: String = ""
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, activityType: ActivityType, activityId: String, cause: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityType = activityType
            self.activityId = activityId
            self.cause = cause
        }

    }

    public struct RequestCancelExternalWorkflowExecutionDecisionAttributes: Serializable, Initializable {
        /// The runId of the external workflow execution to cancel.
        var runId: String? = nil
        /// Required. The workflowId of the external workflow execution to cancel.
        var workflowId: String = ""
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        var control: String? = nil

        public init() {}

        public init(runId: String? = nil, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.workflowId = workflowId
            self.control = control
        }

    }

    public struct StartWorkflowExecutionInput: Serializable, Initializable {
        /// The ARN of an IAM role that authorizes Amazon SWF to invoke AWS Lambda functions. In order for this workflow execution to invoke AWS Lambda functions, an appropriate IAM role must be specified either as a default for the workflow type or through this field.
        var lambdaRole: String? = nil
        /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. Exceeding this limit will cause the workflow execution to time out. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for this timeout; there is a one-year max limit on the time that a workflow execution can run.  An execution start-to-close timeout must be specified either through this parameter or as a default when the workflow type is registered. If neither this parameter nor a default execution start-to-close timeout is specified, a fault is returned.
        var executionStartToCloseTimeout: String? = nil
        /// The task list to use for the decision tasks generated for this workflow execution. This overrides the defaultTaskList specified when registering the workflow type. A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault will be returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var taskList: TaskList? = nil
        /// The user defined identifier associated with the workflow execution. You can use this to associate a custom identifier with the workflow execution. You may specify the same identifier if a workflow execution is logically a restart of a previous execution. You cannot have two open workflow executions with the same workflowId at the same time. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var workflowId: String = ""
        /// The task priority to use for this workflow execution. This will override any default priority that was assigned when the workflow type was registered. If not set, then the default task priority for the workflow type will be used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// The list of tags to associate with the workflow execution. You can specify a maximum of 5 tags. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        var tagList: [String]? = nil
        /// The input for the workflow execution. This is a free form string which should be meaningful to the workflow you are starting. This input is made available to the new workflow execution in the WorkflowExecutionStarted history event.
        var input: String? = nil
        /// The type of the workflow to start.
        var workflowType: WorkflowType = WorkflowType()
        /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault will be returned.
        var taskStartToCloseTimeout: String? = nil
        /// If set, specifies the policy to use for the child workflow executions of this workflow execution if it is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        var childPolicy: String? = nil
        /// The name of the domain in which the workflow execution is created.
        var domain: String = ""

        public init() {}

        public init(lambdaRole: String? = nil, executionStartToCloseTimeout: String? = nil, taskList: TaskList? = nil, workflowId: String, taskPriority: String? = nil, tagList: [String]? = nil, input: String? = nil, workflowType: WorkflowType, taskStartToCloseTimeout: String? = nil, childPolicy: String? = nil, domain: String) {
            self.lambdaRole = lambdaRole
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.workflowId = workflowId
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.input = input
            self.workflowType = workflowType
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.childPolicy = childPolicy
            self.domain = domain
        }

    }

    public struct ListWorkflowTypesInput: Serializable, Initializable {
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        var maximumPageSize: Int32? = nil
        /// If specified, lists the workflow type with this name.
        var name: String? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// When set to true, returns the results in reverse order. By default the results are returned in ascending alphabetical order of the name of the workflow types.
        var reverseOrder: Bool? = nil
        /// The name of the domain in which the workflow types have been registered.
        var domain: String = ""
        /// Specifies the registration status of the workflow types to list.
        var registrationStatus: String = ""

        public init() {}

        public init(maximumPageSize: Int32? = nil, name: String? = nil, nextPageToken: String? = nil, reverseOrder: Bool? = nil, domain: String, registrationStatus: String) {
            self.maximumPageSize = maximumPageSize
            self.name = name
            self.nextPageToken = nextPageToken
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.registrationStatus = registrationStatus
        }

    }

    public struct ScheduleLambdaFunctionFailedEventAttributes: Serializable, Initializable {
        /// The name of the scheduled AWS Lambda function.
        var name: String = ""
        /// The unique Amazon SWF ID of the AWS Lambda task.
        var id: String = ""
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this AWS Lambda function. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(name: String, id: String, decisionTaskCompletedEventId: Int64, cause: String) {
            self.name = name
            self.id = id
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

    }

    public struct ChildWorkflowExecutionCanceledEventAttributes: Serializable, Initializable {
        /// Details of the cancellation (if provided).
        var details: String? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The type of the child workflow execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The child workflow execution that was canceled.
        var workflowExecution: WorkflowExecution = WorkflowExecution()

        public init() {}

        public init(details: String? = nil, initiatedEventId: Int64, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.details = details
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

    }

    public struct ScheduleActivityTaskDecisionAttributes: Serializable, Initializable {
        /// If set, specifies the name of the task list in which to schedule the activity task. If not specified, the defaultTaskList registered with the activity type will be used. A task list for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default task list was specified at registration time then a fault will be returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var taskList: TaskList? = nil
        /// Required. The activityId of the activity task. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var activityId: String = ""
        /// Optional. If set, specifies the maximum duration the activity task can wait to be assigned to a worker. This overrides the default schedule-to-start timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A schedule-to-start timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-start timeout was specified at registration time then a fault will be returned.
        var scheduleToStartTimeout: String? = nil
        /// Optional. If set, specifies the priority with which the activity task is to be assigned to a worker. This overrides the defaultTaskPriority specified when registering the activity type using RegisterActivityType. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// The maximum duration for this activity task. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A schedule-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-close timeout was specified at registration time then a fault will be returned.
        var scheduleToCloseTimeout: String? = nil
        /// If set, specifies the maximum duration a worker may take to process this activity task. This overrides the default start-to-close timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A start-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default start-to-close timeout was specified at registration time then a fault will be returned.
        var startToCloseTimeout: String? = nil
        /// The input provided to the activity task.
        var input: String? = nil
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks. This data is not sent to the activity.
        var control: String? = nil
        /// If set, specifies the maximum time before which a worker processing a task of this type must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or returns a result, it will be ignored. This overrides the default heartbeat timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var heartbeatTimeout: String? = nil
        /// Required. The type of the activity task to schedule.
        var activityType: ActivityType = ActivityType()

        public init() {}

        public init(taskList: TaskList? = nil, activityId: String, scheduleToStartTimeout: String? = nil, taskPriority: String? = nil, scheduleToCloseTimeout: String? = nil, startToCloseTimeout: String? = nil, input: String? = nil, control: String? = nil, heartbeatTimeout: String? = nil, activityType: ActivityType) {
            self.taskList = taskList
            self.activityId = activityId
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.taskPriority = taskPriority
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.startToCloseTimeout = startToCloseTimeout
            self.input = input
            self.control = control
            self.heartbeatTimeout = heartbeatTimeout
            self.activityType = activityType
        }

    }

    public struct ChildWorkflowExecutionTerminatedEventAttributes: Serializable, Initializable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The type of the child workflow execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The child workflow execution that was terminated.
        var workflowExecution: WorkflowExecution = WorkflowExecution()

        public init() {}

        public init(initiatedEventId: Int64, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

    }

    public struct StartChildWorkflowExecutionDecisionAttributes: Serializable, Initializable {
        /// The ARN of an IAM role that authorizes Amazon SWF to invoke AWS Lambda functions. In order for this workflow execution to invoke AWS Lambda functions, an appropriate IAM role must be specified either as a default for the workflow type or through this field.
        var lambdaRole: String? = nil
        /// The name of the task list to be used for decision tasks of the child workflow execution. A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault will be returned. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var taskList: TaskList? = nil
        /// Required. The workflowId of the workflow execution. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var workflowId: String = ""
        /// Optional. A task priority that, if set, specifies the priority for a decision task of this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// The list of tags to associate with the child workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        var tagList: [String]? = nil
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks. This data is not sent to the child workflow execution.
        var control: String? = nil
        /// The input to be provided to the workflow execution.
        var input: String? = nil
        /// Required. The type of the workflow execution to be started.
        var workflowType: WorkflowType = WorkflowType()
        /// Optional. If set, specifies the policy to use for the child workflow executions if the workflow execution being started is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        var childPolicy: String? = nil
        /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault will be returned.
        var taskStartToCloseTimeout: String? = nil
        /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default execution start-to-close timeout was specified at registration time then a fault will be returned.
        var executionStartToCloseTimeout: String? = nil

        public init() {}

        public init(lambdaRole: String? = nil, taskList: TaskList? = nil, workflowId: String, taskPriority: String? = nil, tagList: [String]? = nil, control: String? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: String? = nil, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.workflowId = workflowId
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.control = control
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

    }

    public struct WorkflowExecutionOpenCounts: Serializable, Initializable {
        /// The count of AWS Lambda functions that are currently executing.
        var openLambdaFunctions: Int32? = nil
        /// The count of activity tasks whose status is OPEN.
        var openActivityTasks: Int32 = 0
        /// The count of timers started by this workflow execution that have not fired yet.
        var openTimers: Int32 = 0
        /// The count of child workflow executions whose status is OPEN.
        var openChildWorkflowExecutions: Int32 = 0
        /// The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.
        var openDecisionTasks: Int32 = 0

        public init() {}

        public init(openLambdaFunctions: Int32? = nil, openActivityTasks: Int32, openTimers: Int32, openChildWorkflowExecutions: Int32, openDecisionTasks: Int32) {
            self.openLambdaFunctions = openLambdaFunctions
            self.openActivityTasks = openActivityTasks
            self.openTimers = openTimers
            self.openChildWorkflowExecutions = openChildWorkflowExecutions
            self.openDecisionTasks = openDecisionTasks
        }

    }

    public struct CountOpenWorkflowExecutionsInput: Serializable, Initializable {
        /// Specifies the type of the workflow executions to be counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var typeFilter: WorkflowTypeFilter? = nil
        /// If specified, only workflow executions matching the WorkflowId in the filter are counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var executionFilter: WorkflowExecutionFilter? = nil
        /// Specifies the start time criteria that workflow executions must meet in order to be counted.
        var startTimeFilter: ExecutionTimeFilter = ExecutionTimeFilter()
        /// If specified, only executions that have a tag that matches the filter are counted. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var tagFilter: TagFilter? = nil
        /// The name of the domain containing the workflow executions to count.
        var domain: String = ""

        public init() {}

        public init(typeFilter: WorkflowTypeFilter? = nil, executionFilter: WorkflowExecutionFilter? = nil, startTimeFilter: ExecutionTimeFilter, tagFilter: TagFilter? = nil, domain: String) {
            self.typeFilter = typeFilter
            self.executionFilter = executionFilter
            self.startTimeFilter = startTimeFilter
            self.tagFilter = tagFilter
            self.domain = domain
        }

    }

    public struct ChildWorkflowExecutionTimedOutEventAttributes: Serializable, Initializable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The type of the timeout that caused the child workflow execution to time out.
        var timeoutType: String = ""
        /// The type of the child workflow execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The child workflow execution that timed out.
        var workflowExecution: WorkflowExecution = WorkflowExecution()

        public init() {}

        public init(initiatedEventId: Int64, timeoutType: String, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.timeoutType = timeoutType
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

    }

    public struct LambdaFunctionScheduledEventAttributes: Serializable, Initializable {
        /// The name of the scheduled AWS Lambda function.
        var name: String = ""
        /// Input provided to the AWS Lambda function.
        var input: String? = nil
        /// The maximum time, in seconds, that the AWS Lambda function can take to execute from start to close before it is marked as failed.
        var startToCloseTimeout: String? = nil
        /// The unique Amazon SWF ID for the AWS Lambda task.
        var id: String = ""
        /// The ID of the DecisionTaskCompleted event for the decision that resulted in the scheduling of this AWS Lambda function. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0

        public init() {}

        public init(name: String, input: String? = nil, startToCloseTimeout: String? = nil, id: String, decisionTaskCompletedEventId: Int64) {
            self.name = name
            self.input = input
            self.startToCloseTimeout = startToCloseTimeout
            self.id = id
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

    }

    public struct TimerFiredEventAttributes: Serializable, Initializable {
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The unique ID of the timer that fired.
        var timerId: String = ""

        public init() {}

        public init(startedEventId: Int64, timerId: String) {
            self.startedEventId = startedEventId
            self.timerId = timerId
        }

    }

    public struct ChildWorkflowExecutionStartedEventAttributes: Serializable, Initializable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The child workflow execution that was started.
        var workflowExecution: WorkflowExecution = WorkflowExecution()
        /// The type of the child workflow execution. 
        var workflowType: WorkflowType = WorkflowType()

        public init() {}

        public init(initiatedEventId: Int64, workflowExecution: WorkflowExecution, workflowType: WorkflowType) {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
        }

    }

    public struct DeprecateWorkflowTypeInput: Serializable, Initializable {
        /// The name of the domain in which the workflow type is registered.
        var domain: String = ""
        /// The workflow type to deprecate.
        var workflowType: WorkflowType = WorkflowType()

        public init() {}

        public init(domain: String, workflowType: WorkflowType) {
            self.domain = domain
            self.workflowType = workflowType
        }

    }

    public struct CloseStatusFilter: Serializable, Initializable {
        /// Required. The close status that must match the close status of an execution for it to meet the criteria of this filter.
        var status: String = ""

        public init() {}

        public init(status: String) {
            self.status = status
        }

    }

    public struct WorkflowExecutionCancelRequestedEventAttributes: Serializable, Initializable {
        /// The external workflow execution for which the cancellation was requested.
        var externalWorkflowExecution: WorkflowExecution? = nil
        /// If set, indicates that the request to cancel the workflow execution was automatically generated, and specifies the cause. This happens if the parent workflow execution times out or is terminated, and the child policy is set to cancel child executions.
        var cause: String? = nil
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var externalInitiatedEventId: Int64? = nil

        public init() {}

        public init(externalWorkflowExecution: WorkflowExecution? = nil, cause: String? = nil, externalInitiatedEventId: Int64? = nil) {
            self.externalWorkflowExecution = externalWorkflowExecution
            self.cause = cause
            self.externalInitiatedEventId = externalInitiatedEventId
        }

    }

    public struct ActivityTaskCancelRequestedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The unique ID of the task.
        var activityId: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, activityId: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityId = activityId
        }

    }

    public struct WorkflowExecutionCanceledEventAttributes: Serializable, Initializable {
        /// Details for the cancellation (if any).
        var details: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0

        public init() {}

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

    }

    public struct History: Serializable, Initializable {
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// The list of history events.
        var events: [HistoryEvent] = []

        public init() {}

        public init(nextPageToken: String? = nil, events: [HistoryEvent]) {
            self.nextPageToken = nextPageToken
            self.events = events
        }

    }

    public struct DomainConfiguration: Serializable, Initializable {
        /// The retention period for workflow executions in this domain.
        var workflowExecutionRetentionPeriodInDays: String = ""

        public init() {}

        public init(workflowExecutionRetentionPeriodInDays: String) {
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }

    }

    public struct WorkflowExecutionStartedEventAttributes: Serializable, Initializable {
        /// The IAM role attached to this workflow execution to use when invoking AWS Lambda functions.
        var lambdaRole: String? = nil
        /// The source workflow execution that started this workflow execution. The member is not set if the workflow execution was not started by a workflow.
        var parentWorkflowExecution: WorkflowExecution? = nil
        /// The maximum duration for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var executionStartToCloseTimeout: String? = nil
        /// The name of the task list for scheduling the decision tasks for this workflow execution.
        var taskList: TaskList = TaskList()
        var taskPriority: String? = nil
        /// The list of tags associated with this workflow execution. An execution can have up to 5 tags.
        var tagList: [String]? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this workflow execution. The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var parentInitiatedEventId: Int64? = nil
        /// The input provided to the workflow execution (if any).
        var input: String? = nil
        /// The workflow type of this execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var childPolicy: String = ""
        /// The maximum duration of decision tasks for this workflow type. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var taskStartToCloseTimeout: String? = nil
        /// If this workflow execution was started due to a ContinueAsNewWorkflowExecution decision, then it contains the runId of the previous workflow execution that was closed and continued as this execution.
        var continuedExecutionRunId: String? = nil

        public init() {}

        public init(lambdaRole: String? = nil, parentWorkflowExecution: WorkflowExecution? = nil, executionStartToCloseTimeout: String? = nil, taskList: TaskList, taskPriority: String? = nil, tagList: [String]? = nil, parentInitiatedEventId: Int64? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: String, taskStartToCloseTimeout: String? = nil, continuedExecutionRunId: String? = nil) {
            self.lambdaRole = lambdaRole
            self.parentWorkflowExecution = parentWorkflowExecution
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.parentInitiatedEventId = parentInitiatedEventId
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.continuedExecutionRunId = continuedExecutionRunId
        }

    }

    public struct WorkflowExecutionConfiguration: Serializable, Initializable {
        /// The IAM role used by this workflow execution when invoking AWS Lambda functions.
        var lambdaRole: String? = nil
        /// The total duration for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var executionStartToCloseTimeout: String = ""
        /// The task list used for the decision tasks generated for this workflow execution.
        var taskList: TaskList = TaskList()
        /// The maximum duration allowed for decision tasks for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var taskStartToCloseTimeout: String = ""
        /// The priority assigned to decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var childPolicy: String = ""

        public init() {}

        public init(lambdaRole: String? = nil, executionStartToCloseTimeout: String, taskList: TaskList, taskStartToCloseTimeout: String, taskPriority: String? = nil, childPolicy: String) {
            self.lambdaRole = lambdaRole
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.taskPriority = taskPriority
            self.childPolicy = childPolicy
        }

    }

    public struct WorkflowExecutionInfos: Serializable, Initializable {
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// The list of workflow information structures.
        var executionInfos: [WorkflowExecutionInfo] = []

        public init() {}

        public init(nextPageToken: String? = nil, executionInfos: [WorkflowExecutionInfo]) {
            self.nextPageToken = nextPageToken
            self.executionInfos = executionInfos
        }

    }

    public struct ActivityTypeDetail: Serializable, Initializable {
        /// General information about the activity type. The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.   REGISTERED: The type is registered and available. Workers supporting this type should be running.   DEPRECATED: The type was deprecated using DeprecateActivityType, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type.  
        var typeInfo: ActivityTypeInfo = ActivityTypeInfo()
        /// The configuration settings registered with the activity type.
        var configuration: ActivityTypeConfiguration = ActivityTypeConfiguration()

        public init() {}

        public init(typeInfo: ActivityTypeInfo, configuration: ActivityTypeConfiguration) {
            self.typeInfo = typeInfo
            self.configuration = configuration
        }

    }

    public struct RegisterWorkflowTypeInput: Serializable, Initializable {
        /// The name of the workflow type. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var name: String = ""
        /// If set, specifies the default maximum duration of decision tasks for this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskStartToCloseTimeout: String? = nil
        /// The ARN of the default IAM role to use when a workflow execution of this type invokes AWS Lambda functions. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution and ContinueAsNewWorkflowExecution decision.
        var defaultLambdaRole: String? = nil
        /// If set, specifies the default maximum duration for executions of this workflow type. You can override this default when starting an execution through the StartWorkflowExecution action or StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for defaultExecutionStartToCloseTimeout; there is a one-year max limit on the time that a workflow execution can run. Exceeding this limit will always cause the workflow execution to time out.
        var defaultExecutionStartToCloseTimeout: String? = nil
        /// The version of the workflow type. The workflow type consists of the name and version, the combination of which must be unique within the domain. To get a list of all currently registered workflow types, use the ListWorkflowTypes action. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var version: String = ""
        /// Textual description of the workflow type.
        var description: String? = nil
        /// The default task priority to assign to the workflow type. If not assigned, then "0" will be used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var defaultTaskPriority: String? = nil
        /// If set, specifies the default task list to use for scheduling decision tasks for executions of this workflow type. This default is used only if a task list is not provided when starting the execution through the StartWorkflowExecution action or StartChildWorkflowExecution decision.
        var defaultTaskList: TaskList? = nil
        /// The name of the domain in which to register the workflow type.
        var domain: String = ""
        /// If set, specifies the default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var defaultChildPolicy: String? = nil

        public init() {}

        public init(name: String, defaultTaskStartToCloseTimeout: String? = nil, defaultLambdaRole: String? = nil, defaultExecutionStartToCloseTimeout: String? = nil, version: String, description: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, domain: String, defaultChildPolicy: String? = nil) {
            self.name = name
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultLambdaRole = defaultLambdaRole
            self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
            self.version = version
            self.description = description
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.domain = domain
            self.defaultChildPolicy = defaultChildPolicy
        }

    }

    public struct CompleteWorkflowExecutionDecisionAttributes: Serializable, Initializable {
        /// The result of the workflow execution. The form of the result is implementation defined.
        var result: String? = nil

        public init() {}

        public init(result: String? = nil) {
            self.result = result
        }

    }

    public struct ActivityTypeInfo: Serializable, Initializable {
        /// The description of the activity type provided in RegisterActivityType.
        var description: String? = nil
        /// The current status of the activity type.
        var status: String = ""
        /// If DEPRECATED, the date and time DeprecateActivityType was called.
        var deprecationDate: Date? = nil
        /// The date and time this activity type was created through RegisterActivityType.
        var creationDate: Date = Date()
        /// The ActivityType type structure representing the activity type.
        var activityType: ActivityType = ActivityType()

        public init() {}

        public init(description: String? = nil, status: String, deprecationDate: Date? = nil, creationDate: Date, activityType: ActivityType) {
            self.description = description
            self.status = status
            self.deprecationDate = deprecationDate
            self.creationDate = creationDate
            self.activityType = activityType
        }

    }

    public struct CompleteWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, cause: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

    }

    public struct TimerStartedEventAttributes: Serializable, Initializable {
        /// The unique ID of the timer that was started.
        var timerId: String = ""
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The duration of time after which the timer will fire. The duration is specified in seconds; an integer greater than or equal to 0.
        var startToFireTimeout: String = ""
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        var control: String? = nil

        public init() {}

        public init(timerId: String, decisionTaskCompletedEventId: Int64, startToFireTimeout: String, control: String? = nil) {
            self.timerId = timerId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.startToFireTimeout = startToFireTimeout
            self.control = control
        }

    }

    public struct ExternalWorkflowExecutionSignaledEventAttributes: Serializable, Initializable {
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        ///  The external workflow execution that the signal was delivered to.
        var workflowExecution: WorkflowExecution = WorkflowExecution()

        public init() {}

        public init(initiatedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
        }

    }

    public struct LambdaFunctionFailedEventAttributes: Serializable, Initializable {
        /// The details of the failure (if any).
        var details: String? = nil
        /// The reason provided for the failure (if any).
        var reason: String? = nil
        /// The ID of the LambdaFunctionStarted event recorded in the history.
        var startedEventId: Int64 = 0
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0

        public init() {}

        public init(details: String? = nil, reason: String? = nil, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.reason = reason
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

    }

    public struct DecisionTaskTimedOutEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The type of timeout that expired before the decision task could be completed.
        var timeoutType: String = ""

        public init() {}

        public init(scheduledEventId: Int64, startedEventId: Int64, timeoutType: String) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.timeoutType = timeoutType
        }

    }

    public struct RecordActivityTaskHeartbeatInput: Serializable, Initializable {
        /// If specified, contains details about the progress of the task.
        var details: String? = nil
        /// The taskToken of the ActivityTask.  taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results. 
        var taskToken: String = ""

        public init() {}

        public init(details: String? = nil, taskToken: String) {
            self.details = details
            self.taskToken = taskToken
        }

    }

    public struct RequestCancelExternalWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The runId of the external workflow execution.
        var runId: String? = nil
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The workflowId of the external workflow to which the cancel request was to be delivered.
        var workflowId: String = ""
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""
        var control: String? = nil

        public init() {}

        public init(runId: String? = nil, initiatedEventId: Int64, decisionTaskCompletedEventId: Int64, workflowId: String, cause: String, control: String? = nil) {
            self.runId = runId
            self.initiatedEventId = initiatedEventId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.cause = cause
            self.control = control
        }

    }

    public struct RespondActivityTaskCompletedInput: Serializable, Initializable {
        /// The taskToken of the ActivityTask.  taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        var taskToken: String = ""
        /// The result of the activity task. It is a free form string that is implementation specific.
        var result: String? = nil

        public init() {}

        public init(taskToken: String, result: String? = nil) {
            self.taskToken = taskToken
            self.result = result
        }

    }

    public struct ListOpenWorkflowExecutionsInput: Serializable, Initializable {
        /// If specified, only executions of the type specified in the filter are returned. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var typeFilter: WorkflowTypeFilter? = nil
        /// If specified, only executions that have the matching tag are listed. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var tagFilter: TagFilter? = nil
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        var maximumPageSize: Int32? = nil
        /// If specified, only workflow executions matching the workflow ID specified in the filter are returned. executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request.
        var executionFilter: WorkflowExecutionFilter? = nil
        /// Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.
        var startTimeFilter: ExecutionTimeFilter = ExecutionTimeFilter()
        /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.
        var reverseOrder: Bool? = nil
        /// The name of the domain that contains the workflow executions to list.
        var domain: String = ""
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil

        public init() {}

        public init(typeFilter: WorkflowTypeFilter? = nil, tagFilter: TagFilter? = nil, maximumPageSize: Int32? = nil, executionFilter: WorkflowExecutionFilter? = nil, startTimeFilter: ExecutionTimeFilter, reverseOrder: Bool? = nil, domain: String, nextPageToken: String? = nil) {
            self.typeFilter = typeFilter
            self.tagFilter = tagFilter
            self.maximumPageSize = maximumPageSize
            self.executionFilter = executionFilter
            self.startTimeFilter = startTimeFilter
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.nextPageToken = nextPageToken
        }

    }

    public struct CancelTimerDecisionAttributes: Serializable, Initializable {
        /// Required. The unique ID of the timer to cancel.
        var timerId: String = ""

        public init() {}

        public init(timerId: String) {
            self.timerId = timerId
        }

    }

    public struct ActivityTaskStartedEventAttributes: Serializable, Initializable {
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0
        /// Identity of the worker that was assigned this task. This aids diagnostics when problems arise. The form of this identity is user defined.
        var identity: String? = nil

        public init() {}

        public init(scheduledEventId: Int64, identity: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.identity = identity
        }

    }

    public struct RecordMarkerDecisionAttributes: Serializable, Initializable {
        /// Optional. details of the marker.
        var details: String? = nil
        /// Required. The name of the marker.
        var markerName: String = ""

        public init() {}

        public init(details: String? = nil, markerName: String) {
            self.details = details
            self.markerName = markerName
        }

    }

    public struct LambdaFunctionStartedEventAttributes: Serializable, Initializable {
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0

        public init() {}

        public init(scheduledEventId: Int64) {
            self.scheduledEventId = scheduledEventId
        }

    }

    public struct DomainInfo: Serializable, Initializable {
        /// The description of the domain provided through RegisterDomain.
        var description: String? = nil
        /// The name of the domain. This name is unique within the account.
        var name: String = ""
        /// The status of the domain:   REGISTERED: The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions.   DEPRECATED: The domain was deprecated using DeprecateDomain, but is still in use. You should not create new workflow executions in this domain.  
        var status: String = ""

        public init() {}

        public init(description: String? = nil, name: String, status: String) {
            self.description = description
            self.name = name
            self.status = status
        }

    }

    public struct WorkflowExecutionFilter: Serializable, Initializable {
        /// The workflowId to pass of match the criteria of this filter.
        var workflowId: String = ""

        public init() {}

        public init(workflowId: String) {
            self.workflowId = workflowId
        }

    }

    public struct SignalExternalWorkflowExecutionDecisionAttributes: Serializable, Initializable {
        /// The runId of the workflow execution to be signaled.
        var runId: String? = nil
        /// Required. The name of the signal.The target workflow execution will use the signal name and input to process the signal.
        var signalName: String = ""
        /// Optional. Input data to be provided with the signal. The target workflow execution will use the signal name and input data to process the signal.
        var input: String? = nil
        /// Required. The workflowId of the workflow execution to be signaled.
        var workflowId: String = ""
        /// Optional. Data attached to the event that can be used by the decider in subsequent decision tasks.
        var control: String? = nil

        public init() {}

        public init(runId: String? = nil, signalName: String, input: String? = nil, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.signalName = signalName
            self.input = input
            self.workflowId = workflowId
            self.control = control
        }

    }

    public struct ActivityTaskCompletedEventAttributes: Serializable, Initializable {
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0
        /// The results of the activity task (if any).
        var result: String? = nil
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0

        public init() {}

        public init(scheduledEventId: Int64, result: String? = nil, startedEventId: Int64) {
            self.scheduledEventId = scheduledEventId
            self.result = result
            self.startedEventId = startedEventId
        }

    }

    public struct RequestCancelActivityTaskFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The activityId provided in the RequestCancelActivityTask decision that failed.
        var activityId: String = ""
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, activityId: String, cause: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityId = activityId
            self.cause = cause
        }

    }

    public struct HistoryEvent: Serializable, Initializable {
        /// If the event is of type ScheduleActivityTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes? = nil
        /// If the event is of type ActivityTaskCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        var activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes? = nil
        /// If the event is of type WorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes? = nil
        /// If the event is of type ActivityTaskTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        var activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes? = nil
        /// If the event is of type WorkflowExecutionTerminated then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes? = nil
        /// If the event is of type DecisionTaskStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        var decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes? = nil
        /// The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.
        var eventId: Int64 = 0
        /// If the event is of type TimerFired then this member is set and provides detailed information about the event. It is not set for other event types.
        var timerFiredEventAttributes: TimerFiredEventAttributes? = nil
        /// If the event is of type StartChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes? = nil
        /// If the event is of type ExternalWorkflowExecutionSignaled then this member is set and provides detailed information about the event. It is not set for other event types.
        var externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes? = nil
        /// If the event is of type ActivityTaskcancelRequested then this member is set and provides detailed information about the event. It is not set for other event types.
        var activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes? = nil
        /// If the event is of type RequestCancelExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It is not set for other event types.
        var requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes? = nil
        /// If the event is of type WorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes? = nil
        var lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes? = nil
        /// If the event is of type WorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes? = nil
        /// If the event is of type WorkflowExecutionCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes? = nil
        /// If the event is of type SignalExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It is not set for other event types.
        var signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes? = nil
        var lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes? = nil
        /// If the event is of type ChildWorkflowExecutionCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        var childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes? = nil
        /// If the event is of type WorkflowExecutionContinuedAsNew then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes? = nil
        /// If the event is of type FailWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes? = nil
        /// If the event is of type MarkerRecorded then this member is set and provides detailed information about the event. It is not set for other event types.
        var markerRecordedEventAttributes: MarkerRecordedEventAttributes? = nil
        /// If the event is of type ChildWorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        var childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes? = nil
        /// If the event is of type TimerCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        var timerCanceledEventAttributes: TimerCanceledEventAttributes? = nil
        /// If the event is of type DecisionTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes? = nil
        /// If the event is of type CompleteWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes? = nil
        /// If the event is of type CancelWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes? = nil
        /// If the event is of type SignalExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes? = nil
        var startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes? = nil
        /// If the event is of type ActivityTaskCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        var activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes? = nil
        var lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes? = nil
        /// If the event is of type WorkflowExecutionCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes? = nil
        /// If the event is of type ChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes? = nil
        /// If the event is of type ContinueAsNewWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes? = nil
        /// The type of the history event.
        var eventType: String = ""
        var lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes? = nil
        /// If the event is of type StartChildWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It is not set for other event types.
        var startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes? = nil
        /// If the event is of type DecisionTaskTimedOut then this member is set and provides detailed information about the event. It is not set for other event types.
        var decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes? = nil
        var lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes? = nil
        /// If the event is of type WorkflowExecutionSignaled then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes? = nil
        /// If the event is of type ChildWorkflowExecutionTerminated then this member is set and provides detailed information about the event. It is not set for other event types.
        var childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes? = nil
        /// If the event is of type ChildWorkflowExecutionCanceled then this member is set and provides detailed information about the event. It is not set for other event types.
        var childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes? = nil
        /// If the event is of type WorkflowExecutionStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        var workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes? = nil
        /// If the event is of type ChildWorkflowExecutionStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        var childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes? = nil
        /// If the event is of type ActivityTaskScheduled then this member is set and provides detailed information about the event. It is not set for other event types.
        var activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes? = nil
        /// If the event is of type RequestCancelActivityTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes? = nil
        /// If the event is of type ExternalWorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It is not set for other event types. 
        var externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes? = nil
        /// If the event is of type DecisionTaskScheduled then this member is set and provides detailed information about the event. It is not set for other event types.
        var decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes? = nil
        /// If the event is of type TimerStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        var timerStartedEventAttributes: TimerStartedEventAttributes? = nil
        /// If the event is of type ActivityTaskFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes? = nil
        /// If the event is of type StartTimerFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var startTimerFailedEventAttributes: StartTimerFailedEventAttributes? = nil
        /// If the event is of type ActivityTaskStarted then this member is set and provides detailed information about the event. It is not set for other event types.
        var activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes? = nil
        /// If the event is of type CancelTimerFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes? = nil
        /// If the event is of type DecisionTaskCompleted then this member is set and provides detailed information about the event. It is not set for other event types.
        var decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes? = nil
        /// If the event is of type RequestCancelExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It is not set for other event types.
        var requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes? = nil
        var scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes? = nil
        /// The date and time when the event occurred.
        var eventTimestamp: Date = Date()

        public init() {}

        public init(scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes? = nil, activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes? = nil, workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes? = nil, activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes? = nil, workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes? = nil, decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes? = nil, eventId: Int64, timerFiredEventAttributes: TimerFiredEventAttributes? = nil, startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes? = nil, externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes? = nil, activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes? = nil, requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes? = nil, workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes? = nil, lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes? = nil, workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes? = nil, workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes? = nil, signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes? = nil, lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes? = nil, childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes? = nil, workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes? = nil, failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes? = nil, markerRecordedEventAttributes: MarkerRecordedEventAttributes? = nil, childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes? = nil, timerCanceledEventAttributes: TimerCanceledEventAttributes? = nil, recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes? = nil, completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes? = nil, cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes? = nil, signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes? = nil, startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes? = nil, activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes? = nil, lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes? = nil, workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes? = nil, childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes? = nil, continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes? = nil, eventType: String, lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes? = nil, startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes? = nil, decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes? = nil, lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes? = nil, workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes? = nil, childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes? = nil, childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes? = nil, workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes? = nil, childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes? = nil, activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes? = nil, requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes? = nil, externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes? = nil, decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes? = nil, timerStartedEventAttributes: TimerStartedEventAttributes? = nil, activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes? = nil, startTimerFailedEventAttributes: StartTimerFailedEventAttributes? = nil, activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes? = nil, cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes? = nil, decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes? = nil, requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes? = nil, scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes? = nil, eventTimestamp: Date) {
            self.scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributes
            self.activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes
            self.workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes
            self.activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes
            self.workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributes
            self.decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes
            self.eventId = eventId
            self.timerFiredEventAttributes = timerFiredEventAttributes
            self.startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributes
            self.externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributes
            self.activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes
            self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributes
            self.workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributes
            self.lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributes
            self.workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes
            self.workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributes
            self.signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributes
            self.lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributes
            self.childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributes
            self.workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributes
            self.failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributes
            self.markerRecordedEventAttributes = markerRecordedEventAttributes
            self.childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributes
            self.timerCanceledEventAttributes = timerCanceledEventAttributes
            self.recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributes
            self.completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes
            self.cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributes
            self.signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributes
            self.startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributes
            self.activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes
            self.lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributes
            self.workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes
            self.childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributes
            self.continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributes
            self.eventType = eventType
            self.lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributes
            self.startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributes
            self.decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes
            self.lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributes
            self.workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributes
            self.childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributes
            self.childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributes
            self.workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes
            self.childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributes
            self.activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes
            self.requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes
            self.externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributes
            self.decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes
            self.timerStartedEventAttributes = timerStartedEventAttributes
            self.activityTaskFailedEventAttributes = activityTaskFailedEventAttributes
            self.startTimerFailedEventAttributes = startTimerFailedEventAttributes
            self.activityTaskStartedEventAttributes = activityTaskStartedEventAttributes
            self.cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes
            self.decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes
            self.requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributes
            self.scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributes
            self.eventTimestamp = eventTimestamp
        }

    }

    public struct WorkflowExecution: Serializable, Initializable {
        /// A system-generated unique identifier for the workflow execution.
        var runId: String = ""
        /// The user defined identifier associated with the workflow execution.
        var workflowId: String = ""

        public init() {}

        public init(runId: String, workflowId: String) {
            self.runId = runId
            self.workflowId = workflowId
        }

    }

    public struct Run: Serializable, Initializable {
        /// The runId of a workflow execution. This ID is generated by the service and can be used to uniquely identify the workflow execution within a domain.
        var runId: String? = nil

        public init() {}

        public init(runId: String? = nil) {
            self.runId = runId
        }

    }

    public struct LambdaFunctionCompletedEventAttributes: Serializable, Initializable {
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0
        /// The ID of the LambdaFunctionStarted event recorded in the history.
        var startedEventId: Int64 = 0
        /// The result of the function execution (if any).
        var result: String? = nil

        public init() {}

        public init(scheduledEventId: Int64, startedEventId: Int64, result: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
            self.result = result
        }

    }

    public struct CountPendingActivityTasksInput: Serializable, Initializable {
        /// The name of the domain that contains the task list.
        var domain: String = ""
        /// The name of the task list.
        var taskList: TaskList = TaskList()

        public init() {}

        public init(domain: String, taskList: TaskList) {
            self.domain = domain
            self.taskList = taskList
        }

    }

    public struct WorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The details of the failure (if any).
        var details: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The descriptive reason provided for the failure (if any).
        var reason: String? = nil

        public init() {}

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64, reason: String? = nil) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.reason = reason
        }

    }

    public struct RegisterDomainInput: Serializable, Initializable {
        /// A text description of the domain.
        var description: String? = nil
        /// Name of the domain to register. The name must be unique in the region that the domain is registered in. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var name: String = ""
        /// The duration (in days) that records and histories of workflow executions on the domain should be kept by the service. After the retention period, the workflow execution is not available in the results of visibility calls. If you pass the value NONE or 0 (zero), then the workflow execution history will not be retained. As soon as the workflow execution completes, the execution record and its history are deleted. The maximum workflow execution retention period is 90 days. For more information about Amazon SWF service limits, see: Amazon SWF Service Limits in the Amazon SWF Developer Guide.
        var workflowExecutionRetentionPeriodInDays: String = ""

        public init() {}

        public init(description: String? = nil, name: String, workflowExecutionRetentionPeriodInDays: String) {
            self.description = description
            self.name = name
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }

    }

    public struct WorkflowExecutionCompletedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The result produced by the workflow execution upon successful completion.
        var result: String? = nil

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, result: String? = nil) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.result = result
        }

    }

    public struct RecordMarkerFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarkerFailed decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The marker's name.
        var markerName: String = ""
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, markerName: String, cause: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.markerName = markerName
            self.cause = cause
        }

    }

    public struct DecisionTaskStartedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0
        /// Identity of the decider making the request. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        var identity: String? = nil

        public init() {}

        public init(scheduledEventId: Int64, identity: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.identity = identity
        }

    }

    public struct DeprecateDomainInput: Serializable, Initializable {
        /// The name of the domain to deprecate.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct StartChildWorkflowExecutionInitiatedEventAttributes: Serializable, Initializable {
        /// The IAM role attached to this workflow execution to use when invoking AWS Lambda functions.
        var lambdaRole: String? = nil
        /// The name of the task list used for the decision tasks of the child workflow execution.
        var taskList: TaskList = TaskList()
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution decision to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The workflowId of the child workflow execution.
        var workflowId: String = ""
        /// Optional. The priority assigned for the decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// Optional. Data attached to the event that can be used by the decider in subsequent decision tasks. This data is not sent to the activity.
        var control: String? = nil
        /// The list of tags to associated with the child workflow execution.
        var tagList: [String]? = nil
        /// The inputs provided to the child workflow execution (if any).
        var input: String? = nil
        /// The type of the child workflow execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The policy to use for the child workflow executions if this execution gets terminated by explicitly calling the TerminateWorkflowExecution action or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var childPolicy: String = ""
        /// The maximum duration allowed for the decision tasks for this workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var taskStartToCloseTimeout: String? = nil
        /// The maximum duration for the child workflow execution. If the workflow execution is not closed within this duration, it will be timed out and force terminated. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var executionStartToCloseTimeout: String? = nil

        public init() {}

        public init(lambdaRole: String? = nil, taskList: TaskList, decisionTaskCompletedEventId: Int64, workflowId: String, taskPriority: String? = nil, control: String? = nil, tagList: [String]? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: String, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.taskPriority = taskPriority
            self.control = control
            self.tagList = tagList
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

    }

    public struct RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: Serializable, Initializable {
        /// The runId of the external workflow execution to be canceled.
        var runId: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The workflowId of the external workflow execution to be canceled.
        var workflowId: String = ""
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks.
        var control: String? = nil

        public init() {}

        public init(runId: String? = nil, decisionTaskCompletedEventId: Int64, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.control = control
        }

    }

    public struct ListDomainsInput: Serializable, Initializable {
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        var maximumPageSize: Int32? = nil
        /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the domains.
        var reverseOrder: Bool? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// Specifies the registration status of the domains to list.
        var registrationStatus: String = ""

        public init() {}

        public init(maximumPageSize: Int32? = nil, reverseOrder: Bool? = nil, nextPageToken: String? = nil, registrationStatus: String) {
            self.maximumPageSize = maximumPageSize
            self.reverseOrder = reverseOrder
            self.nextPageToken = nextPageToken
            self.registrationStatus = registrationStatus
        }

    }

    public struct WorkflowTypeConfiguration: Serializable, Initializable {
        /// Optional. The default maximum duration, specified when registering the workflow type, for executions of this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultExecutionStartToCloseTimeout: String? = nil
        /// Optional. The default maximum duration, specified when registering the workflow type, that a decision task for executions of this workflow type might take before returning completion or failure. If the task does not close in the specified time then the task is automatically timed out and rescheduled. If the decider eventually reports a completion or failure, it is ignored. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskStartToCloseTimeout: String? = nil
        /// Optional. The default task priority, specified when registering the workflow type, for all decision tasks of this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var defaultTaskPriority: String? = nil
        /// Optional. The default task list, specified when registering the workflow type, for decisions tasks scheduled for workflow executions of this type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision.
        var defaultTaskList: TaskList? = nil
        /// The default IAM role to use when a workflow execution invokes a AWS Lambda function.
        var defaultLambdaRole: String? = nil
        /// Optional. The default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var defaultChildPolicy: String? = nil

        public init() {}

        public init(defaultExecutionStartToCloseTimeout: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, defaultLambdaRole: String? = nil, defaultChildPolicy: String? = nil) {
            self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.defaultLambdaRole = defaultLambdaRole
            self.defaultChildPolicy = defaultChildPolicy
        }

    }

    public struct FailWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, cause: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

    }

    public struct RespondActivityTaskCanceledInput: Serializable, Initializable {
        /// Optional. Information about the cancellation.
        var details: String? = nil
        /// The taskToken of the ActivityTask. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        var taskToken: String = ""

        public init() {}

        public init(details: String? = nil, taskToken: String) {
            self.details = details
            self.taskToken = taskToken
        }

    }

    public struct RegisterActivityTypeInput: Serializable, Initializable {
        /// The name of the activity type within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var name: String = ""
        /// If set, specifies the default maximum duration that a worker can take to process tasks of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskStartToCloseTimeout: String? = nil
        /// If set, specifies the default maximum time before which a worker processing a task of this type must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskHeartbeatTimeout: String? = nil
        /// If set, specifies the default maximum duration that a task of this activity type can wait before being assigned to a worker. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskScheduleToStartTimeout: String? = nil
        /// The version of the activity type. The activity type consists of the name and version, the combination of which must be unique within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var version: String = ""
        /// A textual description of the activity type.
        var description: String? = nil
        /// The default task priority to assign to the activity type. If not assigned, then "0" will be used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var defaultTaskPriority: String? = nil
        /// If set, specifies the default task list to use for scheduling tasks of this activity type. This default task list is used if a task list is not provided when a task is scheduled through the ScheduleActivityTask decision.
        var defaultTaskList: TaskList? = nil
        /// The name of the domain in which this activity is to be registered.
        var domain: String = ""
        /// If set, specifies the default maximum duration for a task of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskScheduleToCloseTimeout: String? = nil

        public init() {}

        public init(name: String, defaultTaskStartToCloseTimeout: String? = nil, defaultTaskHeartbeatTimeout: String? = nil, defaultTaskScheduleToStartTimeout: String? = nil, version: String, description: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, domain: String, defaultTaskScheduleToCloseTimeout: String? = nil) {
            self.name = name
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
            self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
            self.version = version
            self.description = description
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.domain = domain
            self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
        }

    }

    public struct ActivityTaskTimedOutEventAttributes: Serializable, Initializable {
        /// Contains the content of the details parameter for the last call made by the activity to RecordActivityTaskHeartbeat.
        var details: String? = nil
        /// The type of the timeout that caused this event.
        var timeoutType: String = ""
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0

        public init() {}

        public init(details: String? = nil, timeoutType: String, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.timeoutType = timeoutType
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

    }

    public struct ActivityTaskStatus: Serializable, Initializable {
        /// Set to true if cancellation of the task is requested.
        var cancelRequested: Bool = false

        public init() {}

        public init(cancelRequested: Bool) {
            self.cancelRequested = cancelRequested
        }

    }

    public struct ActivityTaskScheduledEventAttributes: Serializable, Initializable {
        /// The task list in which the activity task has been scheduled.
        var taskList: TaskList = TaskList()
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The unique ID of the activity task.
        var activityId: String = ""
        /// The maximum amount of time the activity task can wait to be assigned to a worker.
        var scheduleToStartTimeout: String? = nil
        /// Optional. The priority to assign to the scheduled activity task. If set, this will override any default priority value that was assigned when the activity type was registered. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// The maximum amount of time for this activity task.
        var scheduleToCloseTimeout: String? = nil
        /// The maximum amount of time a worker may take to process the activity task.
        var startToCloseTimeout: String? = nil
        /// The input provided to the activity task.
        var input: String? = nil
        /// Optional. Data attached to the event that can be used by the decider in subsequent workflow tasks. This data is not sent to the activity.
        var control: String? = nil
        /// The maximum time before which the worker processing this task must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or return a result, it will be ignored.
        var heartbeatTimeout: String? = nil
        /// The type of the activity task.
        var activityType: ActivityType = ActivityType()

        public init() {}

        public init(taskList: TaskList, decisionTaskCompletedEventId: Int64, activityId: String, scheduleToStartTimeout: String? = nil, taskPriority: String? = nil, scheduleToCloseTimeout: String? = nil, startToCloseTimeout: String? = nil, input: String? = nil, control: String? = nil, heartbeatTimeout: String? = nil, activityType: ActivityType) {
            self.taskList = taskList
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityId = activityId
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.taskPriority = taskPriority
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.startToCloseTimeout = startToCloseTimeout
            self.input = input
            self.control = control
            self.heartbeatTimeout = heartbeatTimeout
            self.activityType = activityType
        }

    }

    public struct TerminateWorkflowExecutionInput: Serializable, Initializable {
        /// The runId of the workflow execution to terminate.
        var runId: String? = nil
        /// Optional. Details for terminating the workflow execution.
        var details: String? = nil
        /// Optional. A descriptive reason for terminating the workflow execution.
        var reason: String? = nil
        /// The workflowId of the workflow execution to terminate.
        var workflowId: String = ""
        /// The domain of the workflow execution to terminate.
        var domain: String = ""
        /// If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        var childPolicy: String? = nil

        public init() {}

        public init(runId: String? = nil, details: String? = nil, reason: String? = nil, workflowId: String, domain: String, childPolicy: String? = nil) {
            self.runId = runId
            self.details = details
            self.reason = reason
            self.workflowId = workflowId
            self.domain = domain
            self.childPolicy = childPolicy
        }

    }

    public struct ChildWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The details of the failure (if provided).
        var details: String? = nil
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The reason for the failure (if provided).
        var reason: String? = nil
        /// The type of the child workflow execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The child workflow execution that failed.
        var workflowExecution: WorkflowExecution = WorkflowExecution()

        public init() {}

        public init(details: String? = nil, initiatedEventId: Int64, reason: String? = nil, workflowType: WorkflowType, startedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.details = details
            self.initiatedEventId = initiatedEventId
            self.reason = reason
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
        }

    }

    public struct ChildWorkflowExecutionCompletedEventAttributes: Serializable, Initializable {
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The type of the child workflow execution.
        var workflowType: WorkflowType = WorkflowType()
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The result of the child workflow execution (if any).
        var result: String? = nil
        /// The child workflow execution that was completed.
        var workflowExecution: WorkflowExecution = WorkflowExecution()

        public init() {}

        public init(initiatedEventId: Int64, workflowType: WorkflowType, startedEventId: Int64, result: String? = nil, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowType = workflowType
            self.startedEventId = startedEventId
            self.result = result
            self.workflowExecution = workflowExecution
        }

    }

    public struct RequestCancelActivityTaskDecisionAttributes: Serializable, Initializable {
        /// The activityId of the activity task to be canceled.
        var activityId: String = ""

        public init() {}

        public init(activityId: String) {
            self.activityId = activityId
        }

    }

    public struct ContinueAsNewWorkflowExecutionDecisionAttributes: Serializable, Initializable {
        /// The ARN of an IAM role that authorizes Amazon SWF to invoke AWS Lambda functions. In order for this workflow execution to invoke AWS Lambda functions, an appropriate IAM role must be specified either as a default for the workflow type or through this field.
        var lambdaRole: String? = nil
        var workflowTypeVersion: String? = nil
        var taskList: TaskList? = nil
        /// Optional. The task priority that, if set, specifies the priority for the decision tasks for this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        var tagList: [String]? = nil
        /// The input provided to the new workflow execution.
        var input: String? = nil
        /// If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run.  A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault will be returned.
        var childPolicy: String? = nil
        /// Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault will be returned.
        var taskStartToCloseTimeout: String? = nil
        /// If set, specifies the total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration. An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault will be returned.
        var executionStartToCloseTimeout: String? = nil

        public init() {}

        public init(lambdaRole: String? = nil, workflowTypeVersion: String? = nil, taskList: TaskList? = nil, taskPriority: String? = nil, tagList: [String]? = nil, input: String? = nil, childPolicy: String? = nil, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.workflowTypeVersion = workflowTypeVersion
            self.taskList = taskList
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.input = input
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

    }

    public struct StartLambdaFunctionFailedEventAttributes: Serializable, Initializable {
        /// The ID of the LambdaFunctionScheduled event that was recorded when this AWS Lambda function was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64? = nil
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String? = nil
        /// The error message (if any).
        var message: String? = nil

        public init() {}

        public init(scheduledEventId: Int64? = nil, cause: String? = nil, message: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.cause = cause
            self.message = message
        }

    }

    public struct SignalExternalWorkflowExecutionInitiatedEventAttributes: Serializable, Initializable {
        /// The runId of the external workflow execution to send the signal to.
        var runId: String? = nil
        /// The name of the signal.
        var signalName: String = ""
        /// Input provided to the signal (if any).
        var input: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The workflowId of the external workflow execution.
        var workflowId: String = ""
        /// Optional. data attached to the event that can be used by the decider in subsequent decision tasks.
        var control: String? = nil

        public init() {}

        public init(runId: String? = nil, signalName: String, input: String? = nil, decisionTaskCompletedEventId: Int64, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.signalName = signalName
            self.input = input
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.control = control
        }

    }

    public struct WorkflowTypeFilter: Serializable, Initializable {
        /// Required. Name of the workflow type.
        var name: String = ""
        /// Version of the workflow type.
        var version: String? = nil

        public init() {}

        public init(name: String, version: String? = nil) {
            self.name = name
            self.version = version
        }

    }

    public struct GetWorkflowExecutionHistoryInput: Serializable, Initializable {
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        var maximumPageSize: Int32? = nil
        /// Specifies the workflow execution for which to return the history.
        var execution: WorkflowExecution = WorkflowExecution()
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimeStamp of the events.
        var reverseOrder: Bool? = nil
        /// The name of the domain containing the workflow execution.
        var domain: String = ""

        public init() {}

        public init(maximumPageSize: Int32? = nil, execution: WorkflowExecution, nextPageToken: String? = nil, reverseOrder: Bool? = nil, domain: String) {
            self.maximumPageSize = maximumPageSize
            self.execution = execution
            self.nextPageToken = nextPageToken
            self.reverseOrder = reverseOrder
            self.domain = domain
        }

    }

    public struct ActivityTypeConfiguration: Serializable, Initializable {
        /// Optional. The default maximum duration, specified when registering the activity type, that a task of an activity type can wait before being assigned to a worker. You can override this default when scheduling a task through the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskScheduleToStartTimeout: String? = nil
        /// Optional. The default maximum duration for tasks of an activity type specified when registering the activity type. You can override this default when scheduling a task through the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskStartToCloseTimeout: String? = nil
        /// Optional. The default task priority for tasks of this activity type, specified at registration. If not set, then "0" will be used as the default priority. This default can be overridden when scheduling an activity task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var defaultTaskPriority: String? = nil
        /// Optional. The default task list specified for this activity type at registration. This default is used if a task list is not provided when a task is scheduled through the ScheduleActivityTask decision. You can override the default registered task list when scheduling a task through the ScheduleActivityTask decision.
        var defaultTaskList: TaskList? = nil
        /// Optional. The default maximum duration, specified when registering the activity type, for tasks of this activity type. You can override this default when scheduling a task through the ScheduleActivityTask decision. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskScheduleToCloseTimeout: String? = nil
        /// Optional. The default maximum time, in seconds, before which a worker processing a task must report progress by calling RecordActivityTaskHeartbeat. You can specify this value only when registering an activity type. The registered default value can be overridden when you schedule a task through the ScheduleActivityTask decision. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var defaultTaskHeartbeatTimeout: String? = nil

        public init() {}

        public init(defaultTaskScheduleToStartTimeout: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, defaultTaskPriority: String? = nil, defaultTaskList: TaskList? = nil, defaultTaskScheduleToCloseTimeout: String? = nil, defaultTaskHeartbeatTimeout: String? = nil) {
            self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskList = defaultTaskList
            self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
            self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
        }

    }

    public struct TimerCanceledEventAttributes: Serializable, Initializable {
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        ///  The unique ID of the timer that was canceled. 
        var timerId: String = ""

        public init() {}

        public init(startedEventId: Int64, decisionTaskCompletedEventId: Int64, timerId: String) {
            self.startedEventId = startedEventId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.timerId = timerId
        }

    }

    public struct ListActivityTypesInput: Serializable, Initializable {
        /// The maximum number of results that will be returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        var maximumPageSize: Int32? = nil
        /// If specified, only lists the activity types that have this name.
        var name: String? = nil
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the activity types.
        var reverseOrder: Bool? = nil
        /// The name of the domain in which the activity types have been registered.
        var domain: String = ""
        /// Specifies the registration status of the activity types to list.
        var registrationStatus: String = ""

        public init() {}

        public init(maximumPageSize: Int32? = nil, name: String? = nil, nextPageToken: String? = nil, reverseOrder: Bool? = nil, domain: String, registrationStatus: String) {
            self.maximumPageSize = maximumPageSize
            self.name = name
            self.nextPageToken = nextPageToken
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.registrationStatus = registrationStatus
        }

    }

    public struct FailWorkflowExecutionDecisionAttributes: Serializable, Initializable {
        /// Optional. Details of the failure.
        var details: String? = nil
        /// A descriptive reason for the failure that may help in diagnostics.
        var reason: String? = nil

        public init() {}

        public init(details: String? = nil, reason: String? = nil) {
            self.details = details
            self.reason = reason
        }

    }

    public struct PendingTaskCount: Serializable, Initializable {
        /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
        var truncated: Bool? = nil
        /// The number of tasks in the task list.
        var count: Int32 = 0

        public init() {}

        public init(truncated: Bool? = nil, count: Int32) {
            self.truncated = truncated
            self.count = count
        }

    }

    public struct WorkflowExecutionContinuedAsNewEventAttributes: Serializable, Initializable {
        /// The IAM role attached to this workflow execution to use when invoking AWS Lambda functions.
        var lambdaRole: String? = nil
        var taskList: TaskList = TaskList()
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The runId of the new workflow execution.
        var newExecutionRunId: String = ""
        var taskPriority: String? = nil
        /// The list of tags associated with the new workflow execution.
        var tagList: [String]? = nil
        /// The input provided to the new workflow execution.
        var input: String? = nil
        var workflowType: WorkflowType = WorkflowType()
        /// The policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var childPolicy: String = ""
        /// The maximum duration of decision tasks for the new workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var taskStartToCloseTimeout: String? = nil
        /// The total duration allowed for the new workflow execution. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var executionStartToCloseTimeout: String? = nil

        public init() {}

        public init(lambdaRole: String? = nil, taskList: TaskList, decisionTaskCompletedEventId: Int64, newExecutionRunId: String, taskPriority: String? = nil, tagList: [String]? = nil, input: String? = nil, workflowType: WorkflowType, childPolicy: String, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil) {
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.newExecutionRunId = newExecutionRunId
            self.taskPriority = taskPriority
            self.tagList = tagList
            self.input = input
            self.workflowType = workflowType
            self.childPolicy = childPolicy
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

    }

    public struct Decision: Serializable, Initializable {
        /// Provides details of the ScheduleActivityTask decision. It is not set for other decision types.
        var scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes? = nil
        /// Provides details of the RequestCancelExternalWorkflowExecution decision. It is not set for other decision types.
        var requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes? = nil
        /// Provides details of the CancelTimer decision. It is not set for other decision types.
        var cancelTimerDecisionAttributes: CancelTimerDecisionAttributes? = nil
        /// Provides details of the SignalExternalWorkflowExecution decision. It is not set for other decision types.
        var signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes? = nil
        /// Provides details of the RequestCancelActivityTask decision. It is not set for other decision types.
        var requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes? = nil
        /// Provides details of the RecordMarker decision. It is not set for other decision types.
        var recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes? = nil
        /// Provides details of the FailWorkflowExecution decision. It is not set for other decision types.
        var failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes? = nil
        /// Provides details of the CancelWorkflowExecution decision. It is not set for other decision types.
        var cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes? = nil
        /// Specifies the type of the decision.
        var decisionType: String = ""
        /// Provides details of the ContinueAsNewWorkflowExecution decision. It is not set for other decision types.
        var continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes? = nil
        /// Provides details of the StartTimer decision. It is not set for other decision types.
        var startTimerDecisionAttributes: StartTimerDecisionAttributes? = nil
        /// Provides details of the StartChildWorkflowExecution decision. It is not set for other decision types.
        var startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes? = nil
        /// Provides details of the CompleteWorkflowExecution decision. It is not set for other decision types.
        var completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes? = nil
        var scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes? = nil

        public init() {}

        public init(scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes? = nil, requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes? = nil, cancelTimerDecisionAttributes: CancelTimerDecisionAttributes? = nil, signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes? = nil, requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes? = nil, recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes? = nil, failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes? = nil, cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes? = nil, decisionType: String, continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes? = nil, startTimerDecisionAttributes: StartTimerDecisionAttributes? = nil, startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes? = nil, completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes? = nil, scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes? = nil) {
            self.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes
            self.requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes
            self.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes
            self.signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes
            self.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes
            self.recordMarkerDecisionAttributes = recordMarkerDecisionAttributes
            self.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes
            self.cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes
            self.decisionType = decisionType
            self.continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes
            self.startTimerDecisionAttributes = startTimerDecisionAttributes
            self.startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes
            self.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes
            self.scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes
        }

    }

    public struct WorkflowTypeInfo: Serializable, Initializable {
        /// The description of the type registered through RegisterWorkflowType.
        var description: String? = nil
        /// The current status of the workflow type.
        var status: String = ""
        /// If the type is in deprecated state, then it is set to the date when the type was deprecated.
        var deprecationDate: Date? = nil
        /// The date when this type was registered.
        var creationDate: Date = Date()
        /// The workflow type this information is about.
        var workflowType: WorkflowType = WorkflowType()

        public init() {}

        public init(description: String? = nil, status: String, deprecationDate: Date? = nil, creationDate: Date, workflowType: WorkflowType) {
            self.description = description
            self.status = status
            self.deprecationDate = deprecationDate
            self.creationDate = creationDate
            self.workflowType = workflowType
        }

    }

    public struct WorkflowExecutionSignaledEventAttributes: Serializable, Initializable {
        /// The name of the signal received. The decider can use the signal name and inputs to determine how to the process the signal.
        var signalName: String = ""
        /// Inputs provided with the signal (if any). The decider can use the signal name and inputs to determine how to process the signal.
        var input: String? = nil
        /// The workflow execution that sent the signal. This is set only of the signal was sent by another workflow execution.
        var externalWorkflowExecution: WorkflowExecution? = nil
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflow decision to signal this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event. This field is set only if the signal was initiated by another workflow execution.
        var externalInitiatedEventId: Int64? = nil

        public init() {}

        public init(signalName: String, input: String? = nil, externalWorkflowExecution: WorkflowExecution? = nil, externalInitiatedEventId: Int64? = nil) {
            self.signalName = signalName
            self.input = input
            self.externalWorkflowExecution = externalWorkflowExecution
            self.externalInitiatedEventId = externalInitiatedEventId
        }

    }

    public struct ActivityTypeInfos: Serializable, Initializable {
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// List of activity type information.
        var typeInfos: [ActivityTypeInfo] = []

        public init() {}

        public init(nextPageToken: String? = nil, typeInfos: [ActivityTypeInfo]) {
            self.nextPageToken = nextPageToken
            self.typeInfos = typeInfos
        }

    }

    public struct RespondDecisionTaskCompletedInput: Serializable, Initializable {
        /// The taskToken from the DecisionTask. taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.
        var taskToken: String = ""
        /// User defined context to add to workflow execution.
        var executionContext: String? = nil
        /// The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the decision structure for details.
        var decisions: [Decision]? = nil

        public init() {}

        public init(taskToken: String, executionContext: String? = nil, decisions: [Decision]? = nil) {
            self.taskToken = taskToken
            self.executionContext = executionContext
            self.decisions = decisions
        }

    }

    public struct MarkerRecordedEventAttributes: Serializable, Initializable {
        /// Details of the marker (if any).
        var details: String? = nil
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarker decision that requested this marker. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The name of the marker.
        var markerName: String = ""

        public init() {}

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64, markerName: String) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.markerName = markerName
        }

    }

    public struct WorkflowExecutionTimedOutEventAttributes: Serializable, Initializable {
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:  TERMINATE: the child executions will be terminated. REQUEST_CANCEL: a request to cancel will be attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event. ABANDON: no action will be taken. The child executions will continue to run. 
        var childPolicy: String = ""
        /// The type of timeout that caused this event.
        var timeoutType: String = ""

        public init() {}

        public init(childPolicy: String, timeoutType: String) {
            self.childPolicy = childPolicy
            self.timeoutType = timeoutType
        }

    }

    public struct ScheduleLambdaFunctionDecisionAttributes: Serializable, Initializable {
        /// Required. The name of the AWS Lambda function to invoke.
        var name: String = ""
        /// The input provided to the AWS Lambda function.
        var input: String? = nil
        /// If set, specifies the maximum duration the function may take to execute.
        var startToCloseTimeout: String? = nil
        /// Required. The SWF id of the AWS Lambda task. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f - \u009f). Also, it must not contain the literal string quotarnquot.
        var id: String = ""

        public init() {}

        public init(name: String, input: String? = nil, startToCloseTimeout: String? = nil, id: String) {
            self.name = name
            self.input = input
            self.startToCloseTimeout = startToCloseTimeout
            self.id = id
        }

    }

    public struct DescribeWorkflowExecutionInput: Serializable, Initializable {
        /// The workflow execution to describe.
        var execution: WorkflowExecution = WorkflowExecution()
        /// The name of the domain containing the workflow execution.
        var domain: String = ""

        public init() {}

        public init(execution: WorkflowExecution, domain: String) {
            self.execution = execution
            self.domain = domain
        }

    }

    public struct ContinueAsNewWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, cause: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

    }

    public struct WorkflowExecutionDetail: Serializable, Initializable {
        /// The number of tasks for this workflow execution. This includes open and closed tasks of all types.
        var openCounts: WorkflowExecutionOpenCounts = WorkflowExecutionOpenCounts()
        /// Information about the workflow execution.
        var executionInfo: WorkflowExecutionInfo = WorkflowExecutionInfo()
        /// The time when the last activity task was scheduled for this workflow execution. You can use this information to determine if the workflow has not made progress for an unusually long period of time and might require a corrective action.
        var latestActivityTaskTimestamp: Date? = nil
        /// The configuration settings for this workflow execution including timeout values, tasklist etc.
        var executionConfiguration: WorkflowExecutionConfiguration = WorkflowExecutionConfiguration()
        /// The latest executionContext provided by the decider for this workflow execution. A decider can provide an executionContext (a free-form string) when closing a decision task using RespondDecisionTaskCompleted.
        var latestExecutionContext: String? = nil

        public init() {}

        public init(openCounts: WorkflowExecutionOpenCounts, executionInfo: WorkflowExecutionInfo, latestActivityTaskTimestamp: Date? = nil, executionConfiguration: WorkflowExecutionConfiguration, latestExecutionContext: String? = nil) {
            self.openCounts = openCounts
            self.executionInfo = executionInfo
            self.latestActivityTaskTimestamp = latestActivityTaskTimestamp
            self.executionConfiguration = executionConfiguration
            self.latestExecutionContext = latestExecutionContext
        }

    }

    public struct ExternalWorkflowExecutionCancelRequestedEventAttributes: Serializable, Initializable {
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The external workflow execution to which the cancellation request was delivered.
        var workflowExecution: WorkflowExecution = WorkflowExecution()

        public init() {}

        public init(initiatedEventId: Int64, workflowExecution: WorkflowExecution) {
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
        }

    }

    public struct WorkflowTypeInfos: Serializable, Initializable {
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// The list of workflow type information.
        var typeInfos: [WorkflowTypeInfo] = []

        public init() {}

        public init(nextPageToken: String? = nil, typeInfos: [WorkflowTypeInfo]) {
            self.nextPageToken = nextPageToken
            self.typeInfos = typeInfos
        }

    }

    public struct CancelWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, cause: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

    }

    public struct ActivityTaskCanceledEventAttributes: Serializable, Initializable {
        /// Details of the cancellation (if any).
        var details: String? = nil
        /// If set, contains the ID of the last ActivityTaskCancelRequested event recorded for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var latestCancelRequestedEventId: Int64? = nil
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0

        public init() {}

        public init(details: String? = nil, latestCancelRequestedEventId: Int64? = nil, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.latestCancelRequestedEventId = latestCancelRequestedEventId
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

    }

    public struct WorkflowExecutionCount: Serializable, Initializable {
        /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
        var truncated: Bool? = nil
        /// The number of workflow executions.
        var count: Int32 = 0

        public init() {}

        public init(truncated: Bool? = nil, count: Int32) {
            self.truncated = truncated
            self.count = count
        }

    }

    public struct CountPendingDecisionTasksInput: Serializable, Initializable {
        /// The name of the domain that contains the task list.
        var domain: String = ""
        /// The name of the task list.
        var taskList: TaskList = TaskList()

        public init() {}

        public init(domain: String, taskList: TaskList) {
            self.domain = domain
            self.taskList = taskList
        }

    }

    public struct DomainInfos: Serializable, Initializable {
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        var nextPageToken: String? = nil
        /// A list of DomainInfo structures.
        var domainInfos: [DomainInfo] = []

        public init() {}

        public init(nextPageToken: String? = nil, domainInfos: [DomainInfo]) {
            self.nextPageToken = nextPageToken
            self.domainInfos = domainInfos
        }

    }

    public struct SignalWorkflowExecutionInput: Serializable, Initializable {
        /// The runId of the workflow execution to signal.
        var runId: String? = nil
        /// The name of the signal. This name must be meaningful to the target workflow.
        var signalName: String = ""
        /// Data to attach to the WorkflowExecutionSignaled event in the target workflow execution's history.
        var input: String? = nil
        /// The workflowId of the workflow execution to signal.
        var workflowId: String = ""
        /// The name of the domain containing the workflow execution to signal.
        var domain: String = ""

        public init() {}

        public init(runId: String? = nil, signalName: String, input: String? = nil, workflowId: String, domain: String) {
            self.runId = runId
            self.signalName = signalName
            self.input = input
            self.workflowId = workflowId
            self.domain = domain
        }

    }

    public struct SignalExternalWorkflowExecutionFailedEventAttributes: Serializable, Initializable {
        /// The runId of the external workflow execution that the signal was being delivered to.
        var runId: String? = nil
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var initiatedEventId: Int64 = 0
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The workflowId of the external workflow execution that the signal was being delivered to.
        var workflowId: String = ""
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""
        var control: String? = nil

        public init() {}

        public init(runId: String? = nil, initiatedEventId: Int64, decisionTaskCompletedEventId: Int64, workflowId: String, cause: String, control: String? = nil) {
            self.runId = runId
            self.initiatedEventId = initiatedEventId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowId = workflowId
            self.cause = cause
            self.control = control
        }

    }

    public struct ActivityTaskFailedEventAttributes: Serializable, Initializable {
        /// The details of the failure (if any).
        var details: String? = nil
        /// The reason provided for the failure (if any).
        var reason: String? = nil
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var startedEventId: Int64 = 0
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var scheduledEventId: Int64 = 0

        public init() {}

        public init(details: String? = nil, reason: String? = nil, startedEventId: Int64, scheduledEventId: Int64) {
            self.details = details
            self.reason = reason
            self.startedEventId = startedEventId
            self.scheduledEventId = scheduledEventId
        }

    }

    public struct StartTimerFailedEventAttributes: Serializable, Initializable {
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        var decisionTaskCompletedEventId: Int64 = 0
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes. If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows.
        var cause: String = ""
        /// The timerId provided in the StartTimer decision that failed.
        var timerId: String = ""

        public init() {}

        public init(decisionTaskCompletedEventId: Int64, cause: String, timerId: String) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
            self.timerId = timerId
        }

    }

    public struct DecisionTaskScheduledEventAttributes: Serializable, Initializable {
        /// The maximum duration for this decision task. The task is considered timed out if it does not completed within this duration. The duration is specified in seconds; an integer greater than or equal to 0. The value "NONE" can be used to specify unlimited duration.
        var startToCloseTimeout: String? = nil
        /// Optional. A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon Simple Workflow Developer Guide.
        var taskPriority: String? = nil
        /// The name of the task list in which the decision task was scheduled.
        var taskList: TaskList = TaskList()

        public init() {}

        public init(startToCloseTimeout: String? = nil, taskPriority: String? = nil, taskList: TaskList) {
            self.startToCloseTimeout = startToCloseTimeout
            self.taskPriority = taskPriority
            self.taskList = taskList
        }

    }

    public struct DeprecateActivityTypeInput: Serializable, Initializable {
        /// The activity type to deprecate.
        var activityType: ActivityType = ActivityType()
        /// The name of the domain in which the activity type is registered.
        var domain: String = ""

        public init() {}

        public init(activityType: ActivityType, domain: String) {
            self.activityType = activityType
            self.domain = domain
        }

    }

}